<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Image Quilting for Texture Synthesis and Transfer</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Alexei</forename><forename type="middle">A</forename><surname>Efros</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="laboratory">Mitsubishi Electric Research Laboratories</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">William</forename><forename type="middle">T</forename><surname>Freeman</surname></persName>
							<affiliation key="aff1">
								<orgName type="laboratory">Mitsubishi Electric Research Laboratories</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Image Quilting for Texture Synthesis and Transfer</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">39543FD841BB58E79B9743CAA95B5D24</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:03+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Texture Synthesis</term>
					<term>Texture Mapping</term>
					<term>Image-based Rendering</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We present a simple image-based method of generating novel visual appearance in which a new image is synthesized by stitching together small patches of existing images. We call this process image quilting. First, we use quilting as a fast and very simple texture synthesis algorithm which produces surprisingly good results for a wide range of textures. Second, we extend the algorithm to perform texture transfer -rendering an object with a texture taken from a different object. More generally, we demonstrate how an image can be re-rendered in the style of a different image. The method works directly on the images and does not require 3D information.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>In the past decade computer graphics experienced a wave of activity in the area of image-based rendering as researchers explored the idea of capturing samples of the real world as images and using them to synthesize novel views rather than recreating the entire physical world from scratch. This, in turn, fueled interest in imagebased texture synthesis algorithms. Such an algorithm should be able to take a sample of texture and generate an unlimited amount of image data which, while not exactly like the original, will be perceived by humans to be the same texture. Furthermore, it would be useful to be able to transfer texture from one object to anther (e.g. the ability to cut and paste material properties on arbitrary objects).</p><p>In this paper we present an extremely simple algorithm to address the texture synthesis problem. The main idea is to synthesize new texture by taking patches of existing texture and stitching them together in a consistent way. We then present a simple generalization of the method that can be used for texture transfer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Previous Work</head><p>Texture analysis and synthesis has had a long history in psychology, statistics and computer vision. In 1950 Gibson pointed out the importance of texture for visual perception <ref type="bibr" target="#b7">[8]</ref>, but it was the pioneering work of Bela Julesz on texture discrimination <ref type="bibr" target="#b11">[12]</ref> that paved the way for the development of the field. Julesz suggested 1 Computer Science Division, UC Berkeley, Berkeley, CA 94720, USA. 2 MERL, 201 Broadway, Cambridge, MA 02139, USA. input images quilting results Figure <ref type="figure">1</ref>: Demonstration of quilting for texture synthesis and texture transfer. Using the rice texture image (upper left), we can synthesize more such texture (upper right). We can also transfer the rice texture onto another image (lower left) for a strikingly different result. that two texture images will be perceived by human observers to be the same if some appropriate statistics of these images match. This suggests that the two main tasks in statistical texture synthesis are (1) picking the right set of statistics to match, (2) finding an algorithm that matches them.</p><p>Motivated by psychophysical and computational models of human texture discrimination <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b13">14]</ref>, Heeger and Bergen <ref type="bibr" target="#b9">[10]</ref> proposed to analyze texture in terms of histograms of filter responses at multiple scales and orientations. Matching these histograms iteratively was sufficient to produce impressive synthesis results for stochastic textures (see <ref type="bibr" target="#b21">[22]</ref> for a theoretical justification). However, since the histograms measure marginal, not joint, statistics they do not capture important relationships across scales and orientations, thus the algorithm fails for more structured textures. By also matching these pairwise statistics, Portilla and Simoncelli <ref type="bibr" target="#b16">[17]</ref> were able to substantially improve synthesis results for structured textures at the cost of a more complicated optimization procedure.</p><p>In the above approaches, texture is synthesized by taking a random noise image and coercing it to have the same relevant statistics as in the input image. An opposite approach is to start with an input image and randomize it in such a way that only the statistics to be matched are preserved. De Bonet <ref type="bibr" target="#b2">[3]</ref> scrambles the input in a coarse-to-fine fashion, preserving the conditional distribution of filter outputs over multiple scales (jets). Xu el.al. <ref type="bibr" target="#b20">[21]</ref>, inspired by the Clone Tool in PHOTOSHOP, propose a much simpler approach yielding similar or better results. The idea is to take random square blocks from the input texture and place them randomly onto the synthesized texture (with alpha blending to avoid edge artifacts).  <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b17">18]</ref>), (b) the blocks overlap and each new block is chosen so as to "agree" with its neighbors in the region of overlap, (c) to reduce blockiness the boundary between blocks is computed as a minimum cost path through the error surface at the overlap.</p><p>The statistics being preserved here are simply the arrangement of pixels within each block. While this technique will fail for highly structured patterns (e.g. a chess board) due to boundary inconsistencies, for many stochastic textures it works remarkably well. A related method was successfully used by Praun et.al. <ref type="bibr" target="#b17">[18]</ref> for semiautomatic texturing of non-developable objects.</p><p>Enforcing statistics globally is a difficult task and none of the above algorithms provide a completely satisfactory solution. A easier problem is to enforce statistics locally, one pixel at a time. Efros and Leung <ref type="bibr" target="#b5">[6]</ref> developed a simple method of "growing" texture using non-parametric sampling. The conditional distribution of each pixel given all its neighbors synthesized so far is estimated by searching the sample image and finding all similar neighborhoods. (We have recently learned that a nearly identical algorithm was proposed in 1981 by Garber <ref type="bibr" target="#b6">[7]</ref> but discarded due to its then computational intractability.) The algorithm produces good results for a wide range of textures, but is excruciatingly slow (a full search of the input image is required to synthesize every pixel!). Several researchers have proposed optimizations to the basic method including Wei and Levoy <ref type="bibr" target="#b19">[20]</ref> (based on earlier work by Popat and Picard <ref type="bibr" target="#b15">[16]</ref>), Harrison <ref type="bibr" target="#b8">[9]</ref>, and Ashikhmin <ref type="bibr" target="#b0">[1]</ref>. However, all these improvements still operate within the greedy single-pixel-at-a-time paradigm and as such are susceptible to falling into the wrong part of the search space and starting to "grow garbage" <ref type="bibr" target="#b5">[6]</ref>.</p><p>Methods have been developed in particular rendering domains which capture the spirit of our goals in texture transfer. Our goal is like that of work in non-photorealistic rendering (e.g. <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b14">15]</ref>).</p><p>A key distinction is that we seek to characterize the output rendering style by sampling from the real world. This allows for a richness of rendering styles, characterized by samples from photographs or drawings.</p><p>A number of papers to be published this year, all developed independently, are closely related to our work. The idea of texture transfer based on variations of <ref type="bibr" target="#b5">[6]</ref> has been proposed by several authors <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b10">11]</ref> (in particular, see the elegant paper by Hertzmann et.al. <ref type="bibr" target="#b10">[11]</ref> in these proceedings). Liang et.al. <ref type="bibr" target="#b12">[13]</ref> propose a realtime patch-based texture synthesis method very similar to ours. The reader is urged to review these works for a more complete picture of the field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Motivation</head><p>One curious fact about one-pixel-at-a-time synthesis algorithms such as Efros and Leung <ref type="bibr" target="#b5">[6]</ref> is that for most complex textures very few pixels actually have a choice of values that can be assigned to them. That is, during the synthesis process most pixels have their values totally determined by what has been synthesized so far. As a simple example, let us take a pattern of circles on a plane. Once the algorithm has started synthesizing a particular circle, all the remaining pixels of that circle (plus some surrounding ones) are completely determined! In this extreme case, the circle would be called the texture element (texel), but this same effect persists to a lesser extent even when the texture is more stochastic and there are no obvious texels. This means that a lot of searching work is waisted on pixels that already "know their fate". It seems then, that the unit of synthesis should be something more than a single pixel, a "patch" perhaps. Then the process of texture synthesis would be akin to putting together a jigsaw puzzle, quilting together the patches, making sure they all fit together. Determining precisely what are the patches for a given texture and how they are put together is still an open problem. Here we will present an very naive version of stitching together patches of texture to form the output image. We call this method "image quilting".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Quilting</head><p>In this section we will develop our patch-based texture synthesis procedure. Let us define the unit of synthesis Bi to be a square block of user-specified size from the set SB of all such overlapping blocks in the input texture image. To synthesize a new texture image, as a first step let us simply tile it with blocks taken randomly from SB. The result shown on Figure <ref type="figure" target="#fig_0">2</ref>(a) already looks somewhat reasonable and for some textures will perform no worse than many previous complicated algorithms as demonstrated by <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b17">18]</ref>. Still, the result is not satisfying, for no matter how much smoothing is done across the edges, for most structured textures it will be quite obvious that the blocks do not match.</p><p>As the next step, let us introduce some overlap in the placement of blocks onto the new image. Now, instead of picking a random block, we will search SB for such a block that by some measure agrees with its neighbors along the region of overlap. Figure <ref type="figure" target="#fig_0">2(b)</ref> shows a clear improvement in the structure of the resulting texture, however the edges between the blocks are still quite noticeable. Once again, smoothing across the edges will lessen this problem but we will attempt to solve it in a more principled way.</p><p>Finally, we will let the blocks have ragged edges which will allow them to better approximate the features in the texture. Now, before placing a chosen block into the texture we will look at the error in the overlap region between it and the other blocks. We find a minimum cost path through that error surface and declare that to be the boundary of the new block. Figure <ref type="figure" target="#fig_0">2(c)</ref> shows the results of this simple modification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Minimum Error Boundary Cut</head><p>We want to make the cut between two overlapping blocks on the pixels where the two textures match best (that is, where the overlap error is low). This can easily be done with dynamic programming (Dijkstra's algorithm can also be used <ref type="bibr" target="#b4">[5]</ref>).</p><p>The minimal cost path through the error surface is computed in the following manner. If B1 and B2 are two blocks that overlap along their vertical edge (Figure <ref type="figure" target="#fig_0">2c</ref>) with the regions of overlap B ov 1 and B ov 2 , respectively, then the error surface is defined as e = (B ov 1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B ov</head><p>2 ) 2 . To find the minimal vertical cut through this surface we traverse e (i = 2. . N) and compute the cumulative minimum error E for all paths:</p><p>Ei,j = ei,j + min(Ei 1,j 1, Ei 1,j, Ei 1,j+1).</p><p>(</p><formula xml:id="formula_0">)<label>1</label></formula><p>In the end, the minimum value of the last row in E will indicate the end of the minimal vertical path though the surface and one can trace back and find the path of the best cut. Similar procedure can be applied to horizontal overlaps. When there is both a vertical and a horizontal overlap, the minimal paths meet in the middle and the overall minimum is chosen for the cut.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">The Image Quilting Algorithm</head><p>The complete quilting algorithm is as follows:</p><p>¯Go through the image to be synthesized in raster scan order in steps of one block (minus the overlap).</p><p>¯For every location, search the input texture for a set of blocks that satisfy the overlap constraints (above and left) within some error tolerance. Randomly pick one such block.</p><p>¯Compute the error surface between the newly chosen block and the old blocks at the overlap region. Find the minimum cost path along this surface and make that the boundary of the new block. Paste the block onto the texture. Repeat.</p><p>The size of the block is the only parameter controlled by the user and it depends on the properties of a given texture; the block must be big enough to capture the relevant structures in the texture, but small enough so that the interaction between these structures is left up to the algorithm.</p><p>In all of our experiments the width of the overlap edge (on one side) was 1/6 of the size of the block. The error was computed using the L2 norm on pixel values. The error tolerance was set to be within 0.1 times the error of the best matching block.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Synthesis Results</head><p>The results of the synthesis process for a wide range of input textures are shown on Figures <ref type="figure" target="#fig_1">3</ref> and<ref type="figure">4</ref>. While the algorithm is particularly effective for semi-structured textures (which were always the hardest for statistical texture synthesis), the performance is quite good on stochastic textures as well. The two most typical problems are excessive repetition (e.g. the berries image), and mismatched or distorted boundaries (e.g. the mutant olives image). Both are mostly due to the input texture not containing enough variability.</p><p>Figure <ref type="figure">6</ref> shows a comparison of quilting with other texture synthesis algorithms. The algorithm is not only trivial to implement but is also quite fast: the unoptimized MATLAB code used to generate these results ran for between 15 seconds and several minutes per image depending on the sizes of the input and output and the block size used. Because the constraint region is always the same it's very easy to optimize the search process without compromising the quality of the results (see also Liang et.al. <ref type="bibr" target="#b12">[13]</ref> who report real-time performance using a very similar approach).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Texture Transfer</head><p>Because the image quilting algorithm selects output patches based on local image information, it is particularly well suited for texture transfer. We augment the synthesis algorithm by requiring that each patch satisfy a desired correspondence map, C, as well as satisfy the texture synthesis requirements. The correspondence map is a spatial map of some corresponding quantity over both the texture source image and a controlling target image. That quantity could include image intensity, blurred image intensity, local image orientation angles, or other derived quantities.</p><p>An example of texture transfer is shown in Figure <ref type="figure">1</ref>. Here, the correspondence map are the (luminance) image intensities of the man's face. That is, bright patches of face and bright patches of rice are defined to have a low correspondence error. The synthesized rice texture conforms to this second constraint, yielding a rendered image where the face image appears to be rendered in rice.</p><p>For texture transfer, image being synthesized must respect two independent constraints: (a) the output are legitimate, synthesized examples of the source texture, and (b) that the correspondence image mapping is respected. We modify the error term of the image quilting algorithm to be the weighted sum, « times the block overlap matching error plus (1 «) times the squared error between the correspondence map pixels within the source texture block and those at the current target image position. The parameter « determines the tradeoff between the texture synthesis and the fidelity to the target image correspondence map.</p><p>Because of the added constraint, sometimes one synthesis pass through the image is not enough to produce a visually pleasing result. In such cases, we iterate over the synthesized image several times, reducing the block size with each iteration. The only change from the non-iterative version is that in satisfying the local texture constraint the blocks are matched not just with their neighbor blocks on the overlap regions, but also with whatever was synthesized at this block in the previous iteration. This iterative scheme works surprisingly well: it starts out using large blocks to roughly assign where everything will go and then uses smaller blocks to make sure the different textures fit well together. In our tests, we used N = 3 to N = 5 iterations, reducing the block size by a third each time, and setting « at the ith iteration to be «i = 0. 8£ i 1 N 1 +0. 1. Our texture transfer method can be applied to render a photograph using the line drawing texture of a particular source drawing; or to transfer material surface texture onto a new image (see Figure <ref type="figure">5</ref>). For the orange texture the correspondence maps are the source and target image luminance values; for Picasso the correspondence maps are the blurred luminance values. input texture Portilla &amp; Simoncelli <ref type="bibr" target="#b16">[17]</ref> Xu et.al. <ref type="bibr" target="#b20">[21]</ref> Wei &amp; Levoy <ref type="bibr" target="#b19">[20]</ref> Image Quilting Figure <ref type="figure">6</ref>: Comparison of various texture synthesis methods on structured textures. Our results are virtually the same as Efros &amp; Leung <ref type="bibr" target="#b5">[6]</ref> (not shown) but at a much smaller computational cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>In this paper we have introduced image quilting, a method of synthesizing a new image by stitching together small patches of existing images. Despite its simplicity, this method works remarkably well when applied to texture synthesis, producing results that are equal or better than the Efros &amp; Leung family of algorithms but with improved stability (less chance of "growing garbage") and at a fraction of the computational cost. We have also extended our method to texture transfer in a general setting with some very promising results.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Quilting texture. Square blocks from the input texture are patched together to synthesize a new texture sample: (a) blocks are chosen randomly (similar to<ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b17">18]</ref>), (b) the blocks overlap and each new block is chosen so as to "agree" with its neighbors in the region of overlap, (c) to reduce blockiness the boundary between blocks is computed as a minimum cost path through the error surface at the overlap.</figDesc><graphic coords="2,151.68,129.01,111.85,111.85" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Image quilting synthesis results for a wide range of textures. The resulting texture (right side of each pair) is synthesized at twice the size of the original (left).</figDesc><graphic coords="3,294.72,261.29,93.97,93.97" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :Figure 5 :</head><label>45</label><figDesc>Figure 4: More image quilting synthesis results (for each pair, left is original, right is synthesized)</figDesc><graphic coords="4,228.00,635.18,50.80,50.80" type="bitmap" /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgements: We would like to thank Alex Berg, Rahul Bhotika and Jitendra Malik for their help and encouragement. This research was conducted while AE was a summer Research Intern at MERL. The photograph of Richard Feynman is courtesy of The Archives, California Institute of Technology. The Picasso drawing is Copyright 2001 Estate of Pablo Picasso / Artists Rights Society (ARS), New York.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Synthesizing natural textures</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ashikhmin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Interactive 3D Graphics</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Early vision and texture perception</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bergen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Adelson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">333</biblScope>
			<biblScope unit="page" from="363" to="364" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Multiresolution sampling procedure for analysis and synthesis of texture images</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>De</surname></persName>
		</author>
		<author>
			<persName><surname>Bonet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97</title>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="361" to="368" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Computer-generated watercolor</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Curtis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">E</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Seims</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kurt</forename><forename type="middle">W</forename><surname>Fleisher</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">H</forename><surname>Salsin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97</title>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="421" to="430" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Mosaics of scenes with moving objects</title>
		<author>
			<persName><forename type="first">J</forename><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Conf. on Comp. Vision and Patt. Recog</title>
		<meeting>IEEE Conf. on Comp. Vision and Patt. Recog</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Texture synthesis by non-parametric sampling</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Efros</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">K</forename><surname>Leung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Computer Vision</title>
		<meeting><address><addrLine>Corfu, Greece</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-09">September 1999</date>
			<biblScope unit="page" from="1033" to="1038" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Computational Models for Texture Analysis and Texture Synthesis</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Garber</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981">1981</date>
		</imprint>
		<respStmt>
			<orgName>University of Southern California, Image Processing Institute</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The Perception of the Visual World</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">J</forename><surname>Gibson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Houghton Mifflin</title>
		<imprint>
			<date type="published" when="1950">1950</date>
			<pubPlace>Boston, Massachusetts</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A non-hierarchical procedure for re-synthesis of complex textures</title>
		<author>
			<persName><forename type="first">P</forename><surname>Harrison</surname></persName>
		</author>
		<ptr target="http://www.csse.monash.edu.au/˜pfh/resynthesizer/" />
	</analytic>
	<monogr>
		<title level="m">WSCG &apos;2001 Conference proceedings</title>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="190" to="197" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Pyramid-based texture analysis/synthesis</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">J</forename><surname>Heeger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><forename type="middle">R</forename><surname>Bergen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 95</title>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="229" to="238" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Image analogies</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hertzmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Jacobs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Oliver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Curless</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">H</forename><surname>Salesin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 01</title>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Visual pattern discrimination</title>
		<author>
			<persName><forename type="first">Bela</forename><surname>Julesz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IRE Transactions on Information Theory</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="84" to="92" />
			<date type="published" when="1962">1962</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Real-time texture synthesis by patch-based sampling</title>
		<author>
			<persName><forename type="first">L</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-Y</forename><surname>Shum</surname></persName>
		</author>
		<idno>MSR-TR-2001-40</idno>
		<imprint>
			<date type="published" when="2001-03">March 2001</date>
			<publisher>Microsoft Research</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Preattentive texture discrimination with early vision mechanism</title>
		<author>
			<persName><forename type="first">J</forename><surname>Malik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Perona</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JOSA-A</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="923" to="932" />
			<date type="published" when="1990-05">May 1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Multi-color and artistic dithering</title>
		<author>
			<persName><forename type="first">V</forename><surname>Ostromoukhov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">D</forename><surname>Hersch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-GRAPH 99</title>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="425" to="432" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Novel cluster-based probability model for texture synthesis, classification, and compression</title>
		<author>
			<persName><forename type="first">Kris</forename><surname>Popat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rosalind</forename><forename type="middle">W</forename><surname>Picard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPIE Visual Comm. and Image Processing</title>
		<meeting>SPIE Visual Comm. and Image essing</meeting>
		<imprint>
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A parametric texture model based on joint statistics of complex wavelet coefficients</title>
		<author>
			<persName><forename type="first">J</forename><surname>Portilla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">P</forename><surname>Simoncelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Vision</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="49" to="71" />
			<date type="published" when="2000-12">December 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Lapped textures</title>
		<author>
			<persName><forename type="first">Emil</forename><surname>Praun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adam</forename><surname>Finkelstein</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hugues</forename><surname>Hoppe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-GRAPH 00</title>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="465" to="470" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Orientable textures for image-based pen-and-ink illustration</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">P</forename><surname>Salisbury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">T</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Hughes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">H</forename><surname>Salesin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 97</title>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Fast texture synthesis using tree-structured vector quantization</title>
		<author>
			<persName><forename type="first">Li-Yi</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Marc</forename><surname>Levoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH 00</title>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="479" to="488" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Chaos mosaic: Fast and memory efficient texture synthesis</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-Y</forename><surname>Shum</surname></persName>
		</author>
		<idno>MSR-TR-2000-32</idno>
		<imprint>
			<date type="published" when="2000-04">April 2000</date>
			<publisher>Microsoft Research</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Filters, random fields and maximum entropy (frame)</title>
		<author>
			<persName><forename type="first">Song</forename><surname>Chun Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yingnian</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Mumford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Vision</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1" to="20" />
			<date type="published" when="1998-04">March/April 1998</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
