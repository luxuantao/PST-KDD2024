<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Pushing the SOAP Envelope With Web Services for Scientific Computing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Robert</forename><forename type="middle">A</forename><surname>Van Engelen</surname></persName>
							<email>engelen@cs.fsu.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">School of Computational Science and Information Technology</orgName>
								<orgName type="institution">Florida State University</orgName>
								<address>
									<postCode>32306-4530</postCode>
									<settlement>Tallahassee</settlement>
									<region>FL</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Pushing the SOAP Envelope With Web Services for Scientific Computing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">DBE72B115222DA89CCF72D69F4075824</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T07:47+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper investigates the usability, interoperability, and performance issues of SOAP/XML-based Web and Grid Services for scientific computing. Several key issues are addressed that are important for the deployment of highperformance and mission-critical SOAP/XML-based services. A successful deployment can be achieved by limiting the overhead of XML encoding through exploiting XML schema extensibility to define optimized XML data representations and by reducing message passing latencies through message chunking, compression, routing, and streaming.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The Web Services framework <ref type="bibr" target="#b13">[14]</ref> is gaining momentum as an approach to distributed computing by supporting the creation, deployment, and dynamic discovery of distributed applications. The popularity of Web Services can be contributed to the inevitable transition from people to software applications to access public, commercial, and government services on the Internet. This Web Services evolution is made possible in part by the adaptation of universally accepted standard protocols such as HTTP (Hyper Text Transfer Protocol) <ref type="bibr" target="#b12">[13]</ref>, XML (Extensible Markup Language) <ref type="bibr" target="#b21">[23]</ref>, SOAP (Simple Object Access Protocol) <ref type="bibr">[21]</ref>, WSDL (Web Services Description Language) <ref type="bibr" target="#b20">[22]</ref>, WSFL (Web Services Flow Language) <ref type="bibr" target="#b9">[10]</ref> and UDDI (Universal Description, Discovery and Integration) <ref type="bibr" target="#b16">[17]</ref>.</p><p>The state-of-the-art Grid computing tools utilize the power of resource sharing with distributed applications on the Internet <ref type="bibr" target="#b5">[6]</ref>. Grid applications enable researchers to solve large-scale problems in science and engineering. The Grid community recently embraced Web Services as a key technology supporting the shift to service-oriented Grid applications. A Grid Service is envisioned as "a (potentially transient) stateful service instance supporting reliable and secure invocation (when required), lifetime management, notification, policy management, credential management, and virtualization" <ref type="bibr" target="#b6">[7]</ref>. The Open Grid Services Architecture (OGSA) <ref type="bibr" target="#b7">[8]</ref> leverages Web Services protocols and additional interfaces to manage Grid service lifetime, policies and credentials, and to provide support for notification as mandated by the OGSA specification.</p><p>This paper addresses the usability, interoperability, and performance aspects of Web and Grid Services for scientific computing. Usability is largely motivated by the fact that the Web Services framework provides universal access to numerous public and commercial services on the Internet. This creates new opportunities for Grid applications. Another important aspect of the framework is the high level of interoperability and service compositionality across platforms and programming languages. In addition to these usability and interoperability aspects, the framework also offers a practical infrastructure for Internet computing that includes protocols for enhanced routing capabilities such as multi-hop routing with intermediaries and the streaming of Direct Internet Message Encapsulation (DIME) attachments. Also available are Web Service security extensions such as HTTPS, WS-Security <ref type="bibr" target="#b11">[12]</ref>, SOAP digital signature <ref type="bibr" target="#b1">[2]</ref>, and GSI <ref type="bibr" target="#b2">[3]</ref>. These enhancements are important to propel Web Services in performance-demanding environments, such as computational Grids.</p><p>It is widely perceived that Web and Grid Services can suffer severe performance penalties by adopting the XMLbased SOAP protocol for transporting large volumes of data. Several papers have reported on the performance of scientific computing with Web Services, such as a performance investigation of SOAP for scientific applications that utilize large floating point arrays <ref type="bibr" target="#b3">[4]</ref>, a comparison of the latency of SOAP Web Services implementations <ref type="bibr" target="#b4">[5]</ref>, an evaluation of Web Services based implementations for GridRPC <ref type="bibr" target="#b15">[16]</ref>, and the design and implementation of the gSOAP toolkit for efficient SOAP/XML Web Services <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b19">20]</ref>. However, these studies did not address the key issues that can affect performance the most. The key issues that may prevent a successful deployment are the overhead of XML encodings with SOAP/XML and the message passing latencies of HTTP over TCP/IP. These issues are addressed in this paper by exploiting XML schema extensibility for defining optimized XML representations for numerical data and by message passing optimizations such as chunking, compression, routing, and streaming media techniques.</p><p>This paper attempts to answer the following questions to help identify several key issues for deploying highperformance and mission-critical SOAP/XML-based services:</p><p>• How does SOAP/XML as a generic data representation compare to more specific XML representations for scientific data such as MathML and XSIL, for example?</p><p>• What is the performance impact of SOAP/XML Web Services compared to Java RMI?</p><p>• Can performance be improved using HTTP chunking and/or compression of SOAP/XML messages?</p><p>• What is the speedup of streaming SOAP/XML with DIME?</p><p>• Which alternative XML representations for numerical data are available and what is the impact on communication latency and performance?</p><p>We are currently developing a new software package called gNTL (gSOAP Numerical Task Library) for efficient scientific computing with Web Services in C, C++, and Fortran (using a Fortran-to-C bridge). The design recommendations of the gNTL package are largely based on the results of the study presented in this paper. The package includes a set of XML schemas that provide alternative views of numerical data in XML, including sparse vectors, matrices, and arrays. The XML schemas provide SOAP/XML interoperability with other SOAP implementations such as Apache Axis (for Java), for example. The remainder of this paper is organized as follows. Section 2 introduces Web and Grid Services toolkits. Section 3 discusses SOAP/XML for scientific computing. Section 4 compares performance results of HTTP chunking, compression, DIME streaming, and XML representations of numerical data. Section 5 discusses the observations and results. Finally, Section 6 concludes with a summary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Web and Grid Services Toolkits</head><p>Currently more than seventy SOAP Web Services toolkits are available for a variety of programming languages and platforms, see e.g. <ref type="bibr" target="#b14">[15]</ref>. Because production-quality scientific applications are written in Fortran 1 , C, or C++, we will only mention the C/C++ SOAP toolkits. These SOAP Web Services toolkits and libraries for C++ are Borland builder 6 with Delphi, easySOAP, eSOAP, gSOAP, the .NET framework, WASP for C++, and SQLData.</p><p>The gSOAP toolkit is a platform-independent development environment for C and C++ Web Services <ref type="bibr" target="#b17">[18]</ref>. Ease of use and performance were important design considerations in the development of the toolkit. In fact, the toolkit offers an easy-to-use RPC compiler that produces the stub and skeleton routines to integrate (existing) C and C++ applications into SOAP/XML Web Services. A unique aspect of the toolkit is that it automatically maps native C/C++ application data types to semantically equivalent XML types and vice versa. This enables direct SOAP/XML messaging with C/C++ applications on the Web. The overhead and memory usage of the run-time mapping to XML with gSOAP's schema-optimized XML parsing techniques is low, which makes gSOAP attractive in high-performance environments and embedded systems.</p><p>The Globus Toolkit v3 <ref type="bibr" target="#b7">[8]</ref> includes the gSOAP toolkit. gSOAP is used to implement C/C++ bindings for the OGSA-compliant Grid Services. The gSOAP toolkit is also used in the GridLab project <ref type="bibr" target="#b8">[9]</ref> with the Globus Toolkit v2 and the GSI plug-in for gSOAP <ref type="bibr" target="#b2">[3]</ref> and in the Harness <ref type="bibr" target="#b0">[1]</ref> project for distributed computing. Many companies have shown an interest in gSOAP. For example, the gSOAP toolkit is integrated in the IBM alphaWorks Web Services Tool Kit for Mobile Devices <ref type="bibr" target="#b10">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Scientific Computing With SOAP/XML</head><p>SOAP is a protocol for remote procedure calling and messaging with XML-encoded application data. However, SOAP does not require the use of XML per se. In fact, SOAP supports binary data attachments and remotely referenced data such as objects provided by third parties that are produced or consumed at separate hosts, for example. These features can be exploited to create data portals on the Web. SOAP also specifies various usage scenarios, such as oneway message passing, single and multiple request-response invocations, and routing.</p><p>Consider for example the data transfer illustrated in Figure <ref type="figure">1</ref>. Data is efficiently transfered from a client to a server with gSOAP's streaming SOAP/XML and DIME. This form of routing streams the (binary) data encapsulated in DIME from a data source at the client side into a data repository at the server side. This data can be retrieved and stored on disk or processed dynamically by tasks running on separate machines, for example. Note that SOAP/XML with stream- SOAP and WSDL are a protocols that exploit the richness of the XML schema specification standard for defining XML content. XML schemas define the structure of XML documents by defining document layout and content constraints. The schema notation is amenable to meta-level data translation and interpretation. In fact, SOAP toolkits already translate WSDL service descriptions into service objects and client proxies by inspecting the WSDL schema types parts to determine the parameter marshaling requirements. The SOAP RPC and (to a limited extend) the SOAP literal encoding styles provide a rich set of data types that can be utilized for XML encoding, including primitive types (XSD types), enumerations, bitmasks, arrays, lists, and records (structs). Arbitrary data types with application-specific semantics can be added by XML schema extension and restriction. Schema extension and restriction introduces an object-oriented approach to data modeling with XML.</p><p>In contrast, many XML protocols for scientific data are based on DTDs rather than XML schemas and lack XML namespace and extensibility properties. The expressiveness of these protocols is restricted to a set of pre-defined data types offered by the protocol. For example, XSIL (Extensible Scientific Interchange Language) <ref type="bibr" target="#b23">[25]</ref> and XDMF (Extensible Data Model and Format) <ref type="bibr" target="#b22">[24]</ref> both provide encodings for primitive and aggregate types in XML. XSIL concentrates on data structures with a Java-dependent XML format. The XSIL, XDMF, MathML, and BioML XML representations can be seamlessly blended into SOAP/XML. However, the application-specific XSIL and XDMF representations have a limited set of data types and offer no means to exploit schema extension to define optimized and application-specific XML layouts.</p><p>The XML schema standard provides a basis for pro-gramming language bindings for XML as demonstrated by gSOAP and the .NET framework, for example. gSOAP generates XML schemas at compile time and automatically performs data mappings at run time. The toolkit guarantees the preservation of the logical structure of graph-based data which is difficult to achieve with hand-written conversion routines (often referred to as wrappers). Scientific applications typically deal with large symbolic or numerical data sets. Symbolic data can be text-based or graphbased, such as symbolic expressions. Graph-based data can be represented in XML using SOAP RPC encoding of nodes as "structs" and co-referenced nodes as "multi-referenced objects" <ref type="bibr" target="#b18">[19]</ref>. The use of XML graph nodes to representing symbolic expressions in XML can be based on existing XML standards, such as MathML and CML (Chemical Markup Language).</p><p>Flat data structures such as numerical vectors and matrices can be represented in many different forms of XML, including sparse SOAP arrays, UTF8-encoded strings, and hexadecimal and base64 binary encodings. Flat data structures don't necessarily require a generic SOAP array representation with values represented in decimal notation. The loss of floating point precision and the encoding overhead of floating point numbers in decimal often prohibits the exchange of numerical data in plain text form.</p><p>Table <ref type="table" target="#tab_1">1</ref> list the storage requirements of 32-bit, 64-bit, and 128-bit floating point values in XML. Hexadecimal notation requires a pair of octets to encode each octet of the internal binary floating point representation, UTF8 encoding treats the internal representation of floats as sequences of unicode characters represented in UTF8, and base64 requires 4 octets to encode each sequence of 3 octets. UTF8 encoding represents float point values as strings in XML, which means that the string contents have to be stored in XML CDATA sections to prevent interference with XML markup. In addition, most floating point values will be encoded with the full 24 UTF8 characters. As a result, much of the space gains of UTF8 encoding will be lost. Base64 is more attractive because of the low overhead of the encoding scheme.</p><p>To save space and preserve precision, a numerical vec-FP Prec. Decim. Hex UTF8 Base64 32 bit 1-14  tor can be encoded with a SOAP array of base64-encoded IEEE 754 floating point values. However, space requirements can be further reduced by encoding the entire vector in base64. An appropriate XML schema can be defined for these base64-encoded arrays using the generic base64 binary XSD type as the base type. The gSOAP specification of the int and float arrays derived from the base64 XSD type is shown in Figure <ref type="figure" target="#fig_0">2</ref>.</p><p>The specification exploits inheritance to produce the necessary schema extensions for the int and float array types. Getter and setter methods are added to access the binary representation and to (de-)normalize the data to big endian integers or IEEE 754 floats, for example, to ensure interoperability of the XML representations with applications running on different platforms. The run-time encoded base64 XML content carries the schema type with the data, so the recipient can determine the numerical array encoding used and apply de-normalization when necessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Latency and Performance</head><p>The choice of XML encoding for the data of a SOAP/XML Web Service application can have a significant impact on the communication latency and overall performance of the service. The XML representation of floating point arrays, for example, can be as large as ten times the original binary representation. However, the total message length is not always the determining factor of performance but the time to convert data in XML (such as floats to decimal notation and back) is, because it introduces a significant overhead <ref type="bibr" target="#b3">[4]</ref>. This overhead is also apparent in the linear systems solver service that utilizes SOAP arrays of floats <ref type="bibr" target="#b17">[18]</ref>.</p><p>To determine the impact of XML encoding and HTTP transport on the performance of a service, we used the wellknown magic squares algorithm to build a "MagicSquares" Web Service with gSOAP that produces 32-bit integer matrices. Part of the gSOAP specification of the MagicSquares service is shown in Figure <ref type="figure">3</ref>. This algorithm is fast and lin-ear in the size of the matrix. Because the algorithm is fast, it enables us to investigate the XML encoding/decoding and communication latencies rather than the compute latency of the service.</p><p>The service specification includes the definition of XML base64-encoded matrices in gSOAP. The definitions for SOAP-array matrices and binary DIME attachments that were used in the performance tests are similar (not shown). The gSOAP service method implementation uses the magic squares algorithm shown in Figure <ref type="figure">4</ref> We measured the impact of HTTP chunking, compression, base64 encoding, and DIME on the performance of the service. HTTP chunking provides a form of streaming. Chunking can be used to omit the extra pre-serialization phase that gSOAP uses to determine HTTP content length. We also measured the overhead of real-time HTTP compression to transfer SOAP arrays with gSOAP. The results are shown in Figure <ref type="figure">5</ref>. The response times of the Mag-icSquares service with HTTP chunking and base64 encoding is very low compared to non-chunked and chun-ked+compressed SOAP array transfers for varying matrix ranks (rank=100 corresponds to an array of 100 arrays of 100 integers). The experiments were conducted with two 550 MHz dual P3 machines with Red Hat Linux and a 100BaseT LAN.</p><p>Real-time compression appears to be very expensive but also very effective because it reduces the message length to a size that is comparable to the size of the compressed form of the binary data (which is about 20KB for a 100 by 100 matrix with 32-bit integers). The gzip compression rate struct matrix // matrix is a base64 type { unsigned char *__ptr; // pointer to memory block int __size; // size of block }; int ns__magic(int n, struct matrix *q);</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 3. gSOAP MagicSquares Web Service Specification With Base64-Encoded Matrices</head><p>int ns__magic(struct soap *soap, int n, struct matrix *q) { int i, j, k, l, v; int *a = (int*)soap_malloc(soap, sizeof(int)*n*n); for (i=0; i&lt;n*n; i++) a[i] = 0; i = 0; j = (n-1)/2; a[n*i+j] = 1; for (v=2; v&lt;=n*n; v++) { if (i&lt;1) k = n-1; else k = i-1; if (j&lt;1) l = n-1; else l = j-1; if (a[n*k+l]) i = (i+1)%n; else { i = k; j = l; } a[n*i+j] = v; } q-&gt;__ptr = (unsigned char*)a; q-&gt;__size = sizeof(int)*n*n; return SOAP_OK; }</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 4. gSOAP MagicSquares Web Service Method</head><p>of XML containing SOAP arrays is very high as is shown in Figure <ref type="figure">6</ref>, where the compression rate = (1 -c )%, denotes the length of the original message, and c denotes the length of the compressed message. Compression is useful when the network bandwidth is limited. However, some experimentation with low-bandwidth networks such as a phone line did not yield any performance gains with compressed HTTP transfers because v.90 modems already apply compression.</p><p>Figure <ref type="figure" target="#fig_2">7</ref> (a) shows the response times of the Magic-Squares server using chunked SOAP messages with base64 encoding and SOAP/XML with DIME over the LAN. The startup overhead indicates the network latency to establish a socket connection with the service. gSOAP supports HTTP keep-alive, which means that the startup time can be avoided using HTTP keep-alive connections after establishing a connection with a service. In addition, gSOAP disables the Nagle algorithm to reduce the connection startup latency (TCP NODELAY). Figure <ref type="figure" target="#fig_2">7</ref> (b) shows the response times of a Java implementation of the MagicSquares server using Java RMI over the LAN (JDK 1.3 with JIT). The startup overhead is the time it takes for the Java RMI lookup operation to establish a connection to the server. The SOAP/XML service response is almost twice as fast with HTTP chunking and DIME compared to the Java RMI implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Discussion</head><p>This section briefly summarizes the results and discusses these findings in the context of scientific computing with Web and Grid services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>File transfers File transfer protocols such as FTP and</head><p>GridFTP are commonly used to exchange large static data sets. However, SOAP/XML with streaming DIME is more flexible than these file transfer protocols. Firstly, the SOAP/XML request and response messages can be utilized to carry meta-data such as application-specific information items. Secondly, multiple files can be streamed at once. Thirdly, streaming DIME supports the exchange of dynamic data (producer and consumer type applications). Fi- Data encodings SOAP and WSDL are protocols that exploit the richness of the XML schema specification standard for defining XML content. The XML schema extension and restriction features introduces an objectoriented approach to data modeling with XML. It enables the definition of derived data types to optimize the exchange of application-specific data formats such as numerical arrays. The gNTL library for gSOAP (gNTL is currently under development) is based on this powerful concept and offers alternative XML views of application-specific data.</p><p>DIME attachments provide the most efficient means to exchange raw binary data. While binary data transfers are often best utilized for platform-independent streaming media types such as images and sound, binary numerical data exchange is platform dependent due to the differences between big-and littleendian architectures and internal floating point representations. The results presented in this paper demonstrated that the base64 encoding is almost as efficient as DIME transfers of data sets (550MHz P3, Linux RH, and 100BaseT LAN). Base64 has the advantage that individual data items (ints and floats) can be encoded within the SOAP/XML message contents such as SOAP arrays, for example.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>HTTP keep-alive</head><p>A client can request a persistent connection with a service using HTTP keep-alive. However, the service may drop the connection after a while (to enforce a fairness policy) thereby forcing the client to reconnect. The start-up time to establish a connection between a gSOAP client and service is relatively low and less than 0.5 ms (550MHz P3, Linux RH, and 100BaseT LAN). HTTP keep-alive is enabled in gSOAP with the command soap set omode(soap, SOAP IO KEEPALIVE).</p><p>HTTP chunking Either a client or a service or both can utilize HTTP chunked transfers. HTTP chunking is a simple form of streaming, because the chunked SOAP/XML messages are not buffered to determine the HTTP content length header. In fact, in contrast to other SOAP implementations, gSOAP does not buffer a message to determine the HTTP content length header, but uses a two-phase serialization scheme consisting of a message length counting phase followed by the transmission of the message <ref type="bibr" target="#b17">[18]</ref>. This scheme is implemented by serializing the message twice. HTTP chunking limits the message transmission to only one phase, which is faster. In addition, gSOAP implements a form of latency hiding with chunked transfers, where communication is overlapped with the serialization computations. HTTP chunking is enabled in gSOAP with the command soap set omode(soap, SOAP IO CHUNK)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>HTTP compression</head><p>Compression should be used sparingly. The overhead of the Zlib compression algorithm outweighs the benefit of the message size reduction to improve bandwidth utilization, for example. Most modems and some network routers already compress TCP/IP packets on the fly, which eliminates the need to compress SOAP/XML messages. However, compression is still useful to store data in compressed XML using gSOAP's data serializers. HTTP gzip compression is enabled in gSOAP with the command soap set omode(soap, SOAP ENC ZLIB)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions</head><p>This paper discussed the use of SOAP/XML Web and Grid Services for scientific computing. SOAP and WSDL are based on extensible schemas which allows the selection of alternative XML layouts for application data depending on on interoperability and performance goals. Performance testing with HTTP chunking, compression, binary DIME attachments, and XML representations such as SOAP Arrays and base64 shows that significant performance gains with SOAP/XML Web Services are possible, surpassing the performance of Java RMI, for example.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Base64 and Derived int32 and fp32 gSOAP Specifications (a) and XML Schema (b)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 5 Figure 6 .</head><label>56</label><figDesc>Figure 5. Response Times of the Magic-Squares Service With Base64 and Chunked/Compressed SOAP Arrays for Varying Matrix Rank</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. Response Times of MagicSquares Servers With Base64 and DIME-Encoded Matrices (a) and Java RMI (b) for Varying Matrix Rank</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 . XML Storage Requirements (in Octets) of One Floating Point Value in Dec- imal Notation Compared to Hexadecimal, UTF8, and Base64 Binary Encodings.</head><label>1</label><figDesc></figDesc><table><row><cell></cell><cell></cell><cell>8</cell><cell>1-6</cell><cell>8</cell></row><row><cell>64 bit</cell><cell>1-24</cell><cell>16</cell><cell>2-12</cell><cell>12</cell></row><row><cell>128 bit</cell><cell>1-40</cell><cell>32</cell><cell>4-24</cell><cell>24</cell></row></table></figure>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* Supported in part by NSF grants CCR-9904943, CCR-0105422, CCR-0208892, and DOE grant DEFG02-02ER25543.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">HARNESS: A next generation distributed virtual machine</title>
		<author>
			<persName><surname>Beck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">SOAP security extensions: Digital signature</title>
		<author>
			<persName><forename type="first">A</forename><surname>Brown</surname></persName>
		</author>
		<ptr target="http://www.w3.org/TR/SOAP-dsig" />
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Secure web services with globus GSI and gSOAP</title>
		<author>
			<persName><forename type="first">M</forename><surname>Cafaro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lezzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Van Engelen</surname></persName>
		</author>
		<ptr target="http://sara.unile.it/˜cafaro/gsi-plugin.html" />
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
	<note>submitted to EUROPAR2003</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Investigating the limits of SOAP performance for scientific computing</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Govindaraju</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Bramley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">proceedings of the 11th IEEE International Symposium on High-Performance Distributed Computing</title>
		<meeting>the 11th IEEE International Symposium on High-Performance Distributed Computing</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Latency performance of SOAP implementations</title>
		<author>
			<persName><forename type="first">D</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Parashar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd IEEE International Symposium on Cluster Computing and the Grid</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kesselman</surname></persName>
		</author>
		<title level="m">The Grid: Blueprint for a New Computing Infrastructure</title>
		<imprint>
			<publisher>San Francisco</publisher>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Grid services for distributed system integration</title>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kesselman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Nick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tuecke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="37" to="46" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The physiology of the Grid: An Open Grid Services Architecture for distributed system integration</title>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kesselman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Nick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tuecke</surname></persName>
		</author>
		<ptr target="http://www.globus.org/research/papers/ogsa.pdf" />
	</analytic>
	<monogr>
		<title level="m">Globus project</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><surname>Gridlab</surname></persName>
		</author>
		<ptr target="http://www.gridlab.org" />
		<title level="m">The gridlab project</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">WSFL specification</title>
		<author>
			<persName><surname>Ibm</surname></persName>
		</author>
		<ptr target="http://www.ibm.com/software/solutions/webservices/pdf/WSFL.pdf" />
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Web services tool kit for mobile devices</title>
		<author>
			<persName><surname>Ibm Alphaworks</surname></persName>
		</author>
		<ptr target="http://www.alphaworks.ibm.com/tech/wstkMD" />
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">WS-Security specification</title>
		<author>
			<persName><forename type="first">Microsoft</forename><surname>Ibm</surname></persName>
		</author>
		<ptr target="http://msdn.microsoft.com/ws-security" />
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
		<respStmt>
			<orgName>IBM and Microsoft</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">HTTP 1.1 specification rfc2616</title>
		<author>
			<persName><surname>Ietf</surname></persName>
		</author>
		<ptr target="www.ietf.org/rfc/rfc2616.txt" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Web services conceptual architecture WSCA 1.0</title>
		<author>
			<persName><forename type="first">H</forename><surname>Kreger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
		<respStmt>
			<orgName>IBM</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">SOAP::Lite for Perl</title>
		<author>
			<persName><forename type="first">P</forename><surname>Kulchenko</surname></persName>
		</author>
		<ptr target="http://www.soaplite.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Evaluating web services based implementations of GridRPC</title>
		<author>
			<persName><forename type="first">S</forename><surname>Shirasuna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Nakada</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sekiguchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Symposium on High Performance Distributed Computing HPDC-11</title>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page">237</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">The universal description, discovery, and integration (UDDI) specification</title>
		<author>
			<persName><surname>Uddi</surname></persName>
		</author>
		<ptr target="http://www.uddi.org/specification.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The gSOAP toolkit for web services and peer-to-peer computing networks</title>
		<author>
			<persName><forename type="first">R</forename><surname>Van Engelen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Gallivan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd IEEE International Symposium on Cluster Computing and the Grid</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">XML-RPC agents for distributed scientific computing</title>
		<author>
			<persName><forename type="first">R</forename><surname>Van Engelen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Gallivan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Cybenko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IMACS&apos;2000 Conference</title>
		<meeting><address><addrLine>Lausanne, Switzerland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Developing web services for C and C++</title>
		<author>
			<persName><forename type="first">R</forename><surname>Van Engelen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<biblScope unit="page" from="53" to="61" />
			<date type="published" when="2003-03">March 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<ptr target="http://www.w3.org/TR/wsdl" />
		<title level="m">W3C. WSDL specification</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<ptr target="http://www.w3.org/XML/Core" />
		<title level="m">W3C. XML specification</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Extensible data model and format</title>
		<author>
			<persName><surname>Xdmf</surname></persName>
		</author>
		<ptr target="http://www.arl.hpc.mil/ice/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Extensible scientific interchange language</title>
		<author>
			<persName><surname>Xsil</surname></persName>
		</author>
		<ptr target="http://www.cacr.caltech.edu/SDA/xsil/" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
