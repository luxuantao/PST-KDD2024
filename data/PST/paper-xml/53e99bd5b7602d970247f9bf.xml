<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Solving shortest path problem using particle swarm optimization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2008-01-19">19 January 2008</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><roleName>Nirod</roleName><forename type="first">Ammar</forename><forename type="middle">W</forename><surname>Mohemmed</surname></persName>
						</author>
						<author role="corresp">
							<persName><forename type="first">Chandra</forename><surname>Sahoo</surname></persName>
							<email>ncsahoo@ee.iitkgp.ernet.in</email>
						</author>
						<author>
							<persName><forename type="first">Tan</forename><forename type="middle">Kim</forename><surname>Geok</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Faculty of Engineering and Technology</orgName>
								<orgName type="institution">Multimedia University</orgName>
								<address>
									<postCode>75450</postCode>
									<settlement>Melaka</settlement>
									<country key="MY">Malaysia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Department of Electrical Engineer-ing</orgName>
								<orgName type="institution">Indian Institute of Technology</orgName>
								<address>
									<postCode>721302</postCode>
									<settlement>Kharagpur</settlement>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Solving shortest path problem using particle swarm optimization</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2008-01-19">19 January 2008</date>
						</imprint>
					</monogr>
					<idno type="MD5">74BE5852D54D90E16196DCB602511573</idno>
					<idno type="DOI">10.1016/j.asoc.2008.01.002</idno>
					<note type="submission">Received 22 August 2006; received in revised form 25 December 2007; accepted 15 January 2008</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T13:50+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Shortest path problem</term>
					<term>Particle swarm optimization</term>
					<term>Path encoding</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper presents the investigations on the application of particle swarm optimization (PSO) to solve shortest path (SP) routing problems. A modified priority-based encoding incorporating a heuristic operator for reducing the possibility of loop-formation in the path construction process is proposed for particle representation in PSO. Simulation experiments have been carried out on different network topologies for networks consisting of 15-70 nodes. It is noted that the proposed PSO-based approach can find the optimal path with good success rates and also can find closer sub-optimal paths with high certainty for all the tested networks. It is observed that the performance of the proposed algorithm surpasses those of recently reported genetic algorithm based approaches for this problem.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The shortest path (SP) problem concerns with finding the shortest path from a specific origin to a specified destination in a given network while minimizing the total cost associated with the path. This problem has widespread applications. Some important applications of the SP problem include vehicle routing in transportation systems <ref type="bibr" target="#b0">[1]</ref>, traffic routing in communication networks <ref type="bibr" target="#b1">[2]</ref> and path planning in robotic systems <ref type="bibr" target="#b2">[3]</ref>. Furthermore, the shortest path problem also has numerous variations such as the minimum weight problem, the quickest path problem, and so on.</p><p>The SP problem has been investigated extensively. The well-known algorithms for solving this problem include the Bellman's dynamic programming algorithm for directed networks, the Dijkstra labeling algorithm and Bellman-Ford successive approximation algorithm for networks with nonnegative cost coefficients. The details of these algorithms can be found in <ref type="bibr" target="#b3">[4]</ref>. These traditional algorithms have major shortcomings; firstly, they are not suitable for networks with negative weights of the edges, i.e., in communication networks, the link weights represent the transmission line capacity and negative weights correspond to links with gain rather than loss. Secondly, the algorithms search only for the shortest route, but they cannot determine any other similar/ non-similar short routes (which is commonly referred to as the kth SP problem). Thirdly, they exhibit high computational complexity for real-time communications involving rapidly changing network topologies such as wireless ad hoc networks. Therefore, new techniques have been continuously under investigation.</p><p>Artificial neural networks (ANN) have been examined to solve the SP problem relying on their parallel architecture to provide a fast solution <ref type="bibr" target="#b4">[5]</ref><ref type="bibr" target="#b5">[6]</ref><ref type="bibr" target="#b6">[7]</ref>. However, the ANN approach has several limitations. These include the complexity of the hardware which increases considerably with increasing number of network nodes; at the same time, the reliability of the solution decreases. Secondly, they are less adaptable to topological changes in the network graph <ref type="bibr" target="#b6">[7]</ref>, including the cost of the arcs. Thirdly, the ANNs do not consider sub-optimal paths. Among other approaches for this problem, the powerful evolutionary programming techniques have considerable potential to be investigated in the pursuit for more efficient algorithms because the SP problem is basically an optimal search problem. In this direction, genetic algorithm (GA) has shown promising results <ref type="bibr" target="#b7">[8]</ref><ref type="bibr" target="#b8">[9]</ref><ref type="bibr" target="#b9">[10]</ref><ref type="bibr" target="#b10">[11]</ref>. The most recent notable results have been reported in <ref type="bibr" target="#b9">[10]</ref>. Their algorithm shows better performance compared to those of ANN approach and overcomes the limitations mentioned above.</p><p>It is apparent that there is always a great need for more efficient optimization algorithms for the SP problem. Among the notable algorithms for path finding optimization problems in network graphs, successful use of GA and Tabu Search (TS) has been reported <ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref>. The success of these evolutionary programming approaches promptly inspires investigative studies on the use of other similar (and possibly more powerful) evolutionary algorithms for this problem. Particle Swarm Optimization is one such evolutionary optimization technique <ref type="bibr" target="#b14">[15]</ref>, which can solve most of the problems solved by GA with less computation cost <ref type="bibr" target="#b15">[16]</ref>. It is to be noted that GA and TS demand expensive computational cost. Some more comparative studies of the performances of GA and PSO have also been reported <ref type="bibr" target="#b16">[17]</ref><ref type="bibr" target="#b17">[18]</ref><ref type="bibr" target="#b18">[19]</ref><ref type="bibr" target="#b19">[20]</ref>. All these studies have firmly established similar effectiveness of PSO compared to GA. Even for some applications, it has been reported that the PSO performs better than other evolutionary optimization algorithms in terms of success rate and solution quality. The most attractive feature of PSO is that it requires less computational bookkeeping and, generally, a few lines of implementation codes. The basic philosophy and science behind PSO is based on the social behavior of a bird flock and a fish school etc. Because of the specific algorithmic structure of PSO (updating of position and velocity of particles in a continuous manner), PSO has been mainly applied to many continuous optimization problems with few attempts for combinatorial optimization problems. Some of the combinatorial optimization problems that have been successfully solved using PSO are: task assignment problem <ref type="bibr" target="#b20">[21]</ref>, traveling salesman problem <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>, sequencing problem <ref type="bibr" target="#b23">[24]</ref> and permutation optimization problem <ref type="bibr" target="#b24">[25]</ref>, etc.</p><p>To the best knowledge of the authors, there is no reported work on the use of PSO for solving the core shortest path problem without any use of the classical algorithms such as the Dijkstra and Bellman-Ford algorithms. The purpose of this paper is to investigate on the applicability and efficiency of PSO for this problem. In this regard, this paper reports the use of particle swarm optimization to solve the shortest path problem, where a modified indirect encoding is used to represent the particle (position). In addition, a novel heuristic operator has been used for reducing the possibility of loop formation during potential path constructions (search procedure) from an origin node to a specific destination node in the network graph. The proposed algorithm has been tested by exhaustive simulation experiments on various random network topologies. The analysis of the results indicates the superiority of the PSObased approach over those using GA <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11]</ref>.</p><p>The paper is organized as follows. In Section 2, PSO paradigm is briefly discussed. The particle encoding mechanism is presented Section 3 followed by the overall flow of the PSO algorithm for solving the SP problem being provided in Section 4. The results from computer simulation experiments are discussed in Section 5. Section 6 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Particle swarm optimization: a brief overview</head><p>Particle swarm optimization is a population based stochastic optimization technique inspired by the social behavior of bird flock (and fish school, etc.), as developed by Kennedy and Eberhart <ref type="bibr" target="#b14">[15]</ref>. As a relatively new evolutionary paradigm, it has grown in the past decade and many studies related to PSO have been published <ref type="bibr" target="#b25">[26]</ref>. The algorithmic flow in PSO starts with a population of particles whose positions, that represent the potential solutions for the studied problem, and velocities are randomly initialized in the search space. The search for optimal position (solution) is performed by updating the particle velocities, hence positions, in each iteration/generation in a specific manner as follows. In every iteration, the fitness of each particle's position is determined by some defined fitness measure and the velocity of each particle is updated by keeping track of two ''best'' positions. The first one is the best position (solution) a particle has traversed so far. This value is called pBest. Another ''best'' value is the best position (solution) that any neighbor of a particle has traversed so far. This best value is a neighborhood best and is called nBest. When a particle takes the whole population as its neighborhood, the neighborhood best becomes the global best and is accordingly called gBest. A particle's velocity and position are updated as follows.</p><formula xml:id="formula_0">v id ¼ v id þ c 1 r 1 ðb id À x id Þ þ c 2 r 2 ðb n id À x id Þ; i ¼ 1; 2;</formula><p>. . . ; N s and d ¼ 1; 2; . . . ; D</p><p>(1)</p><formula xml:id="formula_1">x id ¼ x id þ v id<label>(2)</label></formula><p>where c 1 and c 2 are positive constants, called acceleration coefficients, N s is the total number of particles in the swarm, D is the dimension of problem search space, i.e., number of parameters of the function being optimized, r 1 and r 2 are two independently generated random numbers in the range [0,1] and ''n'' represents the index of the best particle in the neighborhood of a particle. The other vectors are defined as:</p><formula xml:id="formula_2">x i = [x i1 , x i2 , . . .,</formula><p>x iD ] is the position of ith particle; v i ¼ ½v i1 ; v i2 ; . . . ; v iD is the velocity of ith particle; b i = [b i1 , b i2 , . . ., b iD ] is the best position of the ith particle ( pBest i ), and b n i ¼ ½b n i1 ; b n i2 ; . . . ; b n iD is the best position found by the neighborhood of the particle i (nBest i ). The pseudo-codes for general algorithmic flow of PSO are listed in Fig. <ref type="figure">1</ref>.</p><p>Eq. (1) calculates a new velocity for each particle based on its previous velocity, the particle's position at which the best possible fitness has been achieved so far, and the neighbors' best position achieved. Eq. (2) updates each particle's position in the solution hyperspace.c 1 and c 2 are two learning factors, which control the influence of pBest and nBest on the search process. In all initial studies of PSO, both c 1 and c 2 are taken to be 2.0 yielding good results <ref type="bibr" target="#b14">[15]</ref>. However, in most cases, the velocities quickly attain very large values, especially for particles far from their global best. As a result, particles have larger position updates with particles leaving boundary of the search space. To control the increase in velocity, velocity clamping is used in Eq. ( <ref type="formula">1</ref>). Thus, if the right side of Eq. ( <ref type="formula">1</ref>) exceeds a specified maximum value V max d , then the velocity on that dimension is clamped to V max d . Many improvements have been incorporated into this basic algorithm. A review of these modifications can be seen in <ref type="bibr" target="#b26">[27]</ref>.</p><p>The commonly used PSOs are either global version or local version of PSO. In global version, all other particles influence the velocity of a particle, while in the local version of PSO, selected number of neighbor particles affect the particle's velocity. In <ref type="bibr" target="#b27">[28]</ref>, PSO is tested with regular shaped neighborhoods, such as global version, local version, pyramid structure, ring structure, Von Neumann topology. The neighborhood topology of the particle swarm has a significant effect on its ability to find optima: the optimal pattern of connectivity among individuals depends on the problem being solved. In ring topology, parts of the population that are distant from one another are also independent of one another. Influence spreads from neighbor to neighbor in this topology, until an optima, which really is the best, is found by any part of the population and then, this optima will eventually pull all the particles into it. In contrast, the global version where every particle is connected to all other particles, every particle influences all other particles immediately. The global populations tend to converge more rapidly than the ring populations, when they converge; but they are also more susceptible to convergence towards local optima <ref type="bibr" target="#b28">[29]</ref>.</p><p>In <ref type="bibr" target="#b29">[30]</ref>, Maurice proposed the use of a constriction factor x; the algorithm was named the constriction factor method (CFM) accordingly. Here, Eq. ( <ref type="formula">1</ref>) is modified as shown in Eq. (3).</p><formula xml:id="formula_3">v id ¼ x½v id þ c 1 r 1 ðb id À x id Þ þ c 2 r 2 ðb n id À x id Þ<label>(3)</label></formula><p>where</p><formula xml:id="formula_4">x ¼ 2ðj2 À ' À ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi ' 2 À 4' p jÞ À1 if ' ¼ c 1 þ c 2 &gt; 4<label>(4)</label></formula><p>The objective behind the use of constriction factor is to prevent the velocity from growing out of bounds, thus the velocity clamping is not required. However, Eberhart and Shi <ref type="bibr" target="#b30">[31]</ref> have reported that the best performance can be achieved with constriction factor while using velocity clamping. It is readily observed that the PSO is very simple to be implemented. But, to formulate the problem in PSO framework, the important step is to devise a suitable coding scheme for particle representation. For the SP problem, there are some potential difficulties, which are discussed in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Particle encoding for shortest path problem</head><p>The thorniest problem in applying PSO (and GA) to the SP problem and similar ones like the traveling salesman problem is how to encode a path in a network graph into a particle in PSO (or a chromosome in GA). This encoding in turn affects the effectiveness of a solution/search process. A brief discussion on some of the existing path encoding techniques for solving the SP problem using GA<ref type="foot" target="#foot_0">1</ref> is presented followed by a detailed description of the proposed encoding algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Existing path encoding techniques</head><p>In the past, two typical encoding techniques have been used for path representations in solving the SP problem using GA. They are: direct and indirect representations.</p><p>In the direct representation scheme, the chromosome in the GA is represented by the sequence of node identification numbers, i.e., node IDs, appearing in a path starting from a source node and terminating at some destination node in the network. This encoding scheme is used in <ref type="bibr" target="#b7">[8]</ref><ref type="bibr" target="#b8">[9]</ref><ref type="bibr" target="#b9">[10]</ref>. The GAbased approach used in <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">10]</ref> is practically feasible in wired/ wireless environment. A variable-length chromosome of length equal to the number of nodes for encoding the problem has been used to list up node IDs from a source node to a destination based on a topological database of a network. To illustrate the scheme, a typical 20-node random network<ref type="foot" target="#foot_1">2</ref> (as used in <ref type="bibr" target="#b9">[10]</ref>) is shown in Fig. <ref type="figure">2</ref>. Following the representation scheme in <ref type="bibr" target="#b7">[8]</ref> and Fig. <ref type="figure">1</ref>. Pseudo-codes for general algorithmic flow of particle swarm optimization. Fig. <ref type="figure">2</ref>. A typical 20-node random network <ref type="bibr" target="#b9">[10]</ref> where node numbers (IDs) are encircled. The weights of the connecting edges are also shown adjacent to the corresponding edges.</p><p>[10], a typical path from node 1 and node 20 in Fig. <ref type="figure">2</ref> (shown in bold lines) is encoded as {1, 3, 8, 14, 20}. In <ref type="bibr" target="#b8">[9]</ref>, another similar (but slightly different) fixed-length chromosome representation has been used, i.e., each gene in a chromosome represents a node ID that is selected randomly from the set of nodes connected with the node corresponding to its locus number. For example, the path {1, 3, 8, 14, 20} in Fig. <ref type="figure">2</ref> is encoded as:</p><p>The disadvantage with these direct approaches is that a random sequence of node IDs may not correspond to a valid path (that terminates on destination node without any loop), increasing the number of invalid paths returned. An indirect scheme for chromosome representation scheme has been proposed by Gen et al. <ref type="bibr" target="#b10">[11]</ref>, where instead of node IDs directly appearing on the path representation, some guiding information about the nodes that constitute the path are used to represent the path. The guiding information used in that work is the priorities of various nodes in the network. During the initialization phase of GA, these priorities are assigned randomly. The path is generated by sequential node appending procedure beginning with the source node and terminating at the destination node. At each step of path construction from a chromosome, there are usually several nodes available for consideration and the one with the highest priority is added into path and the process is repeated until the destination node is reached. Fig. <ref type="figure">3</ref> illustrates this encoding scheme {p1, p2, . . . are the priority values of nodes 1, 2, . . ., respectively} and two typical chromosomes for the 20-node network of Fig. <ref type="figure">2</ref>. Fig. <ref type="figure">3</ref>(b) shows an example of indirect scheme for path representation from node 1 to node 20. The path construction starting from node 1 is performed as follows. From the node adjacency relations, the node with highest priority, i.e., node 3 (priority value = 60), is selected to be included in path, out of the nodes 2, 3, 4 and 5 (possible nonvisited nodes to be visited from node 1). Then, out of the possible non-visited nodes that can be visited from node 3, node 8 is selected because of its highest priority and is put into the path. These steps will be repeated until a complete path {1, 3, 8, 14, 20} is obtained, as per the represented priority values shown in Fig. <ref type="figure">3(b</ref>). It should be noted that, for the decoding scheme to be effective, a dynamic node adjacency matrix is maintained in the computer implementation <ref type="bibr" target="#b10">[11]</ref> and it is updated after selection of a node to be included in a path so that the selected node will not be a candidate for future selection. This increases memory, especially for large number of nodes, and time complexity of the algorithm. Moreover, there may be situations when the path does not terminate at the destination node leading to an invalid path. This situation is illustrated in Fig. <ref type="figure">3(c</ref>). In this case, the partial path takes the node sequence {1, 3, 8, 7, 6, 2}. From node 2, the partial path should not be allowed to grow further as it will result in a loop (the solution to the SP problem must not include any loop). In this sense, such types of nodes (node 2) can be called as no-exit nodes. Therefore, the possibility of invalid path generation (due to such no-exit nodes) is high resulting in substantial fruitless computational effort. However, it is worth noting that this encoding scheme has obvious advantages over direct encoding schemes in terms of increased possibility of valid path generation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Proposed modifications in the priority-based path encoding algorithm</head><p>The proposed path-encoding algorithm for PSO is essentially based on the above discussed indirect prioritybased encoding. The direct encoding scheme is not preferred since a random sequence of nodes is definitely not a good choice for path construction because of the reasons mentioned earlier. But, the priority-based encoding scheme is suitably modified to address the concerns raised earlier, i.e., maintaining dynamic adjacency matrix and possibility of arriving at noexit nodes during path construction. Thus, the position vector of a particle in PSO is represented by a priority vector of the type shown in Fig. <ref type="figure">3</ref>(a) along with the following incorporated modifications.</p><p>(a) The nodes are allowed to take both positive and negative priority values of any magnitude. By doing so, the search space becomes wider without any constraint boundaries. Under this modification, the node that is already included in a growing path will be assigned a large negative priority value (for example, ÀN 1 = À50000); thus that node is highly unlikely to selected again while the PSO (with velocity clamping and CFM) runs for a finite number of iterations. Even with the remotest occurrence of a node being selected again, the concerned path can be treated as an invalid path, which is computationally more efficient compared to maintaining a dynamic adjacency matrix. The specific advantage is that, at each step of path construction corresponding to a particle, there is absolutely no need to update a dynamic adjacency matrix; rather a dynamic priority vector is simply updated.</p><p>Fig. <ref type="figure">3</ref>. Illustrations of priority-based encoding scheme <ref type="bibr" target="#b10">[11]</ref> for the 20-node network of Fig. <ref type="figure">2</ref>.</p><p>(b) A closer look at the possibility of arriving at no-exit nodes reveals that one of the main reasons is the growth of the path in backward direction, not in the forward direction towards the destination. However, it is also emphasized that not all partial backward paths lead to such a situation. To reduce the possibility of building a backward path (hence, possible loop formation) and also, simultaneously keeping some room for any potential backward movement, a heuristic operator is incorporated as follows. A node is selected as tobe-next node in the growing path if its ID is larger than the present node ID by a certain specified value, i.e., if ID of to-be-next node À ID of present node &gt; À M; where M is a positive integer (5)</p><p>If a node is rejected based upon Eq. ( <ref type="formula">5</ref>), then another node with highest priority among the rest is tested for possibility of inclusion in the growing path. This heuristic operator will try to prevent the path from growing too much backward as long as there are available alternative links. Thereby, it also reduces the possibility of loop formation.</p><p>In the following sub-section, the pseudo-codes for implementation of priority-based encoding algorithm incorporating these two modifications are provided with an illustrative example.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Pseudo-codes for path encoding algorithm</head><p>Let N max be the maximum number of nodes in the network. Let V k p be a partial path (corresponding to the position/priority vector of a particle) under growth, which contains k + 1 nodes with the terminal node t k (k = 0 corresponds to the partial path with source node only), and (k + 1)th node is to be selected. Let x k be the dynamic priority vector, which initially contains the priority values (position vector of the particle), referred to by x. Every time a node is added to the partial path, the corresponding position in x k is given a large negative value (ÀN 1 ) as explained earlier. Without loss of generality, node number 1 is taken as source node and destination node ID is N max . The implementations of the modified priority-based encoding along with gradual path construction process are summarized in the following steps:</p><p>Step </p><formula xml:id="formula_5">1: (Initialization) Let k 0, V k p f1g and x k x; t k 1 and x k (t k ) = ÀN 1 . Step 2: (Termination test) If t k = N max , or k &gt; N max ,</formula><formula xml:id="formula_6">k (t k ) = ÀN 1 .</formula><p>Step 4: (Complete path) Return complete valid path V k p or return invalid path V k p if the terminal node is not the destination node.</p><p>In Step 2, if the number of iteration exceeds N max , it would mean either a valid path has not been found due to loops or the path does not terminate at the destination node in N max steps. In that case, the objective function evaluation (discussed in the next section) of the corresponding particle is made to return a very low value as penalty. In Step 3, the nodes having direct links with the terminal node of the already grown partial path can be found from the network topology. The value of M should be judiciously decided based on network topology. An illustrative example of the different steps of execution of the above pseudo-codes is shown in Fig. <ref type="figure">4</ref>. This example corresponds to the priority (particle position) vector shown in Fig. <ref type="figure">3(c</ref>) resulting in an invalid path without proposed modifications as noted earlier. Fig. <ref type="figure">4</ref> shows how the proposed modifications (parameter M = 4) to create a valid path from the same position vector and the corresponding final path is {1, 3, 8, 7, 6, 12, 17, 18, 20}, where use of Eq. ( <ref type="formula">5</ref>) forces the algorithm to choose node 12 instead of node 2 (although it has the highest priority) thereby avoiding an invalid path creation. This operation reduces the number of invalid paths (thereby, the computation time).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Complete algorithm for shortest path problem</head><p>The quality of a particle (solution) is measured by a fitness function. Here, the fitness function is obvious as the goal is to find the minimal cost path. Thus, the fitness of ith particle is defined as:</p><formula xml:id="formula_7">f i ¼ X N i À1 j¼1 C yz À1 ; y ¼ PP i ð jÞ and z ¼ PP i ð j þ 1Þ (6)</formula><p>where PP i is the set of sequential node IDs for ith particle, N i = jPP i j = number of nodes that constitute the path represented by ith particle, and C yz is the cost of the link connecting node y and node z. Thus, the fitness function takes maximum value when the shortest path is obtained. If the path represented by a particle happens to be an invalid path, then its fitness is assigned a penalty value (=0) so that the particle's attributes will not be considered by others for future search. The pseudocodes for the complete PSO-based algorithm for shortest path search are provided in Fig. <ref type="figure">5</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Simulation results and discussions</head><p>The proposed PSO-based algorithm for SP search is tested on networks with random and varying<ref type="foot" target="#foot_2">3</ref> topologies through computer simulations using Microsoft Visual C++ on an Intel III processor (850 MHz clock). The results are compared with two recently reported GA-based approaches, i.e., one uses direct encoding scheme <ref type="bibr" target="#b9">[10]</ref> and the other uses the priority vector based indirect encoding scheme (but without the modifications proposed in this work) <ref type="bibr" target="#b10">[11]</ref>. The selection of parameter settings of PSO is discussed now: (a) Population size: In general, any evolutionary search algorithm shows improved performance with relatively larger population. However, very large population size means greater cost in terms of fitness function evaluations.</p><p>In <ref type="bibr" target="#b31">[32,</ref><ref type="bibr" target="#b32">33]</ref>, it is stated that a population size of 30 is a reasonably good choice (it is small enough to be efficient, while performing comparison of priorities of various nodes during path extension, the integer number comparison is generally efficient compared to real number comparison.</p><p>The initial velocities are chosen to be smaller so as to mimic the social behavior of birds at the beginning of search process. It should also be noted that the velocity updating by Eq. ( <ref type="formula" target="#formula_3">3</ref>) gives non-integer velocity values, which are again converted to the nearest integer in the implementation. The maximum velocity for all the search dimensions is set as AE3000. (c) Neighborhood topology: Ring neighborhood topology <ref type="bibr" target="#b28">[29]</ref> is used to avoid premature convergence to local optima. In this topology, each particle in the population is connected to its two immediate neighbors as shown in Fig. <ref type="figure">6</ref>. (d) Constriction factor x: In <ref type="bibr" target="#b33">[34]</ref>, it is shown that the CFM has almost linear convergence for w &gt; 4. Here, both c 1 and c 2 are chosen to be 2.05; thus w = 4.1. From Eq. ( <ref type="formula" target="#formula_4">4</ref>), x = 0.729. (e) During the path construction process, the value of M in Eq. ( <ref type="formula">5</ref>), as discussed in Section 3, is set to 4. The algorithm is set to run for a maximum of 500 iterations unless stated otherwise.</p><p>In the following, the simulation results are compared with those obtained from GA-based search using direct path encoding scheme <ref type="bibr" target="#b9">[10]</ref> and indirect (priority-based) path encoding scheme <ref type="bibr" target="#b10">[11]</ref>. In all the simulation tests, the optimal solution obtained using Dijkistra's algorithm <ref type="bibr" target="#b3">[4]</ref> is used as reference for comparison purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Comparison of results with those of GA-based search using direct path encoding [10]</head><p>The main objective of these simulation experiments is to investigate the quality of solution and convergence speed for different network topologies and number of nodes. First, the quality of solution (route optimality) is investigated. The route optimality is defined as the percentage of time the PSO finds the global optimum (i.e., the shortest path) <ref type="bibr" target="#b9">[10]</ref>. The route failure ratio is the inverse of route optimality. It is asymptotically the probability that the computed route is not optimal, because it is the relative frequency of route failure <ref type="bibr" target="#b9">[10]</ref>. The 20-node fixed topology network <ref type="bibr" target="#b9">[10]</ref> shown in Fig. <ref type="figure">2</ref> is considered first. For comparison of quality of solution, the shortest path solution computed by Dijkistra's algorithm is taken as reference and this path is shown in bold lines in Fig. <ref type="figure">2</ref>. Using the proposed PSO algorithm with a population size of 25, this optimum path is found after two iterations only. However, it is observed that the average number of iterations required to obtain the optimal path with different random topologies for 20-node network is 13.</p><p>To verify the results for different network topologies, randomly generated networks with 15-50 nodes with randomly assigned link costs are investigated for shortest path solution. A total of 1000 random network topologies were considered in each case (number of nodes). A comparison the quality of solution in terms of route failure ratio between the proposed PSO-based search and GA-based search reported in <ref type="bibr" target="#b9">[10]</ref> (where the number of chromosomes in each case is same as the number of nodes in the network) is shown in Fig. <ref type="figure">7</ref>. In Fig. <ref type="figure">7</ref>, the PSO results for a fixed population size of 25 as well as the population size being equal to number of nodes are shown for fair comparison. It clearly illustrates that the quality of solution obtained with PSO is higher than that of GA-based search. For example, in case of 45 node-networks, the route failure ratio is 0.14 (86% route optimality) with a population size of 25; but the GA search has route failure ratio 0.36 (64% route optimality) with population size equal to the number of nodes, i.e., 45. The overall statistics of these results are collected in Table <ref type="table" target="#tab_1">1</ref>. The PSO search attains an average route failure ratio 0.0615 (94% route optimality) with a population size equal to 25 compared to 0.1712 for the GA search <ref type="bibr" target="#b9">[10]</ref>. The standard deviation of route failure ratio for the PSO search amounts 0.0197 compared to 0.1067 for GA search. Moreover, as seen from Fig. <ref type="figure">7</ref>, when the population size in PSO is equal to the number of nodes in each case, the performance of proposed algorithm is clearly superb compared to the GA-based approach. In the following results presented in this sub-section, the population size in PSO is fixed to 25 irrespective of network topology.</p><p>Fig. <ref type="figure" target="#fig_2">8</ref> shows the comparison of the average CPU time required to achieve the results shown in Fig. <ref type="figure">7</ref>, where the population size in PSO is fixed to 25. For less than 40 nodes, the  average time required for PSO is less than those with GA search <ref type="bibr" target="#b9">[10]</ref>. For subsequent higher node networks, the two algorithms almost have the same time efficiency. However, it must be noted that, in the results reported for GA search <ref type="bibr" target="#b9">[10]</ref>, the population size is taken equal to number of nodes. Thus, from this perspective, the PSO with fixed population size of 25 performs better in comparison.</p><p>In addition to seeking solution for optimal path, it is also equally important to look for closer sub-optimal paths. This is quite useful in real-time computer networking. Fig. <ref type="figure" target="#fig_3">9</ref> shows the route failure ratio to achieve the optimal path, 95% and 90% of the optimal path {path cost = 95% (and 90%) of the optimal path cost} with the proposed algorithm. Although the failure ratio increases with the increasing number of nodes, it is still lower to get the 95% of optimal path and 90% of the optimal path. For example, 60-node network has route optimality of 95% for near optimum path with the proposed PSO search (population size = 25). Finally, Figs. <ref type="figure" target="#fig_4">10</ref> and<ref type="figure" target="#fig_5">11</ref> show the average number of iterations and the number of times the objective function evaluation is performed, respectively, with PSO search (population size = 25). As expected, the iteration number increases with node number. Thus, the proposed algorithm is very much suitable for small and medium size networks in real time. For networks with large number of nodes, it would be better to consider parallel implementation of particle swarm optimization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Comparison of results</head><p>with those of GA-based search using indirect path encoding <ref type="bibr" target="#b10">[11]</ref> For performance comparison of PSO-based search using modified indirect encoding scheme with those reported in <ref type="bibr" target="#b10">[11]</ref> using GA-based search and indirect encoding scheme, same testing conditions are simulated. However, <ref type="bibr" target="#b10">[11]</ref> only reports the number of nodes and edges in all the used networks and no information on the cost of the edges is provided. Thus, the closest possible network is generated in this study where the number of nodes of each network is exactly the same used in <ref type="bibr" target="#b10">[11]</ref> and the number of edges is as close as possible to those of <ref type="bibr" target="#b10">[11]</ref>. The results are summarized as follows.</p><p>(a) Test #1</p><p>Three random networks of different sizes are generated. The testing conditions are given in Table <ref type="table">2</ref>. The statistical results for frequency of obtaining optimal solution over 400 independent runs (for each network) are compared in Table <ref type="table">3</ref>. Clearly, the proposed PSO-based search performs better. (b) Test #2</p><p>In this test, the effects of population size on convergence characteristics are compared. The number of generations/ iterations in every run is fixed. The testing conditions are: number of iterations/generations = 200, the chosen network is that mentioned for case study III (only) in Table <ref type="table">2</ref> for respective algorithms, population sizes for both are varied from 10 to 100. The comparisons of frequency for obtaining optimal path obtained from 200 random runs (for each population size) are summarized in Table <ref type="table">4</ref>. As anticipated, the frequency for obtaining optimal solution increases with population size for both approaches. The superior performance of the proposed PSO-based search is again highlighted in the results.    generally becomes wider than the original problem domain and, hence, this offers more freedom for the search to be performed effectively. Further, the two modifications incorporated to this prioritybased encoding further enhance the performance of the PSO search, i.e., <ref type="bibr" target="#b0">(1)</ref> The provisions for both positive and negative nodepriority values offer more freedom for particle movement (wider search space). (2) The incorporation of the heuristic operator for reducing the possibility of invalid path generation further improves the overall performance of the algorithm. Finally, the PSO requires less computational bookkeeping and few lines of implementation codes compared to GA.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions</head><p>In this paper, investigative results on using particle swarm optimization to solve the shortest path problem have been reported. The proposed PSO-based search uses a modified (priority-based) indirect path-encoding scheme so as to widen the scope of search space and to reduce the probability of invalid path/loop creation during the path construction procedure using a heuristic operator. The performance of the proposed approach has been compared with those reported in two recent works using GA-based search (one of these uses direct encoding while the other uses indirect encoding) by carrying out exhaustive simulation tests on different random networks with varying number of nodes (from 15 to 70 nodes). The results are highly encouraging with much superior performance exhibited by the proposed PSO-based search. Moreover, in addition to obtaining the shortest path, the proposed algorithm also successfully finds near-optimal paths, i.e., path with costs of 95% (or 90%) of the optimal path cost, with good success rates. This feature is highly beneficial in realtime computer networking. It should also be noted that the performances of the PSO-based approach for SP problem can be further improved by incorporating adaptive tuning features to fine tune the parameters of PSO and investigations are underway for this aspect.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 4 .Fig. 5 .</head><label>45</label><figDesc>Fig. 4. Particle priority vector updating to construct the path {1, 3, 8, 7, 6, 12, 17, 18, 20} illustrating the use of proposed modifications in path encoding.</figDesc><graphic coords="6,84.98,64.80,417.57,337.95" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 6 .Fig. 7 .</head><label>67</label><figDesc>Fig. 6. Ring topology for particle neighborhood.</figDesc><graphic coords="7,76.54,64.80,183.22,136.91" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Comparison of convergence time between PSO (population size = 25) and GA [10].</figDesc><graphic coords="8,42.97,64.80,232.55,114.18" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 9 .</head><label>9</label><figDesc>Fig.9. Route failure ratio to achieve optimal, 95% and 90% of optimal path with PSO search (population size = 25).</figDesc><graphic coords="8,44.16,220.20,230.21,116.28" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Average number of iterations to obtain optimal path with PSO search (population size = 25).</figDesc><graphic coords="8,313.97,64.80,228.54,90.43" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Average number of fitness function evaluations to obtain the optimum path with PSO search (population size = 25).</figDesc><graphic coords="8,311.36,595.39,233.98,122.80" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1</head><label>1</label><figDesc>Comparison of statistics of the quality of solution (population size in PSO = 25)</figDesc><table><row><cell>Performance measure</cell><cell>Algorithms</cell><cell></cell></row><row><cell></cell><cell>GA search [10]</cell><cell>PSO search (proposed)</cell></row><row><cell>Route failure ratio</cell><cell></cell><cell></cell></row><row><cell>Average</cell><cell>0.1712</cell><cell>0.061548</cell></row><row><cell>Standard Deviation</cell><cell>0.1067</cell><cell>0.0917</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>To the best knowledge of the authors, no results using PSO have been reported for the core SP problem.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Without any loss of generality, the source node is assigned the node ID equal to 1 and the destination node is assigned the node ID equal to 20 (=maximum number of nodes in the network). The IDs for the rest of the nodes are assigned in a left-to-right manner in increasing sequence starting from source to destination, as shown in Fig.2.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>The random network topologies are generated by some random distribution of nodes in some pre-specified area in a two-dimensional Cartesian coordinate plane. The neighbors of a node are those nodes that appear within some prespecified distance (transmission range) of the node. The average degree of nodes in the network depends upon the area size chosen. A.W. Mohemmed et al. / Applied Soft Computing 8 (2008) 1643-1653</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>(c) Test <ref type="bibr">#3</ref> In this test, the convergence characteristics of search algorithms are compared when the population size is fixed and the number of generations/iterations is gradually increased from 100 to 3000. The chosen networks for both the search algorithms are again the respective networks given in case study III in Table <ref type="table">2</ref>. The results over 200 runs for each case are summarized in Table <ref type="table">5</ref>. For population size of 10 in both GA-and PSO-based searches, it is observed that the success rates for PSO are better when number of iterations is less than 1200. But, as the searches are performed for more iterations, GA performs better than PSO (population size = 10). These results indicate that the gradual (iterative) improvements in the performance of PSO greatly depend upon the population size. It is expected since the very basic concept behind this PSO search is the interaction between the particles in the population. More particles means more interactive search and the search space can be explored more effectively with more particles. In order to verify this fact, this test is repeated for PSO with two additional cases for different population sizes <ref type="bibr">(15 and 20)</ref>. The statistical results are also reported in Table <ref type="table">5</ref>. Clearly, the frequency for obtaining the optimal path increases as more particles are allowed in the PSO population.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Overall remarks on performance of the proposed algorithm</head><p>The simulation experiments performed in this study consistently show superior performance of PSO over that of GA This can be attributed to the following characteristics of the proposed PSO-based algorithm for this particular problem.</p><p>In PSO, the determination of new search directions based on a sort of heuristic combination of present velocity and position of the particle, best position of the particle attained so far, and position of the global/neighborhood best particle offers advantages in terms efficient exploration of search space resulting in attractive convergence characteristics for optimization problems. It is widely known that an effective encoding of the problem is very much essential for efficient search of problem/solution space as well as convergence characteristics of any evolutionary programming based search algorithm. For example, it is already seen that an indirect coding has better attributes compared to direct coding for this shortest path problem, when used in GA-based search algorithm. In indirect coding of potential solutions, the search domain </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Shortest path algorithms: An evaluation using real road networks</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">B</forename><surname>Zahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Noon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transport. Sci</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="65" to="73" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Open Shortest Path First Version 2. RFQ 1583, Internet Engineering Task Force</title>
		<author>
			<persName><forename type="first">J</forename><surname>Moy</surname></persName>
		</author>
		<ptr target="http://www.ietf.org" />
		<imprint>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">An efficient algorithm to find a shortest path for a car-like robot</title>
		<author>
			<persName><forename type="first">G</forename><surname>Desaulniers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Soumis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Robot. Automat</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="819" to="828" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Lawler</surname></persName>
		</author>
		<title level="m">Combinatorial Optimization: Networks and Matroids</title>
		<meeting><address><addrLine>Holt, Rinehart, and Winston, New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1976">1976</date>
			<biblScope unit="page" from="59" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Neural networks for shortest path computation and routing in computer networks</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">K</forename><surname>Ali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Kamoun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Neural Netw</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="941" to="954" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A recurrent neural network for solving the shortest path problem</title>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Symposium on Circuits and Systems</title>
		<meeting>the IEEE International Symposium on Circuits and Systems</meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="319" to="322" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A neural network for shortest path computation</title>
		<author>
			<persName><forename type="first">F</forename><surname>Araujo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Ribeiro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Rodrigues</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Neural Netw</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1067" to="1073" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A migration scheme for the genetic adaptive routing algorithm</title>
		<author>
			<persName><forename type="first">M</forename><surname>Munemoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Takai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Sato</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Systems, Man, and Cybernetics</title>
		<meeting>the IEEE International Conference on Systems, Man, and Cybernetics</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="2774" to="2779" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A genetic algorithm for determining multiple routes and its applications</title>
		<author>
			<persName><forename type="first">J</forename><surname>Inagaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Haseyama</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kitajima</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Symposium on Circuits and Systems</title>
		<meeting>the IEEE International Symposium on Circuits and Systems</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="137" to="140" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A genetic algorithm for shortest path routing problem and the sizing of populations</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">W</forename><surname>Ahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Ramakrishna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="566" to="579" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Genetic Algorithms for solving shortest path problems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Gen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Evolutionary Computation</title>
		<meeting>the IEEE International Conference on Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="401" to="406" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A weighted coding in a genetic algorithm for the degreeconstrained minimum spanning tree problem</title>
		<author>
			<persName><forename type="first">G</forename><surname>Raidl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on Applied Computing</title>
		<meeting>the ACM Symposium on Applied Computing</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="440" to="445" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Shortest path problem with cache dependent path lengths</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kurnia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Rodrigues</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Congress on Evolutionary Computation</title>
		<meeting>the Congress on Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="2756" to="2761" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Routing foreseeable light path demands using a tabu search meta-heuristic</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Puech</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gagnaire</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Dotaro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Global Telecommunication Conference</title>
		<meeting>the IEEE Global Telecommunication Conference</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="2803" to="2807" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Particle swarm optimization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Neural Networks</title>
		<meeting>the IEEE International Conference on Neural Networks</meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="1942" to="1948" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A comparison of particle swarm optimization and the genetic algorithm</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hassan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Cohanim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">L</forename><surname>Deweck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Venter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeedings of the First AIAA Multidisciplinary Design Optimization Specialist Conference</title>
		<meeting>eeedings of the First AIAA Multidisciplinary Design Optimization Specialist Conference</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="18" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Comparison among five evolutionary-based optimization algorithms</title>
		<author>
			<persName><forename type="first">E</forename><surname>Elbeltagi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Hegazy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Grierson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Adv. Eng. Inform</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="43" to="53" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Comparing genetic algorithms and particle swarm optimization for an inverse problem exercise</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">R</forename><surname>Mouser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Dunn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Aust. N. Z. Ind. Appl. Math. (ANZIAM) J</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">E</biblScope>
			<biblScope unit="page" from="89" to="C101" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Comparison between genetic algorithms and particle swarm optimization</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the seventh annual conference on Evolutionary Programming</title>
		<meeting>the seventh annual conference on Evolutionary Programming</meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="611" to="616" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Particle swarm optimization versus genetic algorithms for phased array synthesis</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">W</forename><surname>Boeringer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">H</forename><surname>Werner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Antennas Propagat</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="771" to="779" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Particle swarm optimization for task assignment problem</title>
		<author>
			<persName><forename type="first">A</forename><surname>Salman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Imtiaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Al-Madani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Microprocess. Microsyst</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="363" to="371" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Particle swarm optimization for traveling salesman problem</title>
		<author>
			<persName><forename type="first">K.-P</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-G</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Pang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Conference on Machine Learning and Cybernetics</title>
		<meeting>International Conference on Machine Learning and Cybernetics</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="1583" to="1585" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Discrete particle swarm optimization illustrated by the traveling salesman problem</title>
		<author>
			<persName><forename type="first">Maurice</forename><surname>Clerc</surname></persName>
		</author>
		<ptr target="http://www.mauriceclerc.net" />
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Particle swarm optimization for sequencing problem: a case study</title>
		<author>
			<persName><forename type="first">L</forename><surname>Cagnina</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Esquivel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gallard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Conference on Evolutionary Computation</title>
		<meeting>the IEEE Conference on Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="536" to="541" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Swarm intelligence for permutation optimization: a case study of n-queens problem</title>
		<author>
			<persName><forename type="first">X</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Swarm Intelligence Symposium</title>
		<meeting>the IEEE Swarm Intelligence Symposium</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="243" to="246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Recent advances in particle swarm</title>
		<author>
			<persName><forename type="first">H</forename><surname>Xiaohui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Yuhui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the CEC Congress on Evolutionary Computation</title>
		<meeting>the CEC Congress on Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="90" to="97" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Particle swarm optimization. Feature article</title>
		<author>
			<persName><forename type="first">S</forename><surname>Yuhui</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Neural Networks Society</title>
		<imprint>
			<date type="published" when="2004-08-13">February, 8-13, 2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Population structure and particle swarm performance</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mendes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of the Congress on Evolutionary Computation</title>
		<meeting>eeding of the Congress on Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1671" to="1676" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Small worlds and mega-minds: effects of neighborhood topology on particle swarm performance</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Congress on Evolutionary Computation</title>
		<meeting>the Congress on Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="1931" to="1938" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">The swarm and queen: Towards a deterministic and adaptive particle swarm optimization</title>
		<author>
			<persName><forename type="first">C</forename><surname>Maurice</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Congress on Evolutionary Computation</title>
		<meeting>the IEEE Congress on Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="1951" to="1957" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Comparing inertia weight and constriction factors in particle swarm optimization</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Congress on Evolutionary Computation</title>
		<meeting>the IEEE Congress on Evolutionary Computation</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="84" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Empirical study of particle swarm optimization</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Eberhart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Congress on Evolutionary Computing</title>
		<meeting>the Congress on Evolutionary Computing</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="volume">III</biblScope>
			<biblScope unit="page" from="1945" to="1950" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">An off-the-shelf PSO</title>
		<author>
			<persName><forename type="first">A</forename><surname>Carlisle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Dozier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Particle Swarm Optimization</title>
		<meeting>the Workshop on Particle Swarm Optimization</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">The particle swarm explosion, stability, and convergence in a multidimensional complex space</title>
		<author>
			<persName><forename type="first">M</forename><surname>Clerc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kennedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Evol. Comput</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="58" to="73" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
