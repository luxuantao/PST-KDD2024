<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Experimentable Digital Twins -Streamlining Simulation-based Systems Engineering for Industry 4.0</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Michael</forename><surname>Schluse</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Marc</forename><surname>Priggemeyer</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Linus</forename><surname>Atorf</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Juergen</forename><surname>Rossmann</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">ReconCellVirtuell Kinematics / Dynamics Communication Infrastructure</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Transactions on Industrial Informatics IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Transactions on Industrial Informatics</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Experimentable Digital Twins -Streamlining Simulation-based Systems Engineering for Industry 4.0</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">4157C08C3F2D2E71AA5B927E938E3692</idno>
					<idno type="DOI">10.1109/TII.2018.2804917</idno>
					<note type="submission">received April 19, 2017; revised August 26, 2017.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:15+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Experimentable Digital Twin</term>
					<term>Simulation-based Systems Engineering</term>
					<term>Virtual Testbed</term>
					<term>Simulation-based X</term>
					<term>Intelligent Systems</term>
					<term>eRobotics</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Digital Twins represent real objects or subjects with their data, functions, and communication capabilities in the digital world. As nodes within the Internet of Things, they enable networking and thus the automation of complex value-added chains. The application of simulation techniques brings Digital Twins to life and makes them experimentable; Digital Twins become Experimentable Digital Twins (EDTs). Initially, these EDTs communicate with each other purely in the virtual world. The resulting networks of interacting EDTs model different application scenarios and are simulated in Virtual Testbeds, providing new foundations for comprehensive Simulation-based Systems Engineering. Its focus is on EDTs, which become more detailed with every single application. Thus, complete digital representations of the respective real assets and their behaviors are created successively. The networking of EDTs with real assets leads to hybrid application scenarios in which EDTs are used in combination with real hardware, thus realizing complex control algorithms, innovative user interfaces or Mental Models for intelligent systems.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>I N the Industry 4.0 era, physical and virtual worlds are growing together. Cyber Physical Systems realize smart systems being connected via the Internet of Things and Services. This results in new requirements and application areas for simulation technology.</p><p>At first, smart systems today are "systems of systems". Their components are smart systems on their own, the resulting overall functionality is the result of various systems working together in a proper way. When developing such systems, only simulations on system level, which are still detailed on component level, are able to gain the insights necessary to e.g. analyze, optimize, verify, and validate those systems. At the same time, those simulations have to incorporate various disciplines and engineering aspects. figure 1 illustrates this using a "ReconCell", a reconfigurable assembly work cell which will be used as a use case to introduce the methodology presented later in this article. To be able to analyze such a ReconCell in a detailed way, simulations have to incorporate e.g. kinematics, rigid body dynamics, sensors, user interfaces, controllers, environment, communication, human Fig. <ref type="figure">1</ref>. Example for a "system of systems" in the field of production technology, the ReconCell <ref type="bibr" target="#b0">[1]</ref>. Various aspects have to be investigated and integrated in comprehensive simulations.</p><p>workers, as well as superordinated manufacturing execution systems (MES).</p><p>Secondly, smart systems need simulation technology to implement their functionality. The realization of the various Self-X (description, networking, commissioning, diagnosis, optimization, ...) concepts require detailed digital models of the corresponding real systems which must be able to be simulated and therefore to become experimentable in various ways. In Industry 4.0, simulations are not only an engineering tool for development. They are now used inside the physical systems to realize intelligent systems, intuitive user interfaces, training simulators etc. For this, appropriate structures and processes to consistently use simulations in varying application scenarios throughout the life-cycle of those systems (see figure <ref type="figure" target="#fig_0">2</ref>) based on a single set of simulation models (which become more and more detailed over time) are needed.</p><p>Thirdly, the development of smart systems changes dramatically. Systems become more complex and must be developed by interdisciplinary and distributed development teams in shorter time frames. Development processes have to keep pace with this. Simulations provide an experimentable knowledge base allowing to introduce new agile development processes based on new communication, documentation, and test infrastructures covering the entire life-cycle.</p><p>Adressing these (and other) requirements, this article proposes a new structuring element for simulation-based engineering processes called "Experimentable Digital Twin" (EDT) as well as a new approach to simulation technology bringing those EDTs to life called "Virtual Testbeds" used in diverse application scenarios called "Simulationbased X", all covered by an integrated development process  called Simulation-based Systems Engineering (see figure <ref type="figure" target="#fig_12">16</ref>). EDTs provide a one-to-one replica of a real system incorporating all components and aspects relevant to use simulations for engineering purposes but also inside the real system during real-world operations. The concept of EDTs is based on the notion of Digital Twins, one of the key Industry 4.0-concepts (see chapter III-A). Virtual Testbeds (VTB) provide comprehensive simulations of interacting EDTs in their operational environment in various application scenarios (see chapter III-C). A tight integration of virtual and real worlds allows for a seamless transition between virtual and physical systems and to seamlessly integrate simulations into physical systems (see chapter III-D). This greatly enhances the state-ofthe-art in simulation technology which is characterized by various approaches used for the detailed analysis on component level but limited analysis capabilities on system level, almost no re-use of models and simulations, no direct transition and especially no integration between virtual models, simulations and the physical system, and only a very loose integration of simulations into engineering processes. Coming back to figure <ref type="figure" target="#fig_0">2</ref>, EDTs are now the common basis for the use of simulation technology throughout the life-cycle, for different disciplines, users, infrastructures, simulation domains, engineering methods, model scopes and application areas. Furthermore, one can now easily combine different elements of the different dimensions and easily move applications from one element to another (e.g. from Virtual Reality applications to real-time simulations inside the machine during real-world operation).</p><p>The rest of this article is organized as follows. Chapter II summarizes the state-of-the-art concerning simulation technology for industrial production. Chapter III introduces the concept of EDTs and illustrates how EDTs are modeled, simulated, and integrated with real-world systems. These EDTs are an enabling technology for Simulation-based X approaches. Chapter IV shows how EDTs are used throughout the lifecycle focusing Simulation-based Optimization and Control. This contribution ends with a conclusion in chapter V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. STATE-OF-THE-ART</head><p>Taking a look at the state-of-the-art of simulation technology reveals various approaches. Discrete event simulation systems <ref type="bibr" target="#b6">[7]</ref>, equation based/signal oriented approaches like MATLAB/Simulink <ref type="bibr" target="#b7">[8]</ref>, the declarative Modelica modeling language <ref type="bibr" target="#b8">[9]</ref> and its tools, FEM-based simulation tools (e.g. <ref type="bibr" target="#b9">[10]</ref>), game engines (e.g. <ref type="bibr" target="#b2">[11]</ref>) or generic mechatronic systems (e.g. <ref type="bibr" target="#b10">[12]</ref>) are probably the most well-known ones. In the field of robotics, some known tools are the various simulation tools provided by robot manufacturers like KUKA.Sim (www.kuka-robotics.com), V-REP <ref type="bibr" target="#b11">[13]</ref> and GAZEBO <ref type="bibr" target="#b12">[14]</ref> (both specialize on sensors and image-based assembly systems), or other commercial products like Emulate3D (www.demo3d.com), ISG-virtuos (www.isg-stuttgart.de), machineering (www.machineering.de) and the Siemens PLM product family (www.plm.automation.siemens.com).</p><p>To simulate complex systems including system dynamics, sensors, data processing, etc., different simulation systems must be combined. Due to missing interoperability of these systems and their underlying models, the realization of such system level simulations incorporating all individual simulations on component level today becomes almost impossible. Concepts like the Digital Factory aim at simulating entire production plants but are restricted to this very specific application area and often to simulation algorithms provided by one of the tools mentioned above.</p><p>FMUs <ref type="bibr">[6]</ref> are an important step improving the interoperability of different simulation systems. Using FMUs is perfect if different subsystems, which are connected by a limited number of inputs and outputs exchanging a limited amount of information, are coupled. Otherwise the resulting network of connected FMUs becomes too complex and often almost unmanageable or too much time is needed for information exchange. In addition to this, their interaction must be fully described using their inputs, outputs, and state variables, which renders e.g. "system wide" rigid body or sensor simulations with interacting rigid bodies of different subsystems impossible because here additional simulation algorithms working on top of the component models need detailed internal information of the distinct models of the different subsystems.</p><p>To sum up, a lot of tools and interfaces are available solving various problems, but simulating complex systems in their entirety still is a big challenge. This works to a certain extend in distinct application fields like production technology or the automotive sector, but an practicable overall approach is still missing. What is needed is a methodology where the models can still be developed on component level, are then combined into simulations on system level, and can then be used in various applications. For this, a new methodology is necessary to model (from a behavioral and structural point of view) one-to-one replicas of real world artefacts (EDTs), to set up networks of interacting EDTs replicating real-world scenarios, Experimentable Digital Twin Fig. <ref type="figure">3</ref>. The correlation of the Industy 4.0 terms "Technical Asset", "Digital Shadow", "Digital Twin" and "Experimentable Digital Twin" (based on <ref type="bibr" target="#b16">[18]</ref>). and to simulate these scenarios in a simulation infrastructure organizing all the "sub-simulators" necessary for this-and all this in an application-neutral form and covered by an overall integrated systems engineering approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. THE CONCEPT OF EXPERIMENTABLE DIGITAL TWINS</head><p>The notion "Digital Twin" is inspired by the developments known under terms like "Industry 4.0" or "Industrial Internet" (see figure <ref type="figure">3</ref>). In general, a Digital Twin is a one-to-one virtual replica of a "Technical Asset" (e.g. machine, component, part of the environment). A Digital Twin contains models of its data (geometry, structure, ...), its functionality (data processing, behavior, ...) and its communication interfaces. It integrates all knowledge resulting from modeling activities in engineering (Digital Model) and from working data captured during realworld operation (Digital Shadow). Simulators are used to make the Digital Twin experimentable <ref type="bibr" target="#b13">[15]</ref> leading to the notion "Experimentable Digital Twin", first introduced in <ref type="bibr" target="#b3">[3]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. The Basic Idea</head><p>EDTs combine the ideas of Digital Twins with Modelbased Systems Engineering and simulation technology (see figure <ref type="figure" target="#fig_2">4</ref>) to provide a new structuring element for simulationbased systems engineering processes for a variety of different applications from development over optimization, verification, user interfaces, and training, up to the realization of intelligent systems, to just name a few examples. For this, Simulation technology delivers all the necessary methods to simulate nearly any aspect of complex systems, while new concepts of 3D simulation technology <ref type="bibr" target="#b5">[5]</ref> allow to integrate various simulation domains. Industry 4.0 provides new concepts to connect different parts of complex systems, Model-based Systems Engineering (MBSE) is used to systematically explore the requirements, structure and behavior of those systems. The resulting networks of interconnected and interacting EDTs integrate and connect different model components regardless of the concrete simulation algorithms used. For this, their inherent communication capabilities are used for port-based communications, specialized integration concepts are used for simulation algorithm interaction. This way, EDTs enable an  integrated simulation-based development on system level as well as the realization of intelligent systems.</p><p>A systematic view on EDTs is given in figure <ref type="figure">5</ref>: An EDT combines a simulated data processing system (DPS) with a simulated technical asset and a simulated human-machine interface (HMI). The simulated technical asset comprises the simulated system represented by its internal simulation state vector s sasset sys (t) (e.g. robot), its simulated sensors s sasset sen (t) (e.g. camera) and actuators s sasset act (t) (e.g. motors). Each state vector s(t) = [x(t), a, A] consists of the current state of corresponding component, its parameters and its algorithms. The simulated technical asset has to adequately mimic the corresponding real world x rasset sen (t), x rasset sys (t), and x rasset act (t). The DPS usually processes sensor data and/or commands a system, e.g. mapping or motion planning algorithms. It is represented by its internal state s sdps impl (t), sensor input s sdps sen (t), actuator output s sdps act (t) and its perceived environment s sdps scenario (t) (e.g. generated maps). The same holds for the HMI. The EDT has inputs u edt (t) and outputs y edt (t) e.g. to exchange production commands and results from and to superordinated MES or to communicate with external tools. All components of the EDT as well as the EDT itself communicate using a simulated communication infrastructure K edt (y(t), t) which resembles the real communication infrastructure of its real world counterpart.</p><p>The result may be fairly complex models leading to a combined simulation state vector s := s sasset , s sdps , s shmi . The simulation s(t) = Γ s 0 , u edt (t), t starts with an initial state s 0 := s(0), the output is calculated via y edt (t) = Φ (s(t), u(t), t) and combines the simulation state s of all components of the EDT as well as its input u. Γ contains all algorithms necessary to carry out the simulation. These algorithms are provided by the different EDT components (e.g. the DPS) or by the overall simulator itself. In the latter case, they rely on and combine the models provided by the EDT components (e.g. rigid body dynamics or sensor simulation).</p><p>To simulate the ReconCell, we add EDTs of e.g. the robot, the grippers, the work pieces, and the work cell environment to a scenario model. This can be done independently from the concrete modeling of each EDT. Only the semantics and the inputs and outputs must be defined before. In our example, the simulated technical asset of robot and gripper is modeled using rigid body dynamics techniques, the sensors use specialized sensor simulation approaches and the DPSs are implemented using MATLAB/Simulink. Having done so, the set of EDTs  forms the virtual ReconCell scenario, which is ready to be simulated (see figure <ref type="figure">6</ref>) 1 . The simulation state vector of the scenario s scenario (t) = s edt,1 (t), s edt,2 (t), ... combines the states of all participating EDTs, so that the resulting simulation task is given via s scenario (t) = Γ s scenario 0 , t .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Modelling Experimentable Digital Twins</head><p>EDTs can be of varying complexity, i.e. they do not always contain all components as shown in figures 5 and 6. The EDT e.g. only consists of the simulated technical s sasset sys (t), while only two other EDTs have a HMI (the 1 Please note that there are no connections between some of the EDTs. The connections between the robot's actuators and sensors are part of the EDT of the robot and are not visible from this level of detail. Other interactions do not need to be modeled explicitely. This includes the mutual interdependency between the movements of workpiece and robot or the influence of robot movements on camera images. console and the UR10 robot). But how are they modeled? Here MBSE comes into play. It provides a systematic approach to analyze and model even complex systems. The result of the MBSE process are e.g. SysML diagrams, which are the starting point for the modelling activities from the simulation point of view. They deliver the structure, the connections between the distinct "blocks", and the behavior of some of the blocks. In addition to this, requirements are defined the developed system has to fulfill which can in turn be tested using different test cases. To enable simulation, these blocks contain models M edt = (a, A, Φ) providing parameters a used by superordinated simulation algorithms Γ (like rigid body dynamics, sensor simulation) or the component algorithms A themselves (e.g. motor behavior modeled using MATLAB). All those algorithms must follow the structure depicted in figure <ref type="figure">7</ref>. From our experience all major simulation algorithms necessary, such as for industrial production or space robotics, fit in this scheme 2 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Simulating Interacting Experimentable Twins</head><p>But how can we simulate such a network of EDTs to get s scenario (t)? The Virtual Testbed (VTB) approach delivers the necessary building blocks. VTBs are the run-time environment for EDTs and allow the entire network of interacting EDTs to be simulated within one single integrated frameworkthe VTB. The basis for scenario simulation in VTBs is an automatic model analysis process. Figure <ref type="figure" target="#fig_5">9</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>can be directly</head><p>It is important to mention that the main focus of this article is neither to propose new simulation algorithms nor to develop new co-simulation interfaces. We are using the developments available so far but add a new methodology on top of them. To model the single components (of the EDTs), we use standard simulation technology as provided by MATLAB, ANSYS, OpticStudio, etc., use standard interfaces like FMI if available or proprietary interfaces (like the MATLAB-C-Interface or the DDE interface of OpticStudio) if necessary and combine this with our own simulation algorithms e.g. in the field of rigid body dynamics and sensor simulation. and fully automatically derived from figure <ref type="figure">6</ref>. Part A shows the various components of all EDTs with their explicitely modeled data flows and interactions. For more complex systems, the shown matrix can be significantly larger. Each block represents an element from the EDT formalism, i.e. technical asset (yellow), DPS (blue) or HMI (green), as described in section III-A and shown in figure <ref type="figure">5</ref>. Columns represent simulation domains, while rows are EDTs. All shown components have a real counterpart in the physical world and a virtual representation as part of EDTs inside the VTB. 3  In this example we have three types of algorithms, rigid body dynamics, sensor simulation, and data processing algorithms. When loading the full scenario model, the simulator assigns all rigid body dynamics models to the rigid body simulation so that they can interact with each other (figure <ref type="figure" target="#fig_5">9</ref>, part B). In addition to this, both rigid body dynamics and sensor simulation work on the same geometric model; hence the simulated sensor data reflects the movement of the EDTs 4 . After having grouped components belonging together, the resulting network is analyzed by the scheduler of the simulation system (figure <ref type="figure" target="#fig_5">9</ref>, part C) and simulated 5 . To guarantee a consistent and performant data transfer between the different simulation algorithms, the simulation results are routed via a 3 A detailed explanation of figure <ref type="figure" target="#fig_5">9</ref> Part A follows: The human operator's commands are simulated by a MATLAB script; they are routed via the cells operator console. A camera is the only active optical sensor in this (simplified) example. The other EDTs contribute to the camera images only by their visible hull geometry (VHs) and by environmental light sources. Assembly processes for this ReconCell are programmed via Actionblocks (a visual programming framework, see <ref type="bibr" target="#b18">[20]</ref>) and executed by the UR10 robot controller, which is simulated in MATLAB/Simulink. Finally, active cell components (UR10 robot, gripper, configurable hexapod mount) move according to their dynamic models. The EDT of the workpieces do not move actively on their own (they can only be grabbed or placed), hence they have no excplicit data flow connection modeled. 4 Coming back to FMUs, they are perfect for the columns "MAT-LAB/Simulink, HMI, ActionBlocks", which is the typical usage scenario for FMUs. From the overall system perspective, the subsystems are "black boxes", their interaction is defined via the inputs and outputs. FMUs cannot be used for the columns "Dynamics, Optical Sensors", because here the models of the subsystems themselves (the "bodies" used for sensor simulation and rigid body behavior) are combined into a new simulation component. 5 The resulting simulations run in real-time or may be faster or slower than real-time, depending on the complexity and amount of the components and models involved. To "scale" this, EDTs may provide different variants of models like very detailed or simplified model which can be used in different types of simulations (e.g. detailed analysis vs. interactive training simulators). It's up to the user to select the simulation algorithms (and this way the models) to use; the simulator then combines the necessary parts.</p><p>Versatile Simulation Database (VSD, <ref type="bibr" target="#b14">[16]</ref>) of the simulation system (figure <ref type="figure" target="#fig_5">9</ref>, part D). The VSD is a real-time database which is able to store any data structure which can be modeled by UML class diagrams.</p><p>To enable the realization of comprehensive and close-toreality EDTs, the availability of a simulator offering the performance characteristics necessary to set up such VTBs is crucial for the realization of EDTs (see <ref type="bibr" target="#b5">[5]</ref>). Therefore, we developed a new architecture for simulation systems (containing e.g. the VSD concept) leading to a reference implementation called VEROSIM <ref type="bibr" target="#b14">[16]</ref> which is the basis of all examples shown in this article. This framework itself is purely abstract, so that it can act as the basis for the implementation or integration of virtually any type of simulation algorithm or tool.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Experimentable Digital Twins in Hybrid Scenarios</head><p>Connecting (parts of) EDTs simulated in VTBs with real assets leads to hybrid scenarios in which simulation technology in the form of EDTs is used in direct connection with the real hardware. Easily replacing real/virtual components by their virtual/real counterparts is possible because an EDT replicates its real counterpart not only with regard to its input/output behavior, but also with regard to its internal structure.</p><p>Hybrid scenarios allow on the one hand for a seamless bidirectional transition between virtual and the corresponding real systems to realize complex control algorithms (Simulationbased Control e.g. for the realization of robot controllers (mobile robots and robot manipulators) knowing and interacting with their environment (see figure <ref type="figure" target="#fig_10">13</ref>) or the realization of intelligent sensors with integrated sensor data processing) or innovative user interfaces (Simulation-based UI e.g. for the realization of driver assistance systems). Here, the approach follows the goals of Rapid Control Prototyping <ref type="bibr" target="#b15">[17]</ref> and Virtual Commissioning <ref type="bibr" target="#b4">[4]</ref> and provides an implementation for this. The benefit now is, that all the important parts of the simulation infrastructure are now available not only for development but also on the target system, so that we can use this infrastructure for algorithm implementation and we can run the original simulation model on the target system without code conversion which eases debugging and communication.</p><p>On the other hand this allows to use simulations to make systems situation aware and "intelligent" (Mental Models or Simulation-based Reasoning, <ref type="bibr" target="#b1">[2]</ref>). Here, EDTs store all the in- formation of the environment and VTBs simulate the behavior of the system and its environment in an experimentable model and this way enables the system to test action alternatives and to assess the behavior of other surrounding "agents". Figure <ref type="figure" target="#fig_10">13</ref> illustrates the basic idea. The DPS of the EDT of the robot is connected to the real robot. The connection between the digital and real twins takes place via their respective communication infrastructures involved (the depicted connections of the inputs and outputs are thus realized technically via the illustrated dotted lines). EDT components can thus take over tasks in real systems fully transparently. This applies to the data processing system, as well as to the user interface, as well as to the combination of these systems. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. EDTS AS ENABLER</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Simulation-based Systems Engineering</head><p>MBSE is an emerging technology enabling system engineers to systematically exploit, model, communicate and verify the functionalities of a new system in a formal way. Having done so, the simulation of these models is the natural next step but requires the integration of MBSE with detailed simulation models which is a major show-stopper today. Simply modelling the behaviour of each SysML block (see figure <ref type="figure">7</ref>) inside these blocks and model the interactions by connecting these blocks is not feasible and practically impossible, because the resulting diagrams become far too complex and unman-<ref type="foot" target="#foot_1">6</ref> . EDTs close this gap as illustrated above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Simulation-based Optimization</head><p>By harnessing the power and flexibility of EDTs and VTBs, Simulation-based Optimization (SbO) tasks can be executed that are almost impossible to carry out without EDTs. In the following example, a ReconCell contains two UR10 robots which are used to assemble an automotive headlight housing. Due to quality assurance requirements, good visibility of the workpiece throughout the assembly process must be ensured. The resulting engineering problem where to place the camera to maximize visibility is now solved using SbO with EDTs. ReconCellOptim For this, all workpieces are marked with a distinct unique color (in this case blue) so they can easily be identified during image processing. This is done by changing the workpiece EDT's material color, i.e. by modifying the according a i of s sys sasset (0). Figure <ref type="figure" target="#fig_7">10</ref> shows simulated camera images and illustrates how the workpiece is sometimes temporarily occluded by robot arms or cell struts. Now let B ∈ N be the total number of blue pixels observed during a full assembly task, which we want to maximize using the objective function f (p i ) = B:</p><formula xml:id="formula_0">p * i = arg max pi ∈ P f (p i ) for i = 1, . . . , N<label>(1)</label></formula><p>Here, the parameters p i ∈ P with P = [-90 • , 90 • ] are possible camera pan angles for different mount points in the cell. Hence, we solved N instances of (1) using different optimization algorithms and chose the overal winner as best mount option. Figure <ref type="figure" target="#fig_8">11</ref> depicts results of the optimization runs using the Powell algorithm <ref type="bibr" target="#b21">[23]</ref>, which worked best compared to several others tested. With N = 10, the optimizations required about 500 full simulation runs. One assembly task takes about three minutes to complete, which can be simulated several times faster than real-time on a modern workstation with a dedicated 3D GPU. In our configuration, the complete optimization took less than four hours. Step time for dynamic simulation was dt = 10 ms, while optical sensor simulation was executed with dt = 100 ms. The result yields the most appropriate cell configuration for a given task fully automatically. The results can be directly transferred to the physical cell by mounting the camera accordingly. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Simulation-based Control</head><p>At several points in the engineering process of a Cyber Physical System, engineers need to make the transition from the VTB to the real world and back to the virtual world. EDTs complement this by e.g. providing a methodology to seamlessly transfer controllers or user interfaces of EDTs to their counterpart, the real technical assets, named Simulationbased Control (SbC). In terms of the ReconCell scenario, SbC is used to realize smart controllers for the UR10 robots used here (see figure <ref type="figure" target="#fig_9">12</ref>). Figure <ref type="figure" target="#fig_10">13</ref> shows the idea of SbC, the use of hybrid scenarios as introduced in section III-D to realize DPS for real technical assets, here used for the UR10 robots. From an EDT point of view (see figure <ref type="figure" target="#fig_10">13</ref>), the robots consist of torque sensors and position encoders (sensors) as well as servo motors (actuators) for each joint and a system model describing the robots dynamic behavior (system). In addition to this, the robots have an HMI as well as a DPS, too. This EDT can be operated by  input values for control mechanisms implemented in the DPS for a specific scenario. The simulated DPS holds a "scenario", which in this case is a recursive EDT of the UR10 working in its environment (see figure <ref type="figure">6</ref>). External sensor data is used to find the workpieces to be assembled, to calculate their exact positions and orientations, and to integrate them into this scenario model. It therefore holds the system state determined based on measurements from the physical system. From a systemtheoretical point of view, this internal scenario builds upon (e.g.) observers <ref type="bibr" target="#b20">[22]</ref> to get a deep insight into the system behavior. In the ReconCell context, it is used for sensor fusion, path planning and automatic collision avoidance-all realized using EDTs and a "Real-time VTB". The scenario model provides all necessary data for this and allows to test the calculated plans before and during execution.</p><p>When this simulated DPS is used to control the real robot, it is directly connected to the real machine by simply reconnecting the same (virtual) ports of the DPS previously connected to the (virtual) ports of the virtual machine to the (real) ports of the real machine; the simulated controls now control the robot movements (figure <ref type="figure" target="#fig_10">13</ref>). An important precondition for this-besides a real-time simulation of the DPS-are (from a structural point of view) identical interfaces between (virtual) DPS and (virtual/real) machine as well as a real-time data exchange accomplished by an appropriate interface between simulation and the physical system. In general, both the real machine as well as the EDT, utilize corresponding communication infrastructures K to pass sensor data and control signals for actuators between the technical asset and the DPS. For SbC, those communication infrastructures are connected via a real-time interface to exchange data between the real technical asset and the simulated DPS (figure <ref type="figure" target="#fig_10">13</ref>, red dashed line). As a result, the EDT on the left can now access the sensor data provided by the real machine to generate and feed back control signals for the actuators in the real technical asset. Figure <ref type="figure" target="#fig_11">14</ref> gives an example for the output of this simulated DPS moving the real robot. The DPS runs inside a real-time-VTB using the real-time operating system QNX and accepts set points as inputs, position updates are sent to the robot to be executed by the actuators (solid). The graph also shows the axis positions of the real robot sampled during a reconfiguration process of the robotic work cell (dashed). The offset between commanded and measured positions originate from the 4 ms timing constraint for the robot control. Simulation provides all the necessary information for the control scheme (e.g. current state of passive fixtures) that would not be available to the real machine if it was operated separately. In this example, the reconfiguration by itself becomes a complex task if viewed from a conventional robot controller's perspective. Such a controller requires a large number of poses which have to be taught manually. In addition to this, it has to manage all possible work cell configurations for the manipulation of a variety of work pieces. Due to the application of Simulationbased Control utilizing the state information provided by the EDT, collision free trajectories that are based on a minimal set of reference poses, like the one shown in figure <ref type="figure" target="#fig_11">14</ref>, are generated fully automated in the virtual environment. Control schemes can become arbitrarily complex considering the ability of the presented concept to interconnect a variety of EDTs modeling large application scenarios. Therefore, SbC is the basis for the realization of Simulation-based Reasoning <ref type="bibr" target="#b1">[2]</ref>. The scenario model inside the DPS serves as a Mental Model integrating all knowledge of the controlled system itself as well as its environment allowing to implement Situation Awareness concepts (perception of environmental elements and comprehension of their meaning, managing the resulting environment model, projection of the effects of changes using simulation, ...).</p><p>V. CONCLUSION This paper introduces the concept of EDTs as a new structuring element for Simulation-based Systems Engineering processes and their interdisciplinary and cross-domain simulation in VTBs. This enables comprehensive simulations on system level 7 , seamlessly connects virtual and real worlds in hybrid scenarios 8 , introduces new structures and processes to 7 Today, setting up such scenarios at a practically relevant scale leads to a lot of work necessary for each individual scenario. The model analysis process deriving simulation models from the network of EDTs by analyzing the models of the individual EDTs, their overlaps and their interactions and deriving an experimentable overall model from the scenario to be simulated adresses this problem. 8 The concept of Rapid Control Prototyping is known for more than 10 years, tools like Matlab/Simulink provide a consistent toolset for this. Virtual Commissioning approaches are used especially in the production sector and are supported by tools like ISG-virtuos. But today, realizing xin-the-loop scenarios requires to set up new models for each individual application. EDTs are a one-to-one replica of a real world asset-also from a structural/architectural/interface point of view. This allows to replace each EDT and each EDT component by its real counterpart at any time during the development process by changing the corresponding connections. No code conversion is necessary. MoreApplicationAreas Fig. <ref type="figure">15</ref>. Examples for application areas of EDTs beyond industrial production covered so far (f.l.t.r.): Automotive, space robotics, forestry, and intralogistics consistently use simulations in varying application scenarios throughout the life-cycle 9 , and thus streamlines the engineering process in the era of Industry 4.0.</p><p>The models of the EDTs extend the MBSE system model and are directly to e.g. SysML blocks, requirements, and testcases <ref type="bibr" target="#b17">[19]</ref>. This way, EDTs greatly contribute to the overall vision of MBSE concerning the formalized application of modeling to support the entire life cycle, integrating modeling and simulation into a consistent process for small components as well as for large systems of systems as planned by <ref type="bibr" target="#b19">[21]</ref> for 2025. But still missing is an approach allowing for a seemless and practical bidirectional connection between MBSE and simulation. EDTs are the missing piece of the puzzle to do this. Using EDTs, the power of today's simulation technology can be directly used during the SE process.</p><p>Following the EDT concept, new scenarios can be configby selecting and configuring the participating EDTs and (if necessary) adding the new EDTs, only 10 . It is up to the VTB infrastructure to derive the experimentable scenario.</p><p>The concepts of EDTs and VTBs have proven their feasibility when realizing a large variety of different applications. The initial application spectrum in space, industrial production, and the environment has recently expanded e.g. into the area of construction and facility management as well as automotive (see figure <ref type="figure">15</ref>). All these applications clearly show that the approach presented in this paper is feasible and promising.</p><p>But what are the consequences for the development of components, systems, or systems of systems? The answer is threefold. First of all, use EDTs for the development of future systems. Providing EDTs and using simulation (e.g. during the MBSE process, for development, characterization, verification, validation, and optimization) should become as natural as developing the hardware and/or software itself. This holds great promises concerning efficient development, quality, performance, reuse, and technology transfer for new components and significantly raises the modeling and simulation power of simulation technology. The continuous and integrated use of simulation technology in a Simulation-based Systems Engineering process leads to cost-efficient development processes, better designs, and more reliable systems. 9 Today, we have everything necessary to solve individual problems but no approach covering the entire scenario to be simulated and no process leading to this scenario. This article presents a new holistic approach integrating the various existing approaches used so far (MBSE, simulation algorithms and tools, co-simulation approaches, x-in-the-loop, VR, ...). Up to our knowledge, there is no approach available which integrates MBSE, various simulation approaches, Industry 4.0 and x-in-the-loop concepts to realize the various simulation-based applications in all these disciplines and domains. 10 Each simulation tool today offers model libraries to simplify and speed up the process to set up a new model. But these libraries are tool specific. Necessary is an approach allowing this on system level incorporating different simulation approaches. Secondly, bring simulation technology to the real system. EDTs as well as VTBs provide key technologies for the development of intelligent systems. They ease the development of complex algorithms and their transfer to the real system. This allows to realize "safe systems"-i.e. systems which supervise themselves simulation-and mental models, a key component for intelligent systems 11 .</p><p>Thirdly, continue with the development of the overall approach. Today, we can provide a reference implementation which is ready to be used in a variety of application areas. But there is still a lot of work to do e.g. concerning the development of simulation algorithms (such as flexible or soft bodies), for the integration of different simulation algorithms, to integrate VTBs in development infrastructures, and so on.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Fig.2. In Industry 4.0, simulations are not only used for engineering but have to address various different aspects.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. The combination of simulation technology, Model-based Systems Engineering and Industry 4.0-concepts leads to the concept of "Experimentable Digital Twins" and various benefits for the different domains.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .Fig. 6 .</head><label>56</label><figDesc>Fig. 5. The basic structure of EDTs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 8 (Fig. 7 .</head><label>87</label><figDesc>Fig. 7. Structure of the single components (blocks) of EDTs (based on [6]).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Automatic model analysis process. A) EDT components and simulation algorithms with their explicitely modeled data flows and interactions. Columns are simulation functions, rows are EDTs. VHs = Visible Hulls, RBs = Rigid Bodies. B) Automatic grouping by simulation functions, e.g. of sensor simulation and dynamics. C) Resulting simulation network, executed by the scheduler. D) Simulation results are routed via the Versatile Simulation Database (VSD).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>FOR SIMULATION-BASED X (Possibly hybrid) networks of interacting EDTs simulated in VTBs are the basis for diverse "Simulation-based X" applications, including new methods of Simulation-based Systems Engineering as well as Simulation-based Optimization, Reasoning, Verification &amp; Validation, Control, and HMI [5].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Simulated camera views from within the robot work cell during production. The workpiece is marked blue. The right image was taken shortly after the left one.</figDesc><graphic coords="6,311.98,324.00,123.82,92.87" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Optimization results for (1). Lines show parameter sweeps f (p i ) ∀ i. Crosses indicate evaluations by the Powell optimizer [23].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Real setup of the virtual ReconCell shown in figure 1. All controllers are implemented via Simulation-based Control.</figDesc><graphic coords="7,48.96,465.62,251.06,154.89" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. Networking EDTs and their physical counterparts in Simulationbased Control scenarios, here shown for a UR10 robot in the ReconCell.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. Actual sampled UR10 positions during a reconfiguration process in ReconCell (solid: commanded, dashed: measured).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 16 .</head><label>16</label><figDesc>Fig. 16. Life-cycle spanning Simulation-based Systems Engineering using EDTs.</figDesc><graphic coords="9,69.20,171.00,79.51,66.26" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>J. Rossmann, M. Schluse, M. Priggemeyer, and L. Atorf are with the Institute for Man-Machine Interaction of RWTH Aachen University, Germany. e-mail: {rossmann, schluse, priggemeyer, atorf}@mmi.rwth-aachen.de</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_1"><p>Imagine for example all the connections necessary to model the interactions between the workpieces and their environment including the robots, their grippers etc.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENT</head><p>The ReconCell project receives funding from the European Union's Horizon 2020 research and innovation program under grant agreement No. 680431.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="www.reconcell.eu" />
		<title level="m">A Reconfigurable Robot Work Cell for Fast Set-up of Automated Assembly Processes in SMEs</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<author>
			<persName><forename type="first">J</forename><surname>Rossmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kaigom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Atorf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rast</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Grinshpun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schlette</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mental Models for Intelligent Systems: eRobotics Enables New Approaches to Simulation-Based AI</title>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="volume">28</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Coupled experiments with real components are relevant for development as well as for production stages during the life-cycle. During development, SbC allows for prototyping data processing algorithms and carrying out virtual commissioning. During production, SbC allows to implement controllers which have to cope with detailed knowledge about the asset itself and/or its environment as basis for calculations or simulations. This is the starting point e.g. for the realization of intelligent systems which need to evaluate decision alternatives or asset administration shells exposing highly detailed knowledge (including its behavior) about the asset to the digital world. The major benefits of SbC are the quick and seamless transition between virtual and hybrid scenarios without the need to change the models involved (only redirect some connections), the full access to the original controller implementation during real-world operation and the possibility to use the simulator infrastructure to implement controllers</title>
		<imprint/>
	</monogr>
	<note>which have to cope with 3D environment as basis for calculations or simulations</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Experimentable Digital Twins for Model-Based Systems Engineering and Simulation-Based Development</title>
		<author>
			<persName><forename type="first">M</forename><surname>Schluse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Atorf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rossmann</surname></persName>
		</author>
		<idno>978-1-5090-4622-5</idno>
	</analytic>
	<monogr>
		<title level="j">IEEE SysCon</title>
		<imprint>
			<date type="published" when="2017">2017. 2017</date>
		</imprint>
	</monogr>
	<note type="report_type">Montreal. ISBN</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title/>
		<ptr target="www.vdi.de/3693" />
	</analytic>
	<monogr>
		<title level="j">Virtual Commissioning</title>
		<imprint>
			<biblScope unit="volume">3693</biblScope>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Kadry</surname></persName>
		</author>
		<title level="m">E-Systems for the 21st Century: Concept, Developments, and Applications</title>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">El</forename><surname>Hami</surname></persName>
		</editor>
		<imprint>
			<publisher>Apple Academic Press</publisher>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Discrete-Event System Simulation</title>
		<author>
			<persName><forename type="first">J</forename><surname>Banks</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName><surname>Matlab/Simulink</surname></persName>
		</author>
		<ptr target="www.mathworks.de/products/simulink/" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Principles of object-oriented modeling and simulation with modelica 2.1</title>
		<author>
			<persName><forename type="first">P</forename><surname>Fritzson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
			<publisher>Wiley</publisher>
			<biblScope unit="page">2003</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Available: www.comsol.com [11] The Unreal game engine</title>
		<author>
			<persName><surname>Comsol</surname></persName>
		</author>
		<ptr target="www.unrealengine.com" />
		<imprint>
			<date type="published" when="2017">2017. 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName><surname>Simmechanics</surname></persName>
		</author>
		<ptr target="www.mathworks.de/products/simmechanics/" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<ptr target="www.coppeliarobotics.com" />
		<title level="m">Coppelia Robotics Software</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="V" to="rep" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Open Source Robotics Foundation</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note>Gazebosim. Online]. Available: gazebosim.org</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Simulation of systems in materials handling, logistics and production-Fundamentals</title>
		<author>
			<persName><surname>Vdi-Standard</surname></persName>
		</author>
		<ptr target="www.vdi.eu/3633" />
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="volume">3633</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<author>
			<persName><forename type="first">J</forename><surname>Rossmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schluse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schlette</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Waspe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">A New Approach to 3D Simulation Technology as Enabling Technology for eRobotics</title>
		<meeting><address><addrLine>Brussels</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Abel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bollig</surname></persName>
		</author>
		<title level="m">Rapid Control Prototyping</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<author>
			<persName><surname>Wgp-Standpunkt</surname></persName>
		</author>
		<title level="m">Wissenschaftliche Gesellschaft für Produktionstechnik WGP e</title>
		<imprint>
			<date type="published" when="2016">Industrie 4.0 (2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Integrated model-based System Specification and Simulation: Case Study on Sensor Design for extraterrestrial Applications</title>
		<author>
			<persName><forename type="first">J</forename><surname>Rossmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schluse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rast</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hoppen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Atorf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dumitrescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bremer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hillebrand</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Stern</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Schmitter</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017. 2017</date>
			<pubPlace>WInTeSys; Paderborn</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A visual programming framework for complex robotic systems in micro-optical assembly</title>
		<author>
			<persName><forename type="first">C</forename><surname>Schlette</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Losch</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rossman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. International Symposium on Robotics</title>
		<meeting>International Symposium on Robotics</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="750" to="755" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Systems Engineering Vision 2025</title>
		<author>
			<persName><surname>Incose</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Observing the state of a linear system</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Lueneberger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Transactions on Military Electronics</title>
		<imprint>
			<date type="published" when="1964">1964. 1964</date>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="74" to="80" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">An efficient method for finding the minimum of a function of several variables without calculating derivatives</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Powell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The computer Journal</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="155" to="162" />
			<date type="published" when="1964">1964</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
