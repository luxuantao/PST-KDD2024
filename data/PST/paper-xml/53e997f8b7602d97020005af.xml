<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Genetic Set Recombination and its Application to Neural Network Topology Optimisation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Nicholas</forename><forename type="middle">J</forename><surname>Radcliffe</surname></persName>
							<email>njr@epcc.ed.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="department">Edinburgh Parallel Computing Centre</orgName>
								<orgName type="institution">University of Edinburgh</orgName>
								<address>
									<addrLine>King&apos;s Buildings</addrLine>
									<postCode>EH9 3JZ</postCode>
									<country key="GB">Scotland</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Genetic Set Recombination and its Application to Neural Network Topology Optimisation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">5B4BBC2CD725C975C2752A98DEC06AB7</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Forma analysis is applied to the task of optimising the connectivity of a feed-forward neural network with a single layer of hidden units. This problem is reformulated as a multiset optimisation problem and techniques are developed to allow principled genetic search over fixed-and variable-size sets and multisets. These techniques require a further generalisation of the notion of gene, which is presented. The result is a non-redundant representation of the neural network topology optimisation problem together with recombination operators which have carefully designed and well-understood properties. The techniques developed have relevance to the application of genetic algorithms to constrained optimisation problems.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>While genetic algorithms have been applied to a number of problems in neural networks, there are severe difficulties with this endeavour. This is significant for two reasons. First, many of the problems in neural networks are important in their own right and do not presently have any wholly satisfactory means of resolution. A good example of this is the choice of network topology. Secondly, the failure modes of the genetic algorithm seen in neural network applications are common to a broader class of problems, and their study can yield more general insights.</p><p>This paper is a study in the application of forma analysis (Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>) to this and related problems. It begins in section 2 with a brief review and a discussion of the difficulties with previous genetic approaches to problems in neural networks. This is followed, in section 3, by a short review of schema-and forma analysis and a discussion of the "permutation problem" for neural networks. (Although the paper is intended to be self-contained, the reader may find it easier to follow after reading Radcliffe <ref type="bibr" target="#b22">[23]</ref>.)</p><p>The core of the paper, sections 4, 5 and 6 is a study of the application of forma analysis to optimisation problems for which the solution is a set or multiset. Both fixed-and variable-size sets and multisets are considered. Section 4 reviews naïve approaches to these problems, section 5 uses forma analysis to gain further insights and to develop a more satisfactory formulation of the problem, and section 6 is a study of the general phenomenon of "non-separability" of formae. The reason for studying these problems is that in section 7 neural network topology optimisation problems are reformulated as multiset optimisation problems, and the theory developed in the preceding sections becomes directly applicable. This section includes a discussion of sub-parameter-level recombination with particular reference to hidden nodes.</p><p>The paper closes with a summary and discussion of the results presented, and draws out some of the wider implications for genetic search in other domains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Genetic Approaches to Neural Networks</head><p>Genetic algorithms are increasingly being applied to problems in neural networks. Rudnick <ref type="bibr" target="#b23">[24]</ref> and Weiss <ref type="bibr" target="#b34">[34]</ref> have produced excellent bibliographies for this field in 1990. A number of approaches can be distinguished, all of which have had limited success, and most of which have concentrated on Rumelhart-type feed-forward networks. The two primary areas of activity have been:</p><p>1. Topology Optimisation.</p><p>The genetic algorithm is used to select a topology (pattern of connectivity) for the network which is then trained using some fixed training scheme, most commonly back-propagation of errors <ref type="bibr">(Rumelhart [25]</ref>). This approach is inherently computationally demanding because the complete conventional training phase (itself computationally intensive) is required simply to evaluate the fitness of a chromosome (network topology). The approach remains reasonably attractive despite this because of the paucity of principled alternative methods for selecting the network topology. Representative studies in this class include those of Miller, Todd &amp; Hegde <ref type="bibr" target="#b14">[15]</ref>, Harp, Samad &amp; Guha <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b9">10]</ref>, Whitley, Starkweather &amp; Bogart <ref type="bibr" target="#b39">[39]</ref>, M ühlenbein <ref type="bibr" target="#b17">[18]</ref> and Hancock <ref type="bibr" target="#b8">[9]</ref>. This class of problems is addressed in section 7 of the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Genetic Training Algorithms.</head><p>Selecting weights for a neural network is itself an optimisation problem, 1 and a genetic algorithm can naïvely be applied to it, using an inverse error as the measure of utility (fitness). Whitley and his co-workers <ref type="bibr" target="#b35">[35,</ref><ref type="bibr" target="#b39">39,</ref><ref type="bibr" target="#b38">38]</ref> have done much work in this area, and the study by Montana and Davis <ref type="bibr" target="#b15">[16]</ref> is especially ingenious and noteworthy.</p><p>Hybrid approaches have also been discussed (Radcliffe <ref type="bibr" target="#b20">[21]</ref>), and there have been studies in which genetic algorithms have been used to tune the parameters of other training schemes, including initial weight configurations <ref type="bibr">(Belew,</ref> McInerny &amp; Shraudolph <ref type="bibr" target="#b0">[1]</ref>).</p><p>All of these approaches have associated problems, which have been discussed by Montana &amp; Davis <ref type="bibr" target="#b15">[16]</ref>, Radcliffe <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b20">21]</ref>, Belew et al. <ref type="bibr" target="#b0">[1]</ref> and Whitley et al. <ref type="bibr" target="#b37">[37]</ref>.</p><p>Principal among these, and appearing in many different guises, is a permutational redundancy associated with the arbitrariness of labels of topologically equivalent hidden nodes. Specifically, to take an extreme case, in a fully-connected feed-forward, layered network with a single hidden layer comprising N h units, (figure <ref type="figure" target="#fig_8">1</ref>) there is approximately an N h ! potential redundancy associated with the indistinguishability of networks with relabelled hidden units.</p><p>If the genetic representation (whether it be topologies or weights that form the search space) distinguishes between networks which differ only by the labelling of hidden units, the search space is enormously enlarged. While optima usually become more numerous by a comparable factor, the global nature of genetic search tends to make navigation through the enlarged search space very difficult (Radcliffe <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b20">21]</ref>, Belew et al. <ref type="bibr" target="#b0">[1]</ref>, Whitley et al. <ref type="bibr" target="#b37">[37]</ref> and section 3.2). Genetic algorithms are sensitive to the potential for redundant representations in a way that most other search schemes (for example, gradient techniques and Figure <ref type="figure" target="#fig_8">1</ref>: A fully-connected 5-3-4 layered neural network. Notice that the hidden node labels h 1 ; h 2 ; h 3 are arbitrary (providing that the hidden nodes are identical) giving, in this case, a 3! redundancy in labelling.</p><p>stochastic processes like simulated annealing) are not.</p><p>There are two (related) reasons for this:</p><p>1. local techniques tend to make 'smaller' moves in the search space than those possible under genetic recombination ("crossover");</p><p>2. most techniques maintain only a single solution rather than a population of solutions.</p><p>The relationship between these two points should be clear: the danger is exemplified by the case where two equivalent networks (identical up to a re-labelling of hidden units) can be recombined to produce a child which is not equivalent to them. This is a phenomenon which is not seen in "conventional" genetic search (for example, simple parameter optimisation) and it has been strongly argued elsewhere the problem is highly detrimental to the effectiveness of the search process both in the specific context of neural networks (Radcliffe <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b20">21]</ref>, Belew et al. <ref type="bibr" target="#b0">[1]</ref>) and more generally (Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>).</p><p>3 Schema and Forma Analysis</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Formulation and Principles</head><p>In order to understand the motivations for the ideas put forward in this paper it is necessary briefly to review some of the theory of genetic algorithms.</p><p>Holland's ground-breaking formulation and analysis of genetic algorithms introduced the theoretical framework of schema analysis, and the well-known (if often poorly-expressed) Schema Theorem <ref type="bibr">(Holland [12]</ref>). This formulation applies primarily to k-ary 2   string chromosomal representations for which each locus (site) on the chromosome has a well-defined meaning. 3   In 1985 Goldberg &amp; Lingle <ref type="bibr" target="#b7">[8]</ref> extended Holland's work to cover permutation-based problems (such as the well-known Travelling Sales-rep Problem) through the introduction of o-schemata (see also Goldberg <ref type="bibr" target="#b4">[5]</ref>). More recently, Vose &amp; Leipins <ref type="bibr" target="#b32">[32,</ref><ref type="bibr" target="#b33">33]</ref> and Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref> have independently further generalised Holland's results to take in very much more general objects which Vose calls predicates and Radcliffe terms formae. This paper uses and builds upon Radcliffe's formulation.</p><p>A schema may be viewed as a set of chromosomes which share some specified subset of their genes. Holland introduced a "don't care" symbol to aid the description of schemata, so that the schema 1 0 is the set of all chromosomes which have a one at their first locus and a zero at their third locus. A forma, similarly, may be viewed as a set of chromosomes which are related by some (any) specific characteristic: this need not be the sharing of gene values. 4 It is convenient to regard both schemata and formae as equivalence classes of solutions under given (often implicit) equivalence relations over the representation space C</p><p>(the set of chromosomes).</p><p>One of the central tenets of forma analysis is that formae should be chosen which group together chromosomes coding solutions which might plausibly have similar performance. Having chosen such formae, genetic operators are constructed with a view to manipulating solutions 5 in meaningful ways. Specifically, the aim is to build recombination operators which respect forma membership and properly assort formae (Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>). These terms are explained and illustrated in figures 2 and 3 respectively, and are defined more rigorously in section 6.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Application to Neural Networks</head><p>In addition to increasing the size of the search space, the permutation problem described in section 2 makes 3 Of course, the theorem applies to any string-based representation given suitable coefficients quantifying the disruptive effects of the genetic operators, but the observed schema averages on which the theorem crucially depends will have usefully low variance only-loosely-when the loci have well-defined meanings. This is discussed in detail in Radcliffe <ref type="bibr" target="#b20">[21]</ref>. 4 At least, not as genes are conventionally understood.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">strictly, their chromosomal representatives</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C</head><p>Figure <ref type="figure">2</ref>: A recombination operator is said to respect a set of formae if given any pair of chromosomes and , all of their children under recombination are members of all the formae to which both parents belong. The similarity set of and , written , is the smallest forma which contains them both. This can be constructed as the intersection of all formae containing them both parents, illustrated above. Respect amounts to the requirement that each child produced by recombination lies in the similarity set of its parents. 0 \ 0 C Figure <ref type="figure">3:</ref> A key function of recombination is that it mixes features from parents so that children may exhibit traits inherited from each. Given two parents, and 0 which belong to formae and 0 respectively, it may be possible to generate children which are members of both and 0 (i.e. children which exhibit both the traits captured by the two formae). A recombination operator which will, with non-zero probability, produce a child in the intersection of arbitrary formae and 0 (given parents 2 and 0 2 0 , and assuming that \ 0 6 = 6 e ) is said properly to assort the formae under consideration. It should be noted that the requirements of respect (figure <ref type="figure">2</ref>) and proper assortment are not always compatible, though for many sets of formae (including schemata) they are. respect and proper assortment rather hard to ensure. These differing aspects of the permutation problem will be referred to as the numerical permutation problem and the navigational permutation problem respectively, and will now be considered in turn.</p><p>Throughout the paper a distinction will be made between a "true" search space, S, consisting of the actual structures under consideration (in the present case network topologies) and a representation space (or space of chromosomes) C. Assume that networks with N i input nodes, N o output nodes and up to N h hidden nodes are considered. Then the number of hidden node types is 2 Ni+No , because the connection to each external node may be present or absent.</p><p>The number of network topologies (the size of S) is given by jSj (2 Ni+No ) Nh N h ! :</p><p>(</p><p>(The approximation in this expression is that all the hidden nodes have different connectivities, justifying the N h ! in the denominator. This approximation is good when the number of hidden node types vastly exceeds the maximum number of hidden units, which is almost always the case.)</p><p>For example, if there are ten input nodes, ten output nodes and a maximum of ten hidden nodes jSj (2 20 )   </p><p>The (naïve) representation space C consists of chromosomes which use one bit to mark the presence or absence of a connection between each external node and each labelled hidden node. The size of C is given by the numerator alone, jCj = (2 20 ) 10 1:6 10 60 :</p><p>(3)</p><p>While redundancy which expands the size of the search space by a factor of more than a million for even a problem of modest size may at first seem daunting, the reader may be tempted to reflect that the difference between overall sizes 10 60 and 10 54 seems rather less significant. This feeling may be reinforced by observing that as the size of the network increases, the rate of growth of the size of the search space (characterised by the numerator, 2 true search space S but that the representation used were redundant in the way described (i.e. larger by a factor of around N h !). Ensuring respect and assortment of these formae would be essentially impossible.</p><p>To see this, imagine that there are two beneficial sets of hidden nodes, where a hidden node is considered complete with its set of external connections (figure <ref type="figure">4</ref>). Assume that one chromosome represents a network which contains the first "good" set of hidden units, and that another chromosome codes another network containing the second beneficial set of units.</p><p>Thinking of these sets of units as "building blocks", the aim would be to bring the two together in a single chromosome by recombination. If, however, the hidden unit labels of the first beneficial set of nodes on overlap with the labels of the second set on , recombination will be unable to bring these two sets together, no matter how often it is applied<ref type="foot" target="#foot_0">6</ref> (figure <ref type="figure">5</ref>).</p><p>At one level, this can be viewed simply as an example of the numerical permutation problem, for "all" that the genetic algorithm needs to do is to construct a similar chromosome 0 which is like but has node labels for the second "good" set of hidden units which do not overlap with those of the first set on ; in practice, the difficulty is worse.</p><p>A good way to see this is to consider an increasingly common way of implementing genetic algorithms, in which an isolated sub-population model is used in contrast to the traditional panmictic population. The isolated sub-population model consists of a number</p><formula xml:id="formula_2">h 1 h 2 h 3 h 4 h 5 h 1 h 2 h 3 h 4 h 5 N 1 N 2</formula><p>Figure <ref type="figure">5</ref>: The hidden layers from two networks, N 1 and N 2 , the first of which can be trained to recognise the first half of a training set reliably, and the second of which can reliably be trained to classify the second half. If the label of the hidden node h 3 on the second network were changed to h 2 recombination would be possible without disturbing either subnetwork, whereas this is impossible with the fixed but arbitrary hidden node labels shown. of genetic algorithms each tackling the same search problem with separate populations. There is usually occasional migration of solutions between subpopulations. This approach is important both because of its convenience for parallel implementations and because the maintenance of isolated sub-populations is helpful in delaying loss of genetic diversity, encouraging "speciation" and reducing the number of evaluations required to find an acceptable solution (Norman <ref type="bibr" target="#b18">[19]</ref>, M ühlenbein <ref type="bibr" target="#b16">[17]</ref> etc.) Consider the relatively likely situation in which is drawn from a population on one processor which has largely converged on network topologies which include the first beneficial set of hidden units, and is drawn from a different population in which the second group of units is common. The clash of node labellings will ensure that no matter how often chromosomes from the two populations are brought together, they will be unable to be recombined to produce a solution which contains both the beneficial sets of units. This is the navigational permutation problem. This difficulty could, of course, arise in a similar way in the panmictic population model if the population contained two "species", each possessing one of the two beneficial sets of nodes, provided that the fitnesses of the two species were such that neither would be quickly destroyed by the population dynamics.</p><p>The foregoing discussion should convince the reader that the permutation problem is a serious impediment to genetic search. It is not isolated to neural network problems, though this is the present focus. <ref type="foot" target="#foot_1">7</ref> A major aim of this paper is to suggest a possible representation for neural network topology optimisation which avoids permutational redundancy and allows formae defined in a way independent of hidden unit labels (that is, formae which are well-defined in S, as well as C) to be respected and properly assorted. This formulation builds on the idea of regarding hidden units complete with their external connections as basic entities, and views a network topology as a collection of such hidden nodes. This is the reason for the concentration on set and multiset optimisation problems in the following sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Sets, Multisets and Formae</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Preliminaries</head><p>In order to approach the problem of optimising the topology of a neural network with a genetic algorithm, it is useful first to consider set and multiset optimisation problems, which will form the solution framework. Recall that the distinction between a set and a multiset is that duplication of elements is not significant in sets, so that f a; a; b g f a; b g <ref type="bibr" target="#b3">(4)</ref> whereas in multisets an element may appear more than once fja; a; bj g 6 = fja; bj g:</p><p>(The notation fj j g is used to indicate a multiset.)</p><p>The difference is significant in this context.</p><p>A number of different set and multiset optimisation problems may be distinguished. In general there will be a "universal set", E, from which elements are drawn. The aim is to construct a set or multiset consisting of elements drawn from this universal set so as to optimise some property of the resulting set or multiset. Examples could include 1. finding locations for bottle banks so as to maximise recycling in some area;</p><p>2. selecting members of a committee to make a environmental impact assessment;</p><p>3. choosing connections in a neural network to minimise its average learning time to some acceptable error;</p><p>4. choosing connections in a neural network to maximise its generalisation capability.</p><p>The first could be a set or multiset optimisation problem, according to whether multiple bottle banks were to be allowed at a single location or not. It is likely, for practical purposes that the number of bottle banks would be fixed (and that increasing this number would increase the potential for recycling) so that the size of the solution set would be known at the outset.</p><p>The second case is certainly a set rather than a multiset problem, since no human can appear more than once on a committee, and though the size may be known before-hand (perhaps because of budgetary constraints) it could be that it formed part of the optimisation. (The more people on a committee, in general, the longer decisions take to agree, and there are people whom it may be desirable not to have present or who could contribute nothing useful anyway.)</p><p>In the case of the two neural network problems, the ideal number of connections may artificially be fixed beforehand, but in general will not be known and will itself be subject to optimisation. (It should be remembered that while, in principle, the presence of a connection should never be a problem since its strength (weight) can always be set to zero, in practice a given learning scheme may well be hindered by the presence of a connection.) The trade-off is particularly acute in the case where the goal is to maximise the generalisation capability of the network. In this case, too few connections can prevent acceptable learning, while too many will tend to hinder generalisation through the phenomenon of over-learning. 8   There may also be other complications, such as constraints on the sets, (there must be at least three bottle banks in the Prime Minister's constituency, the committee should not include arch-rivals etc.) but these will not be considered in this paper. Thus four classes of set optimisation problems will be consideredfixed-size sets, variable-size sets, fixed-size multisets and variable-size multisets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Fixed-Size Multisets</head><p>In the case of a fixed-size multiset, the naïve approach is to use a k-ary representation, where k = jEj, the size of the universal set, to allow each locus on a conventional linear chromosome to take any allele from E, and to proceed as normal with a conventional genetic 8 In fact there is evidence that for learning schemes like back-propagation it may be desirable to train with a net of relatively high connectivity and then to prune nodes with highly correlated firing patterns (Seitsma &amp; Dow <ref type="bibr" target="#b28">[28]</ref>, Burkitt <ref type="bibr" target="#b2">[3]</ref>). This complication will not be considered in this paper.</p><p>operators. The problems with this are obvious and profound.</p><p>1. There is a huge redundancy in the representation, i.e. the representation space C is much larger than the real search space S because of the different orders in which the members of the multiset may be written. While the number of optima is also, in general, increased dramatically (though not necessarily by the same factor 9 ) navigation through this larger search space may be very difficult.</p><p>2. More specifically, respect of "meaningful" formae will be difficult to ensure. "Meaningful" formae must group chromosomes only according to properties of the solutions they encode: they should not distinguish between two different representations of a single solution. Thus, formae for sets or multisets should correspond to welldefined sets of solutions (sets or multisets) in S,</p><p>and not be defined only in the representation space C.</p><p>To see that conventional (one-point) crossover cannot respect any set of formae thus defined in the context of multisets, simply note that a trivial consequence of respect is that crossing a solution with itself should result in the same solution; applying conventional crossover to chromosomes ab and ba could result in aa or bb.</p><p>3. If E is large, this representation has a high cardinality, which is traditionally not favoured. This aspect is discussed in section 7.1.</p><p>Whitley <ref type="bibr" target="#b36">[36]</ref> has taken essentially this approach to searching for a winning hand in a simplified form of poker, but he additionally used an operator which reversed the sequences of arbitrary portions of the chromosome. 10 This does not solve the fundamental problems (1 and 2), though it did enable him to find his chosen global optimum very easily. This was an artifact arising from the fact that the optimum happened to be five aces, a pattern which is easy to produce using this form of "inversion". This is discussed in detail in chapter 6 of Radcliffe <ref type="bibr" target="#b20">[21]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Variable-Size Sets and Multisets</head><p>Variable-size sets and multisets can be dealt with in a more traditional fashion with fewer problems. In this case each locus on the chromosome can correspond</p><p>9 For example, optimising over a multiset of size n,if the solution be ncopies of a single element, there is only one representation of the optimum, but n! different representations of solutions in which every element is different. 10 It is important to note that this is not inversion in the traditional sense introduced by Holland <ref type="bibr" target="#b11">[12]</ref>.</p><p>to an element of the universal set E from which elements are to be drawn. The gene values (alleles) can then indicate the number of copies of the element in question to be included in the multiset. In this case, binary genes correspond to set optimisation, and higher cardinality representations correspond to multisets. This approach is both simple and traditional, and the representation scheme described contains no redundancy. It perhaps, however, requires the problem to be viewed in a slightly unconventional way. Thus in the four problems listed above, the positions on the chromosome would represent different possible locations for the bottle banks, the different possible people on the committee, and the connections in the network. In some cases this will lead to very long chromosomes, though this is not necessarily problematical.</p><p>Roughly this approach to neural network topology optimisation was taken by Miller, Todd &amp; Hegde <ref type="bibr" target="#b14">[15]</ref>. In this case, however, there is a further complication already mentioned, which is the equivalence of different hidden nodes under re-labelling. Thus while Miller et al. directly manipulated the binary connection matrices for the neural network, a connection c ij 2 f0; 1g between nodes i and j contributes to redundancy in the representation if either i or j is a hidden node. This problem will be reconsidered in section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Fixed-Size Sets</head><p>Fixed-size sets present more of a problem for traditional schemes. The (wholly inadequate) approach described for dealing with fixed-size multisets could be used if the recombination operator were altered to ensure that multiple copies of elements were never generated. This could be fairly easily achieved if the chromosomes were sorted, though the resulting recombination operator would have to be carefully designed to ensure that it was unbiased.</p><p>Similarly, the approach described for variable-sized sets and multisets could be adopted for fixed-size sets, but with the additional constraint that the sum of the genes should be the number of elements in the set. This could be ensured in a number of slightly unprincipled ways, including random 'helpful' mutations after crossover.</p><p>The approach described in the next section obviates the need for such manipulation, and can be extended to deal with the other classes of set and multiset optimisation problems discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Set and Multiset Recombination</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Random Respectful Recombination</head><p>Radcliffe <ref type="bibr" target="#b22">[23]</ref> introduced a class of random, respectful recombination (R 3 ) operators, which are defined with respect to specific sets of formae and which are guaranteed both to respect and properly to assort those formae whenever these two conditions are compatible. 11  The R 3 operator simply makes a uniform, random choice over the members of the similarity set (figure <ref type="figure">2</ref>) of the two parents undergoing recombination.</p><p>It is easy to see that R 3 fulfills these claims. It plainly respects the formae since respect amounts precisely to the condition that all children be members of the similarity set of their parents (figure <ref type="figure">2</ref>). The requirement that respect and proper assortment be compatible is therefore precisely the requirement that the solutions which proper assortment requires be capable of generation by the recombination operator lie in the similarity set of the two parents. Thus any operator which chooses every element from the similarity set with some non-zero probability, and never generates any other, must respect and properly assort the formae, provided that this is possible. 12   In the light of this, the essential requirement is to construct suitable formae for set and multiset optimisation problems. The four classes of set and multiset problems identified in section 4.1 will now be discussed in turn, suitable formae for them will be suggested and the R 3 operator and others will be constructed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Fixed-Size Sets (Attempt I)</head><p>The most obvious definition of formae for set problems (whether fixed-size or otherwise) is that they specify elements which the solution must contain. This is very convenient, but requires rather careful notation to avoid subtleties.</p><p>Let the universal set (from which all elements are drawn) be E. Then, assuming that the set size is fixed to be N, the search space S is a subset of the power set 13 P(E). Specifically,</p><formula xml:id="formula_4">S = E j j = N :<label>(6)</label></formula><p>11 A set of formae which can be simultaneously respected and properly as- sorted is said to be separable, and a recombination operator which achieves this is said to separate the formae. 12 This is not the same as saying that every operator which separates a set of formae must be capable of generating every solution in the similarity set of the two parents; the condition is sufficient but not necessary. 13 The power set of a set A is the set of all subsets of A. A forma is then a subset of S, and the set of all formae is subject to P(S): <ref type="bibr" target="#b6">(7)</ref> More precisely, will be defined by = S 9 E E : ( 2 () E</p><p>) : <ref type="bibr" target="#b7">(8)</ref> This says that every forma has an associated description set E . This description set consists of the members of E which a solution must contain in order to be an instance of the forma . It will be convenient to use the notation h i for the description set E . Figure <ref type="figure" target="#fig_0">6</ref> illustrates the general idea.</p><p>An example of a low precision 14 forma with the description set h i = fag is = 2 S fag :</p><p>(9)</p><p>14 The precision of a forma is similar to the order of a schema, and is defined in Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>. Essentially, high precision formae are small (contain few members) and low precision formae are large (contain many members).</p><p>The precision of a schema is 2 o , where o is the order of the schema.</p><p>Notice that the description set of the intersection of two formae is the union of their description sets, h \ 0 i h i h 0 i: <ref type="bibr" target="#b9">(10)</ref> Recall that the similarity set of two solution sets is the intersection of all formae which contain them. It should be clear that this, the smallest forma containing solution sets and , is the forma whose description set is their intersection:</p><formula xml:id="formula_5">h i \ :<label>(11)</label></formula><p>Recall also that, quite generally, the R 3 operator produces a child by randomly selecting a member from the similarity set of the two parents. Thus, in this case, given two parents and , R 3 chooses a random set which contains their intersection. For example, if E = f a; b; c; d; e;f g <ref type="bibr" target="#b11">(12)</ref> and N = 3, the similarity set of fa; </p><p>Thus R 3 applied to fa; b; cg and fa; d; eg picks one of these ten sets, each with probability one tenth.</p><p>This operator may seem a little odd, in that it can produce a solution set containing an element which neither of the parent sets contains: this is addressed in section 5.4. Of more immediate concern is the observation that R 3 fails properly to assort the formae as specified. To see this, simply observe that fa; b; cg is a member of the forma described by h i = fb; cg, and fa; d; eg is a member of the forma described by h 0 i = fdg, but that R 3 cannot produce a member of the intersection of these formae \ 0 , because h \ 0 i = fb; c; dg, and R 3 will always pick a member of the similarity set given in equation 14. This is not a failing of the operator, but rather reflects the fact that the formae are not separable, i.e. they cannot simultaneously be respected and properly assorted.</p><p>The general problem of non-separable formae is discussed in section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Variable-Size Sets</head><p>The non-separability of the formae encountered in the consideration of fixed-size sets in the previous section can be seen to be the direct result of the restriction to fixed size. All of the definitions of the previous section carry over to the case of variable-size sets with the exception of the definition of the search space (equation 6), which is replaced by S = P(E): <ref type="bibr" target="#b14">(15)</ref> This changes the similarity sets and consequently the random, respectful recombination operator R </p><formula xml:id="formula_7">)</formula><p>where there is now no restriction on the size of . To verify that proper assortment is satisfied if a random member of this similarity set is selected, simply note that the union of the two parents is always a member of the similarity set and that the intersection of any pair of formae containing the children contains this union.</p><p>Thus variable-size sets are simpler than their fixedsize counterparts and have separable formae, ensuring that the R 3 operator both respects and properly assorts them. In common with the fixed-size case, however, children may be produced which contain elements which belong to neither of the parents. This is addressed next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Gene Transmission and Basic Formae</head><p>In response to situations like the ones above, in which R 3 succeeds in respecting formae, and (if they are separable) in properly assorting them, but generates solutions which bear rather less relation to their parents than might be deemed desirable, the concept of a complete orthogonal basis and a formal concept of gene were introduced in Radcliffe <ref type="bibr" target="#b22">[23]</ref>. These ideas will now be re-examined in the context of the examples above.</p><p>In their original conception, formae were introduced as equivalence classes induced by arbitrary equivalence relations over the search space<ref type="foot" target="#foot_2">15</ref> S (Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>).</p><p>Thus, the idea was to try to choose equivalence relations which would group solutions into equivalence classes which might reasonably be expected to contain solutions with correlated (similar) performance. In this way, the formae arose as secondary objects, induced by equivalence relations. It is important to note that more than one equivalence relation is used at a time in this analysis, which is slightly unusual and constitutes a potential source of confusion.</p><p>It should be clear that regarding formae as equivalence classes of equivalence relations is not a restriction on their generality, since a forma representing an arbitrary subset of the search space S can be induced by constructing an equivalence relation according to the rule</p><formula xml:id="formula_8">() ( ; 2 or ; = 2 ) :<label>(17)</label></formula><p>Traditional schemata over strings of length n can be viewed as equivalence classes of equivalence relations described by members of = f ; g n : <ref type="bibr" target="#b17">(18)</ref> Here is the traditional "don't care" character introduced by Holland <ref type="bibr" target="#b11">[12]</ref>, and is a "care" character. 16  An equivalence relation from this set then relates those chromosomes which agree (have a common allele value) at every position in which the description of the equivalence relation has the "care" character ; positions in which the equivalence relation has are not considered. Thus the equivalence relation , defined for a binary representation, has four equivalence classes (formae), 0 0, 0 1, 1 0 and 1 1, which are, of course, ordinary schemata.</p><p>Notice that the similarity set of two chromosomes defined with respect to schemata is the schema which has the "don't care" symbol at every position at which the two chromosomes disagree, and their common value at each remaining locus, so that, for example, 1010 1001 = 10 :</p><p>It can be seen, therefore, that the R 3 operator defined with respect to schemata, in the case of binary chromosomes, reduces to precisely the familiar uniform crossover operator 17 (e.g. Syswerda <ref type="bibr" target="#b30">[30]</ref>). In the case of k-ary genes with k &gt; 2, however, R 3 makes a random choice over the whole allele set for genes at which the two parents disagree: this may not be desirable. The introduction of the notion of a complete orthogonal basis for a set of equivalence relations allows this possibility to be disbarred.</p><p>The concept of a basis is rather simple, and is motivated by familiar definitions from the algebra of linear spaces. The idea is that the equivalence relations with</p><p>16 Similar notation can be used to describe Walsh partitions in the analysis of deception. See Goldberg <ref type="bibr" target="#b5">[6]</ref>. 17 Strictly, uniform crossover is parameterised by the probability of drawing each gene from the "first" parent: in this paper this probability is always assumed to be 0:5 unless an explicit statement is made. g <ref type="bibr" target="#b19">(20)</ref> to be interpreted as a basis for the equivalence relations which induce schemata (equation 18) with n = 4.</p><p>Intersection of equivalence relations will be defined in a natural way (see figure <ref type="figure" target="#fig_1">7</ref>) so that, for example:</p><formula xml:id="formula_10">\ = : (<label>21</label></formula><formula xml:id="formula_11">)</formula><p>The basic equivalence relations in E can then be identified as genes, and the basic formae (equivalence classes) as alleles. Having made these identifications, it is possible to insist that in general, as in the familiar case, each of a child's genes be inherited from one or other parent. That is, the child should be in the same basic forma as one of its parents for each of the basic equivalence relations in E. This principle is called strict transmission of genes (Radcliffe <ref type="bibr" target="#b22">[23]</ref>). If R 3 is modified to obey this principle, yielding the inheritance crossover operator, then uniform crossover is recovered for k-ary string representations with k &gt; 2.</p><p>It is important to appreciate that the purpose of this rather laborious construction of a simple operator is that the construction is valid for any set of formae induced by a set of equivalence relations for which a complete orthogonal basis can be found.</p><p>A more rigorous formulation of complete orthogonal basis than the foregoing is now presented, based closely on Radcliffe <ref type="bibr" target="#b22">[23]</ref>.</p><p>First, intersection is defined for equivalence relations. For these purposes an equivalence relation is conveniently described by a binary function : C C ?! f 0; 1 g <ref type="bibr" target="#b21">(22)</ref> which returns 1 if its arguments are equivalent and 0 if they are not:</p><formula xml:id="formula_12">( ; ) = 1; if , 0; otherwise. (<label>23</label></formula><formula xml:id="formula_13">)</formula><p>The intersection of two equivalence relations ; 0 2 can then be defined by</p><formula xml:id="formula_14">( \ 0 )( ; ) = 1; if ( ; ) = 0 ( ; ) = 1, 0; otherwise. (<label>24</label></formula><formula xml:id="formula_15">)</formula><p>Given this, a subset E will be said to constitute a complete orthogonal basis for provided that (Completeness) All relations 2 can be constructed as the intersection of some subset of the basic relations:</p><formula xml:id="formula_16">8 2 9 E E : \ E = :<label>(25)</label></formula><p>(Orthogonality) Every forma induced by every basic relation 2 E is compatible with every forma 0 induced by every other basic relation 0 2 E: 8 ; 0 2 E ( 6 = 0 ) 8 2 ] 8 0 2 0 ] : \ 0 6 = 6 e ; <ref type="bibr" target="#b25">(26)</ref> where ]is the set of equivalence classes (formae) induced by .</p><p>The relationship between these definitions and their counterparts in linear algebra should be clear. The notion of completeness is essentially identical, and expresses the fact that the basic equivalence relations span the space of equivalence relations under consideration, while orthogonality ensures that alleles (membership of basic formae) can be freely mixed.</p><p>It will become apparent in later sections that the definition of orthogonality can be relaxed to some degree; this will be necessary in order for a suitable basis to be found for some classes of multiset formae.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Fixed-Size Sets (Attempt II)</head><p>Having defined genes in terms of a complete orthogonal basis for some equivalence relations the task is now to find equivalence relations which induce the set formae described in section 5.2 and to find a complete orthogonal basis for them.</p><p>Recall that these formae were characterised by a set of elements which a solution must contain in order to be an instance of the forma in question. Thus, a simple forma is described by h i = fag: <ref type="bibr" target="#b26">(27)</ref> Clearly various equivalence relations could be constructed which have as one of their equivalence classes. One such can be generated simply by using the trivial rule expressed by equation 17 as follows:</p><p>fag ( ; ) = 1; if (a 2 \ or a = 2</p><p>), 0; otherwise.</p><p>(</p><formula xml:id="formula_17">)<label>28</label></formula><p>This equivalence relation induces two equivalence classes, one comprising the solutions containing the element a and another comprising those which do not. Thus, a second equivalence class, which had not originally been specified, has also been induced by .</p><p>There is clearly an equivalence relation fxg of the form described by equation 28 for each x 2 E. Moreover, these are intuitively natural candidates for a basis for a set of equivalence relations which might generate all the formae of the type described. As will now be demonstrated, if the rule for intersection of equivalence relations described by equation 24 is followed, the set</p><formula xml:id="formula_18">E = fxg x 2 E (<label>29</label></formula><formula xml:id="formula_19">)</formula><p>does indeed form a complete orthogonal basis for a set of equivalence relations which induce all the formae in as defined in equation 8, together with others.</p><p>To see this, consider the intersection of fag and fbg , which will be denoted fa;bg . According to the defi- nition of intersection for equivalence relations (equation 24)</p><formula xml:id="formula_20">( fag \ fbg )( ; ) = 8 &gt; &gt; &lt; &gt; &gt; :</formula><p>1; if fag ( ; ) = fbg ( ; ) = 1, 0; otherwise. <ref type="bibr" target="#b30">(30)</ref> This equivalence relation induces four equivalence classes, which might conveniently be written</p><formula xml:id="formula_21">ab = f 2 C a 2 ; b 2 g; a b = f 2 C a 2 ; b = 2 g; ab = f 2 C a = 2 ; b 2 g; a b = f 2 C a = 2 ; b = 2 g:<label>(31)</label></formula><p>The generalisation of this is rather obvious. A general equivalence relation, 2 , has a description set, conveniently written h i, which is a subset of the universal set E. Members of the search space (themselves subsets of E) are then equivalent under precisely if they contain the same subset of the members of the description set h i. Formally, ( ;</p><formula xml:id="formula_22">) = 1; if h i \ = h i \ , 0; otherwise. (<label>32</label></formula><formula xml:id="formula_23">)</formula><p>It is clear that E (defined in equation 29) does indeed form a basis for the equivalence relations. <ref type="foot" target="#foot_3">18</ref> A forma induced by an equivalence relation 2 is then characterised by a partition of the description set h i.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>It then becomes convenient to describe a forma by a 2-tuple</head><p>h i = ( + ; ? ) <ref type="bibr" target="#b33">(33)</ref> where + \ ? = 6 e (34) and + ? = h i <ref type="bibr" target="#b35">(35)</ref> with the interpretation 2 () \ + = + and \ ? = 6 e : (36)   Having made these identifications, it is possible to define the similarity set of two chromosomes with respect to the formae induced by . This will allow the random respectful recombination operator R 3 to be constructed. Using the notation for the description sets of formae just introduced, this gives h i = ? \ ; E ? ( ) ; <ref type="bibr" target="#b37">(37)</ref> where the minus sign denotes set subtraction. The R </p><p>Thus, R 3 for these formae can be understood as an operator which</p><p>1. copies all the elements which are common to the two parents into the child;</p><p>2. fills the remaining places in the child with a random selection of the unused elements from the two parents.</p><p>So a child of and has the natural properties</p><formula xml:id="formula_25">\ :<label>(40)</label></formula><p>It is clear, therefore, that in this case R 3 strictly transmits genes where a gene corresponds to an element of E and an allele to the presence or absence of that element (equation 28). Notice, however, that the counterexample used at the end of section 5.2 remains valid, so that that the formae are not separable, with the consequence that R 3 cannot properly assort them. This again arises directly from the restriction to fixed-size sets.</p><p>An alternative way of viewing this operator is to imagine a conventional linear chromosome in which every position represents an element from the universal set, and to imagine an operator like uniform crossover, but constrained so that the total number of 1's on the child is constant and equal to N, the fixed size of the set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6">Fixed-Size Multisets</head><p>The extension of the previous case from sets to multisets is in essence simple, but involves one complication. The basic idea will be that rather than specify whether or not an element is a member of the multiset under consideration, a forma will specify the multiplicities of some elements. Formally, let P m (E) be the multipower set of E,that is, the set of all multisets whose elements are drawn from E. Then the multiplicity function m : E P m (E) ?! Z + f0g (41) is defined so that m(x; ) is the number of copies of x in the multiset .</p><p>A forma for multisets could either specify exact multiplicities for elements or could give bounds on their multiplicities. Since the former is a special case of the latter, where the bounds are maximally tight, the more general case will be examined.</p><p>A forma is now conveniently described by a set of 3-tuples of the form (x; N # x ; N " x ) each of which is understood to specify that the multiplicity m(x; ) of the element x in the set lies in the inclusive range N # x to N "</p><p>x . For example, a forma with the description set h i = f(a; 0; 0); (b; 1; 3)g (42) contains all those multisets over E of size N which contain no copies of a and contain between 1 and 3 copies of b (figure <ref type="figure" target="#fig_2">8</ref>).</p><p>As usual, there are a number of sets of equivalence relations which could be constructed to generate these formae, and again an obvious starting point is equivalence relations based on the lowest-order formae. Thus the equivalence relation which induces the forma described by h i = f(x; N # x ; N " x )g would have the same description set</p><formula xml:id="formula_26">h i = (x; N # x ; N " x )<label>(43)</label></formula><p>and would be defined by</p><formula xml:id="formula_27">( ; ) = 8 &gt; &gt; &gt; &gt; &lt; &gt; &gt; &gt; &gt; : 1; if m(x; ); m(x; ) &lt; N # x or m(x; ); m(x; ) 2 N # x ; N " x ] or m(x; ); m(x; ) &gt; N " x , 0; otherwise,<label>(44)</label></formula><p>where N # x ; N "</p><p>x ] = n 2 Z N #</p><p>x n N " x : (45)</p><p>As was the intention, formae can now specify a range of multiplicities for any element; a single equivalence relation can in fact be seen to suffice to define up to three ranges simultaneously. The problem of finding a basis for these equivalence relations will now be considered.</p><p>The natural candidates to form a basis are the equivalence relations which divide the range of multiplicities for a single element into a lower portion and an upper portion, as shown in figure <ref type="figure">9</ref>, E = 2 h i = f(x; 0; N " x )g; x 2 E; N " x 2 0; N ? ] (46) where N ? is the maximum allowed multiplicity for an element. These equivalence relations can easily be seen to be complete, for any "first order" equivalence relation<ref type="foot" target="#foot_4">19</ref> with a description set f(x; N # x ; N " x )g h i = (x; 2; 3) and is constructed as the intersection of 1 with description set h 1 i = (x; 0; 1) and h 3 i = (x; 0; 3).</p><p>can be constructed as an intersection of the relations with description sets fx; 0; N " x g and f(x; N #</p><p>x ; N ? )g (fig-</p><p>ure 10). Higher order equivalence relations can then be constructed trivially by intersection. It is equally easy, however, to see that the relations in E do not satisfy the condition of orthogonality specified in equation 26. To verify this, simply note that if a set is a member of the forma with description set f(x; 0; 2)g it cannot also be a member of the forma with the description set f(x; 4; N ? )g, as would be required if E</p><p>were orthogonal (equation 26).</p><p>Rather than abandon this potential basis, it is instructive to return to the analogy with linear algebra which led to the original formulation of the conditions on a basis, namely completeness and orthogonality. In linear algebra there is a weaker notion than orthogonality known as linear independence: a set of vectors is said to be linearly independent if no one of them can be expressed as a linear combination of the others. Following the analogy, a set of equivalence relations will be said to be independent if no one of them can be constructed as an intersection of some of the others.</p><p>The set E defined in equation 46 satisfies this weaker condition. 20   The purpose of introducing the notion of a complete orthogonal basis for a set of equivalence relations was to generalise the notion of a gene and allow a principle of strict gene transmission to be extended to more general formae. It will be demonstrated below that the weaker notion of a complete non-orthogonal basis suffices for the definition of genes, and thus is adequate for the original purpose. The notion of independence is formalised as follows:</p><p>(Independence)</p><p>A set E of equivalence relations will be said to be independent if no one of the relations 2 E can be expressed as the intersection of some subset of the others, i.e. 9 = 2 E 9 E E :</p><formula xml:id="formula_28">\ E = : (47)</formula><p>Using the same definition of genes and alleles for nonorthogonal bases as for orthogonal bases, (i.e. genes are the basic equivalence relations and alleles are the basic equivalence classes) it is now possible to construct the inheritance crossover operator induced by the basis E for , described by equation 46.</p><p>The inheritance crossover operation can be defined in a way similar to random respectful recombination, the difference being that instead of selecting from the similarity set of the two parent chromosomes it selects from the subset of chromosomes in the similarity set which have every gene in common with one or other parent. This subset, which for parents and is written , is called their inheritance set, and defined by = 2 8 2 E : 2 ] ] (48) where ] is the equivalence class induced by to which belongs. The inheritance crossover operator picks each element in the inheritance set of the parents with equal probability, and both strictly transmits genes and properly assorts formae provided that these conditions are compatible. (The proof of this is identical in form to the proof that R 3 respects and properly assorts a set of formae, section 5.1.) 20 A rather minor point which should nevertheless be made in passing is that the formae now being considered violate the closure discussed in Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>: this turns out to be unimportant.</p><p>The formalism developed above can now be applied to the problem of recombining fixed-size multisets. The similarity set of two chromosomes (now multisets) is the forma with the description set h i = (x; N # x ; N "</p><p>x ) N # x = min ? m(x; ); m(x; ) ; N "</p><p>x = max ? m(x; ); m(x; ) .</p><p>(</p><formula xml:id="formula_29">)<label>49</label></formula><p>This similarity set contains all those multisets of the given fixed size N which have at least as many copies of each element as the parent with fewer copies, and no more than the number held by the parent with more. For example, if the chosen fixed size for the multisets is five, and the universal set E is given by The similarity set itself contains those multisets containing fja; b; cj g together with exactly two elements from fja; a; b; dj g. The inheritance set of any and is, for these equivalence relations, identical to the similarity set. To see this, consider any basic equivalence relation with the description set h i = f(x; 0; N)g:</p><p>(53)</p><p>This has two equivalence classes, described by h 1 i = f(x; 0; N)g; h 2 i = f(x; N + 1; N ? )g:</p><p>(54)</p><p>If both parents belong to the same basic forma, then their similarity set is clearly a subset of this forma. If, however, they belong to different basic formae, then since there are only two of these, the requirement that their similarity set lie in their union is no restriction at all. Thus inheritance sets for these equivalence relations are indeed identical to similarity sets <ref type="foot" target="#foot_5">21</ref> and so it can be seen that strict gene transmission is in this case no stronger a requirement than respect.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.7">Variable-Size Multisets</head><p>Variable-size multisets can be dealt with simply by relaxing the constraint of fixed size as discussed in the previous section. The formae then arrived at are separable and the inheritance crossover operator (which is in this case identical to the R 3 operator) not only properly assorts and respects the formae, but also strictly transmits genes as a direct consequence of the identity of the similarity and inheritance sets.</p><p>In summary, R 3 for variable-size multisets simply inserts a number of copies of each element from the universal set which is bounded by the number of copies in the two parents, and in doing so strictly transmits genes and properly assorts the formae induced by the equivalence relations generated by the complete spanning basis of equation 46.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Non-Separability of Formae</head><p>Before going on to apply the results of section 5 to the problem of optimising neural network topologies, it is appropriate to consider the general problem of non-separability of formae, which arises from some of the formae, bases and recombination operators constructed thus far.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Background on Formae</head><p>There were a number of motivations for the forma analysis developed by Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b22">23]</ref>, the most important of which can be summarised as follows:</p><p>1. Nature of Representation. Holland's schemata are defined for fixed-length strings for which each locus has a well-defined allele set, with the implicit assumption that all distributions of alleles over loci represent valid solutions. For many problems, including those from graph theory, set theory, constrained optimisation and neural networks, no useful coding of this form is known. In any case, it is frequently very much more convenient to store and manipulate structures in a non-string form, as is the case, for example, with Koza's evolution of Lisp programs (Koza <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14]</ref>). A generalisation was thus required.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Genotype-Phenotype Mapping.</head><p>Schemata are defined in the representation space and thus group together genotypes (chromosomes). Where the genotype and phenotype spaces are isomorphic (that is, every chromosome corresponds to exactly one solution in the real search space S and conversely every solution in S is represented by exactly one chromosome in C)</p><p>this is probably acceptable, but where the mapping is more complex than this it may be desirable to define formae in the true search space S.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Redundancy.</head><p>A particular example of the inadequacy of schemata arises when the coding introduces redundancy, as tends to be the case in graph and set optimisation problems (see section 2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Generality.</head><p>The groupings of chromosomes which can be expressed by schemata are variegated and have been shown to be sufficiently general to be useful in many problems. Nevertheless, there are many other cases where it is desirable to be able to use other partitionings of the search space. Forma analysis allows this.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Intrinsic Parallelism.</head><p>The counting argument which is sometimes used to claim that binary representations are more powerful than those of higher cardinality applies only if attention is restricted to traditional schemata. If more general formae are considered, the argument no longer holds. The degree of intrinsic parallelism which can be inferred is defined entirely by the selection of formae (Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b20">21]</ref>).</p><p>Having shown that the "schema theorem" applies to general formae in exactly the same way as to schemata given suitable expressions for the disruption coefficients (Radcliffe <ref type="bibr" target="#b21">[22]</ref>,Vose <ref type="bibr" target="#b32">[32]</ref>) the question became how to manipulate formae sensibly. Guidance was taken from studies of the traditional crossover operators for conventional linear chromosomes.</p><p>The three characteristics of recombination operators which were suggested to be desirable are as follows:</p><p>Respect.</p><p>The formulation of the principle of respect was motivated by a desire to ensure that in cases where the parents share some attribute, children are guaranteed to inherit that attribute also. (This is qualified only by mutation, which is traditionally understood to serve the important but secondary rôle of ensuring that the entire search space remains accessible (Holland <ref type="bibr" target="#b11">[12]</ref>), though see also Schaffer and Eschelman <ref type="bibr" target="#b26">[27]</ref> and references therein.) Thus respect requires that whenever two parents are both a member of some forma, all their offspring be members of that forma also. This principle has been independently formulated by Vose <ref type="bibr" target="#b32">[32,</ref><ref type="bibr" target="#b33">33]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Gene Transmission</head><p>Respect alone is not enough to ensure that every gene possessed by a child is taken from one or other parent. The introduction of the notion of a complete orthogonal basis for a set of equivalence relations which induce the chosen formae allowed a general notion of gene to be formalised (Radcliffe <ref type="bibr" target="#b22">[23]</ref>) and thus allowed a principle of (strict) gene transmission to be formulated. The introduction of non-orthogonal bases in this paper allows further application of the principle. It should be noted that gene transmission implies respect.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Assortment</head><p>The notion of assortment can be viewed as an extension and formalisation of the "building-block hypothesis" (Goldberg <ref type="bibr" target="#b4">[5]</ref>) which expresses some of the most fundamental beliefs about the way in which genetic search proceeds. The key idea is that by recombining two solutions it is sometimes possible to piece together a solution which combines properties of the two parents. A recombination operator is said properly to assort a set of formae if it is the case that whenever one parent is a member of one forma , and another parent 0 is a member of another forma 0 , then provided that the intersection of the two formae is nonempty (that is, provided that some chromosome exists which is a member of both formae) it is possible that the recombination will produce a child which is a member of both formae, i.e. 2 \ 0 .</p><p>It is interesting to note that while traditional onepoint crossover (or indeed, n-point) does not properly assort schemata in the absence of an inversion operator, when inversion is present, it does. <ref type="foot" target="#foot_6">22</ref> Uniform crossover, on the other hand, does properly assort schemata. Moreover, while one-point crossover does not properly assort schemata in the absence of inversion, it does weakly assort them in the sense that given a finite number of generations and applications, it does have that ability to assemble a chromosome in the intersection of any two compatible schemata, given suitable parents.</p><p>The problem faced in the case of fixed-size sets and multisets with the formae discussed in section 5 is that the requirements of respect and assortment are incompatible, so that the formae are said to be nonseparable. This is illustrated in figure 11.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Examples of Non-Separability</head><p>Examples of non-separable formae have already been seen in sections 5.2, 5.5 and 5.6, and the previous difficulties in even respecting reasonable formae for prob- lems in neural networks has also been mentioned in section 2. The travelling sales-rep problem (TSP) provides further interesting examples of non-separability. Whitley <ref type="bibr" target="#b40">[40]</ref> and Radcliffe <ref type="bibr" target="#b22">[23]</ref> have both argued that in tackling the TSP it is essential to focus attention on edges rather than nodes.</p><p>There are two obvious sets of formae which might be constructed for the TSP which are based on edges, the difference being whether the edges are considered to be directed or undirected. In either case, a forma is characterised by a set of edges which a tour must contain in order to be an instance of the forma. Radcliffe <ref type="bibr" target="#b22">[23]</ref> has show that non-directed edge formae are not separable using the example in figure <ref type="figure" target="#fig_4">12</ref>. The example in figure <ref type="figure" target="#fig_9">13</ref>, which is due to Vose <ref type="bibr" target="#b31">[31]</ref>, suffices to show that directed edge formae are also non-separable. It should be noted, however, that this second example relies on the introduction of a cycle, which is only permitted if the cycle forms the entire tour. In this sense, the problem with directed edges is perhaps less severe than with non-directed edges.</p><p>Whitley has constructed a genetic edge recombination operator with the specific aim of ensuring high transmission of edges from parents to children. 23 The first version of this operator (Whitley et al. <ref type="bibr" target="#b40">[40]</ref>) did not en-23 It should be noted that transmission of edges is subtly different from trans- mitting edge-formae (see section 6.4).  sure respect since it allowed children to be constructed which did not possess an edge common to both parents. It also failed to ensure proper assortment, by concentrating exclusively on high transmission rates for edges. A second version of the operator was constructed specifically to ensure respect 24 (Whitley et al. <ref type="bibr" target="#b41">[41]</ref>) and in so doing guaranteed that proper assortment was violated.</p><p>The important point to note here is that if it is accepted that edges (whether directed or otherwise) hold the key to the TSP, the problem of non-separability arises immediately.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Exploitation and Exploration</head><p>In cases such as fixed-size set recombination and the travelling sales-rep problem it is clear that some accommodation between respect and assortment will be required if the formae suggested are to be manipulated effectively. The conflict can be viewed as an unusually sharp form of the familiar trade-off between exploitation of information already gathered (encapsulated by respect and gene transmission) and adequate exploration of the search space (encapsulated by assortment), as discussed by Holland <ref type="bibr" target="#b11">[12]</ref>.</p><p>The counter-examples used to show that the fixedsize set-and multiset formae are not separable and to show the same for both directed and non-directed edge formae for the TSP share rather similar characteristics, so that focusing on a single example will have relevance to them all. For simplicity, the example for fixed-size set formae used at the end of section 5.2 will be revisited. Recall that the problem is that the sets = f a; b; c g (55)</p><p>and 0 = f a; d; e g (56)</p><p>of size three are respective members of the formae and 0 described by</p><formula xml:id="formula_30">h i = f b; c g (<label>57</label></formula><formula xml:id="formula_31">)</formula><p>and</p><formula xml:id="formula_32">h 0 i = f d g; (<label>58</label></formula><formula xml:id="formula_33">)</formula><p>but that the sole member of the intersection \ 0 is = f b; c; d g;</p><p>(59) which does not lie in the similarity set described by h i = fag:</p><p>(60)</p><p>The effect of giving primacy to respect (as do all R 3 operators) is to make impossible the construction of 24 though it was not discussed in these terms the solution from these parents. This extremely worrying, not least because experience shows that premature convergence is a common problem with genetic algorithms. Thus if, in the present example, the presence of a in a solution is generally beneficial in the early stages of genetic search, but , which does not contain a, is the optimum, it is quite possible that a will become represented in every chromosome in the population early on so that the presence of solutions such as and in a later population would not allow the optimum to be constructed even though all of the necessary "building blocks" would appear to be present. Genetic search would be entirely dependent in this circumstance on a mutation which eradicated the element a from a solution, a situation which though not irretrievable seems better avoided. This prospect, which could equally easily manifest itself in more realistic, larger-scale examples, is sufficiently worrying to suggest that assortment should be given precedence over respect, the lack of which would seem likely to do no more than delay progress towards an optimum, rather than imposing mutationdependent barriers. Similar comments apply equally to the edge formae discussed above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Assortment</head><p>While the preceding discussion has suggested that assortment should take priority over respect when there is a conflict, this does not mean that respect should be altogether discarded in such situations. A parameterised operator will now be introduced which allows the priority given to the two considerations to be varied, so that with the parameter set at one end of the scale respect is complete (and proper assortment is violated) and as the parameter is adjusted ever-less regard is paid to the requirements of respect.</p><p>Consider the R 3 operator for fixed-size sets. This has been described as having two stages: the first constructs a partial child which contains only the intersection of the two parents; the remaining spaces in the child are chosen at random from the remaining elements which the parents contain. An alternative approach, which would ensure proper assortment but drastically violate respect, would involve discarding the first stage and simply picking elements from the union of the two parents at random. This approach would attach no weight at all to the fact that some elements were present in both parents and in this sense would have entirely disregarded respect.</p><p>These two extremes can be interpolated between by attaching a weight to elements of the union, with elements of the intersection being accorded a higher weight than those present in only one parent. The probability of picking an element could then be made proportional to its weight. It would seem reasonable to set the weight of elements in the intersection to at least twice that of other elements since these elements were present twice, once in each parent. In the case of the example used above (equations 55-60) this would lead to the weights shown in table <ref type="table">1</ref>. Clearly higher weights than two could be used to ensure a greater degree of respect, but the higher the weight is made, less assortment will be performed. The generalisation to multisets is given in section 9.1.3.</p><p>Constructing similarly parameterised operators for the TSP which could be computed efficiently is more difficult, though a paper specification for them is possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Neural Network Topologies</head><p>The professed purpose of developing the machinery of set and multiset formae was to aid the application of genetic search to problems in neural networks, though the set and multiset optimisation problems are of independent interest. The formulation of network topology optimisation given in section 2 was chosen to bring out the multiset-like nature of the problem.</p><p>Recall that if attention is restricted to feed-forward networks with a single layer of hidden units then a network topology can be described as a multiset of hidden units each of which is specified by its set of external connections (figure <ref type="figure">4</ref>). This is an entirely non-redundant representation to which the results of the forma analysis of earlier sections can immediately be applied. In principle, this should allow genetic search to proceed efficiently.</p><p>There is, however, an obvious complication. Suppose that a modest network with ten input nodes and ten output nodes is to be considered, and that up to ten hidden units will be employed (the example used in section 2). In this case the size of the search space is about 4 10 53 (equation 2). The problem is not the size of this search space (which is fairly modest by the standards of genetic algorithms) but the fact that each chromosome will contain at most ten hidden units, while the number of hidden unit types is 2 20 10 6 . Thus, even if a population of 10,000 were employed, less than one percent of the available node types could be included in the population. If the node types are considered as atomic and not available for recombination it will be extremely difficult for the genetic algorithm to make progress.</p><p>Of course, this situation is not unfamiliar in genetic search, for in the classic case of parameter optimisation exactly the same predicament arises. If, for example, ten parameters are to be optimised, each coded using twenty bits, the similarity should immediately be clear (though in this case the search space would be larger, because each of the parameters would normally have a meaning, so that this is not a set optimisation problem). The solution usually employed is to allow recombination to take place at the subparameter level either through employing binary or other low-cardinality encodings or by using recombination operators which make use of knowledge of the high-level meaning of parameters. (For examples of the latter see Davis <ref type="bibr" target="#b3">[4]</ref> and the discussions of range formae in Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>; for a sceptical view see Goldberg <ref type="bibr" target="#b6">[7]</ref>).</p><p>By exploiting this analogy it will be possible both to construct a sensible genetic approach to network topology optimisation and to shed a little more light on traditional parameter optimisation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">High Cardinality Representations and Gene Recombination</head><p>Consider the classic parameter optimisation problem where the search space is comprises vectors v = (v 1 ; v 2 ; : : : </p><formula xml:id="formula_34">; v n ) (<label>61</label></formula><formula xml:id="formula_35">) so that S = I 1 I 2 I n R n (<label>62</label></formula><formula xml:id="formula_36">) with I i = a i ; b i ]<label>(</label></formula><formula xml:id="formula_37">S = n Y i=1 I i f g ! (<label>68</label></formula><formula xml:id="formula_38">)</formula><p>then uniform crossover in chromosome space C neither respects the schemata in S nor transmits param- eters, though it does assort them.</p><p>Thus transmission of genes and respect can in these cases be seen to be sub-parameter level concepts. A number of observations follow:</p><p>1. Using one-point crossover in the absence of inversion, most parameters will be transmitted whole: a maximum of one will be crossed.</p><p>2. Using one-point crossover in the presence of inversion, any number of parameters may be crossed.</p><p>3. Similar comments apply when using two-point crossover (except that up to two parameters may then be crossed), and this is true even using Booker's reduced surrogate form <ref type="bibr">(Booker [2]</ref>).</p><p>4. With uniform crossover, any number of parameters may be recombined.   where the right hand side is understood to be a set with sixteen elements.</p><p>It is useful, especially in the current context, to think of uniform crossover as applied at the bit-level as having two components, the first of which randomly selects each parameter from one or other parent, while the second crosses these parameters. (Of course, the fact that each component is subsequently crossed means that the initial choice is irrelevant.) Similarly, one-point crossover in C (without inversion) can be thought of as first randomly crossing the whole parameter string in S, and then crossing the parameter at the interface at the bit level. The two approaches could be combined.</p><p>This way of thinking about conventional operators suggests a solution to the problem of the extremely high cardinality of the neural network topology representation suggested above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Crossing Hidden Nodes</head><p>The proposed way of tackling neural network topology optimisation makes use of the previously discussed breakdown of recombination into two stages. Most of the nodes in the child (say all but one) will be generated using the multiset recombination operators introduced in section 5. The final node or nodes will be produced by directly crossing nodes from the two parents. This turns out to be an extremely simple matter because the hidden nodes have already been conveniently described as binary strings (figure <ref type="figure">4</ref>). Moreover, this binary representation of a hidden unit is highly meaningful and completely non-redundant: a one indicates the present of a connection to an external node and a zero indicates its absence. Thus uniform crossover is the natural operator to use to perform the sub-node level cross, since it transmits genes and properly assorts the schemata which are the natural formae for describing hidden units.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Direct Input-Output Connections</head><p>The formulation thus far has concentrated on strictly layered networks so that direct connections from the input nodes to the output nodes have not been considered. Each such connection can, however, be described perfectly and without redundancy by a binary gene, and thus if such connections are to form part of the optimisation they may simply be added to the chromosome. Such portions of the gene can be recombined using uniform or some other standard crossover operator without further complication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Linkage and Forma Disruption</head><p>The discussion of recombination operators in the previous sections has not considered two much-discussed and intricately related aspects of recombination-linkage between the components of a solution and disruption rates for formae. These will now briefly be reviewed.</p><p>When Holland introduced genetic algorithms with his seminal 1975 book <ref type="bibr">(Holland [12]</ref>), he listed three generic operators-crossover, mutation and inversion. While there have been experiments with inversion, which are summarised in Goldberg <ref type="bibr" target="#b4">[5]</ref>, and while there is still a belief among some workers that as more complex problems are tackled the inclusion of inversion will be found to be more helpful, inversion operators are rarely now used in practice. The issue of linkage is, however, relevant not only to traditional linear chromosomes. In the case of the set and multiset operations which form one focus of this paper it would be easy to add linkage information in the usual way, to manipulate this information through inversion or other operators, and to use it to modify the probability of groups of genes being transferred to children en masse.</p><p>Similarly, the uniform crossover operator with parameter half <ref type="foot" target="#foot_7">26</ref> is widely criticised for being unduly disruptive both of short schemata and of longer ones, the latter effect arising because uniform crossover with parameter half is biased towards taking half the genetic material for a child from each parent (Schaffer et al. <ref type="bibr" target="#b25">[26]</ref>, Syswerda <ref type="bibr" target="#b30">[30]</ref>, Radcliffe <ref type="bibr" target="#b20">[21]</ref>). It has been pointed out, however, by Spears and De Jong <ref type="bibr" target="#b29">[29]</ref> that by using parameters other than half with uniform crossover its degree of disruptiveness can be completely controlled. Whether or not uniform crossover appears more attractive is therefore primarily a function of whether there is any a priori reason to believe that the arrangement of the genes on the chromosome groups together bits which should be tightly coupled.</p><p>(Where parameters are laid out on continuous segments of the chromosome, there is a strong argument that this is so.)</p><p>Just as uniform crossover can be parameterised to control the amount of genetic material it tends to take from each parent, the weights of the elements used to deter-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Discussion and Summary</head><p>This paper contains a number of disparate threads, principal among which are the application of genetic algorithms to problems in neural networks and the application of forma analysis to the construction of suitable operators and representations for (multi)set recombination. These considerations have required a number of sub-discussions, including the introduction of non-orthogonal bases for equivalence relations and a consideration of sub-parameter level recombination with particular reference to crossing hidden nodes in neural network topologies. Each of these subjects is now set in context and-where appropriate-summarised.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1">Set and Multiset Recombination</head><p>Set recombination can be regarded as a special case of multiset recombination in which the maximum number of copies of any element is one. A distinction must, however, be made between fixed-and variablesize multisets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1.1">Formae and Equivalence Relations</head><p>Generic formae for multisets specify ranges of values for the multiplicities of elements drawn from a universal set E. These formae are induced by equivalence relations over the search space of which a low precision example is given by equation 44:</p><p>( ; ) = x )g. A basis for these equivalence relations is given by equation 46: E = 2 h i = f(x; 0; N " x )g; x 2 E; N " x 2 0; N ? ] :</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1.2">Variable-Size (Multi)set Recombination</head><p>The inheritance/R 3 operator for these formae generates a child , given parents ; 2 C P m (E)] as follows.</p><p>For each element x 2 E set m(x; ) so that min ? m(x; ); m(x; ) m(x; ) max ? m(x; ); m(x; ) ; (73) where m(x; ) is the number of copies of x in , and in the case of sets (as opposed to multisets) m(x; ) 2 f0; 1g. In each case a uniform random choice is made between the maximum and minimum allowed values for the multiplicity. This operator respects and properly assorts the formae induced by the equivalence relations in , and transmits the genes identified with the basic equivalence relations in E. The operator can be biased towards the multiplicity of one or other parent without violating these properties. Notice that \ :</p><p>(74)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1.3">Fixed-Size (Multi)set Recombination</head><p>The corresponding inheritance crossover operator for multisets of fixed size N generates a child from parents and as follows: Then for each x 2 E set the initial values for the multiplicity to be the minimum of that of the two parents:</p><p>8x 2 E : m(x; i ) = n # x ( ; );</p><p>(77</p><formula xml:id="formula_39">)</formula><p>where the subscript i on i indicates that this is the initial child only. (79)</p><p>This operator respects formae and strictly transmits genes but does not assort them because the formae are non-separable. For this reason, the following alternative assorting recombination operator is to be preferred:</p><p>1. Assign to each element x in E a weight w x = m(x; ) + m(x; ): (80)</p><p>2. Fill each available place in the child in turn picking each element x with probability p(x) = w x X x 0 2E w x 0 (81)</p><p>subject to the constraints on the final child given by equations 78 and 79.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1.4">Mutation</head><p>In the case of multiset (as opposed to set) recombination, there is a bias in the operator towards the middle of the range of allowed multiplicities for elements. This should be redressed by the use of end-point mutation operators as discussed in Radcliffe <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>. These, with low probability, set the multiplicity of some element in a child to 0 or N ? (the maximum allowed value), making any other necessary adjustments if multisets are of fixed size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.2">Neural Networks</head><p>framing three-layer neural network topology optimisation as a multiset problem over hidden nodes, each complete with external connections, the following have been achieved: a non-redundant representation; the multiset recombination operator discussed above may be applied; formae exist which can be separated.</p><p>Because, however, of the very large size of the universal set E, consisting of all possible hidden unit types (2 n for networks with external (input/output) nodes), recombination of hidden units is also advisable. If the hidden nodes are described by binary strings, with each bit representing an external connection, conventional crossover operators (uniform, n-point etc.) can be used to perform this cross in the controlled ways advocated in section 7.2.</p><p>Experimental verification of the efficacy of this approach remains to be demonstrated. An integrated scheme for optimising connectivity and weights also requires further work and might be regarded as the "Holy Grail" in this area.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.3">Non-Orthogonal Bases</head><p>The introduction of non-orthogonal bases is a significant innovation for forma analysis and allows a deeper study of problems for which schemata are not appropriate and for which an orthogonal basis for equivalence relations inducing appropriate formae is unavailable.</p><p>Given a complete orthogonal basis E for a set of equivalence relations which induce the chosen formae, a chromosomal representation can be constructed by allocating one locus to each basic equivalence relation in E:</p><p>e 1 e 2 e 3 e 4 e 5 e 6 e 7 e 8 e n</p><p>where jEj = n. The basic equivalence classes (basic formae) then serve as the alleles. Uniform crossover strictly transmits these genes and properly assorts the formae. The critical point here is that with an orthogonal basis, any chromosome of this form represents legal solution in S uniquely and every solution in S has one such chromosomal representative.</p><p>In the case of a non-orthogonal basis, not all chromosomes of this type are legal: constraints exist on the permitted combinations of gene values (alleles). The work in section 5.6 shows, however, that while traditional crossover operators (uniform, n-point etc.) cannot manipulate these formae and solutions effectively, the inheritance crossover operator will respect the formae and transmit genes while properly assorting whenever these conditions are compatible. In cases where gene transmission prevents proper assortment, operators such as the assorting crossover of section 6.4 can provide reasonable alternatives.</p><p>It is hoped that the examples in this paper convincingly demonstrate the flexibility of forma analysis, and the insights which it can provide.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: The universal set E (top) contains, in this example, three elements. The power set P(E) of E is the set of all subsets of E: each subset is also drawn in the top figure. The search space S is identical to the power set, and is illustrated in the lower figure. The forma has the description set h i = fag, as shown. This forma consists of all the sets in S which contain h i, as is shown in the bottom figure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: The set of formae induced by the equivalence relations , 0 and \ 0 . The formae induced by \ 0 are intersections of those induced by and 0 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: A visualisation of the forma with description set h i = f(a; 0; 0); (b; 1;3)g. The full ranges for elements c to f correspond to the "don't care" character familiar from conventional schemata.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 9 :Figure 10 :</head><label>910</label><figDesc>Figure 9: The set of equivalence relations with description sets of the form f(x; 0; N)g divide the range 0; N ? ] into a lower and and upper portion as shown: the equivalence relations may be thought of as simple dividing lines at integerplus-half values.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>equation 12 ,</head><label>12</label><figDesc>then given = fja; a; a; b;cj g (50) and = fja; b; b; c; dj g (51) the similarity set is described by h i = (a; 1; 3); (b; 1; 2);(c; 1;1); (d; 0; 1); (e; 0; 0);(f; 0; 0) : (52)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: The top figure shows non-separable formae. Notice that the intersection of and 0 , while non-empty, does not lie within the similarity set of chromosomes 2 and 0 2 0 . The bottom figure shows separable formae.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: The tour fragment on the left is a member of the forma described by f $ 23g, which contains all tours which include the 2-3 or the 3-2 edge. Similarly, the tour fragment on the right is a member of the forma described by f $ 24g.Since both tours are also a member of the forma described by f $ 12g, however, if these formae are to be respected all of their children must contain the 1-2 edge, thus preventing a child being produced which is a member of the forma described by f $ 23; $ 24g, the intersection of those de-</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 13 : 34 .</head><label>1334</label><figDesc>Figure 13: is a member of the directed edge forma described by h i = f ! 12; ! 34g, containing those tours which include the directed edges ! 12 and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Table 1 :</head><label>1</label><figDesc>Weights for a parameterised assorting recombination operator of weight 2, given parent sets = f a; b; c g and = f a; d; e g. The last line shows the probability that each element will be included in the child.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>1 ;</head><label>1</label><figDesc>if m(x; ); m(x; ) &lt; N # x or m(x; ); m(x; ) 2 N # x ; N "x ] or m(x; ); m(x; ) &gt; N "x , 0; otherwise. This equivalence relation is described by the description set f(x; N # x ; N "</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head></head><label></label><figDesc>child by increasing the multiplicity of elements at random subject to the following conditions on the final child , 8x 2 E : m(x; ) n " x (</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>2 base k, e.g. k = 2 gives binary, k = 8 octal etc.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>10   </figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>(Ni+No)Nh ) outstrips the rate of growth of the permutation problem (for likely values of node numbers N i , N o , and N h ) which grows only as N h !. Thus, for example, increasing the size of the problem from a 10-10-10 network to an11-11-11    network increases the size of S from 10 54 to 10 65 .</figDesc><table><row><cell>i 1 i 2 i 3 i 4 i 5</cell></row><row><cell>h</cell></row><row><cell>o 1 o 2 o 3 o 4</cell></row><row><cell>Figure 4: A hidden node h, which can be de-</cell></row><row><cell>scribed by the set of external nodes to which it is connected, f i 1 ; i 3 ; i 4 ; o 1 ; o 3 g: This can also,</cell></row><row><cell>of course, be conveniently described by the bi-nary string 101101010where a one indicates a the</cell></row><row><cell>presence of a connection and a zero the absence,</cell></row><row><cell>and where the nodes are laid out in order with</cell></row><row><cell>the input nodes preceding the output nodes.</cell></row></table><note><p>Complacency, however, would be misplaced. For suppose that some formae were constructed in the</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head></head><label></label><figDesc>63)and the intervals I i are understood to be discrete ap-</figDesc><table><row><cell cols="5">A chromosome 2 C would be given by</cell></row><row><cell></cell><cell cols="4">= ( 11 ; 12 ; : : :; 1k ;</cell><cell>(66)</cell></row><row><cell></cell><cell cols="4">21 ; 22 ; : : :; 2k ;</cell></row><row><cell></cell><cell>. . .</cell><cell>. . .</cell><cell>. . .</cell><cell>. . .</cell></row><row><cell></cell><cell cols="4">n1 ; n2 ; : : :; nk );</cell></row><row><cell cols="5">where v i is represented by ( i1 ; i2 ; : : :; ik ). If schemata are defined in the space C of chromosomes</cell></row><row><cell cols="5">then uniform crossover respects and properly assorts</cell></row><row><cell>the schemata</cell><cell cols="3">C = f 0; 1; g nk</cell><cell>(67)</cell></row><row><cell cols="5">and strictly transmits genes. On the other hand, if schemata are defined in parameter space S, as defined</cell></row><row><cell cols="2">by equation 62, so that</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>proximations to their continuous counterparts. Using k bits per parameter, the typical chromosomal repre-</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>sentation would employ</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>C = B kn</cell><cell>(64)</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell>where</cell><cell>B = f0; 1g:</cell><cell>(65)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11"><head></head><label></label><figDesc>This is true if 1-point crossover with inversion is applied in C also, though in this case the linkages should in principle make useful crosses more likely.</figDesc><table><row><cell>having four elements, whereas in C</cell></row><row><cell>(0111; 1000) (0101; 0011) = (01 1; 0 ); (72)</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_0"><p>That is, the problem is not merely on of proper assortment, for the formae cannot be weakly assorted either(Radcliffe [23]).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_1"><p>An even more pernicious form of the permutation problem is seen when graphs are being optimised for some property, for in this case there is generally a permutational redundancy of order n! where n is the number of nodes in the graph, and there is not normally an analogue of the fixed "external" units.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="15" xml:id="foot_2"><p>In practice formae tend to be defined over the representation space C of chromosomes: the distinction, though important, is not of great relevance to this discussion.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="18" xml:id="foot_3"><p>Technically, there is a problem given the definition of orthogonality, when equivalence relations with description sets of size greater than or equal to the fixed size of solution sets are considered, but this is a very minor consideration.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="19" xml:id="foot_4"><p>Once genes have been defined, order can be defined for formae in a way similar to the definition for schemata.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="21" xml:id="foot_5"><p>This is not, of course, true in general.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="22" xml:id="foot_6"><p>This assumes that linkage is taken to be unspecified.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="26" xml:id="foot_7"><p>i.e. equal probabilities of taking each gene from either parent mine the child in the manner described in section 6.4 can be used to control the degree of forma disruption exhibited by the recombination operators discussed in this paper.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>I would like to thank Peter Hancock for a conversation which revived my interest in and consideration of the application of genetic algorithms to problems in neural networks, and thus led indirectly to the to work in this paper. I would also like to thank Mike Norman for continuing occasional discussions of genetic algorithms, which form the backdrop to the thinking in this paper.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Evolving Networks: Using the Genetic Algorithm with Connectionist Learning</title>
		<author>
			<persName><forename type="first">Richard</forename><forename type="middle">K</forename><surname>Belew</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Mcinerny</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nicol</forename><forename type="middle">N</forename><surname>Schraudolph</surname></persName>
		</author>
		<idno>CS90-174</idno>
		<imprint>
			<date type="published" when="1990">1990</date>
			<pubPlace>UCSD (La Jolla</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Improving Search in Genetic Algorithms</title>
		<author>
			<persName><forename type="first">Lashon</forename><surname>Booker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Genetic Algorithms and Simulated Annealing</title>
		<editor>
			<persName><forename type="first">Lawrence</forename><surname>Davis</surname></persName>
		</editor>
		<meeting><address><addrLine>London</addrLine></address></meeting>
		<imprint>
			<publisher>Pitman</publisher>
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Optimisation of the Architecture of Feed-forward Neural Networks with Hidden Layers by Unit Elimination</title>
		<author>
			<persName><forename type="first">Anthony</forename><forename type="middle">N</forename><surname>Burkitt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Complex Systems</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="371" to="380" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Handbook of Genetic Algorithms</title>
		<author>
			<persName><forename type="first">Lawrence</forename><surname>Davis</surname></persName>
		</author>
		<editor>Van Nostrand Reinhold</editor>
		<imprint>
			<date type="published" when="1991">1991</date>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">E</forename><surname>Goldberg</surname></persName>
		</author>
		<title level="m">Genetic Algorithms in Search, Optimization &amp; Machine Learning</title>
		<meeting><address><addrLine>Reading, Mass</addrLine></address></meeting>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Genetic Algorithms and Walsh Functions: Part I, A Gentle Introduction</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">E</forename><surname>Goldberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Complex Systems</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="129" to="152" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Real-coded Genetic Algorithms, Virtual Alphabets, and Blocking</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">E</forename><surname>Goldberg</surname></persName>
		</author>
		<idno>No. 90001</idno>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
		<respStmt>
			<orgName>Department of General Engineering, University of Illinois at Urbana-Champaign</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report IlliGAL Report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Loci and the Traveling Salesman Problem</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">E</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Lingle</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName><surname>Alleles</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of an International Conference on Genetic Algorithms</title>
		<meeting>an International Conference on Genetic Algorithms<address><addrLine>Hillsdale</addrLine></address></meeting>
		<imprint>
			<publisher>Lawrence Erlbaum Associates</publisher>
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">GANNET: Design of a Neral Net for Face Recognition by a Genetic Algorithm</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName><surname>Hancock</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
		<respStmt>
			<orgName>University of Stirling</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">The Genetic Synthesis of Neural Networks</title>
		<author>
			<persName><forename type="first">Alex</forename><surname>Steven</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tariq</forename><surname>Harp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aloke</forename><surname>Samad</surname></persName>
		</author>
		<author>
			<persName><surname>Guha</surname></persName>
		</author>
		<idno>CSDD-89-I4852-2</idno>
		<imprint>
			<date type="published" when="1989">1989</date>
			<pubPlace>Honeywell</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Towards the Genetic Synthesis of Neural Networks</title>
		<author>
			<persName><forename type="first">Alex</forename><surname>Steven</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tariq</forename><surname>Harp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aloke</forename><surname>Samad</surname></persName>
		</author>
		<author>
			<persName><surname>Guha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third International Conference on Genetic Algorithms</title>
		<meeting>the Third International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Adaptation in Natural and Artificial Systems</title>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">H</forename><surname>Holland</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975">1975</date>
			<publisher>University of Michigan Press</publisher>
			<pubPlace>Ann Arbor</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Genetic Programming: A Paradigm for Genetically Breeding Populations of Computer Programs to Solve Problems</title>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">R</forename><surname>Koza</surname></persName>
		</author>
		<idno>STAN-CS-90-1314</idno>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Evolving a Computer to Generate Random Numbers Using the Genetic Programming Paradigm</title>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">R</forename><surname>Koza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth International Conference on Genetic Algorithms</title>
		<meeting>the Fourth International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="37" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Designing Neural Networks using Genetic Algorithms</title>
		<author>
			<persName><forename type="first">Geoffrey</forename><forename type="middle">F</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peter</forename><forename type="middle">M</forename><surname>Todd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shailesh</forename><forename type="middle">U</forename><surname>Hegde</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third International Conference on Genetic Algorithms</title>
		<meeting>the Third International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Training Feedforward Neural Networks Using Genetic Algorithms</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">J</forename><surname>Montana</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lawrence</forename><surname>Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eleventh International Joint Conference on Artificial Intelligence</title>
		<meeting>the Eleventh International Joint Conference on Artificial Intelligence</meeting>
		<imprint>
			<date type="published" when="1989">1989</date>
			<biblScope unit="page" from="762" to="767" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Parallel Genetic Algorithms, Population Genetics and Combinatorial Optimization</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">M</forename><surname>Ühlenbein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third International Conference on Genetic Algorithms</title>
		<meeting>the Third International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The Dynamics of Evolution and Learning -Towards Genetic Neural Networks</title>
		<author>
			<persName><forename type="first">H</forename></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kindermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Connectionism in Perspective</title>
		<editor>
			<persName><forename type="first">P</forename><surname>Pfiefer</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Z</forename><surname>Schreter</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">F</forename><surname>Fogelman-Soulié</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">L</forename><surname>Steels</surname></persName>
		</editor>
		<meeting><address><addrLine>North-Holland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">A Genetic Approach to Topology Optimisation for Multiprocessor Architectures</title>
		<author>
			<persName><forename type="first">Michael</forename><surname>Norman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
		</imprint>
		<respStmt>
			<orgName>University of Edinburgh</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">The Permutation Problem</title>
		<author>
			<persName><forename type="first">Nicholas</forename><forename type="middle">J</forename><surname>Radcliffe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
	<note>unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Genetic Neural Networks on MIMD Computers</title>
		<author>
			<persName><forename type="first">Nicholas</forename><forename type="middle">J</forename><surname>Radcliffe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
		</imprint>
		<respStmt>
			<orgName>University of Edinburgh</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Equivalence Class Analysis of Genetic Algorithms</title>
		<author>
			<persName><forename type="first">Nicholas</forename><forename type="middle">J</forename><surname>Radcliffe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Complex Systems</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="183" to="205" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Forma Analysis and Random Respectful Recombination</title>
		<author>
			<persName><forename type="first">Nicholas</forename><forename type="middle">J</forename><surname>Radcliffe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth International Conference on Genetic Algorithms</title>
		<meeting>the Fourth International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="222" to="229" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">A Bibliography of the Intersection of Genetic Search and Neural Networks</title>
		<author>
			<persName><forename type="first">Mike</forename><surname>Rudnick</surname></persName>
		</author>
		<idno>CS/E 90-001</idno>
		<imprint>
			<date type="published" when="1990">1990</date>
			<pubPlace>Oregon Graduate Centre</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Learning Representations by Back-Propagating Errors</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Rumelhart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">323</biblScope>
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A Study of the Control Parameters Affecting Online Performance of Genetic Algorithms for Function Optimisation</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">David</forename><surname>Schaffer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Richard</forename><forename type="middle">A</forename><surname>Caruna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Larry</forename><forename type="middle">J</forename><surname>Eshelman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajarshi</forename><surname>Das</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third International Conference on Genetic Algorithms</title>
		<meeting>the Third International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">On Crossover as an Evolutionarily Viable Strategy</title>
		<author>
			<persName><forename type="first">J</forename></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Schaffer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Larry</forename><forename type="middle">J</forename><surname>Eshelman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth International Conference on Genetic Algorithms</title>
		<meeting>the Fourth International Conference on Genetic Algorithms</meeting>
		<imprint>
			<biblScope unit="page" from="61" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Morgan</forename><surname>Kaufmann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<pubPlace>San Mateo</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Neural Net Pruning -Why and How</title>
		<author>
			<persName><forename type="first">J</forename><surname>Seitsma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J F</forename><surname>Dow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Conference on Neural Networks</title>
		<meeting>the IEEE Conference on Neural Networks</meeting>
		<imprint>
			<date type="published" when="1988">1988</date>
			<biblScope unit="volume">II</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">On the Virtues of Parameterised Uniform Crossover</title>
		<author>
			<persName><forename type="first">William</forename><forename type="middle">M</forename><surname>Spears</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kenneth</forename><forename type="middle">A De</forename><surname>Jong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth International Conference on Genetic Algorithms</title>
		<meeting>the Fourth International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="230" to="236" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Uniform Crossover in Genetic Algorithms</title>
		<author>
			<persName><forename type="first">Gilbert</forename><surname>Syswerda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third International Conference on Genetic Algorithms</title>
		<meeting>the Third International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">D</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName><surname>Vose</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<publisher>Personal Communication</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Generalizing the Notion of Schema in Gentic Algorithms</title>
		<author>
			<persName><forename type="first">D</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName><surname>Vose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint/>
	</monogr>
	<note>in press</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Schema Disruption</title>
		<author>
			<persName><forename type="first">D</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gunar</forename><forename type="middle">E</forename><surname>Vose</surname></persName>
		</author>
		<author>
			<persName><surname>Liepins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth International Conference on Genetic Algorithms</title>
		<meeting>the Fourth International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="237" to="243" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Combining Neural and Evolutionary Learning: Aspects and Approaches</title>
		<author>
			<persName><forename type="first">Gerhard</forename><surname>Weiss</surname></persName>
		</author>
		<idno>FKI-132-90</idno>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>Forschungsberichte K ünstliche Intelligenz</publisher>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Applying Genetic Algorithms to Neural Network Problems: A Preliminary Report</title>
		<author>
			<persName><forename type="first">Darrell</forename><surname>Whitley</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>Unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Using Reproductive Evaluation to Improve Genetic Search and Heuristic Discovery</title>
		<author>
			<persName><forename type="first">Darrell</forename><surname>Whitley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second International Conference on Genetic Algorithms</title>
		<meeting>the Second International Conference on Genetic Algorithms<address><addrLine>Hillsdale</addrLine></address></meeting>
		<imprint>
			<publisher>Lawrence Erlbaum Associates</publisher>
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Genetic Reinforcement Learning With Multilayer Neural Networks</title>
		<author>
			<persName><forename type="first">Darrell</forename><surname>Whitley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stephen</forename><surname>Dominic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajarshi</forename><surname>Das</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth International Conference on Genetic Algorithms</title>
		<meeting>the Fourth International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">The Genitor Algorithm: Using Genetic Algorithms to Optimize Neural Networks</title>
		<author>
			<persName><forename type="first">Darrell</forename><surname>Whitley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Thomas</forename><surname>Hanson</surname></persName>
		</author>
		<idno>CS-89-107</idno>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
		<respStmt>
			<orgName>Colorado State University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Genetic Algorithms and Neural Networks: Optimizing Connections and Connectivity</title>
		<author>
			<persName><forename type="first">Darrell</forename><surname>Whitley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Timothy</forename><surname>Starkweather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Bogart</surname></persName>
		</author>
		<idno>CS-89-117</idno>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
		<respStmt>
			<orgName>Colorado State University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Scheduling Problems and Traveling Salesmen: The Genetic Edge Recombination Operator</title>
		<author>
			<persName><forename type="first">Darrell</forename><surname>Whitley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Timothy</forename><surname>Starkweather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Ann</forename><surname>Fuquay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third International Conference on Genetic Algorithms</title>
		<meeting>the Third International Conference on Genetic Algorithms<address><addrLine>San Mateo</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">The Traveling Salesmen and Sequence Sheduling: Quality Solutions Using Genetic Edge Recombination</title>
		<author>
			<persName><forename type="first">Darrell</forename><surname>Whitley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Timothy</forename><surname>Starkweather</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Danial</forename><surname>Shaner</surname></persName>
		</author>
		<editor>Lawrence Davis</editor>
		<imprint>
			<date type="published" when="1991">1991</date>
			<publisher>Van Nostrand Reinhold</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
	<note>Handbook of Genetic Algorithms</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
