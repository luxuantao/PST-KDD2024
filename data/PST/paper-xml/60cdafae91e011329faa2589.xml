<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">LoRA: Low-Rank Adaptation of Large Language Models</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2021-06-17">17 Jun 2021</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Edward</forename><surname>Hu</surname></persName>
							<email>edwardhu@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Microsoft Corporation</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yelong</forename><surname>Shen</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Microsoft Corporation</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Phillip</forename><surname>Wallis</surname></persName>
							<email>phwallis@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Microsoft Corporation</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Zeyuan</forename><surname>Allen-Zhu</surname></persName>
							<email>zeyuana@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Microsoft Corporation</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yuanzhi</forename><surname>Li</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Microsoft Corporation</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Shean</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Microsoft Corporation</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Weizhu</forename><surname>Chen</surname></persName>
							<email>wzchen@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="institution">Microsoft Corporation</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">LoRA: Low-Rank Adaptation of Large Language Models</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2021-06-17">17 Jun 2021</date>
						</imprint>
					</monogr>
					<idno type="arXiv">arXiv:2106.09685v1[cs.CL]</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-01-03T08:47+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The dominant paradigm of natural language processing consists of large-scale pre-training on general domain data and adaptation to particular tasks or domains. As we pre-train larger models, conventional fine-tuning, which retrains all model parameters, becomes less feasible. Using GPT-3 175B as an example, deploying many independent instances of fine-tuned models, each with 175B parameters, is extremely expensive. We propose Low-Rank Adaptation, or LoRA, which freezes the pre-trained model weights and injects trainable rank decomposition matrices into each layer of the Transformer architecture, greatly reducing the number of trainable parameters for downstream tasks. For GPT-3, LoRA can reduce the number of trainable parameters by 10,000 times and the computation hardware requirement by 3 times compared to full fine-tuning. LoRA performs on-par or better than fine-tuning in model quality on both GPT-3 and GPT-2, despite having fewer trainable parameters, a higher training throughput, and no additional inference latency. We also provide an empirical investigation into rank-deficiency in language model adaptations, which sheds light on the efficacy of LoRA. We release our implementation in GPT-2 at https://github.com/microsoft/LoRA. * Equal contribution. 2 While GPT-3 175B achieves non-trivial performance with few-shot learning, fine-tuning boosts its performance significantly as shown in Appendix A.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Many applications in natural language processing rely on adapting one large scale, pre-trained language model to multiple downstream applications. Such adaptation is usually done via fine-tuning, which updates all the parameters of the pre-trained model. The major downside of fine-tuning is that it requires storing as many parameters as in the original model. As larger models are trained every few months, this changes from a mere "inconvenience" for GPT-2 <ref type="bibr" target="#b31">[32]</ref> or BERT-large <ref type="bibr" target="#b8">[9]</ref> to a critical deployment challenge for GPT-3 <ref type="bibr" target="#b5">[6]</ref> with 175 billion trainable parameters. 2   Many researchers sought to mitigate this by adapting only some parameters or learning external modules for new tasks. This way, we only need to load a small number of task-specific parameters to the pre-trained model for each task, which greatly boosts the deployment efficiency. However, in practice, existing techniques either introduce inference latency <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b33">34]</ref> by extending model depth or reduce the model's usable sequence length <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b24">25]</ref>. More importantly, these prior attempts sometimes fail to match the fine-tuning baselines, posing a trade-off between efficiency and model quality.</p><p>We take inspiration from <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b19">20]</ref> which show that the learned over-parametrized models in fact reside on a low intrinsic dimension. We hypothesize that the update matrices in language model adaptation also have a low "intrinsic rank", leading to our proposed Low-Rank Adaptation (LoRA) approach. LoRA allows us to train every dense layer in a neural network indirectly by injecting and optimizing rank decomposition matrices of the dense layer's update instead, while keeping the original matrices frozen, as shown in Fig. <ref type="figure" target="#fig_0">1</ref>. Using GPT-3 175B as an example, we show that a very low rank (i.e., r in Fig. <ref type="figure" target="#fig_0">1</ref> can be one or two) suffices even when the full rank (i.e., d) is as high as 12288, making LoRA both space-and compute-efficient.</p><p>LoRA possesses several key advantages as follows.</p><p>? A single pre-trained model can be shared and used to build many small LoRA modules for different tasks. We can keep the shared original model in VRAM and efficiently switch tasks by replacing the matrices A and B in Fig. <ref type="figure" target="#fig_0">1</ref>, which significantly reduces the storage requirement and task-switching overhead.</p><p>? It makes training more efficient and lowers the hardware barrier to entry by 3 times, since we do not need to calculate the gradients or maintain the optimizer states for most model parameters when using adaptive optimizers. Instead, we only optimize the injected low-rank matrices, which have much fewer parameters.</p><p>? Its simple linear design allows us to merge the update matrices with the original weights during deployment, introducing no inference latency.</p><p>? LoRA is orthogonal to prior techniques and can be combined with many of them (such as prefix-tuning). We provide an example in Appendix D.</p><p>Terminologies We make frequent references to the Transformer architecture and use the conventional terminologies for its dimensions. We call its hidden size, or the size of its activations, d model . We use W q , W k , W v , and W o to refer to the query/key/value/output projection matrices in the self-attention module. W or W 0 refers to a pre-trained weight matrix and ?W its update during adaptation. We use r to denote the rank of a LoRA module.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Problem Statement</head><p>While our proposal is agnostic to the training objective, we focus on language modeling as the primary use case. Below is a brief description of the language modeling problem and, in particular, the maximization of conditional probabilities given a task-specific prompt.</p><p>Suppose we are given a pre-trained autoregressive language model p ? (y|x) that is parametrized by ?. For instance, p ? (y|x) can be a generic multi-task learner such as GPT-2 <ref type="bibr" target="#b31">[32]</ref> or GPT-3 <ref type="bibr" target="#b5">[6]</ref> based on the Transformer architecture <ref type="bibr" target="#b35">[36]</ref>. Now, consider adapting this pre-trained model to (possibly multiple) downstream conditional text generation tasks, such as summarization, machine reading comprehension (MRC), and natural language to SQL (NL2SQL). Each downstream task is represented by a training dataset of context-target pairs: Z = {(x i , y i )} i=1,..,N , where both x i and y i are sequences of tokens. For example, in NL2SQL, x i is a natural language query and y i its equivalent SQL command; for summarization, x i is the content of an article and y i its short summary.</p><p>During fine-tuning, the model is initialized with pre-trained parameters ? 0 and updated to ? 0 + ?? by repeatedly following the gradient to maximize the conditional language modeling objective:</p><formula xml:id="formula_0">max ? (x,y)?Z |y| t=1 log (p ? (y t |x, y &lt;t ))<label>(1)</label></formula><p>One of the main drawbacks for full fine-tuning is that for each downstream task, we learn a different set of parameters ?? whose dimensions |??| equals |? 0 |. Thus, if the pre-trained model is large (such as GPT-3 with |? 0 | ? 175 Billion), storing and deploying many independent instances of fine-tuned models can be challenging, if at all plausible.</p><p>In this paper, we adopt a parameter-efficient approach, where the task-specific parameter increment </p><p>As we shall see in the subsequent sections, we propose to use a low-rank representation to encode ?? that is both computational and memory efficient. When the pre-trained model is GPT-3, the size of trainable parameters |?| can be as small as 0.01% of |? 0 |.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Our Method</head><p>We describe the simple design of LoRA and its practical implications. The principles outlined here apply to any dense layers in deep learning models, though we only focus on certain weights in Transformers in our experiments for practical reasons.</p><p>Low-Rank Constraint on Update Matrices. A typical neural network contains numerous dense layers that perform matrix multiplication. The weight matrices in these layers are allowed to have full-rank. When adapting to a specific task, however, Aghajanyan et al. <ref type="bibr" target="#b0">[1]</ref> shows that the pretrained language models have a low "instrisic dimension" and can still learn efficiently despite a low-dimensional reparametrization. Inspired by this observation, we wonder if the updates to the weights also have a low "intrinsic rank" when adapting to downstream tasks. For a pre-trained weight matrix W 0 ? R d?k , we constrain its update by representing it with a low-rank decomposition W 0 +?W = W 0 +BA, where B ? R d?r , A ? R r?k , and the rank r min(d, k). During training, W 0 is frozen and does not receive gradient updates, while A and B contain trainable parameters. Note both W 0 and ?W = BA are multiplied with the same input, and their respective output vectors are summed coordinate-wise. For h = W 0 x, our modified forward pass yields:</p><formula xml:id="formula_2">h = W 0 x + ?W x = W 0 x + BAx<label>(3)</label></formula><p>We illustrate our reparametrization in Fig. <ref type="figure" target="#fig_0">1</ref>. We use a random Gaussian initialization for A and zero for B, so ?W = BA is zero at the beginning of training. We then scale ?W x by 1 r during training to keep the coordinates of ?W x roughly ?(1) in r after training <ref type="bibr">[? ]</ref>.</p><p>Weight Decay to Pre-trained Weights. We note that weight decay behaves differently with LoRA than with full fine-tuning. Specifically, preforming the usual weight decay on A and B is similar to decaying back to the pre-trained weights, which has been studied as a potentially effective form of regularization against "catastrophic forgetting" <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b17">18]</ref>. While extensive experiments isolating its effect is out-of-scope for this work, we believe that this, coupled with a constrained parameter space, might provide some regularization advantages. For example, see how LoRA with r = d model = 1024 outperforms full fine-tuning on GPT-2 Medium in Sec. 5.3 and Sec. G.2.</p><p>No Additional Inference Latency. During deployment, we can explicitly compute W = W 0 + BA and perform inference as usual. When we need to switch to another downstream task, we can recover W 0 by subtracting BA and then adding a different B A . This causes a minor increase in peak memory usage and adds a latency to model switching that does not exceed a single model forward pass. Critically, we do not introduce any additional latency during inference in return.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Applying LoRA to Transformer</head><p>In principle, we can apply LoRA to any subset of weight matrices in a neural network to reduce the number of trainable parameters. In the Transformer architecture, there are four weight matrices in the self-attention module (W q , W k , W v , W o ) and two in the MLP module. We treat W q (or W k , W v ) as a single matrix of dimension d model ? d model , even though the output dimension is usually sliced into attention heads. We limit our study to only changing the attention weights for downstream tasks and freeze the MLP modules (so they are not trained in downstream tasks) since applying LoRA to the latter results in 4 times the number of trainable parameters given the same rank r. We further study the effect on adapting different types of weight matrices in a Transformer in Sec. 6.1.</p><p>Practical Benefits and Limitations. The most significant benefit comes from the reduction in memory and storage usage. For a Transformer, we reduce the VRAM consumption by 2/3 if r d model as we do not need to keep track of the optimizer states for the frozen parameters. We also reduce the checkpoint size by roughly d model 2?r times, where ? is the fraction of weight matrices on which we apply LoRA. On GPT-3, our motivating use case, we reduce the VRAM consumption from 1.2TB to 350GB. With r = 4 and ? = 1 /6, the checkpoint size is reduced by roughly 10,000? (from 350GB to 35MB) <ref type="foot" target="#foot_0">3</ref> . This allows us to train with significantly fewer GPUs and avoid I/O bottlenecks. Another benefit is that during deployment, we can switch between tasks at a much lower cost by only swapping the LoRA weights, often measured in megabytes, as opposed to all the weights (350GB). This allows for the creation of many customized models that can be activated and deactivated on the fly on machines that store the pre-trained weights. We also observe a 25% speedup during training as we do not need to calculate the gradient for the vast majority of the parameters.</p><p>On the other hand, LoRA has its limitations. For example, it is not straightforward to batch inputs to different tasks with different A and B in a single forward pass, because we absorb A and B into W to prevent additional inference latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Works</head><p>Transformer Language Models. Transformer <ref type="bibr" target="#b35">[36]</ref> is a sequence-to-sequence architecture that makes heavy use of self-attention. <ref type="bibr" target="#b30">[31]</ref> applied it to autoregressive language modeling by using a stack of Transformer decoders. Since then, Transformer-based language models have dominated NLP, achieving the state-of-the-art in many tasks. A new paradigm emerged with BERT <ref type="bibr" target="#b8">[9]</ref> and GPT-2 <ref type="bibr" target="#b31">[32]</ref> -both are large Transformer language models trained on a large amount of text -where fine-tuning on task-specific data after pre-training on general domain data provides a significant performance gain compared to training on task-specific data directly. Training larger Transformers generally results in better performance and remains an active research direction. GPT-3 <ref type="bibr" target="#b5">[6]</ref> is the largest single Transformer language model trained to-date with 175B parameters.</p><p>Prompt Engineering and Fine-Tuning. While GPT-3 175B can adapt its behavior with just a few additional training examples, the result depends heavily on the input prompt <ref type="bibr" target="#b5">[6]</ref>. This necessitates an empirical art of composing and formatting the prompt to maximize a model's performance on a desired task, which is known as prompt engineering or prompt hacking. Fine-tuning retrains a model pre-trained on general domains to a specific task <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b30">31]</ref>. Variants of it include learning just a subset of the parameters <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9]</ref>, yet practitioners often retrain all of them to maximize the downstream performance. However, the enormity of GPT-3 175B makes it challenging to perform fine-tuning in the usual way due to the large checkpoint it produces and the high hardware barrier to entry since it has the same memory footprint as pre-training.</p><p>Parameter-Efficient Adaptation. <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b33">34]</ref> propose inserting adapter layers between existing layers in a neural network. Our method uses a bottleneck structure similar to <ref type="bibr" target="#b14">[15]</ref> to impose a low-rank constraint on the weight updates. The key functional difference is that our learned weights can be merged with the main weights during inference, thus not introducing any latency, which is not the case for the adapter layers. More recently, <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b24">25]</ref> proposed optimizing the input word embeddings in lieu of fine-tuning, akin to a continuous and differentiable generalization of prompt engineering. We include comparisons with <ref type="bibr" target="#b20">[21]</ref> in our experiment section. However, this line of works can only scale up by using more special tokens in the prompt, which take up available sequence length for task tokens when positional embeddings are learned.</p><p>Low-Rank Structures in Deep Learning. Low-rank structure is very common in machine learning. A lot of machine learning problems have certain intrinsic low-rank structure <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b23">24]</ref>. Moreover, it is known that for many deep learning tasks, especially those with a heavily over-parametrized neural network, the learned neural network will enjoy low-rank properties after training <ref type="bibr" target="#b28">[29]</ref>. Some prior works even explicitly impose the low-rank constraint when training the original neural network, such as <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b38">39]</ref>, however, to the best of our knowledge, none of these works considers low-rank update for adaptation to downstream tasks. In theory literature, it is known that neural networks outperform other classical learning methods, including the corresponding (finite-width) neural tangent kernels <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b21">22]</ref> when the underlying concept class has certain low-rank structure <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b10">11]</ref>. Another theoretical result in <ref type="bibr" target="#b3">[4]</ref> suggests that low-rank adaptations can be useful for adversarial training. In sum, we believe that our proposed low-rank adaptation update is well-motivated by the literature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Empirical Experiments</head><p>We benchmark the downstream performance of LoRA on both GPT-2 and GPT-3. Specifically, we focus on WikiSQL <ref type="bibr" target="#b39">[40]</ref> (natural language to SQL queries), MultiNLI <ref type="bibr" target="#b36">[37]</ref> (natural language inference) <ref type="foot" target="#foot_1">4</ref> , and SAMSum <ref type="bibr" target="#b11">[12]</ref> (conversation summarization) for GPT-3.For a direct comparison with <ref type="bibr" target="#b20">[21]</ref> on GPT-2, we follow their setup and use Table-to-Text E2E NLG Challenge <ref type="bibr" target="#b27">[28]</ref>, a language generation task. See Appendix B for more details on these datasets. We also compare with the other tuning methods such as <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b24">25]</ref>. We use NVIDIA Tesla V100 GPUs for all of our experiments. For GPT-3, we use 96 GPUs for fine-tuning and 24 GPUs for LoRA. We use a single GPU for GPT-2 experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Baselines</head><p>We compare with the following baselines. Note that we implemented both prefix-embedding and prefix-layer tuning in GPT-3 on our own according to <ref type="bibr" target="#b20">[21]</ref>, while the non-LoRA baselines all come from the implementation of <ref type="bibr" target="#b20">[21]</ref>.</p><p>Fine-Tuning is the de facto default adaptation approach, where the model is initialized to the pretrained parameters. During fine-tuning, all the model parameters undergo gradient updates according to Eqn. 1. A simple variant of it is to update only some layers while freezing others. We include one such baseline reported in prior work <ref type="bibr" target="#b20">[21]</ref>, which tunes just the last two layers (FT-Top2).</p><p>Bias only is a baseline where we only train the bias vectors when adapting to downstream tasks.</p><p>Prefix-embedding tuning injects special tokens alongside the input tokens. These special tokens have trainable word embeddings and are generally not in the model's vocabulary. The placement of such tokens can have an impact on performance. We focus on "prefixing", which prepends these tokens to the prompt, and "infixing", which appends to the prompt; both are discussed in <ref type="bibr" target="#b20">[21]</ref>. We use l p (resp. l i ) denote the number of prefix (resp. infix) tokens. The number of trainable parameters is</p><formula xml:id="formula_3">|?| = d model ? (l p + l i ).</formula><p>Prefix-layer tuning is an extension to prefix-embedding tuning. Instead of just learning the word embeddings (or equivalently, the activations after the embedding layer) for some special tokens, we learn the activations after every layer. The activations computed from previous layers are simply replaced by our trainable ones. The resulting number of trainable parameters is |?| = L ? d model ? (l p + l i ), where L is the number of layers (96 for GPT-3).</p><p>Adapter tuning <ref type="bibr" target="#b14">[15]</ref> inserts adapter layers between the self-attention module (and the MLP module) and the subsequent residual connection. There are two weight matrices in an adapter layer with a nonlinearity in between. The dimension of the hidden layer in an adapter layer determines the total number of trainable parameters. For a hidden size of n, we have</p><formula xml:id="formula_4">|?| = 4 ? L ? d model ? n.</formula><p>LoRA adds trainable pairs of rank decomposition matrices to existing weight matrices. As mentioned in Sec. 3.1 and supported by our analysis in Sec. 6.1, we only apply LoRA to W q and W v in our experiments. The number of trainable parameters is determined by the rank r and the shape of the original weights:</p><formula xml:id="formula_5">|?| = 2 ? L ? d model ? r.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Performance on GPT-3</head><p>Hyperparameters For all of our GPT-3 experiments, we train using AdamW <ref type="bibr" target="#b25">[26]</ref> for 2 epochs with a batch size of 100k tokens, a sequence length of 768, and a weight decay factor of 0.1. We tune the learning rate for all method-dataset combinations. See Sec. C.1 for more details. For prefix-embedding tuning, we find the optimal l p and l i to be 256 and 8, respectively, totalling 3.2M trainable parameters. We use l p = 8 and l i = 8 in PrefixLayer with 20.2M trainable parameters to obtain the overall best performance. We present two configurations for LoRA: one with r q = r v = 4 (18.8M) and one with r q = r v = 8 (37.7M).</p><p>As shown in Table <ref type="table" target="#tab_1">1</ref>, on all three datasets, LoRA outperforms the fine-tuning baseline. It might appear that prefix-embedding tuning could benefit from having more trainable parameters since it uses much fewer parameters than other methods. Nonetheless, this is not the case as shown in Fig. <ref type="figure" target="#fig_2">2</ref>. We observe a significant performance drop when we use more than 256 special tokens for prefix-embedding tuning or more than 32 special tokens for prefix-layer tuning. This corroborates the similar observation reported in <ref type="bibr" target="#b20">[21]</ref>. While a thorough investigation into this phenomenon is out-of-scope for this work, we suspect that having more special tokens causes the input distribution to shift further away from the pre-training data distribution, degrading the model performance. Separately, we investigate the performance of adaptation approaches in the low-data regime in Sec. E.3.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Performance on GPT-2</head><p>Having established LoRA as a competitive method on GPT-3, we hope to answer if LoRA can also work on less overly parametrized models, such as GPT-2 medium or large <ref type="bibr" target="#b31">[32]</ref>. We keep our setup as close as possible to <ref type="bibr" target="#b20">[21]</ref> for a direct comparison. Due to space constraint, we only present our result on E2E NLG Challenge (Table <ref type="table" target="#tab_3">2</ref>) in this section -see Sec. E.2 for results on more datasets.</p><p>Hyperparameters We train all of our GPT-2 models using AdamW <ref type="bibr" target="#b25">[26]</ref> and a linear learning rate schedule for 5 epochs. We use the batch size, learning rate, and beam search beam size described in <ref type="bibr" target="#b20">[21]</ref>. Accordingly, we also tune these hyperparameters for LoRA, and we include a list of the used hyperparameters in </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Understanding the Low-Rank Updates</head><p>Given the empirical advantage of LoRA, we hope to further explain the properties of the low-rank adaptation learned from downstream tasks. Note that the low-rank structure not only lowers the hardware barrier to entry which allows us to run multiple experiments in parallel, but also gives better interpretability of how the update weights are correlated with the pre-trained weights.</p><p>We perform a sequence of empirical studies to answer the following questions: 1) Given a parameter budget constraint, which subset of weight matrices in a pre-trained Transformer should we adapt to maximize downstream performance? 2) Is the "optimal" adaptation matrix ?W really rank-deficient?</p><p>If so, what is a good rank to use in practice? 3) What is the connection between ?W and W ? Does ?W highly correlate with W ? How large is ?W comparing to W ?</p><p>We believe that our answers to question (2) and (3) shed light on the fundamental principles of using pre-trained language models for downstream tasks, which is a critical topic in NLP.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Which Weight Matrices in Transformer Should</head><p>We Apply LoRA to?</p><p>Given a limited parameter budget, which types of weights should we adapt with LoRA to obtain the best performance on downstream tasks? As mentioned in Sec. 3.1, we only consider weight matrices in the self-attention module. We set a parameter budget of 18M (roughly 35MB) on GPT-3, which corresponds to r = 8 if we adapt one type of weights or r = 4 if we adapt two types, for all 96 layers. The result is presented in Table <ref type="table">3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head># of Trainable Parameters = 18M</head><p>Weight Type Table <ref type="table">3</ref>: Validation accuracy on WikiSQL and MultiNLI after applying LoRA to different types of attention weights in GPT-3, given the same number of trainable parameters. Adapting both W q and W v gives the best performance overall. We find the standard deviation across random seeds to be consistent for a given dataset, which we report in the first column.</p><formula xml:id="formula_6">W q W k W v W o W q , W k W q , W v Rank r<label>8</label></formula><p>Note that putting all the parameters in ?W q or ?W k results in significantly lower performance, while adapting both W q and W v yields the best result. This suggests that even a rank of four captures enough information in ?W such that it is preferable to adapt more weight matrices than adapting a single type of weights with a larger rank.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">What is the Optimal Rank r for LoRA?</head><p>We turn our attention to the effect of rank r on model performance. We adapt both W q and W v since they performed the best in the previous experiment and as well as W q alone for comparison.</p><p>Weight Type r = 1 r = 2 r = 4 r = 8 r = 64 To our surprise, a rank as small as one suffices for adapting both W q and W v on these datasets while training W q alone needs a larger r. We replicate this on GPT-2 in Sec. G.2.</p><formula xml:id="formula_7">WikiSQL(?0.3%) W q , W v 73.</formula><p>Table <ref type="table" target="#tab_4">4</ref> shows that, surprisingly, LoRA already performs competitively with a very small r (more so for W q+v than W q ). This suggests the update matrix ?W could have a very small "intrinsic rank". <ref type="foot" target="#foot_2">5</ref>To further support this finding, we check the overlap of the subspaces learned by different choices of r and by different random seeds. We argue that increasing r does not cover more meaningful subspaces, which suggests that a low-rank adaptation matrix is sufficient.</p><p>Subspace similarity between different r. Given A r=8 and A r=64 which are the learned adaptation matrices with rank r = 8 and 64 using the same pre-trained model, we perform singular value decomposition and obtain the right-singular unitary matrices U Ar=8 and U Ar=64 . <ref type="foot" target="#foot_3">6</ref> We hope to answer: how much of the subspace spanned by the top i singular vectors in U Ar=8 (for 1 ? i ? 8) is contained in the subspace spanned by top j singular vectors of U Ar=64 (for 1 ? j ? 64)? We measure this quantity with a normalized subspace similarity based on the Grassmann distance (See Appendix F for a more formal discussion)</p><formula xml:id="formula_8">?(A r=8 , A r=64 , i, j) = ||U i Ar=8 U j Ar=64 || 2 F min(i, j) ? [0, 1]<label>(4)</label></formula><p>where U i Ar=8 represents the columns of U Ar=8 corresponding to the top-i singular vectors. ?(?) has a range of [0, 1], where 1 represents a complete overlap of subspaces and 0 a complete separation. See Fig. <ref type="figure" target="#fig_5">3</ref> for how ? changes as we vary i and j. We only look at the 48th layer (out of 96) due to space constraint, but the conclusion holds for other layers as well, as shown in Sec. G.1.  We make an important observation from Fig. <ref type="figure" target="#fig_5">3</ref>.</p><p>Directions corresponding to the top singular vector overlap significantly between A r=8 and A r=64 , while others do not. Specifically, ?W v (resp. ?W q ) of A r=8 and ?W v (resp. ?W q ) of A r=64 share a subspace of dimension 1 with normalized similarity &gt; 0.5, providing an explanation of why r = 1 performs quite well in our downstream tasks for GPT-3.</p><p>Since both A r=8 and A r=64 are learned using the same pre-trained model, Fig. <ref type="figure" target="#fig_5">3</ref> indicates that the top singular-vector directions of A r=8 and A r=64 are the most useful, while other directions potentially contain mostly random noises accumulated during training. Hence, the adaptation matrix can indeed have a very low rank.  Subspace similarity between different random seeds. We further confirm this by plotting the normalized subspace similarity between two randomly seeded runs with r = 64, shown in Fig. <ref type="figure" target="#fig_7">4</ref>. ?W q appears to have a higher "intrinsic rank" than ?W v , since more common singular value directions are learned by both runs for ?W q , which is in line with our empirical observation in Table <ref type="table" target="#tab_4">4</ref>. As a comparison, we also plot two random Gaussian matrices, which do not share any common singular value directions with each other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">How Does the Adaptation Matrix ?W Compare to W ?</head><p>We further investigate the relationship between ?W and W . In particular, does ?W highly correlate with W ? (Or mathematically, is ?W mostly contained in the top singular directions of W ?) Also, how "large" is ?W comparing to its corresponding directions in W ? This can shed light on the underlying mechanism for adapting pre-trained language models.</p><p>To answer these questions, we project W onto the r-dimensional subspace of ?W by computing U W V , with U /V being the left/right singular-vector matrix of ?W . Then, we compare the Frobenius norm between U W V F and W F . As a comparison, we also compute U W V F by replacing U, V with the top r singular vectors of W or a random matrix. </p><formula xml:id="formula_9">r = 4 r = 64 ?W q W q Random ?W q W q Random ||U W q V || F = 0.</formula><formula xml:id="formula_10">||W q || F = 61.95 ||?W q || F = 6.91 ||?W q || F = 3.57</formula><p>Table <ref type="table">5</ref>: The Frobenius norm of U W q V where U and V are the left/right top r singular vector directions of either (1) ?W q , (2) W q , or (3) a random matrix. The weight matrices are taken from the 48th layer of GPT-3.</p><p>We draw several conclusions from Table <ref type="table">5</ref>. First, ?W has a stronger correlation with W compared to a random matrix, indicating that ?W amplifies some features that are already in W . Second, instead of repeating the top singular directions of W , ?W only amplifies directions that are not emphasized in W . Third, the amplification factor is rather huge: 21.5 ? 6.91/0.32 for r = 4. See Sec. G.4 for why r = 64 has a smaller amplification factor. We also provide a visualization in Sec. G.3 for how the correlation changes as we include more top singular directions from W q . This suggests that the low-rank adaptation matrix potentially amplifies the important features for specific downstream tasks that were learned but not emphasized in the general pre-training model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion and Future Work</head><p>Fine-tuning enormous language models is prohibitively expensive in terms of both the hardware requirement and the storage/switching cost for hosting multiple instances. We propose LoRA, an efficient adaptation strategy that neither introduces inference latency nor reduces input sequence length while retaining model quality. Importantly, it allows for quick task-switching when deployed as a service by sharing the vast majority of the model parameters. While we focused on Transformer, the proposed principles are generally applicable to any neural networks with dense layers.</p><p>LoRA can potentially work in tandem with other fine-tuning techniques. In the future, we hope to explore only tuning some layers or adding adversarial training. Finally, the rank-deficiency of ?W suggests that W could be rank-deficient as well, which might inspire lots of future works.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Large Language Models Still Need Parameter Updates</head><p>Few-shot learning, or prompt engineering, is very advantageous when we only have a handful of training samples. However, in practice, we can often afford to curate a few thousand or more training examples for performance-sensitive applications. As shown in Table <ref type="table">6</ref>, fine-tuning improves the model performance drastically compared to few-shot learning on datasets large and small. We take the GPT-3 few-shot result on RTE from the GPT-3 paper <ref type="bibr" target="#b5">[6]</ref>. For MNLI-m task, we use two demonstrations per class or six in-context examples in total. Table <ref type="table">6</ref>: Fine-tuning significantly outperforms few-shot learning on GPT-3 <ref type="bibr" target="#b5">[6]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Dataset Details</head><p>MultiNLI is a natural language inference dataset <ref type="bibr" target="#b36">[37]</ref> consists of a sequence of slot-value pairs, along with a corresponding natural language reference text. The dataset is released under Creative Commons BY-NC-SA 4.0.</p><p>DART is an open-domain data-to-text dataset described in <ref type="bibr" target="#b26">[27]</ref>. DART inputs are structured as sequences of ENTITY | RELATION | ENTITY triples. With 82K examples in total, DART is a significantly larger and more complex data-to-text task compared to E2E. The dataset is released under the MIT license.</p><p>WebNLG is another commonly used dataset for data-to-text evaluation <ref type="bibr" target="#b9">[10]</ref>. With 22K examples in total WebNLG comprises 14 distinct categories, nine of which are seen during training. Since five of the 14 total categories are not seen during training, but are represented in the test set, evaluation is typically broken out by "seen" categories (S), "unseen" categories (U) and "all" (A). Each input example is represented by a sequence of SUBJECT | PROPERTY | OBJECT triples. The dataset is released under Creative Commons BY-NC-SA 4.0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Hyperparameters Used in Experiments C.1 GPT-3 Experiments</head><p>The training hyperparameters used in our GPT-3 experiments are listed in Table <ref type="table" target="#tab_7">7</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C.2 GPT-2 LoRA</head><p>The hyperparameters used for LoRA in GPT-2 are listed in Table <ref type="table" target="#tab_2">8</ref>. For those used for other baselines, see <ref type="bibr" target="#b20">[21]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D Combining LoRA with Prefix Tuning</head><p>LoRA can be naturally combined with existing prefix-based approaches. In this section, we evaluate two combinations of LoRA and variants of prefix-tuning on WikiSQL and MNLI.</p><p>LoRA+PrefixEmbed (LoRA+PE) combines LoRA with prefix-embedding tuning, where we insert l p + l i special tokens whose embeddings are treated as trainable parameters. For more on prefixembedding tuning, see Sec. 5.1.</p><p>LoRA+PrefixLayer (LoRA+PL) combines LoRA with prefix-layer tuning. We also insert l p + l i special tokens; however, instead of letting the hidden representations of these tokens evolve naturally, we replace them after every Transformer block with an input agnostic vector. Thus, both the embeddings and subsequent Transformer block activations are treated as trainable parameters. For more on prefix-layer tuning, see Sec. 5.1.</p><p>In Table <ref type="table">9</ref>, we show the evaluation results of LoRA+PE and LoRA+PL on WikiSQL and MultiNLI. First of all, LoRA+PE significantly outperforms both LoRA and prefix-embedding tuning on Wik-iSQL, which indicates that LoRA is somewhat orthogonal to prefix-embedding tuning. On MultiNLI, the combination of LoRA+PE doesn't perform better than LoRA, possibly because LoRA on its own already achieves performance comparable to the human baseline. Secondly, we notice that LoRA+PL performs slightly worse than LoRA even with more trainable parameters. We attribute this to the fact that prefix-layer tuning is very sensitive to the choice of learning rate and thus makes the optimization of LoRA weights more difficult in LoRA+PL.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E Additional Task-Based Experiments E.1 Additional Experiments on GPT-3</head><p>We present additional runs on GPT-3 with different adaptation methods in Table <ref type="table">9</ref>. The focus is on identifying the trade-off between performance and the number of trainable parameters. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Method</head><formula xml:id="formula_11">r q = r v = 8, l p = 8, l i = 4 37.8 M 75.0 91.4 r q = r v = 32, l p = 8, l i = 4</formula><p>151.1 M 75.9 91.1 r q = r v = 64, l p = 8, l i = 4</p><p>302.1 M 76.2 91.3</p><p>LoRA+PL r q = r v = 8, l p = 8, l i = 4 52.8 M 72.9 90.2</p><p>Table <ref type="table">9</ref>: Hyperparameter analysis of different adaptation approaches on WikiSQL and MNLI. Both prefix-embedding tuning (PrefixEmbed) and prefix-layer tuning (PrefixLayer) perform worse as we increase the number of trainable parameters, while LoRA's performance stabilizes. Performance is measured in validation accuracy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E.2 Additional Experiments on GPT-2</head><p>We also repeat our experiment on DART <ref type="bibr" target="#b26">[27]</ref> and WebNLG <ref type="bibr" target="#b9">[10]</ref> following the setup of <ref type="bibr" target="#b20">[21]</ref>. The result is shown in Table <ref type="table" target="#tab_10">10</ref>. Similar to our result on E2E NLG Challenge, reported in Sec. 5, LoRA performs better than or at least on-par with prefix-based approaches given the same number of trainable parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E.3 Low-Data Regime</head><p>To evaluate the performance of different Layer 96 i (A r = 8 , A r = 64 , i, j)</p><p>Figure <ref type="figure">5</ref>: Normalized subspace similarity between the column vectors of A r=8 and A r=64 for both ?W q and ?W v from the 1st, 32nd, 64th, and 96th layers in a 96-layer Transformer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.3 Correlation between W and ?W</head><p>See Fig. <ref type="figure">7</ref> for the normalized subspace similarity between W and ?W with varying r.</p><p>Note again that ?W does not contain the top singular directions of W , since the similarity between the top 4 directions in ?W and the top-10% of those in W barely exceeds 0.2. This gives evidence that ?W contains those "task-specific" directions that are otherwise not emphasized in W .</p><p>An interesting next question to answer, is how "strong" do we need to amplify those task-specific directions, in order for the model adaptation to work well?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.4 Amplification Factor</head><p>One can naturally consider a feature amplification factor as the ratio ?W F U W V F , where U and V are the left-and right-singular matrices of the SVD decomposition of ?W . (Recall U U W V V gives the "projection" of W onto the subspace spanned by ?W .) Intuitively, when ?W mostly contains task-specific directions, this quantity measures how much of them are amplified by ?W . As shown in Sec. 6.3, for r = 4, this amplification factor is as large as 20. In other words, there are (generally speaking) four feature directions in each layer (out of the entire feature space from the pre-trained model W ), that need to be amplified by a very large factor 20, in order to achieve our reported accuracy for the downstream specific task. And, one should expect a very different set of feature directions to be amplified for each different downstream task.  Unlike on GPT-3 where r = 1 suffices for many tasks, here the performance peaks at r = 16 for validation loss and r = 4 for BLEU, suggesting the GPT-2 Medium has a similar intrinsic rank for adaptation compared to GPT-3 175B. Note that some of our hyperparameters are tuned on r = 4, which matches the parameter count of another baseline, and thus might not be optimal for other choices of r.</p><p>One may notice, however, for r = 64, this amplification factor is only around 2, meaning that most directions learned in ?W with r = 64 are not being amplified by much. This should not be surprising, and in fact gives evidence (once again) that the intrinsic rank needed to represent the "task-specific directions" (thus for model adaptation) is low. In contrast, those directions in the rank-4 version of ?W (corresponding to r = 4) are amplified by a much larger factor 20.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Our reparametrization. We only train A and B.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: GPT-3 175B validation accuracy vs. number of trainable parameters of several adaptation methods on WikiSQL and MNLI-matched. LoRA enjoys better scalability and task performance. See Sec. E.1 for more details on the plotted data points.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>= 64 , A r = 8 , i, j)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Subspace similarity between column vectors of A r=8 and A r=64 for both ?W q and ?W v . The third and the fourth figures zoom in on the lower-left triangle in the first two figures. The top directions in r = 8 are included in r = 64, and vice versa.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Left and Middle: Normalized subspace similarity between the column vectors of A r=64 from two random seeds, for both ?W q and ?W v in the 48-th layer. Right: the same heat-map between the column vectors of two random Gaussian matrices. See Sec. G.1 for other layers.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>MethodMNLI-m (Val. Acc./%) RTE (Val. Acc.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>?? = ??(?) is further encoded by a much smaller-sized set of parameters ? with |?| |? 0 |. The task of finding ?? thus becomes optimizing over ?:</figDesc><table><row><cell></cell><cell></cell><cell>|y|</cell><cell></cell></row><row><cell>max ?</cell><cell>(x,y)?Z</cell><cell>t=1</cell><cell>log p ?0+??(?) (y</cell></row></table><note><p>t |x, y &lt;t )</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 :</head><label>1</label><figDesc>Logical form validation accuracy on WikiSQL, validation accuracy on MultiNLI-matched and Rouge-1/2/L on SAMSum achieved by different GPT-3 adaptation methods. LoRA performs better than prior approaches, including conventional fine-tuning. The result on WikiSQL has a fluctuation of ?0.3% and MNLI-m ?0.1%.</figDesc><table><row><cell>Method</cell><cell cols="3"># of Trainable Parameters Accuracy (%) Accuracy (%) WikiSQL MNLI-m</cell><cell>SAMSum R1/R2/RL</cell></row><row><cell>GPT-3 175B (Fine-Tune)</cell><cell>175,255.8M</cell><cell>73.0</cell><cell>89.5</cell><cell>52.0/28.0/44.5</cell></row><row><cell>GPT-3 175B (Bias Only)</cell><cell>14.2M</cell><cell>71.3</cell><cell>91.0</cell><cell>51.3/27.4/43.5</cell></row><row><cell>GPT-3 175B (PrefixEmbed)</cell><cell>3.2M</cell><cell>63.1</cell><cell>88.6</cell><cell>48.3/24.2/40.5</cell></row><row><cell>GPT-3 175B (PrefixLayer)</cell><cell>20.2M</cell><cell>70.1</cell><cell>89.5</cell><cell>50.8/27.3/43.5</cell></row><row><cell>GPT-3 175B (LoRA)</cell><cell>4.7M</cell><cell>73.4</cell><cell>91.3</cell><cell>52.1/28.3/44.3</cell></row><row><cell>GPT-3 175B (LoRA)</cell><cell>37.7M</cell><cell>73.8</cell><cell>91.7</cell><cell>53.2/29.2/45.0</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 8 .</head><label>8</label><figDesc></figDesc><table><row><cell>Method</cell><cell># of Trainable</cell><cell></cell><cell></cell><cell>E2E</cell><cell></cell><cell></cell></row><row><cell></cell><cell cols="6">Parameters BLEU NIST MET ROUGE-L CIDEr</cell></row><row><cell>GPT-2 M (Fine-Tune)</cell><cell>354.92M</cell><cell>68.2</cell><cell>8.62</cell><cell>46.2</cell><cell>71.0</cell><cell>2.47</cell></row><row><cell>GPT-2 M (Adapter)</cell><cell>11.48M</cell><cell>68.9</cell><cell>8.71</cell><cell>46.1</cell><cell>71.3</cell><cell>2.47</cell></row><row><cell>GPT-2 M (FT-Top2)</cell><cell>25.19M</cell><cell>68.1</cell><cell>8.59</cell><cell>46.0</cell><cell>70.8</cell><cell>2.41</cell></row><row><cell>GPT-2 M (Prefix)</cell><cell>0.35M</cell><cell>69.7</cell><cell>8.81</cell><cell>46.1</cell><cell>71.4</cell><cell>2.49</cell></row><row><cell>GPT-2 M (LoRA)</cell><cell>0.35M</cell><cell>70.4</cell><cell>8.85</cell><cell>46.8</cell><cell>71.8</cell><cell>2.53</cell></row><row><cell>GPT-2 L (Fine-Tune)</cell><cell>774.03M</cell><cell>68.5</cell><cell>8.78</cell><cell>46.0</cell><cell>69.9</cell><cell>2.45</cell></row><row><cell>GPT-2 L (Prefix)</cell><cell>0.77M</cell><cell>70.3</cell><cell>8.85</cell><cell>46.2</cell><cell>71.7</cell><cell>2.47</cell></row><row><cell>GPT-2 L (LoRA)</cell><cell>0.77M</cell><cell>70.4</cell><cell>8.89</cell><cell>46.8</cell><cell>72.0</cell><cell>2.47</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>GPT-2 medium (M) and large (L) with different adaptation methods on the E2E NLG Challenge. For all metrics, higher is better. LoRA outperforms several baselines with comparable or fewer trainable parameters.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4 :</head><label>4</label><figDesc>Validation accuracy on WikiSQL and MultiNLI with different rank r.</figDesc><table><row><cell></cell><cell></cell><cell>4</cell><cell>73.3</cell><cell>73.7</cell><cell>73.8</cell><cell>73.5</cell></row><row><cell></cell><cell>W q</cell><cell>68.8</cell><cell>69.6</cell><cell>70.5</cell><cell>70.4</cell><cell>70.0</cell></row><row><cell>MultiNLI (?0.1%)</cell><cell>W q , W v</cell><cell>91.3</cell><cell>91.4</cell><cell>91.3</cell><cell>91.7</cell><cell>91.4</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head></head><label></label><figDesc>, consisting of 392, 702 training and 9, 815 validation examples. For pre-processing, we encode the context x = {[premise] : , premise, [hypothesis] :, hypothesis}; target y ? {entailment, neutral, contradiction}. The dataset is mostly released under the OANC's license, and subsets of it are under other permissive licenses such as the Creative Commons Share-Alike 3.0 Unported License.</figDesc><table /><note><p><p><p><p><p><p>WikiSQL is introduced in</p><ref type="bibr" target="#b39">[40]</ref> </p>and contains 56, 355/8, 421 training/validation examples. The task is to generate SQL queries from natural language questions and table schemata. We encode context as x = {table schema, query} and target as y = {SQL}. The dataset is release under the BSD 3-Clause License.</p>E2E NLG Challenge was first introduced in</p><ref type="bibr" target="#b27">[28]</ref> </p>as a dataset for training end-to-end, data-driven natural language generation systems and is commonly used for data-to-text evaluation. The E2E dataset consists of 42K training, 4.6K validation, and 4.6K test examples from the restaurant domain. Each source table used as input can have multiple references. Each sample input (x, y)</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>Table 7 :</head><label>7</label><figDesc>The training hyperparameters used for different GPT-3 adaption methods. We use the same hyperparameters for all datasets.</figDesc><table><row><cell>Hyperparameters</cell><cell cols="4">Fine-Tune Prefix-Embed Prefix-Tune</cell><cell>LoRA</cell></row><row><cell>Optimizer</cell><cell></cell><cell></cell><cell>AdamW</cell><cell></cell></row><row><cell>Batch Size</cell><cell></cell><cell></cell><cell>128</cell><cell></cell></row><row><cell># Epoch</cell><cell></cell><cell></cell><cell>2</cell><cell></cell></row><row><cell>Warmup Tokens</cell><cell></cell><cell></cell><cell>250,000</cell><cell></cell></row><row><cell>Learning Rate Schedule</cell><cell></cell><cell></cell><cell>Linear</cell><cell></cell></row><row><cell>Learning Rate</cell><cell>5.00E-06</cell><cell cols="2">5.00E-04</cell><cell>1.00E-04</cell><cell>2.00E-04</cell></row><row><cell>Dataset</cell><cell></cell><cell cols="3">E2E WebNLG DART</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Training</cell><cell></cell></row><row><cell>Optimizer</cell><cell></cell><cell></cell><cell>AdamW</cell><cell></cell></row><row><cell cols="2">Weight Decay</cell><cell>0.01</cell><cell>0.01</cell><cell>0.0</cell></row><row><cell cols="2">Dropout Prob</cell><cell>0.1</cell><cell>0.1</cell><cell>0.0</cell></row><row><cell>Batch Size</cell><cell></cell><cell></cell><cell>8</cell><cell></cell></row><row><cell># Epoch</cell><cell></cell><cell></cell><cell>5</cell><cell></cell></row><row><cell cols="2">Warmup Steps</cell><cell></cell><cell>500</cell><cell></cell></row><row><cell cols="2">Learning Rate Schedule</cell><cell></cell><cell>Linear</cell><cell></cell></row><row><cell cols="2">Label Smooth</cell><cell>0.1</cell><cell>0.1</cell><cell>0.0</cell></row><row><cell cols="2">Learning Rate</cell><cell></cell><cell>0.0002</cell><cell></cell></row><row><cell>Adaptation</cell><cell></cell><cell></cell><cell cols="2">r q = r v = 4</cell></row><row><cell>LoRA ?</cell><cell></cell><cell></cell><cell>32</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="2">Inference</cell></row><row><cell>Beam Size</cell><cell></cell><cell></cell><cell>10</cell><cell></cell></row><row><cell cols="2">Length Penalty</cell><cell>0.9</cell><cell>0.8</cell><cell>0.8</cell></row><row><cell cols="2">no repeat ngram size</cell><cell></cell><cell>4</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>Table 8 :</head><label>8</label><figDesc>The hyperparameters for GPT-2 LoRA on E2E, WebNLG and DART.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head>Table 10 :</head><label>10</label><figDesc>adaptation approaches in the low-data regime. we randomly sample 100, 1k and 10k training examples from the full training set of MNLI to form the low-data MNLI-n tasks. In Table12, we show the performance of different adaptation approaches on MNLI-n. To our surprise, PrefixEmbed and PrefixLayer performs very poorly on MNLI-100 dataset, with PrefixEmbed performing only slightly better than random chance (37.6% vs. 33.3%). GPT-2 with different adaptation methods on DART. The variances of MET and TER are around 0.01 for all different adaption approaches.</figDesc><table><row><cell></cell><cell>Method</cell><cell># Trainable</cell><cell></cell><cell>DART</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>Parameters</cell><cell>BLEU?</cell><cell cols="3">MET? TER?</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="2">GPT-2 Medium</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Fine-Tune</cell><cell>354M</cell><cell>46.0(?0.1)</cell><cell>0.39</cell><cell cols="2">0.46</cell><cell></cell><cell></cell></row><row><cell></cell><cell>Adapter</cell><cell>10M</cell><cell>45.4(?0.1)</cell><cell>0.38</cell><cell cols="2">0.46</cell><cell></cell><cell></cell></row><row><cell></cell><cell>FT-Top2</cell><cell>24M</cell><cell>38.1(?0.3)</cell><cell>0.34</cell><cell cols="2">0.56</cell><cell></cell><cell></cell></row><row><cell></cell><cell>Prefix</cell><cell>0.35M</cell><cell>45.7(?0.2)</cell><cell>0.38</cell><cell cols="2">0.46</cell><cell></cell><cell></cell></row><row><cell></cell><cell>LoRA</cell><cell>0.35M</cell><cell>47.1(?0.2)</cell><cell>0.39</cell><cell cols="2">0.46</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="2">GPT-2 Large</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>Fine-Tune</cell><cell>774M</cell><cell>46.5(?0.1)</cell><cell>0.39</cell><cell cols="2">0.45</cell><cell></cell><cell></cell></row><row><cell></cell><cell>Prefix</cell><cell>0.77M</cell><cell>46.5(?0.2)</cell><cell>0.38</cell><cell cols="2">0.45</cell><cell></cell><cell></cell></row><row><cell></cell><cell>LoRA</cell><cell>0.77M</cell><cell>47.5(?0.1)</cell><cell>0.39</cell><cell cols="2">0.45</cell><cell></cell><cell></cell></row><row><cell>Method</cell><cell></cell><cell></cell><cell cols="2">WebNLG</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>BLEU?</cell><cell></cell><cell cols="2">MET?</cell><cell></cell><cell></cell><cell>TER?</cell></row><row><cell></cell><cell>U</cell><cell>S</cell><cell>A</cell><cell>U</cell><cell>S</cell><cell>A</cell><cell>U</cell><cell>S</cell><cell>A</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="2">GPT-2 Medium</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="10">Fine-Tune (354M) 30.4(?.5) 63.2(?.3) 47.6(?.4) .32 .45 .39 .69 .34 .50</cell></row><row><cell>Adapter (10M)</cell><cell cols="9">47.9(?.2) 61.1(?.4) 55.2(?.3) .38 .43 .41 .45 .35 .39</cell></row><row><cell>FT-Top2 (24M)</cell><cell cols="9">13.7(?.6) 50.1(?.4) 33.5 (?.4) .16 .35 .26 1.03 .52 .75</cell></row><row><cell>Prefix (0.35M)</cell><cell cols="9">44.1(?.2) 63.1(?.1) 54.4(?.1) .37 .45 .41 .50 .34 .41</cell></row><row><cell>LoRA (0.35M)</cell><cell cols="9">46.7(?.4) 62.1(?.2) 55.3(?.2) .38 .44 .41 .46 .33 .39</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="2">GPT-2 Large</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="10">Fine-Tune (774M) 41.7(?.5) 64.6(?.4) 54.2(?.4) .37 .46 .42 .56 .33 .43</cell></row><row><cell>Prefix (0.77M)</cell><cell cols="9">47.0(?.2) 64.2(?.4) 56.4(?.1) .39 .45 .42 .49 .33 .40</cell></row><row><cell>LoRA (0.77M)</cell><cell cols="9">48.4(?.3) 64.0(?.3) 57.0(?.1) .39 .45 .42 .45 .32 .38</cell></row></table><note><p>PrefixLayer performs better than PrefixEmbed but is still significantly worse than Fine-Tune or LoRA on MNLI-100. The gap between prefix-based approaches and LoRA/Fine-tuning becomes smaller as we increase the number of training examples, which might suggest that prefix-based approaches are not suitable for low-data tasks in GPT-3. LoRA achieves better performance than fine-tuning on both MNLI-100 and MNLI-Full, and comparable results on MNLI-1k and MNLI-10K considering the</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11"><head>Table 11 :</head><label>11</label><figDesc>GPT-2 with different adaptation methods on WebNLG. The variances of MET and TER are around 0.01 variance for all different adaption approaches. "U" indicates unseen categories, "S" indicates seen categories, and "A" indicates all categories in the test set of webNLG.</figDesc><table><row><cell cols="2">(?0.3) variance due to random seeds.</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Method</cell><cell cols="4">MNLI(m)-100 MNLI(m)-1k MNLI(m)-10k MNLI(m)-392K</cell></row><row><cell>GPT-3 (Fine-Tune)</cell><cell>60.2</cell><cell>85.8</cell><cell>88.9</cell><cell>89.5</cell></row><row><cell>GPT-3 (PrefixEmbed)</cell><cell>37.6</cell><cell>75.2</cell><cell>79.5</cell><cell>88.6</cell></row><row><cell>GPT-3 (PrefixLayer)</cell><cell>48.3</cell><cell>82.5</cell><cell>85.9</cell><cell>89.6</cell></row><row><cell>GPT-3 (LoRA)</cell><cell>63.8</cell><cell>85.6</cell><cell>89.2</cell><cell>91.7</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12"><head>Table 12 :</head><label>12</label><figDesc>Validation accuracy of different methods on subsets of MNLI using GPT-3 175B. MNLI-n describes a subset with n training examples. We evaluate with the full validation set. LoRA performs exhibits favorable sample-efficiency compared to other methods, including fine-tuning.</figDesc><table><row><cell>1.0</cell></row><row><cell>0.8</cell></row><row><cell>0.6</cell></row><row><cell>0.4</cell></row><row><cell>0.2</cell></row><row><cell>0.0</cell></row></table><note><p><p><p>The training hyperparameters of different adaptation approaches on MNLI-n are reported in Table</p>13</p>. We use a smaller learning rate for PrefixLayer on the MNLI-100 set, as the training loss does not decrease with a larger learning rate.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13"><head>Table 14 :</head><label>14</label><figDesc>Figure 6: Normalized subspace similarity between the column vectors of A r=64 from two randomly seeded runs, for both ?W q and ?W v from the 1st, 32nd, 64th, and 96th layers in a 96-layer Transformer. Validation loss and test set metrics on E2E NLG Challenge achieved by LoRA with different rank r using GPT-2 Medium.</figDesc><table><row><cell>8</cell></row></table><note><p><p>j</p>(A r = 64 , A r = 64 , i, j)</p></note></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_0"><p>We still need the 350GB model during deployment; however, storing 100 adapted models only requires 350GB + 35MB * 100 ? 354GB as opposed to 100 * 350GB ? 35TB.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_1"><p>Recent works treat MultiNLI-matched and MultiNLI-mismatched as separate tasks. In this work, we only report accuracy on MultiNLI-matched validation set.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_2"><p>However, we do not expect a small r to work for every task or dataset. Consider the following thought experiment: if the downstream task were in a different language than the one used for pre-training, retraining the entire model (similar to LoRA with r = d model ) could certainly outperform LoRA with a small r.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_3"><p>Note that a similar analysis can be carried out with B and the left-singular unitary matrices -we stick with A for our experiments.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div><head>Acknowledgments</head><p>We thank in alphabetical order <rs type="person">Jianfeng Gao</rs>, <rs type="person">Jade Huang</rs>, <rs type="person">Jiayuan Huang</rs>, <rs type="person">Lisa Xiang Li</rs>, <rs type="person">Xiaodong Liu</rs>, <rs type="person">Yabin Liu</rs>, <rs type="person">Benjamin Van Durme</rs>, <rs type="person">Luis Vargas</rs>, <rs type="person">Haoran Wei</rs>, <rs type="person">Peter Welinder</rs>, and <rs type="person">Greg Yang</rs> for providing valuable feedback.</p></div>
			</div>			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Table <ref type="table">13</ref>: The hyperparameters used for different GPT-3 adaptation methods on MNLI(m)-n.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F Measuring Similarity Between Subspaces</head><p>In this paper we use the measure ?(A, B, i, j</p><p>min{i,j} to measure the subspace similarity between two column orthonormal matrices U i A ? R d?i and U j B ? R d?j , obtained by taking columns of the left singular matrices of A and B. We point out that this similarity is simply a reverse of the standard Projection Metric that measures distance between subspaces [? ].</p><p>To be concrete, let the singular values of U i A U j B to be ? 1 , ? 2 , ? ? ? , ? p where p = min{i, j}. We know that the Projection Metric [? ] is defined as:</p><p>where our similarity is defined as:</p><p>This similarity satisfies that if U i A and U j B share the same column span, then ?(A, B, i, j) = 1. If they are completely orthogonal, then ?(A, B, i, j) = 0. Otherwise, ?(A, B, i, j) ? (0, 1).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G Additional Experiments on Low-Rank Matrices</head><p>We present additional results from our investigation into the low-rank update matrices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.1 Correlation between LoRA Modules</head><p>See Fig. <ref type="figure">5</ref> and Fig. <ref type="figure">6</ref> for how the results presented in Fig. <ref type="figure">3</ref> and Fig. <ref type="figure">4</ref> generalize to other layers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G.2 Effect of r on GPT-2</head><p>We repeat our experiment on the effect of r (Sec. 6.2) in GPT-2. Using the E2E NLG Challenge dataset as an example, we report the validation loss and test metrics achieved by different choices of r after training for 26,000 steps. We present our result in Table <ref type="table">14</ref>. The optimal rank for GPT-2 Medium is between 4 and 16 depending on the metric used, which is similar to that for GPT-3 175B. Note that the relationship between model size and the optimal rank for adaptation is still an open question. i (W q , A r = 4 , i, j) j W q (W q , A r = 8 , i, j) j (W q , A r = 64 , i, j) j Random (W q , A rand , i, j) Figure <ref type="figure">7</ref>: Normalized subspace similarity between the singular directions of W q and those of ?W q with varying r and a random baseline. ?W q amplifies directions that are important but not emphasized in W . ?W with a larger r tends to pick up more directions that are already emphasized in W .</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Intrinsic Dimensionality Explains the Effectiveness of Language Model Fine-Tuning</title>
		<author>
			<persName><forename type="first">Armen</forename><surname>Aghajanyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Luke</forename><surname>Zettlemoyer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sonal</forename><surname>Gupta</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2012.13255</idno>
		<ptr target="http://arxiv.org/abs/2012.13255" />
		<imprint>
			<date type="published" when="2020-12">December 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">What Can ResNet Learn Efficiently, Going Beyond Kernels?</title>
		<author>
			<persName><forename type="first">Zeyuan</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">-Zhu</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Yuanzhi</forename><surname>Li</surname></persName>
		</author>
		<ptr target="http://arxiv.org/abs/1905.10337" />
	</analytic>
	<monogr>
		<title level="m">NeurIPS</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Backward feature correction: How deep learning performs deep learning</title>
		<author>
			<persName><forename type="first">Zeyuan</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">-Zhu</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Yuanzhi</forename><surname>Li</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2001.04413</idno>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Feature purification: How adversarial training performs robust deep learning</title>
		<author>
			<persName><forename type="first">Zeyuan</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">-Zhu</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Yuanzhi</forename><surname>Li</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2005.10190</idno>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A convergence theory for deep learning via over-parameterization</title>
		<author>
			<persName><forename type="first">Zeyuan</forename><surname>Allen-Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yuanzhi</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhao</forename><surname>Song</surname></persName>
		</author>
		<ptr target="http://arxiv.org/abs/1811.03962" />
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">B</forename><surname>Tom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nick</forename><surname>Mann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Melanie</forename><surname>Ryder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jared</forename><surname>Subbiah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Prafulla</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arvind</forename><surname>Dhariwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pranav</forename><surname>Neelakantan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Girish</forename><surname>Shyam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amanda</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sandhini</forename><surname>Askell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ariel</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gretchen</forename><surname>Herbert-Voss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tom</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rewon</forename><surname>Henighan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aditya</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><forename type="middle">M</forename><surname>Ramesh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Ziegler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Clemens</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Winter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><surname>Hesse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Eric</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mateusz</forename><surname>Sigler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Litwin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Benjamin</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jack</forename><surname>Chess</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christopher</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sam</forename><surname>Berner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alec</forename><surname>Mccandlish</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dario</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><surname>Amodei</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2005.14165</idno>
		<ptr target="http://arxiv.org/abs/2005.14165" />
		<title level="m">Language Models are Few-Shot Learners</title>
		<imprint>
			<date type="published" when="2020-07">July 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A singular value thresholding algorithm for matrix completion</title>
		<author>
			<persName><forename type="first">Jian-Feng</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Emmanuel</forename><forename type="middle">J</forename><surname>Cand?s</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zuowei</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on optimization</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1956" to="1982" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A unified architecture for natural language processing: deep neural networks with multitask learning</title>
		<author>
			<persName><forename type="first">Ronan</forename><surname>Collobert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jason</forename><surname>Weston</surname></persName>
		</author>
		<idno type="DOI">10.1145/1390156.1390177</idno>
		<ptr target="https://doi.org/10.1145/1390156.1390177" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th international conference on Machine learning, ICML &apos;08</title>
		<meeting>the 25th international conference on Machine learning, ICML &apos;08<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="2008-07">July 2008</date>
			<biblScope unit="page" from="160" to="167" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</title>
		<author>
			<persName><forename type="first">Jacob</forename><surname>Devlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ming-Wei</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kenton</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kristina</forename><surname>Toutanova</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1810.04805</idno>
		<idno>arXiv: 1810.04805</idno>
		<ptr target="http://arxiv.org/abs/1810.04805" />
		<imprint>
			<date type="published" when="2019-05">May 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The webnlg challenge: Generating text from rdf data</title>
		<author>
			<persName><forename type="first">Claire</forename><surname>Gardent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anastasia</forename><surname>Shimorina</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shashi</forename><surname>Narayan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Laura</forename><surname>Perez-Beltrachini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th International Conference on Natural Language Generation</title>
		<meeting>the 10th International Conference on Natural Language Generation</meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="124" to="133" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<author>
			<persName><forename type="first">Behrooz</forename><surname>Ghorbani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Song</forename><surname>Mei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Theodor</forename><surname>Misiakiewicz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrea</forename><surname>Montanari</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2006.13409</idno>
		<title level="m">When do neural networks outperform kernel methods? arXiv preprint</title>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Samsum corpus: A human-annotated dialogue dataset for abstractive summarization</title>
		<author>
			<persName><forename type="first">Bogdan</forename><surname>Gliwa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Iwona</forename><surname>Mochol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Maciej</forename><surname>Biesek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aleksander</forename><surname>Wawer</surname></persName>
		</author>
		<idno>CoRR, abs/1911.12237</idno>
		<ptr target="http://arxiv.org/abs/1911.12237" />
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A literature survey of low-rank tensor approximation techniques</title>
		<author>
			<persName><forename type="first">Lars</forename><surname>Grasedyck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Kressner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christine</forename><surname>Tobler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">GAMM-Mitteilungen</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="53" to="78" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">WARP: Word-level Adversarial ReProgramming</title>
		<author>
			<persName><forename type="first">Karen</forename><surname>Hambardzumyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hrant</forename><surname>Khachatrian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename></persName>
		</author>
		<idno type="arXiv">arXiv:2101.00121</idno>
		<idno>arXiv: 2101.00121</idno>
		<ptr target="http://arxiv.org/abs/2101.00121" />
		<imprint>
			<date type="published" when="2020-12">May. December 2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<author>
			<persName><forename type="first">Neil</forename><surname>Houlsby</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrei</forename><surname>Giurgiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stanislaw</forename><surname>Jastrzebski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bruna</forename><surname>Morrone</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quentin</forename><surname>De Laroussilhe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrea</forename><surname>Gesmundo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mona</forename><surname>Attariyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sylvain</forename><surname>Gelly</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1902.00751</idno>
		<ptr target="http://arxiv.org/abs/1902.00751" />
		<title level="m">Parameter-Efficient Transfer Learning for NLP</title>
		<imprint>
			<date type="published" when="2019-06">June 2019</date>
		</imprint>
	</monogr>
	<note>cs, stat</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Re-evaluating Continual Learning Scenarios: A Categorization and Case for Strong Baselines</title>
		<author>
			<persName><forename type="first">Yen-Chang</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yen-Cheng</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anita</forename><surname>Ramasamy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zsolt</forename><surname>Kira</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1810.12488</idno>
		<idno>arXiv: 1810.12488</idno>
		<ptr target="http://arxiv.org/abs/1810.12488" />
		<imprint>
			<date type="published" when="2019-01">January 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Speeding up convolutional neural networks with low rank expansions</title>
		<author>
			<persName><forename type="first">Max</forename><surname>Jaderberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrea</forename><surname>Vedaldi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Zisserman</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1405.3866</idno>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Overcoming catastrophic forgetting in neural networks</title>
		<author>
			<persName><forename type="first">James</forename><surname>Kirkpatrick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Razvan</forename><surname>Pascanu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Neil</forename><surname>Rabinowitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joel</forename><surname>Veness</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guillaume</forename><surname>Desjardins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrei</forename><forename type="middle">A</forename><surname>Rusu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kieran</forename><surname>Milan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Quan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tiago</forename><surname>Ramalho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Agnieszka</forename><surname>Grabska-Barwinska</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Demis</forename><surname>Hassabis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Claudia</forename><surname>Clopath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dharshan</forename><surname>Kumaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Raia</forename><surname>Hadsell</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1612.00796</idno>
		<idno>arXiv: 1612.00796</idno>
		<ptr target="http://arxiv.org/abs/1612.00796" />
		<imprint>
			<date type="published" when="2017-01">January 2017</date>
		</imprint>
	</monogr>
	<note>cs, stat</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">The Power of Scale for Parameter-Efficient Prompt Tuning</title>
		<author>
			<persName><forename type="first">Brian</forename><surname>Lester</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rami</forename><surname>Al-Rfou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noah</forename><surname>Constant</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2104.08691</idno>
		<idno>arXiv: 2104.08691</idno>
		<ptr target="http://arxiv.org/abs/2104.08691" />
		<imprint>
			<date type="published" when="2021-04">April 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Measuring the Intrinsic Dimension of Objective Landscapes</title>
		<author>
			<persName><forename type="first">Chunyuan</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heerad</forename><surname>Farkhoor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rosanne</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jason</forename><surname>Yosinski</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1804.08838</idno>
		<idno>arXiv: 1804.08838</idno>
		<ptr target="http://arxiv.org/abs/1804.08838" />
		<imprint>
			<date type="published" when="2018-04">April 2018</date>
		</imprint>
	</monogr>
	<note>cs, stat</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Prefix-Tuning: Optimizing Continuous Prompts for Generation</title>
		<author>
			<persName><forename type="first">Lisa</forename><surname>Xiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Percy</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><surname>Liang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2101.00190</idno>
		<ptr target="http://arxiv.org/abs/2101.00190" />
		<imprint>
			<date type="published" when="2021-01">January 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Learning overparameterized neural networks via stochastic gradient descent on structured data</title>
		<author>
			<persName><forename type="first">Yuanzhi</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yingyu</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Recovery guarantee of weighted low-rank approximation via alternating minimization</title>
		<author>
			<persName><forename type="first">Yuanzhi</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yingyu</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrej</forename><surname>Risteski</surname></persName>
		</author>
		<idno>PMLR</idno>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="2358" to="2367" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Algorithmic regularization in over-parameterized matrix sensing and neural networks with quadratic activations</title>
		<author>
			<persName><forename type="first">Yuanzhi</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tengyu</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hongyang</forename><surname>Zhang</surname></persName>
		</author>
		<idno>PMLR</idno>
	</analytic>
	<monogr>
		<title level="m">Conference On Learning Theory</title>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="2" to="47" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<author>
			<persName><forename type="first">Xiao</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yanan</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhengxiao</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ming</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yujie</forename><surname>Qian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhilin</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jie</forename><surname>Tang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2103.10385</idno>
		<idno>arXiv: 2103.10385</idno>
		<ptr target="http://arxiv.org/abs/2103.10385" />
		<title level="m">GPT Understands, Too</title>
		<imprint>
			<date type="published" when="2021-03">March 2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Loshchilov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Frank</forename><surname>Hutter</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1711.05101</idno>
		<title level="m">Decoupled weight decay regularization</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Dart: Open-domain structured data record to text generation</title>
		<author>
			<persName><forename type="first">Linyong</forename><surname>Nan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dragomir</forename><surname>Radev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rui</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Amrit</forename><surname>Rau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Abhinand</forename><surname>Sivaprasad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chiachun</forename><surname>Hsieh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiangru</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aadit</forename><surname>Vyas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Neha</forename><surname>Verma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pranav</forename><surname>Krishna</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2007.02871</idno>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">The e2e dataset: New challenges for end-to-end generation</title>
		<author>
			<persName><forename type="first">Jekaterina</forename><surname>Novikova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ond?ej</forename><surname>Du?ek</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Verena</forename><surname>Rieser</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1706.09254</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<author>
			<persName><forename type="first">Samet</forename><surname>Oymak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zalan</forename><surname>Fabian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mingchen</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mahdi</forename><surname>Soltanolkotabi</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1906.05392</idno>
		<title level="m">Generalization guarantees for neural networks via harnessing the low-rank structure of the jacobian</title>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Semi-orthogonal low-rank matrix factorization for deep neural networks</title>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Povey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gaofeng</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yiming</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ke</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hainan</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mahsa</forename><surname>Yarmohammadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sanjeev</forename><surname>Khudanpur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In Interspeech</title>
		<imprint>
			<biblScope unit="page" from="3743" to="3747" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Improving Language Understanding by Generative Pre-Training</title>
		<author>
			<persName><forename type="first">Alec</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Karthik</forename><surname>Narasimhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tim</forename><surname>Salimans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<imprint>
			<biblScope unit="volume">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Language Models are Unsupervised Multitask Learners</title>
		<author>
			<persName><forename type="first">Alec</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rewon</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Luan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dario</forename><surname>Amodei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<imprint>
			<biblScope unit="volume">24</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Language models are unsupervised multitask learners</title>
		<author>
			<persName><forename type="first">Alec</forename><surname>Radford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rewon</forename><surname>Child</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Luan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dario</forename><surname>Amodei</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">OpenAI blog</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page">9</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Learning multiple visual domains with residual adapters</title>
		<author>
			<persName><forename type="first">Hakan</forename><surname>Sylvestre-Alvise Rebuffi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrea</forename><surname>Bilen</surname></persName>
		</author>
		<author>
			<persName><surname>Vedaldi</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1705.08045</idno>
		<idno>arXiv: 1705.08045</idno>
		<ptr target="http://arxiv.org/abs/1705.08045" />
		<imprint>
			<date type="published" when="2017-11">November 2017</date>
		</imprint>
	</monogr>
	<note>cs, stat</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Low-rank matrix factorization for deep neural network training with high-dimensional output targets</title>
		<author>
			<persName><forename type="first">Tara</forename><forename type="middle">N</forename><surname>Sainath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Brian</forename><surname>Kingsbury</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vikas</forename><surname>Sindhwani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ebru</forename><surname>Arisoy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bhuvana</forename><surname>Ramabhadran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2013 IEEE international conference on acoustics, speech and signal processing</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="6655" to="6659" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Attention is all you need</title>
		<author>
			<persName><forename type="first">Ashish</forename><surname>Vaswani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Noam</forename><surname>Shazeer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Niki</forename><surname>Parmar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jakob</forename><surname>Uszkoreit</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Llion</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aidan</forename><forename type="middle">N</forename><surname>Gomez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">?ukasz</forename><surname>Kaiser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Illia</forename><surname>Polosukhin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 31st International Conference on Neural Information Processing Systems</title>
		<meeting>the 31st International Conference on Neural Information Processing Systems</meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="6000" to="6010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A broad-coverage challenge corpus for sentence understanding through inference</title>
		<author>
			<persName><forename type="first">Adina</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nikita</forename><surname>Nangia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samuel</forename><surname>Bowman</surname></persName>
		</author>
		<idno type="DOI">10.18653/v1/N18-1101</idno>
		<ptr target="https://www.aclweb.org/anthology/N18-1101" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2018 Conference of the North American Chapter</title>
		<title level="s">Long Papers</title>
		<meeting>the 2018 Conference of the North American Chapter<address><addrLine>New Orleans, Louisiana</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<date type="published" when="2018-06">June 2018</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="1112" to="1122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Extracting deep neural network bottleneck features using low-rank matrix factorization</title>
		<author>
			<persName><forename type="first">Yu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ekapol</forename><surname>Chuangsuwanich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Glass</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2014 IEEE international conference on acoustics, speech and signal processing (ICASSP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="185" to="189" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Low-rank plus diagonal adaptation for deep neural networks</title>
		<author>
			<persName><forename type="first">Yong</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jinyu</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yifan</forename><surname>Gong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="5005" to="5009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Seq2sql: Generating structured queries from natural language using reinforcement learning</title>
		<author>
			<persName><forename type="first">Victor</forename><surname>Zhong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Caiming</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Richard</forename><surname>Socher</surname></persName>
		</author>
		<idno>CoRR, abs/1709.00103</idno>
		<ptr target="http://arxiv.org/abs/1709.00103" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
