<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Machine Learning for High-Speed Corner Detection</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Edward</forename><surname>Rosten</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Engineering</orgName>
								<orgName type="institution">Cambridge University</orgName>
								<address>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Tom</forename><surname>Drummond</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Engineering</orgName>
								<orgName type="institution">Cambridge University</orgName>
								<address>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Machine Learning for High-Speed Corner Detection</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-12-25T12:47+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Where feature points are used in real-time frame-rate applications, a high-speed feature detector is necessary. Feature detectors such as SIFT (DoG), Harris and SUSAN are good methods which yield high quality features, however they are too computationally intensive for use in real-time applications of any complexity. Here we show that machine learning can be used to derive a feature detector which can fully process live PAL video using less than 7% of the available processing time. By comparison neither the Harris detector (120%) nor the detection stage of SIFT (300%) can operate at full frame rate.</p><p>Clearly a high-speed detector is of limited use if the features produced are unsuitable for downstream processing. In particular, the same scene viewed from two different positions should yield features which correspond to the same real-world 3D locations <ref type="bibr" target="#b0">[1]</ref>. Hence the second contribution of this paper is a comparison corner detectors based on this criterion applied to 3D scenes. This comparison supports a number of claims made elsewhere concerning existing corner detectors. Further, contrary to our initial expectations, we show that despite being principally constructed for speed, our detector significantly outperforms existing feature detectors according to this criterion.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Corner detection is used as the first step of many vision tasks such as tracking, SLAM (simultaneous localisation and mapping), localisation, image matching and recognition. Hence, a large number of corner detectors exist in the literature. With so many already available it may appear unnecessary to present yet another detector to the community; however, we have a strong interest in realtime frame rate applications such as SLAM in which computational resources are at a premium. In particular, it is still true that when processing live video streams at full frame rate, existing feature detectors leave little if any time for further processing, even despite the consequences of Moore's Law.</p><p>Section 2 of this paper demonstrates how a feature detector described in earlier work can be redesigned employing a machine learning algorithm to yield a large speed increase. In addition, the approach allows the detector to be generalised, producing a suite of high-speed detectors which we currently use for real-time tracking <ref type="bibr" target="#b1">[2]</ref> and AR label placement <ref type="bibr" target="#b2">[3]</ref>.</p><p>To show that speed can been obtained without necessarily sacrificing the quality of the feature detector we compare our detector, to a variety of well-known detectors. In Section 3 this is done using Schmid's criterion <ref type="bibr" target="#b0">[1]</ref>, that when presented with different views of a 3D scene, a detector should yield (as far as possible) corners that correspond to the same features in the scene. Here we show how this can be applied to 3D scenes for which an approximate surface model is known.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Previous Work</head><p>The majority of feature detection algorithms work by computing a corner response function (C) across the image. Pixels which exceed a threshold cornerness value (and are locally maximal) are then retained.</p><p>Moravec <ref type="bibr" target="#b3">[4]</ref> computes the sum-of-squared-differences (SSD) between a patch around a candidate corner and patches shifted a small distance in a number of directions. C is then the smallest SSD so obtained, thus ensuring that extracted corners are those locations which change maximally under translations.</p><p>Harris <ref type="bibr" target="#b4">[5]</ref> builds on this by computing an approximation to the second derivative of the SSD with respect to the shift The approximation is:</p><formula xml:id="formula_0">H = I 2 x I x I y I x I y I 2 y ,<label>(1)</label></formula><p>where denotes averaging performed over the image patch (a smooth circular window can be used instead of a rectangle to perform the averaging resulting in a less noisy, isotropic response). Harris then defines the corner response to be</p><formula xml:id="formula_1">C = |H| − k(trace H) 2 . (<label>2</label></formula><formula xml:id="formula_2">)</formula><p>This is large if both eigenvalues of H are large, and it avoids explicit computation of the eigenvalues. It has been shown <ref type="bibr" target="#b5">[6]</ref> that the eigenvalues are an approximate measure of the image curvature.</p><p>Based on the assumption of affine image deformation, a mathematical analysis led Shi and Tomasi <ref type="bibr" target="#b6">[7]</ref> conclude that it is better to use the smallest eigen value of H as the corner strength function:</p><formula xml:id="formula_3">C = min (λ 1 , λ 2 ).<label>(3)</label></formula><p>A number of suggestion have <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b8">9]</ref> been made for how to compute the corner strength from H and these have been all shown <ref type="bibr" target="#b9">[10]</ref> to be equivalent to various matrix norms of H. Zheng et al. <ref type="bibr" target="#b10">[11]</ref> perform an analysis of the computation of H, and find some suitable approximations which allow them to obtain a speed increase by computing only two smoothed images, instead of the three previously required.</p><p>Lowe <ref type="bibr" target="#b11">[12]</ref> obtains scale invariance by convolving the image with a Difference of Gaussians (DoG) kernel at multiple scales, retaining locations which are optima in scale as well as space. DoG is used because it is good approximation for the Laplacian of a Gaussian (LoG) and much faster to compute. An approximation to DoG has been proposed which, provided that scales are √ 2 apart, speeds up computation by a factor of about two, compared to the striaghtforward implementation of Gaussian convolution <ref type="bibr" target="#b12">[13]</ref>.</p><p>It is noted in <ref type="bibr" target="#b13">[14]</ref> that the LoG is a particularly stable scale-space kernel. Scale-space techniques have also been combined with the Harris approach in <ref type="bibr" target="#b14">[15]</ref> which computes Harris corners at multiple scales and retains only those which are also optima of the LoG response across scales.</p><p>Recently, scale invariance has been extended to consider features which are invariant to affine transformations <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b16">17]</ref>.</p><p>An edge (usually a step change in intensity) in an image corresponds to the boundary between two regions. At corners of regions, this boundary changes direction rapidly. Several techniques were developed which involved detecting and chaining edges with a view to finding corners in the chained edge by analysing the chain code <ref type="bibr" target="#b17">[18]</ref>, finding maxima of curvature <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b20">21]</ref>, change in direction <ref type="bibr" target="#b21">[22]</ref> or change in appearance <ref type="bibr" target="#b22">[23]</ref>. Others avoid chaining edges and instead look for maxima of curvature <ref type="bibr" target="#b23">[24]</ref> or change in direction <ref type="bibr" target="#b24">[25]</ref> at places where the gradient is large.</p><p>Another class of corner detectors work by examining a small patch of an image to see if it "looks" like a corner. Since second derivatives are not computed, a noise reduction step (such as Gaussian smoothing) is not required. Consequently, these corner detectors are computationally efficient since only a small number of pixels are examined for each corner detected. A corollary of this is that they tend to perform poorly on images with only large-scale features such as blurred images. The corner detector presented in this work belongs to this category.</p><p>The method presented in <ref type="bibr" target="#b25">[26]</ref> assumes that a corner resembles a blurred wedge, and finds the characteristics of the wedge (the amplitude, angle and blur) by fitting it to the local image. The idea of the wedge is generalised in <ref type="bibr" target="#b26">[27]</ref>, where a method for calculating the corner strength is proposed which computes self similarity by looking at the proportion of pixels inside a disc whose intensity is within some threshold of the centre (nucleus) value. Pixels closer in value to the nucleus receive a higher weighting. This measure is known as the USAN (the Univalue Segment Assimilating Nucleus). A low value for the USAN indicates a corner since the centre pixel is very different from most of its surroundings. A set of rules is used to suppress qualitatively "bad" features, and then local minima of the, SUSANs, (Smallest USAN) are selected from the remaining candidates.</p><p>Trajkovic and Hedley <ref type="bibr" target="#b27">[28]</ref> use a similar idea: a patch is not self-similar if pixels generally look different from the centre of the patch. This is measured by considering a circle. f C is the pixel value at the centre of the circle, and f P and f P are the pixel values at either end of a diameter line across the circle. The response function is defined as</p><formula xml:id="formula_4">C = min P (f P − f C ) 2 + (f P − f C ) 2 . (<label>4</label></formula><formula xml:id="formula_5">)</formula><p>This can only be large in the case where there corner. The test is performed on a Bresenham circle. Since the circle is discretized, linear or circular interpolation is used in between discrete orientations in order to give the detector a more isotropic response. To this end, the authors present a method whereby the minimum response function at all interpolated positions between two pixels can be efficiently computed. Computing the response function requires performing a search over all orientations, but any single measurement provides an upper bound on the response. To speed up matching, the response in the horizontal and vertical directions only is checked. If the upper bound on the response is too low, then the potential corner is rejected. To speed up the method further, this fast check is first applied at a coarse scale.</p><p>A fast radial symmetry transform is developed in <ref type="bibr" target="#b28">[29]</ref> to detect points. Points have a high score when the gradient is both radially symmetric, strong, and of a uniform sign along the radius. The scale can be varied by changing the size of the area which is examined for radial symmetry.</p><p>An alternative method of examining a small patch of an image to see if it looks like a corner is to use machine learning to classify patches of the image as corners or non-corners. The examples used in the training set determine the type of features detected. In <ref type="bibr" target="#b29">[30]</ref>, a three layer neural network is trained to recognise corners where edges meet at a multiple of 45 • , near to the centre of an 8 × 8 window. This is applied to images after edge detection and thinning. It is shown how the neural net learned a more general representation and was able to detect corners at a variety of angles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">High-Speed Corner Detection</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">FAST: Features from Accelerated Segment Test</head><p>The segment test criterion operates by considering a circle of sixteen pixels around the corner candidate p. The original detector <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref> classifies p as a corner if there exists a set of n contiguous pixels in the circle which are all brighter than the intensity of the candidate pixel I p plus a threshold t, or all darker than I p − t, as illustrated in Figure <ref type="figure" target="#fig_0">1</ref>. n was chosen to be twelve because it admits a high-speed test which can be used to exclude a very large number of non-corners: the test examines only the four pixels at 1, 5, 9 and 13 (the four compass directions). If p is a corner then at least three of these must all be brighter than I p + t or darker than I p − t. If neither of these is the case, then p cannot be a corner. The full segment test criterion can then be applied to the remaining candidates by examining all pixels in the circle. This detector in itself exhibits high performance, but there are several weaknesses:</p><p>1. The high-speed test does not generalise well for n &lt; 12. 2. The choice and ordering of the fast test pixels contains implicit assumptions about the distribution of feature appearance. 3. Knowledge from the first 4 tests is discarded. 4. Multiple features are detected adjacent to one another.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Machine Learning a Corner Detector</head><p>Here we present an approach which uses machine learning to address the first three points (the fourth is addressed in Section 2.3). The process operates in two stages. In order to build a corner detector for a given n, first, corners are detected from a set of images (preferably from the target application domain) using the segment test criterion for n and a convenient threshold. This uses a slow algorithm which for each pixel simply tests all 16 locations on the circle around it.</p><p>For each location on the circle x ∈ {1..16}, the pixel at that position relative to p (denoted by p → x) can have one of three states:</p><formula xml:id="formula_6">S p→x = ⎧ ⎨ ⎩ d, I p→x ≤ I p − t (darker) s, I p − t &lt; I p→x &lt; I p + t (similar) b, I p + t ≤ I p→x (brighter)<label>(5)</label></formula><p>Choosing an x and computing S p→x for all p ∈ P (the set of all pixels in all training images) partitions P into three subsets, P d , P s , P b , where each p is assigned to P Sp→x . Let K p be a boolean variable which is true if p is a corner and false otherwise. Stage 2 employs the algorithm used in ID3 <ref type="bibr" target="#b30">[31]</ref> and begins by selecting the x which yields the most information about whether the candidate pixel is a corner, measured by the entropy of K p .</p><p>The entropy of K for the set P is:</p><formula xml:id="formula_7">H(P ) = (c + c) log 2 (c + c) − c log 2 c − c log 2 c<label>(6)</label></formula><p>where c = {p|K p is true} (number of corners) and c = {p|K p is false} (number of non corners)</p><p>The choice of x then yields the information gain:</p><formula xml:id="formula_8">H(P ) − H(P d ) − H(P s ) − H(P b )<label>( 7 )</label></formula><p>Having selected the x which yields the most information, the process is applied recursively on all three subsets i.e. x b is selected to partition P b in to P b,d , P b,s , P b,b , x s is selected to partition P s in to P s,d , P s,s , P s,b and so on, where each x is chosen to yield maximum information about the set it is applied to. The process terminates when the entropy of a subset is zero. This means that all p in this subset have the same value of K p , i.e. they are either all corners or all non-corners. This is guaranteed to occur since K is an exact function of the learning data. This creates a decision tree which can correctly classify all corners seen in the training set and therefore (to a close approximation) correctly embodies the rules of the chosen FAST corner detector. This decision tree is then converted into C-code, creating a long string of nested if-then-else statements which is compiled and used as a corner detector. For full optimisation, the code is compiled twice, once to obtain profiling data on the test images and a second time with arcprofiling enabled in order to allow reordering optimisations. In some cases, two of the three subtrees may be the same. In this case, the boolean test which separates them is removed.</p><p>Note that since the data contains incomplete coverage of all possible corners, the learned detector is not precisely the same as the segment test detector. It would be relatively straightforward to modify the decision tree to ensure that it has the same results as the segment test algorithm, however, all feature detectors are heuristic to some degree, and the learned detector is merely a very slightly different heuristic to the segment test detector.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Non-maximal Suppression</head><p>Since the segment test does not compute a corner response function, non maximal suppression can not be applied directly to the resulting features. Consequently, a score function, V must be computed for each detected corner, and non-maximal suppression applied to this to remove corners which have an adjacent corner with higher V . There are several intuitive definitions for V :</p><p>1. The maximum value of n for which p is still a corner. 2. The maximum value of t for which p is still a corner. 3. The sum of the absolute difference between the pixels in the contiguous arc and the centre pixel.</p><p>Definitions 1 and 2 are very highly quantised measures, and many pixels share the same value of these. For speed of computation, a slightly modified version of 3 is used. V is given by:</p><formula xml:id="formula_9">V = max ⎛ ⎝ x∈S bright |I p→x − I p | − t , x∈S dark |I p − I p→x | − t ⎞ ⎠<label>(8)</label></formula><p>with</p><formula xml:id="formula_10">S bright ={x|I p→x ≥ I p + t} S dark ={x|I p→x ≤ I p − t} (9)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Timing Results</head><p>Timing tests were performed on a 2.6GHz Opteron and an 850MHz Pentium III processor. The timing data is taken over 1500 monochrome fields from a PAL video source (with a resolution of 768 × 288 pixels). The learned FAST detectors for n = 9 and 12 have been compared to the original FAST detector, to our implementation of the Harris and DoG (difference of Gaussians-the detector used by SIFT) and to the reference implementation of SUSAN <ref type="bibr" target="#b31">[32]</ref>.</p><p>As can be seen in Table <ref type="table" target="#tab_0">1</ref>, FAST in general offers considerably higher performance than the other tested feature detectors, and the learned FAST performs up to twice as fast as the handwritten version. Importantly, it is able to generate an efficient detector for n = 9, which (as will be shown in Section 3) is the most reliable of the FAST detectors. On modern hardware, FAST consumes only a fraction of the time available during video processing, and on low power hardware, it is the only one of the detectors tested which is capable of video rate processing at all.</p><p>Examining the decision tree shows that on average, 2.26 (for n = 9) and 2.39 (for n = 12) questions are asked per pixel to determine whether or not it is a feature. By contrast, the handwritten detector asks on average 2.8 questions.</p><p>Interestingly, the difference in speed between the learned detector and the original FAST are considerably less marked on the Opteron processor compared to the Pentium III. We believe that this is in part due to the Opteron having a diminishing cost per pixel queried that is less well modelled by our system (which assumes equal cost for all pixel accesses), compared to the Pentium III. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Comparison of Detector Repeatability</head><p>Although there is a vast body of work on corner detection, there is much less on the subject of comparing detectors. Mohannah and Mokhtarian <ref type="bibr" target="#b32">[33]</ref> evaluate performance by warping test images in an affine manner by a known amount. They define the 'consistency of corner numbers' as</p><formula xml:id="formula_11">CCN = 100 × 1.1 −|nw−no| ,</formula><p>where n w is the number of features in the warped image and n o is the number of features in the original image. They also define accuracy as</p><formula xml:id="formula_12">ACU = 100 × na no + na ng 2 ,</formula><p>where n g are the number of 'ground truth' corners (marked by humans) and n a is the number of matched corners compared to the ground truth. This unfortunately relies on subjectively made devisions. Trajkovic and Hedley <ref type="bibr" target="#b27">[28]</ref> define stability to be the number of 'strong ' matches (matches detected over three frames in their tracking algorithm) divided by the total number of corners. This measurement is clearly dependent on both the tracking and matching methods used, but has the advantage that it can be tested on the date used by the system.</p><p>When measuring reliability, what is important is if the same real-world features are detected from multiple views <ref type="bibr" target="#b0">[1]</ref> This is the definition which will be used here. For an image pair, a feature is 'detected' if is is extracted in one image and appears in the second. It is 'repeated' if it is also detected nearby in the second. The repeatability is the ratio of repeated features detected features. In <ref type="bibr" target="#b0">[1]</ref>, the test is performed on images of planar scenes so that the relationship between point positions is a homography. Fiducial markers are projected on to the planar scene to allow accurate computation of this.</p><p>By modelling the surface as planar and using flat textures, this technique tests the feature detectors' ability to deal with mostly affine warps (since image features are small) under realistic conditions. This test is not so well matched to our intended application domain, so instead, we use a 3D surface model to compute where detected features should appear in other views (illustrated in Figure <ref type="figure" target="#fig_1">2</ref>). This allows the repeatability of the detectors to be analysed on features caused by geometry such as corners of polyhedra, occlusions and T-junctions. We also allow bas-relief textures to be modelled with a flat plane so that the repeatability can be tested under non-affine warping.</p><p>A margin of error must be allowed because:</p><p>1. The alignment is not perfect.</p><p>2. The model is not perfect.</p><p>3. The camera model (especially regarding radial distortion) is not perfect. 4. The detector may find a maximum on a slightly different part of the corner. This becomes more likely as the change in viewpoint and hence change in shape of the corner become large.  Instead of using fiducial markers, the 3D model is aligned to the scene by hand and this is then optimised using a blend of simulated annealing and gradient descent to minimise the SSD between all pairs of frames and reprojections.</p><p>To compute the SSD between frame i and reprojected frame j, the position of all points in frame j are found in frame i. The images are then bandpass filtered. High frequencies are removed to reduce noise, while low frequencies are removed to reduce the impact of lighting changes. To improve the speed of the system, the SSD is only computed using 1000 random points (as opposed to every point).</p><p>The datasets used are shown in Figure <ref type="figure" target="#fig_2">3</ref>, Figure <ref type="figure" target="#fig_3">4</ref> and Figure <ref type="figure" target="#fig_4">5</ref>. With these datasets, we have tried to capture a wide range of corner types (geometric and textural).</p><p>The repeatability is computed as the number of corners per frame is varied. For comparison we also include a scattering of random points as a baseline measure, since in the limit if every pixel is detected as a corner, then the repeatability is 100%.  To test robustness to image noise, increasing amounts of Gaussian noise were added to the bas-relief dataset. It should be noted that the noise added is in addition to the significant amounts of camera noise already present (from thermal noise, electrical interference, and etc). F ig. 6. A: A comparison of the FAST detectors shown that n = 9 is the most repeatable. For n ≤ 8, the detector starts to respond strongly to edges. B, C, D: Repeatability results for the three datasets as the number of features per frame is varied. D: repeatab ility results for the bas-relief data set (500 features per frame) as the amount of G aussian noise added to the images is varied. For FAST and SUSAN, the number of features can not be chosen arbitrarily; the closest approximation to 500 features per fr ame achievable is used.</p><p>In the sample implementation of SIFT <ref type="bibr" target="#b34">[35]</ref>, approximately 1000 points are generated on the images from the test sets. We concur that this a good choice for the number of features since this appears to be roughly where the repeatability curve for DoG features starts to flatten off.</p><p>Smith and Brady <ref type="bibr" target="#b26">[27]</ref> claim that the SUSAN corner detector performs well in the presence of noise since it does not compute image derivatives, and hence, does not amplify noise. We support this claim: although the noise results show that the performance drops quite rapidly with increasing noise to start with, it soon levels off and outperforms all but the DoG detector.</p><p>The big surprise of this experiment is that the FAST feature detectors, despite being designed only for speed, outperform the other feature detectors on these images (provided that more than about 200 corners are needed per frame). It can be seen in Figure <ref type="figure">6A</ref>, that the 9 point detector provides optimal performance, hence only this and the original 12 point detector are considered in the remaining graphs.</p><p>The DoG detector is remarkably robust to the presence of noise. Since convolution is linear, the computation of DoG is equivalent to convolution with a DoG kernel. Since this kernel is symmetric, this is equivalent to matched filtering for objects with that shape. The robustness is achieved because matched filtering is optimal in the presence of additive Gaussian noise <ref type="bibr" target="#b35">[36]</ref>.</p><p>FAST, however, is not very robust to the presence of noise. This is to be expected: Since high speed is achieved by analysing the fewest pixels possible, the detector's ability to average out noise is reduced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions</head><p>In this paper, we have used machine learning to derive a very fast, high quality corner detector. It has the following advantages:</p><p>-It is many times faster than other existing corner detectors.</p><p>-High levels of repeatability under large aspect changes and for different kinds of feature.</p><p>However, it also suffers from a number of disadvantages:</p><p>-It is not robust to high levels noise.</p><p>-It can respond to 1 pixel wide lines at certain angles, when the quantisation of the circle misses the line. -It is dependent on a threshold.</p><p>We were also able to verify a number of claims made in other papers using the method for evaluating the repeatability of corners and have shown the importance of using more than just planar scenes in this evaluation.</p><p>The corner detection code is made available from http://mi.eng.cam.ac.uk/ ∼ {}er258/work/fast.html and http://savannah.nongnu.org/projects/libcvd and the data sets used for repeatability are available from http://mi.eng.cam.ac.uk/ ∼ {}er258/work/datasets.html</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. 12 point segment test corner detection in an image patch. The highlighted squares are the pixels used in the corner detection. The pixel at p is the centre of a candidate corner. The arc is indicated by the dashed line passes through 12 contiguous pixels which are brighter than p by more than the threshold.</figDesc><graphic url="image-2.png" coords="5,221.31,54.77,157.25,157.25" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Repeatability is tested by checking if the same real-world features are detected in different views. A geometric model is used to compute where the features reproject to.</figDesc><graphic url="image-4.png" coords="9,157.69,164.67,113.09,84.79" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Box dataset: photographs taken of a test rig (consisting of photographs pasted to the inside of a cuboid) with strong changes of perspective, changes in scale and large amounts of radial distortion. This tests the corner detectors on planar textures.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Maze dataset: photographs taken of a prop used in an augmented reality application. This set consists of textural features undergoing projective warps as well as geometric features. There are also significant changes of scale.</figDesc><graphic url="image-35.png" coords="10,71.84,183.17,69.10,51.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Bas-relief dataset: the model is a flat plane, but there are many objects with significant relief. This causes the appearance of features to change in a non affine way from different viewpoints.</figDesc><graphic url="image-39.png" coords="10,71.84,236.08,69.10,51.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Timing results for a selection of feature detectors run on fields (768 × 288) of a PAL video sequence in milliseconds, and as a percentage of the processing budget per frame. Note that since PAL and NTSC, DV and 30Hz VGA (common for webcams) have approximately the same pixel rate, the percentages are widely applicable. Approximately 500 features per field are detected.</figDesc><table><row><cell>Detector</cell><cell cols="4">Opteron 2.6GHz Pentium III 850MHz</cell></row><row><cell></cell><cell>ms</cell><cell>%</cell><cell>ms</cell><cell>%</cell></row><row><cell>Fast n = 9 (non-max suppression)</cell><cell>1.33</cell><cell>6.65</cell><cell>5.29</cell><cell>26.5</cell></row><row><cell>Fast n = 9 (raw)</cell><cell>1.08</cell><cell>5.40</cell><cell>4.34</cell><cell>21.7</cell></row><row><cell>Fast n = 12 (non-max suppression)</cell><cell>1.34</cell><cell>6.70</cell><cell>4.60</cell><cell>23.0</cell></row><row><cell>Fast n = 12 (raw)</cell><cell>1.17</cell><cell>5.85</cell><cell>4.31</cell><cell>21.5</cell></row><row><cell cols="2">Original FAST n = 12 (non-max suppression) 1.59</cell><cell>7.95</cell><cell>9.60</cell><cell>48.0</cell></row><row><cell>Original FAST n = 12 (raw)</cell><cell>1.49</cell><cell>7.45</cell><cell>9.25</cell><cell>48.5</cell></row><row><cell>Harris</cell><cell>24.0</cell><cell>120</cell><cell>166</cell><cell>830</cell></row><row><cell>DoG</cell><cell>60.1</cell><cell>301</cell><cell>345</cell><cell>1280</cell></row><row><cell>SUSAN</cell><cell>7.58</cell><cell>37.9</cell><cell>27.5</cell><cell>137.5</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Results and Discussion</head><p>Shi and Tomasi <ref type="bibr" target="#b6">[7]</ref>, derive their result for better feature detection on the assumption that the deformation of the features is affine. In the box and maze datasets, this assumption holds and can be seen in Figure <ref type="figure">6B</ref> and Figure <ref type="figure">6C</ref> the detector outperforms the Harris detector. In the bas-relief dataset, this assumption does not hold, and interestingly, the Harris detector outperforms Shi and Tomasi detector in this case.</p><p>Mikolajczyk and Schmid <ref type="bibr" target="#b14">[15]</ref> evaluate the repeatability of the Harris-Laplace detector evaluated using the method in <ref type="bibr" target="#b33">[34]</ref>, where planar scenes are examined. The results show that Harris-Laplace points outperform both DoG points and Harris points in repeatability. For the box dataset, our results verify that this is correct for up to about 1000 points per frame (typical numbers, probably commonly used); the results are somewhat less convincing in the other datasets, where points undergo non-projective changes.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Evaluation of interest point detectors</title>
		<author>
			<persName><forename type="first">C</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mohr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bauckhage</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Vision</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="151" to="172" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Fusing points and lines for high performance tracking</title>
		<author>
			<persName><forename type="first">E</forename><surname>Rosten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Drummond</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">10 th IEEE</title>
				<meeting><address><addrLine>Beijing, China</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1508" to="1515" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Real-time video annotations for augmented reality</title>
		<author>
			<persName><forename type="first">E</forename><surname>Rosten</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Reitmayr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Drummond</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Visual Computing</title>
				<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Obstacle avoidance and navigation in the real world by a seeing robot rover</title>
		<author>
			<persName><forename type="first">H</forename><surname>Moravec</surname></persName>
		</author>
		<idno>CMU-RI-TR-80-03</idno>
	</analytic>
	<monogr>
		<title level="m">Available as Stanford AIM-340, CS-80-813 and</title>
				<imprint>
			<date type="published" when="1980">1980</date>
		</imprint>
		<respStmt>
			<orgName>Robotics Institute, Carnegie Mellon University &amp; doctoral dissertation, Stanford University. Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">tech. report</note>
	<note>republished as a Carnegie Mellon University Robotics Institue Technical Report to increase availability</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A combined corner and edge detector</title>
		<author>
			<persName><forename type="first">C</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Stephens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Alvey Vision Conference</title>
				<imprint>
			<date type="published" when="1988">1988</date>
			<biblScope unit="page" from="147" to="151" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Finding corners</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Noble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Image and Vision Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="121" to="128" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Good features to track</title>
		<author>
			<persName><forename type="first">J</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Tomasi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">9 th IEEE Conference on Computer Vision and Pattern Recognition</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Descriptions of image surfaces</title>
		<author>
			<persName><forename type="first">A</forename><surname>Noble</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
		<respStmt>
			<orgName>Department of Engineering Science, University of Oxford.</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A condition number for point matching with application to registration and postregistration error estimation</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">S</forename><surname>Kenney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">S</forename><surname>Manjunath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zuliani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">G A</forename><surname>Hewer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Nevel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="1437" to="1454" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A mathematical comparison of point detectors</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zuliani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kenney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Manjunath</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Second IEEE Image and Video Registration Workshop (IVR), Washington DC</title>
				<meeting><address><addrLine>USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Analysis of gray level corner detection</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">K</forename><surname>Teoh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pattern Recognition Letters</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="149" to="162" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Distinctive image features from scale-invariant keypoints</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Lowe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Vision</title>
		<imprint>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="page" from="91" to="110" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Fast computation of characteristic scale using a half octave pyramid</title>
		<author>
			<persName><forename type="first">James</forename><forename type="middle">L</forename><surname>Crowley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><forename type="middle">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Scale Space 03: 4th International Conference on Scale-Space theories in Computer Vision</title>
				<meeting><address><addrLine>Isle of Skye, Scotland, UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">An affine invariant interest point detector</title>
		<author>
			<persName><forename type="first">K</forename><surname>Mikolajczyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schmid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Conference on Computer Vision</title>
				<meeting><address><addrLine>Copenhagen</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="128" to="142" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Indexing based on scale invariant interest points</title>
		<author>
			<persName><forename type="first">K</forename><surname>Mikolajczyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schmid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">th IEEE International Conference on Computer Vision</title>
				<meeting><address><addrLine>Vancouver, Canada, Springer</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="525" to="531" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Invariant features from interest point groups</title>
		<author>
			<persName><forename type="first">M</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Lowe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">13 th British Machine Vision Conference</title>
				<meeting><address><addrLine>Cardiff</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="656" to="665" />
		</imprint>
	</monogr>
	<note>British Machine Vision Assosciation</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Multi-view matching for unordered image sets, or How do I organise my holiday snaps?</title>
		<author>
			<persName><forename type="first">F</forename><surname>Schaffalitzky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">th Euproean Conference on Computer Vision</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="414" to="431" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">A comparison of corner detection techniques for chain coded curves</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">S</forename><surname>Rutkowski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rosenfeld</surname></persName>
		</author>
		<idno>623</idno>
		<imprint>
			<date type="published" when="1978">1978</date>
		</imprint>
		<respStmt>
			<orgName>Maryland University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Curve encoding and detection of discontinuities. Computer Vision, Graphics and Image Processing</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Langridge</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987">1987</date>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="58" to="71" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Corner detection and curve representation using cubic b-splines. Computer Vision, Graphics and Image Processing</title>
		<author>
			<persName><forename type="first">G</forename><surname>Medioni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yasumoto</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987">1987</date>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="279" to="290" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Robust image corner detection through curvature scale space</title>
		<author>
			<persName><forename type="first">F</forename><surname>Mokhtarian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Suomela</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="1376" to="1381" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Computer and robot vision</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Haralick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">G</forename><surname>Shapiro</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>Adison-Wesley</publisher>
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Early jump-out corner detectors</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cooper</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Venkatesh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Kitchen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="823" to="828" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Real-time corner detection algorithm for motion estimation</title>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Brady</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Image and Vision Computing</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="695" to="703" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Gray-level corner detection</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kitchen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rosenfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pattern Recognition Letters</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="95" to="102" />
			<date type="published" when="1982">1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Corner characterization by differential geometry techniques</title>
		<author>
			<persName><forename type="first">A</forename><surname>Guiducci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pattern Recognition Letters</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="311" to="318" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">SUSAN -a new approach to low level image processing</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Brady</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Vision</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="45" to="78" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Fast corner detection</title>
		<author>
			<persName><forename type="first">M</forename><surname>Trajkovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hedley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Image and Vision Computing</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="75" to="87" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A fast radial symmetry transform for detecting points of interest</title>
		<author>
			<persName><forename type="first">G</forename><surname>Loy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zelinsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">th Euproean Conference on Computer Vision</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="358" to="368" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A neural network based corner detection method</title>
		<author>
			<persName><forename type="first">P</forename><surname>Dias</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kassim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Srinivasan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Neural Networks</title>
				<meeting><address><addrLine>Perth, WA, Australia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="2116" to="2120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Induction of decision trees</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Quinlan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Machine Learning</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="81" to="106" />
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Smith</surname></persName>
		</author>
		<ptr target="http://www.fmrib.ox.ac.uk/~steve/susan/susan2l.c" />
		<imprint>
			<date type="published" when="2005">Accessed 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Performenace Evaluation of Corner Detection Algorithms under Affine and Similarity Transforms</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">F</forename><surname>Cootes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12 th British Machine Vision Conference</title>
				<editor>
			<persName><forename type="first">T</forename><forename type="middle">F</forename><surname>Cootes</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><surname>Taylor</surname></persName>
		</editor>
		<meeting><address><addrLine>Manchester</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
	<note>British Machine Vision Assosciation</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Comparing and evaluating interest points</title>
		<author>
			<persName><forename type="first">C</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mohr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bauckhage</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">th IEEE International Conference on Computer Vision</title>
				<meeting><address><addrLine>Bombay, India</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="page" from="230" to="235" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Demo software: Sift keypoint detector</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Lowe</surname></persName>
		</author>
		<ptr target="http://www.cs.ubc.ca/~lowe/keypoints/" />
		<imprint>
			<date type="published" when="2005">Accessed 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">B</forename><surname>Sklar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
			<publisher>Prentice Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
