<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Requirements Evolution From Process to Product Oriented Management</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Stuart</forename><surname>Anderson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Division of Informatics</orgName>
								<orgName type="institution" key="instit1">LFCS</orgName>
								<orgName type="institution" key="instit2">The University of Edinburgh</orgName>
								<address>
									<addrLine>Mayfiled Road</addrLine>
									<postCode>EH9 3JZ</postCode>
									<settlement>Edinburgh</settlement>
									<country key="GB">United Kingdom</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Massimo</forename><surname>Felici</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Division of Informatics</orgName>
								<orgName type="institution" key="instit1">LFCS</orgName>
								<orgName type="institution" key="instit2">The University of Edinburgh</orgName>
								<address>
									<addrLine>Mayfiled Road</addrLine>
									<postCode>EH9 3JZ</postCode>
									<settlement>Edinburgh</settlement>
									<country key="GB">United Kingdom</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Requirements Evolution From Process to Product Oriented Management</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">D837EEC4E6CBBC8E6FFC30C189C86A4B</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T12:18+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Requirements Evolution represents one of the major problems in developing computer-based systems. Current practice in Requirement Engineering relies on process-oriented methodologies, which lack of product features. The resulting scenario then is a collection of general methodologies, which do not take into account product features that may enhance our ability in monitoring and controlling Requirements Evolution. This paper shows empirical investigations of two industrial case studies. The results point out evolutionary product features and identify an Empirical Framework to analysing Requirements Evolution. This work represents a shift from process to product-oriented management of Requirements Evolution.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The requirements process is one of the most important of the entire system life cycle. Most of the faults into computer-based systems (the term computer-based systems draws attention to the involvement of human participants in most complex systems) can be traced backup to the early requirements stage when a recovery action can still be cost-effective <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref>. Hence the management of requirements is an important activity for Software Process Improvement (SPI). It is furthermore a key action of many maturity models applied in industry (e.g., CMM <ref type="bibr" target="#b15">[16]</ref>). Desp ite this Requirements Evolution <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b22">23]</ref> still remains one of the most critical issues for software organizations and is challenging for research and practice in Requirements Engineering <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b24">25]</ref>.</p><p>Current practice in Requirements Engineering <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b26">27]</ref> relies on general processes (e.g., elicitation, verification, etc.) and methodologies (e.g., standards and templates for specifying requirements) that are adapted according to specific needs by plugging in other general processes (e.g., task a nalysis) and methodologies (e.g., formal methods). This view can be really articulated and complex depending on the industrial context. Thus within industrial contexts Requirements Engineering practice is a collection of processes and methodologies driven by stakeholders. The resulting view lacks in taking into account product features that may enhance our ability in engineering requirements for evolving systems. Current practice in engineering requirements demands a shift from process to product -oriented e ngineering <ref type="bibr" target="#b25">[26]</ref>. Unfortunately this shift in Requirements Engineering has not yet been fully registered. The lack of product perspectives in managing Requirements Evolution gives rise to issues degrading both software process and product in terms of dependability. This view becomes even more complex within safety-critical contexts in which evolution can lead to undependable situations <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b23">24]</ref> causing loss.</p><p>Our work is based on investigations of live industrial contexts to devise productoriented approaches supporting Requirements Evolution. This paper shows a productoriented analysis of Requirements Evolution in two industrial case studies. The paper is structured as follows. Section 2 introduces the two case studies. The research methodology in Section 3 has driven the empirical analyses presented in Section 4. Section 5 summarises the conclusions and identifies further work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Industrial Case Studies</head><p>This section introduces two industrial case studies, an avionics and a smart card case study, which have c ontributed to our work. The investigation of different industrial case studies is motivated by our research hypotheses. Our work aims to characterise industrial settings in order to identify product-line methodologies <ref type="bibr" target="#b25">[26]</ref> for Requirements Evolution. Origins of Requirements Evolution can be identified in stakeholder <ref type="bibr" target="#b17">[18]</ref> interaction, which characterises the industrial context, and technical issues <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b22">23]</ref>. The link among stakeholder interaction, technical issues and Requirements Evolution is still vaguely understood. The analysis of different case studies aims to identify product features that may enhance our ability in monitoring and controlling Requirements Evolution to devise computer-based systems. Our interest is in differences and commonalities across industrial contexts. This aims to define taxonomy of evolution in industrial contexts, which may be characterized by evolving patters for product-lines. This work contributes to identify dependable Requirements Evolution in terms of process and product, that is, dependable process for deploying evolving systems and Requirements Evolution enhancing system dependability. The following subsections introduce the two industrial case studies, which provide interesting aspects due to their stringent requirements (e.g., safety and security) and to their product -line nature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">An Avionics Safety-Critical Case Study</head><p>The description of the avionics case study identifies critical features with respect to evolution. We describe the case study in general terms, because our focus is on methodologies. On the other hand the case study provides practical issues that may interest practitioners and researchers. The following features are identified in the case study.</p><p>Safety Requirements. A system safety assessment analyses the system architecture to determine and categorise the failure conditions. Safety related requirements are determined and flowed down to the software and hardware requirements.</p><p>Functional and Operational Requirements. The customer provides the system requirements, which contain information needed to describe the functional and operational requirements for the software. This includes timing and memory constraints and accuracy requirements where applicable. Requirements also contain details of inputs and outputs the software has to handle with special reference to those where non-standard data formats are used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Software Development Process.</head><p>The bulk of the software development task can be split into two broad areas, that of software design and code and the other of verification. Two main elements serve to complicate the situation. Firstly there are feedback loops occurring due to problems or modifications. Secondly there is an expansion of information down the design chain to the code. As design progresses, the software requirements are partitioned into smaller more manageable items. This fragmentation is also reflected into further down activities (e.g., testing) and deliverables (e.g., code). There is a strict policy for configuration management, which also requires maintaining traceability on the project to ensure that the final code is complete and consistent with its higher-level requirements, and the verification has been performed on the correct standard of the final code. Software verification consists of two main elements testing and review/analysis. At the start of the project, the verification activities have been planed in specific documents detailing the level of verification performed at each phase of the software development.</p><p>Product-Line Aspects and Standards. Hardware dependent software requirements arise not from the system requirements directly but from the implementation of those system requirements. This is normally due to the way that the hardware has been designed to meet its requirements and as an indirect result of safety related requirements. The hardware dependent software requirements characterise the specific product-line in terms of hardware constraints and safety requirements. A certification plan for software is the primary means u sed by the designed authorities to assess whether the software development process proposed is commensurate with the software level proposed. The plan of the case study has been produced according to the specific guidelines in the standard RTCA/DO-178B <ref type="bibr" target="#b20">[21]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Evolution and Maintenance.</head><p>During the development life cycle, changes and modifications arise causing feedback loops. As the size and the scope of these changes will be different for each modification and for each project, only general guidelines have b een defined. For modifications to a certified standard of software the full life cycle process of testing and reviews should be complied with. The extent to which all activities have to be repeated will depend upon the time elapsed since certification. Modifications that are introduced prior certification will be incorporated during the development life cycle. Security Systems. Smart card systems often manage confidential information (e.g., bank account, personal information, phone credit, etc.) that need to be protected from malicious attacks.</p><p>The considered smart card context is certified according to many quality and security standards. Among these its management process conforms to PRINCE2. PRINCE<ref type="foot" target="#foot_0">1</ref> (PRojects IN Controlled Environments) is a structured method for project management <ref type="bibr" target="#b5">[6]</ref>. It is used extensively by the UK Government and is widely recognized and used in the private sector, both in the UK and internationally. PRINCE2 is a process-based project management approach integrating a productbased project planning. The investigation of the smart card context aims to identify general aspects in requirements management. We do intend neither to validate any particular methodology nor to assess the specific industrial context. Our aim is to identify general practical aspects that can improve our ability in dealing with Requirements Evolution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Empirical Research Methodology</head><p>Our research methodology consists of two main steps named Empirical Analysis and Product-oriented Refinement. The Empirical Analysis aims to gather information from the industrial case studies by analyses of industrial data (e.g., requirements document, dat a repository). The Product -oriented Refinement is to focus our empirical methodology in order to gather further information by product-oriented analyses.</p><p>The analyses consist of both qualitative and quantitative approaches. The qualitative approaches consist of stakeholder interviews focusing on requirements engineering practice (e.g., requirements management policy) in the industrial context and product features (e.g., requirements evolution). Stakeholder interviews are also integrated with a Requirements Engineering Questionnaire <ref type="bibr" target="#b2">[3]</ref> consisting of 152 questions organized in terms of Business, Process and Product viewpoints. Qualitative analyses are furthermore performed on documents (e.g., requirements documents, history of changes, repository, etc.) by inspections <ref type="bibr" target="#b8">[9]</ref>. Finally, quantitative approaches (e.g., Software Metrics <ref type="bibr" target="#b7">[8]</ref>) aim to identify additional information and to support empirical results obtained by qualitative analyses.</p><p>We perform incremental empirical analyses and product-oriented refinements, that is, the empirical analyses are incrementally conducted by product-oriented refinements. The better our understanding of the case study, the better our ability in defining product-oriented analyses. The empirical results point out which productoriented refinements to be implemented in subsequent analyses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Empirical Analyses</head><p>This section shows the results of the empirical analyses of the case studies. The analyses investigate different aspects of the case studies depending on the industrial context and the available data. The analysis of the avionics case study aims to identify product features characterising Requirements Evolution, whereas the analysis of the smart card case study aims to assess viewpoints for Requirements Evolution management.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Avionics Case Study</head><p>The empirical investigation of the avionics case study is based on analyses of data repositories of requirements evolution. The aim is to identify requirements properties <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref> that may enhance our ability in controlling Requirements Evolution <ref type="bibr" target="#b0">[1]</ref>. The investigation goes from a general viewpoint towards a product-oriented viewpoint. The incremental investigation is summarised in what follows.</p><p>General Requirements Evolution. Figure <ref type="figure" target="#fig_0">1</ref> shows the total number of requirements changes, i.e., added, deleted and modified requirements, over the 22 software releases <ref type="foot" target="#foot_1">2</ref> . The trend of requirements changes does not give enough information about evolutionary features, but it emphasises the problem of Requirements Evolution. The analysis of Requirements Evolution points out that requirements changes are not uniformly spread out over the three basic changes (i.e., added, deleted and modified requirements), in fact the total number of requirements constantly increases over the software releases. This is because the requirements become clearer to the stakeholders, who split complex requirements into smaller and more precisely stated requirements. Another reason is that new requirements arise during the progress of the project, because there are requirements that cannot be defined at the beginning due to lack of information. Finally, design, implementation and testing activities provide additional feedback to the requirements. Taxonomy of Requirements Evolution. The inspection of the history of changes points out the specific changes occurring into requirements. Table <ref type="table" target="#tab_1">1</ref> shows the taxonomy of requirements changes in the case study. Changes affect requirements attributes like variables, functionality, explanation, traceability and dependency. These attributes are easily collected and represented by requirements templates (e.g., <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref>). These attributes are usually embedded within paragraphs specifying requirements. A structured way of representing, collecting and organising requirements attributes may be useful to identify information for controlling and monitoring Requirements Evolution.</p><p>Changes fall into three main classes named General, Domain Specific and Product Line. This rough classification may help to identify requirements issues. For instance, if changes overlap two categories, the affected requirements may need to be refined in order to fit in one category. This may identify different evolving paths, e.g., splitting requirements in smaller and more detailed requirements or clarify (i.e. modify) their specifications. This is the case when there are requirements overlapping software and hardware. The decision whether to allocate requirements to software or hardware may be delayed till there is a clear understanding of the system. Hence taxonomy of Requirements Evolution may classify not only an industrial context, but it can be used as a tool during design to identify requirements issues.</p><p>Requirements Evolution Measurement. Metrics <ref type="bibr" target="#b7">[8]</ref> may be used to quantify some properties monitoring Requirements Evolution. The standard IEEE 982 <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13]</ref> suggests a Software Maturity Index to quantify the readiness of a software product.</p><p>The Software Maturity Index can be used for software requirements, hence a Requirements Maturity Index (RMI) to quantify the readiness of requirements. Equation (1) defines the RMI 3 .</p><formula xml:id="formula_0">T C T R R R RMI - = (1)</formula><p>Figure <ref type="figure">2</ref> shows the RMI calculated for all the software functional requirements. In this case the RMI results to be misleading to assess the readiness of the software functional requirements. The RMI does not have an increasing regular trend. Hence any assessment based only on the RM I could be misleading and risky. This result points out that it is not obvious how to apply even widely used software metrics. Metrics that are suitable at the software level can became unusable at the requirements level. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 2. Requirements Maturity Index</head><p>Functional Requirements Evolution. To provide a more detailed analysis our focus moves from the total number of requirements changes to the number of requirements changes in each function that forms the software functional requirements. The software functional requirements fall into 8 functions for which separate documents are maintained. Figure <ref type="figure" target="#fig_1">3</ref> shows the trend of the cumulative number of requirements changes for each function. The figure points out that the likelihood that changes can occur into specific functions is not constant over the software releases. An outcome of this functional analysis is that the function F1 is not likely to change, therefore, it could be considered a stable part of the system. This aspect becomes interesting, because the specific function describes the hardware architecture of the system onto which the software architecture is mapped. It seems furthermore that functions that are likely to change during early software releases change less during later releases, and vice versa. This aspect helps to relate requirements changes with the software life cycle. The different occurrences of requirements changes throughout the life cycle points out some dependencies among functional requirements. Understanding these dependencies may improve the requirements process. Requirements Dependencies. The analysis of Requirements Evolution per software function points out some dependencies among functions. We have evaluated the dependencies among software functions by the number of common fault reports arose during the software life cycle. The number of fault reports overlapping pairwise functional requirements has quantified their dependencies. The underlying hypothesis implies that if two functions are modified due to the same fault report, then there are some dependencies between them. Table <ref type="table" target="#tab_2">2</ref> shows the dependencies matrix that has been obtained according the above assumption.</p><p>We take the number of fault reports in common between two functions as Dependency Index between the corresponding requirements. For example, the Dependency Index between the functions F4 and F8 is 5, which means that there have been 5 fault reports in common between F4 and F8. The blank entries in Tab. 2 mean that there are not common fault reports between the corresponding crossing functions. The requirements dependencies matrix, Table <ref type="table" target="#tab_2">2</ref>, gives a practical tool to assess to which extent software functional requirements depend each other. Moreover it identifies those particular fault reports that trigger changes into different functions. Thus an analysis of such identified fault reports may give important information about requirements. In order to provide feedback into the software organisation the matrix may be analysed to assess the ability of the organisation in identifying software functional requirements for a system or a series of systems for a particular productline. A tool as the dependencies matrix supports software product-line engineering <ref type="bibr" target="#b25">[26]</ref>. Future refinements over product -line projects may identify an effective set of modular system functions such that to reduce disturbing dependencies (e.g., Dependency Index equals to 1). Moreover the Dependency Index may be used to refine impact changes estimates based on traceability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Smart Card Case Study</head><p>The analysis of the smart card case study focuses on requirements viewpoints <ref type="bibr" target="#b21">[22]</ref>. Viewpoints provide different perspectives to manage Requirements Evolution. The case study provides the opportunity to identify hierarchical viewpoints within the organisation to which correspond different levels of management and different requirements. Viewpoints analysis furthermore points out both process and product divergences, which can be used for further investigations. The investigation analysis is based on interviews and questionnaires <ref type="bibr" target="#b2">[3]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Requirements Evolution</head><p>Viewpoints. The analysis of the smart card organisation points out three different viewpoints named Business, Process and Product Viewpoints. They correspond to different management levels and responsibilities within the organisation. Each level corresponds to different processes and different requirements. All the three viewpoints together contribute to the overall management of Requirements Evolution.</p><p>The business viewpoint is associated to a high management level within the organisation. This level is where projects are originated and the interaction between the organisation and customers takes part. Customer requirements are integrated together with general requirements to complete the smart card system requirements. </p><formula xml:id="formula_1">F1 F1 F2 2 F2 F3 3 F3 F4 3 1 1 F4 F5 1 4 2 6 F5 F6 1 1 F6 F7 1 1 1 F7 F8 1 4 3 5 9 2 F8</formula><p>Requirements are then negotiated between the customer and the bureau (i.e., the department responsible for the spin-off of smart card projects). It provides production constraints (i.e., additional requirements). When customer and bureau agree on the system requirements the project is declared LIVE, that is, from this moment onward the production of the smart cards starts. The production is organised in terms of subsequent deliveries. During the production of each delivery new requirements may arise due to feedback from users of the new smart cards (e.g., misbehaves, request of new services, etc.) or to business constraints (e.g., production issues, request of additional cards, etc.). The business viewpoint therefore deals with the management of system and business requirements, which are not directly related to software requirements.</p><p>The process viewpoint consists of all the management processes adopted within the organisation <ref type="bibr" target="#b5">[6]</ref>. Every time a request of change arises t he process for changes management starts. The initial part of the changes management process is a macroprocess of the negotiation activity. If changes require some software development a set of analyses is performed. Each of these analyses corresponds to a different subsystem consisting of a part of the whole smart card system. For each subsystem an impact report is produced estimating also the cost of changes in terms of man-day. The set of impact reports serves as basis for the negotiation of changes. The agreed software changes are given as input to the software development life cycle, which represents the gate to another viewpoint, namely Product, in the organisation.</p><p>The product viewpoint identifies the level producing software embedded in the smart c ard system. Here the software follows its own development process (i.e., a V model <ref type="bibr" target="#b16">[17]</ref>). Software requirements are elaborated through the process and requirements changes are allocated to subsequent releases of the software behind the smart card system. A t this level software changes are drawn down through the development process. Differently from the Process viewpoint that estimates changes in terms of man-day, the Product viewpoint takes into account software changes in terms of activities (e.g., coding and testing).</p><p>Hierarchical Requirements Evolution. The three viewpoints identified within the organisation represent a hierarchy through Requirements Evolution propagates. This hierarchy identifies different types of requirements and their granularity. Des pite this hierarchical structure current methodologies in requirements engineering flatly capture requirements viewpoints <ref type="bibr" target="#b21">[22]</ref>.</p><p>The interviews point out to seek different abilities to support different viewpoints. Different responsibilities seek different types of support. The Business viewpoint needs to support project visibility. Most of the process-oriented methodologies in Software Engineering allow better to plan project activities, but they do not completely clarify the link between software features and project activities. This motivates a shift from process to product-oriented software engineering <ref type="bibr" target="#b25">[26]</ref>. The Process viewpoint seeks support to enhance its management ability by measuring (requirements) evolution. The management process registers requirements changes, but a quantitative approach to measure Requirements Evolution needs to be identified within the specific environment.</p><p>The Product viewpoint would like to enhance its ability in identifying reusable (product-line) functions and repeatable processes to allocate functions to smart card system requirements. At this level there exist two different opponent processes. Good practice in Software Engineering addresses that requirements are divided into smaller and more manageable items. This triggers an information flow expansion throughout the development process. On the other hand specific functions would be allocated to software requirements according also to past experience. The gap between these two processes represents the extent to which an organisation is able to identify an optimal and effective set of software functions. The smaller the gap, the better the ability in reusing software functions and identifying product-line features.</p><p>Viewpoints Analysis. The empirical analysis also investigates Requirements Engineering viewpoints by a questionnaire <ref type="bibr" target="#b2">[3]</ref> to assess the general understanding of the requirements process within the organisation. The questionnaire consists of 152 questions grouped according the categories in Fig. <ref type="figure" target="#fig_3">4</ref>.   , the viewpoint associated to the project manager) with a third viewpoint (i.e., the viewpoint associated to the software development manager) to take into account some bias in the analysis. The similar viewpoints have similar trends, whereas there are some divergences between the different viewpoints. The largest ones are those associated with the groups of questions 2, 3, 8, 15, 16 and 17 (see Fig. <ref type="figure" target="#fig_3">4</ref>). The group 2 and 3 identify business aspects of the requirements process. The distance between the answers to the questions in the group 8 points out that there are different levels of confidence in the management of requirement evolution. This is probably because the management of changes takes into account process aspects that better fit the process viewpoint. This is also due to some issues in transmitting requirements changes through the management hierarchy within the organisation. The groups 15, 16 and 17 identify product-oriented questions. The divergences might be due to the fact that the two viewpoints deal with different requirements. The process viewpoint deals with system requirements, which are different from the software requirements taken into account at the product level. The software embedded in a smart card system represent one aspect, which is not completely visible at the process level. These divergences identify product-oriented refinements for further investigations. They furthermore represent awareness for the organisation. Issues arising from these divergences may cause undependable software and process degradation. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions and Further Work</head><p>This paper shows two empirical analyses of two industrial case studies respectively. Our incremental research methodology aims to identify product-oriented empirical analyses. The complexity of Requirements Evolution does not allow adopting general techniques or methodologies, moreover current practice in Requirements Engineering</p><p>has not yet fully registered a shift from process to product-oriented approaches. This work tackles Requirements Evolution from a product point of view.</p><p>The analysis of the avionics case study points out product evolutionary features that improve our understanding of Requirements Evolution. The analysis gathers information starting from a general analysis of requirements evolution towards a product-oriented analysis via taxonomy of Requirements Evolution and measurement. The analysis furthermore identifies general practical issues and remarks that may be investigated in other industrial contexts. The analysis of the smart card case study identifies viewpoints within the organisation. These viewpoints represent not only sources of requirements and evolutions, but also a management hierarchy for Requirements Evolution. Viewpoints analysis may also identify inconsistencies in the requirements process and areas for further investigations. Figure <ref type="figure" target="#fig_6">7</ref> shows the steps of the two analyses. The joining of the two analyses identifies an Empirical Framework to analyse Requirements Evolution within industrial contexts. The framework consists of analyses that can be repeated within industrial contexts with affordable costs. Further work aims to validate the entire framework in other empirical investigations of industrial case studies. The empirical framework can then be used to analyse industrial contexts to enhance our ability in managing Requirements Evolution. On the other hand the framework can be reversed, in the sense that it can identify an effective way to structuring Requirements Evolution. This aspect will be assessed by further empirical analysis also supported by formal modelling.</p><p>In conclusion, this work identifies an empirical framework for the analysis of Requirements Evolution. The framework represents a valuable tool to implement a feedback into software process and product. Such feedback is the basis for a continuous software process improvement. The empirical nature of the work allows industry to benefit of our experience and studies.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Number of requirements changes per software release</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>3 TR</head><label>3</label><figDesc>quantifies the number of software requirements in the current delivery; C R quantifies the number of software requirements in the current delivery that are added, deleted or modified from a previous delivery.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Cumulative number of requirements changes for each function</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. The groups of requirements engineering questionsPeople with different responsibilities within the organisation filled in the questionnaire. Figure5shows the profiles of the questionnaire for two persons with similar experience and with different responsibilities within the organisation. They correspond to two different management levels within the organization and are respectively associated to the Product and Process viewpoints. The questionnaire captures how the requirements process is interpreted from d ifferent viewpoints within the organisation.</figDesc><graphic coords="11,150.75,477.75,144.75,147.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Comparison of two different requirements engineering viewpoints</figDesc><graphic coords="11,314.25,477.75,144.00,147.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Comparison of viewpoints</figDesc><graphic coords="12,176.25,354.75,268.50,164.25" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Empirical framework for Requirements Evolution</figDesc><graphic coords="13,165.00,300.75,290.25,201.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>2.2 A Smart Card Case Study</head><label></label><figDesc>The transactions of smart card systems occur in real-time with most of the services operating on a 24-hour basis. The availability of smart card systems is fundamental to support business (e.g., e -money) and obtain customer satisfaction.</figDesc><table><row><cell>People use smart card systems in their daily life. Credit cards, Pay -TV systems and</cell></row><row><cell>GSM cards are some examples of smart card systems. Smart card systems provide</cell></row><row><cell>interesting case studies of distributed interacting computer-based systems. Behind a</cell></row><row><cell>simple smart card there is a complex distributed socio-technical infrastructure. Smart</cell></row><row><cell>card systems are</cell></row><row><cell>Real-Time Systems.</cell></row></table><note><p>Interactive Systems. Most of smart card systems operate on demand. The request of any service provided depends on almost random human factors. Operational profiles show that human-computer interaction turns to be one of the critical factors for smart card systems.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 .</head><label>1</label><figDesc>Taxonomy of requirements evolution</figDesc><table><row><cell></cell><cell>Type of Changes</cell><cell></cell></row><row><cell>General</cell><cell>Domain Specific</cell><cell>Product Line</cell></row><row><cell>-Add, modify requirements delete and -Explanation -Rewording -Traceability</cell><cell>-Non-compliance -Partial compliance</cell><cell>-Hardware modification -Variables modification -Add, delete, rename range</cell></row><row><cell></cell><cell></cell><cell>parameters/variables</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2 .</head><label>2</label><figDesc>Requirements dependencies matrix</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>PRINCE is a registered trademark of CCTA (Central Computer and Telecommunications Agency).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>There is a correspondence one-to-one between versions of the requirements specification and software releases.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgements. We thank the industrial partners, who provided the case studies. Due to the confidentiality agreement with the industrial partners we cannot provide more detailed information. Despite this the work still remains valuable and the results are clearly expressed. This work has been conducted within the DIRC project <ref type="bibr" target="#b6">[7]</ref>. The DIRC project has been funded by the UK EPSRC (Engineering and Physical Sciences Research Council).</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* This work has been partially funded by a grant of the Italian National Research Council (CNR) within the thematic Science and Information Technology, Bando n. 203.15.11. Research Program: "Requirements Evolution: Understanding Formally Engineering Processes within Industrial Contexts".</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Controlling requirements evolution: An avionics case study</title>
		<author>
			<persName><forename type="first">Stuart</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Massimo</forename><surname>Felici</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SAFECOMP 2000, 19th International Conference on Computer Safety, Reliability and Security</title>
		<meeting>SAFECOMP 2000, 19th International Conference on Computer Safety, Reliability and Security<address><addrLine>Rotterdam, The Netherlands</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000-10">October 2000</date>
			<biblScope unit="volume">1943</biblScope>
			<biblScope unit="page" from="361" to="370" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Requirements changes risk/cost analyses: An avionics case study</title>
		<author>
			<persName><forename type="first">Stuart</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Massimo</forename><surname>Felici</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Foresight and Precaution, Proceedings of ESREL 2000, SARS and SRA-EUROPE Annual Conference</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">P</forename><surname>Cottam</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><forename type="middle">W</forename><surname>Harvey</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><forename type="middle">P</forename><surname>Pape</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Tait</surname></persName>
		</editor>
		<meeting><address><addrLine>Edinburgh, Scotland, United Kingdom</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-05">May 2000</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="921" to="925" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Requirements engineering questionnaire, version 1.0</title>
		<author>
			<persName><forename type="first">Stuart</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Massimo</forename><surname>Felici</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001-01">January 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName><forename type="first">Barry</forename><forename type="middle">W</forename><surname>Boehm</surname></persName>
		</author>
		<title level="m">Software Engineering Economics</title>
		<imprint>
			<publisher>Prentice-Hall</publisher>
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Software engineering economics</title>
		<author>
			<persName><forename type="first">Barry</forename><forename type="middle">W</forename><surname>Boehm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transaction on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="4" to="21" />
			<date type="published" when="1984-01">January 1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Prince2 Manual -Managing successful projects with PRINCE 2. CCTA -Central Computer and Telecommunications Agency</title>
		<author>
			<persName><surname>Ccta</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Interdisciplinary research collaboration in dependability of computer-based systems</title>
		<author>
			<orgName type="collaboration">DIRC Project</orgName>
		</author>
		<ptr target="http://www.dirc.org.uk/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Software Metrics: A Rigorous and Practical Approach</title>
		<author>
			<persName><forename type="first">Norman</forename><forename type="middle">E</forename><surname>Fenton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shari</forename><forename type="middle">Lawrence</forename><surname>Pfleeger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>International Thomson Computer Press</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Software Inspection</title>
		<author>
			<persName><forename type="first">Tom</forename><surname>Gilb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dorothy</forename><surname>Graham</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Doing requirements right the first time</title>
		<author>
			<persName><forename type="first">Theodore</forename><forename type="middle">F</forename><surname>Hammer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Leonore</forename><forename type="middle">L</forename><surname>Huffman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Linda</forename><forename type="middle">H</forename><surname>Rosenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CROSSTALK The Journal of Defense Software Engineering</title>
		<imprint>
			<biblScope unit="page" from="20" to="25" />
			<date type="published" when="1998-12">December 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Customer-Centered Products: Creating Successful Products Through Smart Requirements Management</title>
		<author>
			<persName><forename type="first">F</forename><surname>Ivy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kristin</forename><forename type="middle">A</forename><surname>Hooks</surname></persName>
		</author>
		<author>
			<persName><surname>Farry</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>AMACOM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Std 982.1 -IEEE Standard Dictionary of Measures to Produce Reliable Software</title>
		<author>
			<persName><surname>Ieee</surname></persName>
		</author>
		<author>
			<persName><surname>Ieee</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">IEEE Std 982.2 -IEEE Guide for the Use of IEEE Standard Dictionary of Measures to Produce Reliable Software</title>
		<author>
			<persName><surname>Ieee</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Software&apos;s future: Managing evolution</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Lehman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="page" from="40" to="44" />
			<date type="published" when="1998-02">Jan-Feb 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">SAFEWARE: System Safety and Computers</title>
		<author>
			<persName><forename type="first">Nancy</forename><forename type="middle">G</forename><surname>Leveson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Key practices of the capability maturity model, version 1.1</title>
		<author>
			<persName><forename type="first">C</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName><surname>Paulk</surname></persName>
		</author>
		<idno>CMU/SEI-93-025</idno>
		<imprint>
			<date type="published" when="1993-02">February 1993</date>
		</imprint>
		<respStmt>
			<orgName>Software Engineering Institute, Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Software Engineering: Theory and Practice</title>
		<author>
			<persName><forename type="first">Shari</forename><surname>Lawrence</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pfleeger</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Meeting the challenge of changing requirements. Deliverable 1.3, Centre for Software Reliability</title>
	</analytic>
	<monogr>
		<title level="m">PROTEUS Project</title>
		<imprint>
			<date type="published" when="1996-06">June 1996</date>
		</imprint>
		<respStmt>
			<orgName>University of Newcastle upon Tyne</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Volere: Requirements specification template</title>
		<author>
			<persName><forename type="first">James</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Suzanne</forename><surname>Robertson</surname></persName>
		</author>
		<idno>Edition 6.1</idno>
	</analytic>
	<monogr>
		<title level="j">Atlantic Systems Guild</title>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Mastering the Requirements Process</title>
		<author>
			<persName><forename type="first">Suzanne</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Robertson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">DO-178B Software Considerations in Airborne Syst ems and Equipment Certification</title>
		<author>
			<persName><surname>Rtca</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Requirements Engineering: A Good Practice Guide</title>
		<author>
			<persName><forename type="first">Ian</forename><surname>Sommerville</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pete</forename><surname>Sawyer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997">1997</date>
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">An examination of the effects of requirements changes on software releases</title>
		<author>
			<persName><forename type="first">George</forename><surname>Stark</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Al</forename><surname>Skillicorn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ryan</forename><surname>Ameele</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CROSSTALK The Journal of Defense Software Engineering</title>
		<imprint>
			<biblScope unit="page" from="11" to="16" />
			<date type="published" when="1998-12">December 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Safety-Critical Computer Systems</title>
		<author>
			<persName><forename type="first">Neil</forename><surname>Storey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Requirements engineering in the year 00: A research perspective</title>
		<author>
			<persName><forename type="first">Axel</forename><surname>Van Lamsweerde</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2000 International Conference on Software Engineering (ICSE&apos;2000)</title>
		<meeting>the 2000 International Conference on Software Engineering (ICSE&apos;2000)<address><addrLine>Limerick, Ireland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-06">June 2000</date>
			<biblScope unit="page" from="5" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">M</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chi</forename><surname>Tau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Lai</surname></persName>
		</author>
		<title level="m">Software Product-Line Engineering: A Family-Based Software Development Process</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Software Requirements</title>
		<author>
			<persName><forename type="first">Karl</forename><surname>Eugene</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wiegers</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>Microsoft Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
