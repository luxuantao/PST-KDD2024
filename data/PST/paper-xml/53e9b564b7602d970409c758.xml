<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">IMPLEMENTING GLOBAL CONSTRAINTS AS STRUCTURED NETWORKS OF ELEMENTARY CONSTRAINTS</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Dávid</forename><surname>Hanák</surname></persName>
							<email>dhanak@cs.bme.hu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Information Theory</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">IMPLEMENTING GLOBAL CONSTRAINTS AS STRUCTURED NETWORKS OF ELEMENTARY CONSTRAINTS</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">32D00D0B19674BA26B6CAF3130447346</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T06:41+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Global constraints are cardinal concepts of CLP(FD), a constraint programming language. They are means to find a set of integers that satisfy certain relations. The fact that defining global constraints often requires the knowledge of a specification language makes sharing constraints between scientists and programmers difficult. Nicolas Beldiceanu presented a theory that could solve this problem, because it depicts global constraints as graphs: an abstraction that everyone understands. The abstract description language defined by the theory may also be interpreted by a computer program. This paper deals with the problematic issues of putting the theory into practice by implementing such a program. It introduces a concrete syntax of the language and presents three programs understanding that syntax. These case studies represent two different approaches of propagation. One of these offers exhausting pruning with poor efficiency, the other, yet unfinished attempt provides a better alternative at the cost of being a lot more complicated.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. Introduction</head><p>Constraint Logic Programming (CLP, also referred to as Constraint Programming, CP) <ref type="bibr" target="#b0">[1]</ref> is a family of logic programming languages, where a problem is defined in terms of correlations between unknown values, and a solution is a set of values which satisfy the correlations. In other words, the correlations constrain the set of acceptable values, hence the name. A member of this family is CLP(FD), a constraint language which operates on variables of integer values. Like CLP solvers in general, CLP(FD) solvers are embedded either into standalone platforms such as the ILOG OPL Studio <ref type="bibr" target="#b1">[2]</ref> or host languages, such as C <ref type="bibr" target="#b2">[3]</ref>, Java <ref type="bibr" target="#b3">[4]</ref>, Oz <ref type="bibr" target="#b4">[5]</ref> or Prolog <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref>. CLP(FD) systems are particularly useful to model discrete optimization problems. The wide range of industrial applications includes various scheduling and resource allocation tasks, analysis and synthesis of analog circuits, cutting stock problems, graph coloring, etc.</p><p>In CLP(FD), FD stands for finite domain, because each variable is represented by the finite set of integer values which it can take. These variables are connected by the constraints, which propagate the change of the domain of one variable to the domains of others. A constraint can be thought of like a "daemon" which wakes up when the domain of one (or more) of its variables has changed, propagates the change and then falls asleep again. This change can be induced either by an other constraint or by the distribution or labeling process, which enumerates the solutions by successively substituting every possible value into the variables. Constraints can be divided into two groups: simple and global constraints. The former always operate on a fixed number of variables (like X = Y ), while the latter are more generic and can work with a variable number of arguments (e.g., "X 1 , X 2 , . . . , X n are all different").</p><p>Many solvers allow the users to implement user-defined constraints. However, the specification languages vary. In some cases, a specific syntax is defined for this purpose, in others, the host language is used. There are several problems with this. First, CLP(FD) programmers using different systems could have serious difficulties sharing such constraints because of the lack of a common description language. Second, to define constraints, one usually has to know the solver in greater detail than if merely using the predefined ones. Inspired by these problems, Nicolas Beldiceanu suggested a new method for defining and describing global finite domain constraints <ref type="bibr" target="#b7">[8]</ref>. After studying his theory, we decided to put it into practice by extending the CLP(FD) library of SICStus Prolog <ref type="bibr" target="#b8">[9]</ref>, a full implementation of the CLP(FD) language, with a parser of Beldiceanu's abstract description language. This has been the only attempt in this direction so far.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. The Theory</head><p>In <ref type="bibr" target="#b7">[8]</ref>, Beldiceanu specifies a description language which enables mathematicians, computer scientists and programmers of different CLP systems to share information on global constraints in a way that all of them understand. It also helps to classify global constraints, and as a most important feature, it enables us to write programs which, given only this abstract description, can automatically generate parsers, type checkers and propagators (pruners) for specific global constraints.</p><p>In order to create an inter-paradigm platform, Beldiceanu reached for a device that is abstract enough and capable of depicting relations between members of a set: the directed graph. According to the theory, the most important ingredients of a global constraint specification are the following: a regularly structured initial graph, an elementary constraint (a very simple constraint, such as X = Y ), and a set of graph properties (restrictions on the number of arcs, sources, connected components, etc.).</p><p>For each constraint it is specified how the initial graph should be built. Its vertices are assigned one or more variables from the constraint, while the arcs connecting the vertices are generated according to a regular pattern. Finally the chosen elementary constraint is assigned to each arc, the variables belonging to the endpoints of the arc being used as the arguments of the elementary constraint. Note that the elementary constraint need not be binary, if it has more arguments, then a hypergraph is built using arcs with the required number of endpoints.</p><p>The final graph consists of those arcs of the initial graph for which the elementary constraints hold. The global constraint itself succeeds if and only if the specified graph properties hold for this final graph.</p><p>The description language also contains terms to express certain preconditions on the arguments of the constraint, i.e., restrictions that must hold in order to be able to apply the constraint on its arguments.</p><p>This schema allows us to test whether the relation expressed by a global constraint holds for a given set of concrete arguments. However, it does not deal with the more important case where only the domains of the arguments are specified, but their specific values are unknown. In such a case we need an algorithm to prune the domains of the arguments by deleting those values that would certainly result in a final graph not satisfying the properties. This question is fundamental in practical applications, therefore it is addressed by the second part of the paper, which introduces an implementation for the SICStus Prolog environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. The Implementation</head><p>The first step of putting the theory into practice was to define a concrete syntax that corresponds to the abstract syntax and is suitable for parsing. The representation chosen closely resembles the abstract syntax, but follows the syntax of Prolog, too. This has the advantage that it can be effortlessly parsed by a Prolog program. This task also helped to discover that the semantics of an operator expressing a precondition on a set argument of the constraint is unclear in certain contexts, because it is underspecified.</p><p>Development was launched with two goals in mind. The first task was to implement a relation checker, a realization of the testing feature offered by the schema, and a dumb propagator built on this checker. By and large, this task is finished. The second task was to implement an active propagator capable of pruning variable domains based on an analysis of the current state of the graph, with the required properties in view. This task is much bigger, the development is still in an early stage. Both are implemented in SICStus Prolog <ref type="bibr" target="#b9">[10]</ref>, extending its CLP(FD) library by utilizing the interface for defining global constraints. This allows thorough testing of both the program and the theory itself in a trusted environment.</p><p>Task 1. The complex relation checker and the generate-and-test propagator. The first stage was to implement the complex relation checker, a program that checks whether the relation defined by the global constraint holds for a given set of values, but does no pruning at all. When called, the relation checker is given a constraint with fully specified arguments (i.e., no variables should appear in them), and reports the result of the restriction checks and whether the graph properties hold for the final graph. It was used to test the formal description of several constraints, whether they really conform to their expected meaning, and some errors in their specification have already been discovered.</p><p>The second (and final) stage was to amend the relation checker with a generate-and-test propagator. The idea is that whenever the domain of a variable changes, all possible value combinations of the affected constraint's arguments are tested against the relation checker, and only the values that passed the test are preserved. This classical but extremely inefficient method for finding solutions gives us full and exhaustive pruning.</p><p>Task 2. The active propagator. Generate-and-test propagation is naturally out of the question in any practical applications. The active propagator is the first step towards an efficient, applicable pruner. Here the line of thought is reversed: we assume that the constraint holds (or at least the intention of the programmer is that it should hold), and from the required graph properties we try to deduce conclusions on the domains of its variables.</p><p>More specifically, when a constraint wakes up, some of the elementary constraints assigned to the arcs of the graph are known to hold (i.e., unless the program backtracks, they will also appear in the final graph), and some are known to fail (i.e., they will be left out of the final graph, too). The state of the rest is yet uncertain. This classification can be completed gradually because the CLP(FD) system is monotonic, which means that a value is not removed from a domain unless it is definitely not a solution. Then, by knowing the required graph properties and the graph's current state, the graph can be tightened by forcing some of these uncertain constraints into success or into failure, thus causing the affected variables to be narrowed or instantiated. The global constraint finally becomes entailed when there are no uncertain arcs left.</p><p>We chose to represent elementary constraints with simple, reifiable CLP(FD) constraints. (Reifiable constraints are connected with a Boole variable, and succeed if and only if the Boole variable has a value of 1.) This has several advantages. For one, a wide range of predefined constraints is available, already at this early stage of development. For another, the algorithm must be able to determine whether an elementary constraint holds or fails, or force it into success or failure, and the Boole variable linked to the reifiable constraints serves exactly that purpose.</p><p>To figure out how to tighten the graph at each step, in other words, to find the rules of pruning, we need to study each graph property separately. There are simpler properties, such as prescribing the number of arcs, for which finding these rules is not very problematic. A few of these are already handled by the propagator. The are more complex properties, like constraining the difference in the vertex number of the biggest and smallest strongly connected components, the pruning rules for these are a lot more complicated.</p><p>The current implementation can handle four different graph properties: restrictions on the number of arcs, vertices, sources and sinks. Fortunately, a large number of descriptions relies only on the first two, thus many different constraints can already be propagated. Without going into details, such constraints are among, disjoint, common, sliding_sum, change, smooth, inverse, and variants of these. Current work is concentrated on the perfection of the propagation of these properties, and on the study of the more complicated one that prescribes the number of strongly connected components, upon which many of the existing descriptions are based.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. Future Work</head><p>We have to work out pruning rules for more of the graph properties. This will be the objective of an international project hopefully starting in Autumn 2003.</p><p>Using reifiable constraints as elementary constraints poses a problem: they do not necessarily provide a pruning as strong as expectable. This is so because they naturally do not take other elementary constraints into account, although a more global view would be more effective. This problem requires further study.</p><p>Efficiency matters need to be considered more carefully when implementing further propagators. One way to increase efficiency could be to abandon the thought of a common propagator, that is able to parse such descriptions and prune in run time, and implement a pruner algorithm generator instead. This generator would take the description and convert it into a piece of code that does the pruning. This would shift the execution of complicated graph algorithms into compile time, where efficiency is a smaller issue. How this can be done must be worked out yet.</p></div>		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>I would like to thank Nicolas Beldiceanu for his theory and his ideas on the propagation of graph properties. Péter Szeredi, my supervisor always directed my attempts at research and writing with patience yet with great tenacity.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Methodology and implementation of a CLP system</title>
		<author>
			<persName><forename type="first">J</forename><surname>Jaffar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Michaylov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Logic Programming: Proceedings of the 4th International Conference</title>
		<editor>
			<persName><forename type="first">J.-L</forename><surname>Lassez</surname></persName>
		</editor>
		<meeting><address><addrLine>Melbourne</addrLine></address></meeting>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="1986-11">May 1987. November 1986</date>
			<biblScope unit="page" from="196" to="218" />
		</imprint>
	</monogr>
	<note>Revised version of Monash University technical report number 86/75</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Constraint programming in OPL</title>
		<author>
			<persName><forename type="first">P</forename><surname>Van Hentenryck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Michela</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Perron</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J.-C</forename><surname>Régin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Principles and Practice of Declarative Programming (PPDP&apos;99)</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">G</forename><surname>Nadathur</surname></persName>
		</editor>
		<meeting>the International Conference on Principles and Practice of Declarative Programming (PPDP&apos;99)</meeting>
		<imprint>
			<date type="published" when="1999-10-01">September 29 -October 1 1999</date>
			<biblScope unit="volume">1702</biblScope>
			<biblScope unit="page" from="98" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">ILOG Solver 5.1 User&apos;s Manual, ILOG s</title>
		<author>
			<persName><surname>Ilog</surname></persName>
		</author>
		<ptr target="http://www.ilog.com" />
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Embed finite domain constraint programming into Java and some Web-based applications</title>
		<author>
			<persName><forename type="first">V</forename><surname>Loia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Quaggetto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software-Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="311" to="339" />
			<date type="published" when="1999-04">Apr. 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Constraints in OZ</title>
		<author>
			<persName><forename type="first">G</forename><surname>Smolka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4es</biblScope>
			<biblScope unit="page">75</biblScope>
			<date type="published" when="1996-12">Dec. 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><surname>Van Hentenryck</surname></persName>
		</author>
		<title level="m">Constraint Satisfaction in Logic Programming</title>
		<meeting><address><addrLine>Cambridge, Massachusetts</addrLine></address></meeting>
		<imprint>
			<publisher>MIT Press</publisher>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A minimal extension of the WAM for clp(FD)</title>
		<author>
			<persName><forename type="first">D</forename><surname>Diaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Codognet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Tenth International Conference on Logic Programming</title>
		<editor>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Warren</surname></persName>
		</editor>
		<meeting>the Tenth International Conference on Logic Programming<address><addrLine>Budapest, Hungary</addrLine></address></meeting>
		<imprint>
			<publisher>The MIT Press</publisher>
			<date type="published" when="1993">1993</date>
			<biblScope unit="page" from="774" to="790" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Global constraints as graph properties on a structured network of elementary constraints of the same type</title>
		<author>
			<persName><forename type="first">N</forename><surname>Beldiceanu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Principles and Practice of Constraint Programming</title>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="52" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An open-ended finite domain constraint solver</title>
		<author>
			<persName><forename type="first">M</forename><surname>Carlsson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ottosson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Carlson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth International Symposium on Programming Languages, Implementations, Logics, and Programs (PLILP&apos;97)</title>
		<meeting>the Ninth International Symposium on Programming Languages, Implementations, Logics, and Programs (PLILP&apos;97)<address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="volume">1292</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<ptr target="http://www.sics.se/isl/sicstuswww/site/documentation.html" />
		<title level="m">SICStus Prolog User&apos;s Manual</title>
		<meeting><address><addrLine>Uppsala, Sweden</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
		<respStmt>
			<orgName>Swedish Institute of Computer Science</orgName>
		</respStmt>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
