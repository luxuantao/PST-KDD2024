<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Learning Visual Attributes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Vittorio</forename><surname>Ferrari</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Andrew</forename><surname>Zisserman</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">University of Oxford</orgName>
								<address>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">University of Oxford</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Learning Visual Attributes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">4F8C6F92BF2EFF6D979564A8781C0460</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:58+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We present a probabilistic generative model of visual attributes, together with an efficient learning algorithm. Attributes are visual qualities of objects, such as 'red', 'striped', or 'spotted'. The model sees attributes as patterns of image segments, repeatedly sharing some characteristic properties. These can be any combination of appearance, shape, or the layout of segments within the pattern. Moreover, attributes with general appearance are taken into account, such as the pattern of alternation of any two colors which is characteristic for stripes. To enable learning from unsegmented training images, the model is learnt discriminatively, by optimizing a likelihood ratio. As demonstrated in the experimental evaluation, our model can learn in a weakly supervised setting and encompasses a broad range of attributes. We show that attributes can be learnt starting from a text query to Google image search, and can then be used to recognize the attribute and determine its spatial extent in novel real-world images.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>In recent years, the recognition of object categories has become a major focus of computer vision and has shown substantial progress, partly thanks to the adoption of techniques from machine learning and the development of better probabilistic representations <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref>. The goal has been to recognize object categories, such as a 'car', 'cow' or 'shirt'. However, an object also has many other qualities apart from its category. A car can be red, a shirt striped, a ball round, and a building tall. These visual attributes are important for understanding object appearance and for describing objects to other people. Figure <ref type="figure" target="#fig_0">1</ref> shows examples of such attributes. Automatic learning and recognition of attributes can complement category-level recognition and therefore improve the degree to which machines perceive visual objects. Attributes also open the door to appealing applications, such as more specific queries in image search engines (e.g. a spotted skirt, rather than just any skirt). Moreover, as different object categories often have attributes in common, modeling them explicitly allows part of the learning task to be shared amongst categories, or allows previously learnt knowledge about an attribute to be transferred to a novel category. This may reduce the total number of training images needed and improve robustness. For example, learning the variability of zebra stripes under non-rigid deformations tells us a lot about the corresponding variability in striped shirts.</p><p>In this paper we propose a probabilistic generative model of visual attributes, and a procedure for learning its parameters from real-world images. When presented with a novel image, our method infers whether it contains the learnt attribute and determines the region it covers. The proposed model encompasses a broad range of attributes, from simple colors such as 'red' or 'green' to complex patterns such as 'striped' or 'checked'. Both the appearance and the shape of pattern elements (e.g. a single stripe) are explicitly modeled, along with their layout within the overall pattern (e.g. adjacent stripes are parallel). This enables our model to cover attributes defined by appearance ('red'), by shape ('round'), or by both (the black-and-white stripes of zebras). Furthermore, the model takes into account attributes with general appearance, such as stripes which are characterized by a pattern of alternation ABAB of any two colors A and B, rather than by a specific combination of colors. Since appearance, shape, and layout are modeled explictly, the learning algorithm gains an understanding of the nature of the attribute. As another attractive feature, our method can learn in a weakly supervised setting, given images labeled only by the presence or absence of the attribute, without indication of the image region it covers. The presence/absence labels can be noisy, as the training method can tolerate a considerable number of mislabeled images. This enables attributes to be learnt directly from a text specification by collecting training images using a web image search engine, such as Google-images, and querying on the name of the attribute.</p><p>Our approach is inspired by the ideas of Jojic and Caspi <ref type="bibr" target="#b3">[4]</ref>, where patterns have constant appearance within an image, but are free to change to another appearance in other images. We also follow the generative approach to learning a model from a set of images used by many authors, for example LOCUS <ref type="bibr" target="#b9">[10]</ref>. Our parameter learning is discriminative -the benefits of this have been shown before, for example for training the constellation model of <ref type="bibr" target="#b2">[3]</ref>. In term of functionality, the closest works to ours are those on the analysis of regular textures <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6]</ref>. However, they work with textures covering the entire image and focus on finding distinctive appearance descriptors. In constrast, here textures are attributes of objects, and therefore appear in complex images containing many other elements. Very few previous works appeared in this setting <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b10">11]</ref>. The approach of <ref type="bibr" target="#b6">[7]</ref> focuses on colors only, while in <ref type="bibr" target="#b10">[11]</ref> attributes are limited to individual regions. Our method encompasses also patterns defined by pairs of regions, allowing to capture more complex attributes. Moreover, we take up the additional challenge of learning the pattern geometry.</p><p>Before describing the generative model in section 3, in the next section we briefly introduce image segments, the elementary units of measurements observed in the model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Image segments -basic visual representation</head><p>The basic units in our attribute model are image segments extracted using the algorithm of <ref type="bibr" target="#b1">[2]</ref>. Each segment has a uniform appearance, which can be either a color or a simple texture (e.g. sand, grain). Figure <ref type="figure" target="#fig_1">2a</ref> shows a few segments from a typical image.</p><p>Inspired by the success of simple patches as a basis for appearance descriptors <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9]</ref>, we randomly sample a large number of 5 × 5 pixel patches from all training images and cluster them using kmeans <ref type="bibr" target="#b7">[8]</ref>. The resulting cluster centers form a codebook of patch types. Every pixel is soft-assigned to the patch types. A segment is then represented as a normalized histogram over the patch types of the pixels it contains. By clustering the segment histograms from the training images we obtain a codebook A of appearances (figure <ref type="figure" target="#fig_1">2b</ref>). Each entry in the codebook is a prototype segment descriptor, representing the appearance of a subset of the segments from the training set.</p><p>Each segment s is then assigned the appearance a ∈ A with the smallest Bhattacharya distance to the histogram of s. In addition to appearance, various geometric properties of a segment are measured, summarizing its shape. In our current implementation, these are: curvedness, compactness, elongation (figure <ref type="figure" target="#fig_1">2c</ref>), fractal dimension and area relative to the image. We also compute two properties of pairs of segments: relative orientation and relative area (figure <ref type="figure" target="#fig_1">2d</ref>). The three most frequent patch types for each appearance are displayed. Two segments from the stripes are assigned to the white and black appearance respectively (arrows). c) Geometric properties of a segment: curvedness, which is the ratio between the number of contour points C with curvature above a threshold and the total perimeter P ; compactness; and elongation, which is the ratio between the minor and major moments of inertia. d) Relative geometric properties of a pair of segments: relative area and relative orientation. Notice how these measures are not symmetric (e.g. relative area is the area of the first segment wrt to the second).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Generative models for visual attributes</head><p>Figure <ref type="figure" target="#fig_0">1</ref> shows various kinds of attributes. Simple attributes are entirely characterized by properties of a single segment (unary attributes). Some unary attributes are defined by their appearance, such as colors (e.g. red, green) and basic textures (e.g. sand, grainy). Other unary attributes are defined by a segment shape (e.g. round). All red segments have similar appearance, regardless of shape, while all round segments have similar shape, regardless of appearance. More complex attributes have a basic element composed of two segments (binary attributes). One example is the black/white stripes of a zebra, which are composed of pairs of segments sharing similar appearance and shape across all images. Moreover, the layout of the two segments is characteristic as well: they are adjacent, nearly parallel, and have comparable area. Going yet further, a general stripe pattern can have any appearance (e.g. blue/white stripes, red/yellow stripes). However, the pairs of segments forming a stripe pattern in one particular image must have the same appearance. Hence, a characteristic of general stripes is a pattern of alternation ABABAB. In this case, appearance is common within an image, but not across images.</p><p>The attribute models we present in this section encompass all aspects discussed above. Essentially, attributes are found as patterns of repeated segments, or pairs of segments, sharing some properties (geometric and/or appearance and/or layout).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Image likelihood.</head><p>We start by describing how the model M explains a whole image I. An image I is represented by a set of segments {s}. A latent variable f is associated with each segment, taking the value f = 1 for a foreground segment, and f = 0 for a background segment. Foreground segments are those on the image area covered by the attribute. We collect f for all segments of I into the vector F. An image has a foreground appearance a, shared by all the foreground segments it contains. The likelihood of an image is</p><formula xml:id="formula_0">p(I|M; F, a) = x∈I p(x|M; F, a)<label>(1)</label></formula><p>where x is a pixel, and M are the model parameters. These include α ⊂ A, the set of appearances allowed by the model, from which a is taken. The other parameters are used to explain segments and are dicussed below. The probability of pixels is uniform within a segment, and independent across segments:</p><formula xml:id="formula_1">p(x|M; F, a) = p(s x |M; f, a)<label>(2)</label></formula><p>with s x the segment containing x. Hence, the image likelihood can be expressed as a product over the probability of each segment s, counted by its area N s (i.e. the number of pixels it contains)</p><formula xml:id="formula_2">p(I|M; F, a) = x∈I p(s x |M; f, a) = s∈I p(s|M; f, a) Ns (3) s f i S G D λ a α β (a) f i a α s S i D R G c β C λ λ γ 2 1 δ (b)</formula><p>Figure <ref type="figure">3</ref> Note that F and a are latent variables associated with a particular image, so there is a different F and a for each image. In contrast, a single model M is used to explain all images.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Unary attributes</head><p>Segments are the only observed variables in the unary model. A segment s = (s a , {s j g }) is defined by its appearance s a and shape, captured by a set of geometric measurements {s j g }, such as elongation and curvedness. The graphical model in figure <ref type="figure">3a</ref> illustrates the conditional probability of image segments</p><formula xml:id="formula_3">p(s|M; f, a) = p(sa|a) • j p(s j g |Φ j ) v j if f = 1 β if f = 0<label>(4)</label></formula><p>The likelihood for a segment depends on the model parameters M = (α, β, {λ j }), which specify a visual attribute. For each geometric property λ j = (Φ j , v j ), the model defines its distribution Φ j over the foreground segments and whether the property is active or not (v j = 1 or 0). Active properties are relevant for the attribute (e.g. elongation is relevant for stripes, while orientation is not) and contribute substantially to its likelihood in (4). Inactive properties instead have no impact on the likelihood (exponentiation by 0). It is the task of the learning stage to determine which properties are active and their foreground distribution.</p><p>The factor p(s a |a) = [s a = a] is 1 for segments having the foreground appearance a for this image, and 0 otherwise (thus it acts as a selector). The scalar value β represents a simple background model: all segments assigned to the background have likelihood β. During inference and learning we want to maximize the likelihood of an image given the model over F, which is achieved by setting f to foreground when the f = 1 case of equation ( <ref type="formula" target="#formula_3">4</ref>) is greater than β.</p><p>As an example, we give the ideal model parameters for the attribute 'red'. α contains the red appearance only. β is some low value, corresponding to how likely it is for non-red segments to be assigned the red appearance. No geometric property {λ j } is active (i.e. all v j = 0).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Binary attributes</head><p>The basic element of binary attributes is a pair of segments. In this section we extend the unary model to describe pairs of segments. In addition to duplicating the unary appearance and geometric properties, the extended model includes pairwise properties which do not apply to individual segments. In the graphical model of figure <ref type="figure">3b</ref>, these are relative geometric properties γ (area, orientation) and adjacency δ, and together specify the layout of the attribute. For example, the orientation of a segment with respect to the other can capture the parallelism of subsequent stripe segments. Adjacency expresses whether the two segments in the pair are adjacent (like in stripes) or not (like the maple leaf and the stripes in the canadian flag). We consider two segments adjacent if they share part of the boundary. A pattern characterized by adjacent segments is more distinctive, as it is less likely to occur accidentally in a negative image.</p><p>Segment likelihood. An image is represented by a set of segments {s}, and the set of all possible pairs of segments {c}. The image likelihood p(I|M; F, a) remains as defined in equation ( <ref type="formula">3</ref>), but now a = (a 1 , a 2 ) specifies two foreground appearances, one for each segment in the pair. The likelihood of a segment s is now defined as the maximum over all pairs containing it</p><formula xml:id="formula_4">p(s|M; f, a) = max {c|s∈c} p(c|M, t) if f = 1 β if f = 0<label>(5)</label></formula><p>Pair likelihood. The observed variables in our model are segments s and pairs of segments c. A pair c = (s 1 , s 2 , {c k r }) is defined by two segments s 1 , s 2 and their relative geometric measurements {c k r } (relative orientation and relative area in our implementation). The likelihood of a pair given the model is</p><formula xml:id="formula_5">p(c|M, a) = p(s1,a, s2,a|a) appearance • j p(s j 1,g |Φ j 1 ) v j 1 • p(s j 2,g |Φ j 2 ) v j 2 shape • k p(c k r |Ψ k ) v k r • p(c|δ) layout<label>(6)</label></formula><p>The binary model parameters M = (α, β, δ, {λ j 1 }, {λ j 2 }, {γ k }) control the behavior of the pair likelihood. The two sets of λ j i = (Φ j i , v j i ) are analogous to their counterparts in the unary model, and define the geometric distributions and their associated activation states for each segment in the pair respectively. The layout part of the model captures the interaction between the two segments in the pair. For each relative geometric property γ k = (Ψ k , v k r ) the model gives its distribution Ψ k over pairs of foreground segments and its activation state v k r . The model parameter δ determines whether the pattern is composed of pairs of adjacent segments (δ = 1) or just any pair of segments (δ = 0). The factor p(c|δ) is defined as 0 iff δ = 1 and the segments in c are not adjacent, while it is 1 in all other cases (so, when δ = 1, p(c|δ) acts as a pair selector). The appearance factor p(s 1,a , s 2,a |a) = [s 1,a = a 1 ∧ s 2,a = a 2 ] is 1 when the two segments have the foreground appearances a = (a 1 , a 2 ) for this image.</p><p>As an example, the model for a general stripe pattern is as follows. α = (A, A) contains all pairs of appearances from A. The geometric properties λ elong 1 , λ curv 1 are active (v j 1 = 1) and their distributions Φ j 1 peaked at high elongation and low curvedness. The corresponding properties {λ j 2 } have similar values. The layout parameters are δ = 1, and γ rel area , γ rel orient are active and peaked at 0 (expressing that the two segments are parallel and have the same area). Finally, β is a value very close to 0, as the probability of a random segment under this complex model is very low.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Learning the model</head><p>Image Likelihood. The image likelihood defined in (3) depends on the foreground/background labels F and on the foreground appearance a. Computing the complete likelihood, given only the model M, involves maximizing a over the appearances α allowed by the model, and over F:</p><formula xml:id="formula_6">p(I|M) = max a∈α max F p(I|M; F, a)<label>(7)</label></formula><p>The maximization over F is easily achieved by setting each f to the greater of the two cases in equation ( <ref type="formula" target="#formula_3">4</ref>) (equation ( <ref type="formula" target="#formula_4">5</ref>) for a binary model). The maximization over a requires trying out all allowed appearances α. This is computationally inexpensive, as typically there are about 32 entries in the appearance codebook.</p><p>Training data. We learn the model parameters in a weakly supervised setting. The training data consists of positive I + = {I i + } and negative images I -= {I i -}. While many of the positive images contain examples of the attribute to be learnt (figure <ref type="figure" target="#fig_3">4</ref>), a considerable proportion don't. Conversely, some of the negative images do contain the attribute. Hence, we must operate under a weak assumption: the attribute occurs more frequently on positive training images than on negative. Moreover, only the (unreliable) image label is given, not the location of the attribute in the image. As demonstrated in section 5, our approach is able to learn from this noisy training data.</p><p>Although our attribute models are generative, learning them in a discriminative fashion greatly helps given the challenges posed by the weakly supervised setting. For example, in figure <ref type="figure" target="#fig_3">4</ref> most of the overall surface for images labeled 'red' is actually white. Hence, a maximum likelihood estimator over the positive training set alone would learn white, not red. A discriminative approach instead  notices that white occurs frequently also on the negative set, and hence correctly picks up red, as it is most discriminative for the positive set. Formally, the task of learning is to determine the model parameters M that maximize the likelihood ratio p(I+|M) p(I-|M) =</p><formula xml:id="formula_7">I i + ∈I + p(I i + |M) I i -∈I - p(I i -|M)<label>(8)</label></formula><p>Learning procedure. The parameters of the binary model are M = (α, β, δ, {λ j 1 }, {λ j 2 }, {γ k }), as defined in the previous sections. Since the binary model is a superset of the unary one, we only explain here how to learn the binary case. The procedure for the unary model is derived analogously. In our implementation, α can contain either a single appearance, or all appearances in the codebook A. The former case covers attributes such as colors, or patterns with specific colors (such as zebra stripes). The latter case covers generic patterns, as it allows each image to pick a different appearance a ∈ α, while at the same time it properly constrains all segments/pairs within an image to share the same appearance (e.g. subsequent pairs of stripe segments have the same appearance, forming a pattern of alternation ABABAB). Because of this definition, α can take on (1 + |A|) 2 /2 different values (sets of appearances). As typically a codebook of |A| ≤ 32 appearances is sufficient to model the data, we can afford exhaustive search over all possible values of α. The same goes for δ, which can only take on two values.</p><p>Given a fixed α and δ, the learning task reduces to estimating the background probability β, and the geometric properties {λ j 1 }, {λ j 2 }, {γ k }. To achieve this, we need determine the latent variable F for each training image, as it is necessary for estimating the geometric distributions over the foreground segments. These are in turn necessary for estimating β. Given β and the geometric properties we can estimate F (equation ( <ref type="formula" target="#formula_5">6</ref>)). This particular circular dependence in the structure of our model suggests a relatively simple and computationally cheap approximate optimization algorithm:</p><p>1. For each I ∈ {I + I -}, estimate an initial F and a via equation <ref type="bibr" target="#b6">(7)</ref>, using an initial β = 0.01, and no geometry (i.e. all activation variables set to 0).</p><p>2. Estimate all geometric distributions Φ j 1 , Φ j 2 , Ψ k over the foreground segments/pairs from all images, according to the initial estimates {F}.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Estimate β and the geometric activations v iteratively:</head><p>(a) Update β as the average probability of segments from I -. This is obtained using the foreground expression of ( <ref type="formula" target="#formula_4">5</ref>) for all segments of I -. (b) Activate the geometric property which most increases the likelihood-ratio (8) (i.e. set the corresponding v to 1). Stop iterating when no property increases (8).</p><p>4. The above steps already yield a reasonable estimate of all model parameters. We use it as initialization for the following EM-like iteration, which refines β and Φ j 1 , Φ j 2 , Ψ k (a) Update {F} given the current β and geometric properties (set each f to maximize ( <ref type="formula" target="#formula_4">5</ref>))</p><formula xml:id="formula_8">(b) Update Φ j 1 , Φ j 2 , Ψ k given the current {F}. (c) Update β over I -using the current Φ j 1 , Φ j 2 , Ψ k .</formula><p>The algorithm is repeated over all possible α and δ, and the model maximizing ( <ref type="formula" target="#formula_7">8</ref>) is selected. Notice how β is continuously re-estimated as more geometric properties are added. This implicitly offers to the selector the probability of an average negative segment under the current model as an up-to-date baseline for comparison. It prevents the model from overspecializing as it pushes it to only pick up properties which distinguish positive segments/pairs from negative ones. One last, implicit, parameter is the model complexity: is the attribute unary or binary ? This is tackled through model selection: we learn the best unary and binary models independently, and then select the one with highest likelihood-ratio. The comparison is meaningful because image likelihood is measured in the same way in both unary and binary cases (i.e. as the product over the segment probabilities, equation ( <ref type="formula">3</ref>)).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experimental results</head><p>Learning. We present results on learning four colors (red, green, blue, and yellow) and three patterns (stripes, dots, and checkerboard). The positive training set for a color consists of the 14 images in the first page returned by Google-images when queried by the color name. The proportion of positive images unrelated to the color varies between 21% and 36%, depending on the color (e.g. figure <ref type="figure" target="#fig_3">4</ref>). The negative training set for a color contains all positive images for the other colors. Our approach delivers an excellent performance. In all cases, the correct model is returned: unary, no active geometric property, and the correct color as a specific appearance (figure <ref type="figure" target="#fig_4">5a</ref>).</p><p>Stripes are learnt from 74 images collected from Google-images using 'striped', 'stripe', 'stripes' as queries. 20% of them don't contain stripes. The positive training set for dots contains 35 images, 29% of them without dots, collected from textile vendors websites and Google-images (keywords 'dots', 'dot', 'polka dots'). For both attributes, the 56 images for colors act as negative training set. As shown in figure <ref type="figure" target="#fig_4">5</ref>, the learnt models capture well the nature of these attributes. Both stripes and dots are learnt as binary and with general appearance, while they differ substantially in their geometric properties. Stripes are learnt as elongated, rather straight pairs of segments, with largely the same properties for the two segments in a pair. Their layout is meaningful as well: adjacent, nearly parallel, and with similar area. In contrast, dots are learnt as small, unelongated, rather curved segments, embedded within a much larger segment. This can be seen in the distribution of the area of the first segment, the dot, relative to the area of the second segment, the 'background' on which dots lie. The background segments have a very curved, zigzagging outline, because they circumvent several dots. In contrast to stripes, the two segments that form this dotted pattern are not symmetric in their properties. This characterisic is modeled well by our approach, confirming its flexibility. We also train a model from the first 22 Google-images for the query 'checkerboard', 68% of which show a black/white checkerboard. The learnt model is binary, with one segment for a black square and the other for an adjacent white square, demonstrating the learning algorithm correctly infers both models with specific and generic appearance, adapting to the training data.</p><p>Recognition. Once a model is learnt, it can be used to recognize whether a novel image contains the attribute, by computing the likelihood <ref type="bibr" target="#b6">(7)</ref>. Moreover, the area covered by the attribute is localized by the segments with f = 1 (figure <ref type="figure" target="#fig_5">6</ref>). We report results for red, yellow, stripes, and dots. All test images are downloaded from Yahoo-images, Google-images, and Flickr. There are 45 (red), 39 (yellow), 106 (stripes), 50 (dots) positive test images. In general, the object carrying the attribute stands against a background, and often there are other objects in the image, making the localization task non-trivial. Moreover, the images exhibit extreme variability: there are paintings as well as photographs, stripes appear in any orientation, scale, and appearance, and they are often are deformed dots. We give a few example test images and the corresponding localizations produced by the learned models. Segments are colored according to their foreground likelihood, using matlab's jet colormap (from dark blue to green to yellow to red to dark red). Segments deemed not to belong to the attribute are not shown (black). In the case of dots, notice how the pattern is formed by the dots themselves and by the uniform area on which they lie. The ROC plots shows the image classification performance for each attribute. The two lower curves in the stripes plot correspond to a model without layout, and without either layout nor any geometry respectively. Both curves are substantially lower, confirming the usefulness of the layout and shape components of the model.</p><p>(human body poses, animals, etc.). The same goes for dots, which can vary in thickness, spacing, and so on. Each positive set is coupled with a negative one, in which the attribute doesn't appear, composed of 50 images from the Caltech-101 'Things' set <ref type="bibr">[12]</ref>. Because these negative images are rich in colors, textures and structure, they pose a considerable challenge for the classification task.</p><p>As can be seen in figure <ref type="figure" target="#fig_5">6</ref>, our method achieves accurate localizations of the region covered by the attribute. The behavior on stripe patterns composed of more than two appearances is particularly interesting (the trousers in the rightmost example). The model explains them as disjoint groups of binary stripes, with the two appearances which cover the largest image area. In terms of recognizing whether an image contains the attribute, the method performs very well for red and yellow, with ROC equal-error rates above 90%. Performance is convincing also for stripes and dots, especially since these attributes have generic appearance, and hence must be recognized based only on geometry and layout. In contrast, colors enjoy a very distinctive, specific appearance.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Examples of different kinds of attributes. On the left we show two simple attributes, whose characteristic properties are captured by individual image segments (appearance for red, shape for round). On the right we show more complex attributes, whose basic element is a pair of segments.</figDesc><graphic coords="2,323.03,153.28,68.63,57.19" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Image segments as visual features. a) An image with a few segments overlaid, including two pairs of adjacent segments on a striped region. b) Each row is an entry from the appearance codebook A (i.e. one appearance; only 4 out of 32 are shown). The three most frequent patch types for each appearance are displayed. Two segments from the stripes are assigned to the white andblack appearance respectively (arrows). c) Geometric properties of a segment: curvedness, which is the ratio between the number of contour points Cwith curvature above a threshold and the total perimeter P ; compactness; and elongation, which is the ratio between the minor and major moments of inertia. d) Relative geometric properties of a pair of segments: relative area and relative orientation. Notice how these measures are not symmetric (e.g. relative area is the area of the first segment wrt to the second).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Advantages of discriminative training. The task is to learn the attribute 'red'. Although the most frequent color in the positive training images is white, white is also common across the negative set.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: a) color models learnt for red, green, blue, and yellow. For each, the three most frequent patch types are displayed. Notice how each model covers different shades of a color. b+c) geometric properties of the learned models for stripes (b) and dots (c). Both models are binary, have general appearance, i.e. α = (A, A), and adjacent segments, i.e. δ = 1. The figure shows the geometric distributions for the activated geometric properties. Lower elongation values indicate more elongated segments. A blank slot means the property is not active for that attribute. See main text for discussion.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Recognition results. Top row: red (left) and yellow (right). Middle rows: stripes. Bottom row:</figDesc><graphic coords="8,121.20,68.46,364.32,198.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>: a) Graphical model for unary attributes. D is the number of images in the dataset, Si is the number of segments in image i, and G is the total number of geometric properties considered (both active and inactive). b) Graphical model for binary attributes. c is a pair of segments. Φ1,2 are the geometric distributions for each segment a pair. Ψ are relative geometric distributions (i.e. measure properties between two segments in a pair, such as relative orientation), and there are R of them in total (active and inactive). δ is the adjacency model parameter. It tells whether only adjacent pairs of segments are considered (so p(c|δ = 1) is one only iff c is a pair of adjacent segments).</figDesc><table /></figure>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"> *   <p>This research was supported by the EU project CLASS.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Histograms of Oriented Gradients for Human Detection</title>
		<author>
			<persName><forename type="first">N</forename><surname>Dalal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Triggs</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CVPR</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Efficient Graph-Based Image Segmentation</title>
		<author>
			<persName><forename type="first">P</forename><surname>Felzenszwalb</surname></persName>
		</author>
		<author>
			<persName><surname>Huttenlocher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IJCV</title>
		<imprint>
			<biblScope unit="issue">50</biblScope>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Object Class Recognition by Unsupervised Scale-Invariant Learning</title>
		<author>
			<persName><forename type="first">R</forename><surname>Fergus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Perona</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CVPR</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Capturing image structure with probabilistic index maps</title>
		<author>
			<persName><forename type="first">N</forename><surname>Jojic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Caspi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CVPR</title>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Lazebnik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Ponce</surname></persName>
		</author>
		<title level="m">A Sparse Texture Representation Using Local Affine Regions, PAMI</title>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="volume">8</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">The Promise and Perils of Near-Regular Texture, IJCV</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Tsin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">J</forename><surname>Van De Weijer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Verbeek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Learning Color Names from Real-World Images</title>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
	<note>CVPR</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Texture classification: Are filter banks necessary?</title>
		<author>
			<persName><forename type="first">M</forename><surname>Varma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zisserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPR</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Winn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Criminisi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Minka</surname></persName>
		</author>
		<title level="m">Object Categorization by Learned Universal Visual Dictionary, ICCV</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">LOCUS: Learning Object Classes with Unsupervised Segmentation</title>
		<author>
			<persName><forename type="first">J</forename><surname>Winn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Jojic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ICCV</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Image Region Entropy: A Measure of &quot;Visualness&quot; of Web Images Associated with One Concept</title>
		<author>
			<persName><forename type="first">K</forename><surname>Yanai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Barnard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005">2005</date>
			<publisher>ACM Multimedia</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
