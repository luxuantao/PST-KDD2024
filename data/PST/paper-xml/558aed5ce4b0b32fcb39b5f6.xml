<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">High-performance Routing at the Nanometer Scale</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Jarrod</forename><forename type="middle">A</forename><surname>Roy</surname></persName>
							<email>royj@eecs.umich.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of EECS</orgName>
								<orgName type="institution">The University of Michigan</orgName>
								<address>
									<addrLine>2260 Hayward Ave</addrLine>
									<postCode>48109-2121</postCode>
									<settlement>Ann Arbor</settlement>
									<region>MI</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Igor</forename><forename type="middle">L</forename><surname>Markov</surname></persName>
							<email>imarkov@eecs.umich.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of EECS</orgName>
								<orgName type="institution">The University of Michigan</orgName>
								<address>
									<addrLine>2260 Hayward Ave</addrLine>
									<postCode>48109-2121</postCode>
									<settlement>Ann Arbor</settlement>
									<region>MI</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">High-performance Routing at the Nanometer Scale</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-01-01T13:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this work we describe significant improvements to core routing technologies and outperform the best results from the ISPD '07 Global Routing Contest and ICCAD 2007 in terms of route completion and total wirelength.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Despite being one of the first areas of EDA to be automated in the 1960s, VLSI routing remains an area of active research and development as evidenced by a growing body of literature <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref>, recent collaboration between Cadence and IBM on routing technology <ref type="bibr" target="#b26">[27]</ref>, as well as the ISPD '07 Global Routing Contest organized by IBM Austin Research Laboratory <ref type="bibr" target="#b17">[18]</ref>. Current efforts in routing are motivated by challenges present at the nanometer scale including: (i) very large wiring databases that require lean data structures and extremely efficient algorithms, (ii) sophisticated design rules that must be abstracted away during initial routing passes, (iii) relatively unreliable vias whose resistance may vary by up to 30 times <ref type="bibr" target="#b36">[37]</ref>, which requires via doubling <ref type="bibr" target="#b22">[23]</ref>, <ref type="bibr" target="#b24">[25]</ref> and motivates additional effort to minimize via counts, (iv) signal integrity constraints and the dramatic impact of lateral capacitance on interconnect delay, which lead to wire density constraints, and (v) considerations of chemical mechanical polishing (CMP) that also lead to density constraints <ref type="bibr" target="#b7">[8]</ref>.</p><p>The ISPD '07 routing contest challenged the research community by distributing 16 very large routing benchmarks derived from recent chip layouts. Thanks to the wide participation in the contest and the public availability of the results, we observed an important trend which is illustrated in Figure <ref type="figure">1</ref> routers that achieve low wirelength often suffer high violation counts, and routers that minimize violations often produce high wirelengths. Therefore, a key focus of our work is on adequate pricing of routing resources to balance interconnect length and congestion in multi-million gate designs, in a way that also allows to trade-off other nanoscale objectives and constraints. Additionally, the effective handling of vias, multiple metal layers and other aspects of nanoscale routing pose a series of algorithmic, implementation, benchmarking and integration challenges.</p><p>In this work we develop a high-performance routing technique based on Discrete Lagrange Multipliers (DLM), while pointing out inaccuracies, limitations and pitfalls of the related technique known as negotiated-congestion routing <ref type="bibr" target="#b27">[28]</ref>. In Copyright (c) 2008 IEEE. Personal use of this material is permitted. However, permission to use this material for any other purposes must be obtained from the IEEE by sending an email to pubs-permissions@ieee.org.  <ref type="figure">1</ref>. Routed wirelength vs. violations for all competing routers on 2-d ISPD '07 benchmarks <ref type="bibr" target="#b17">[18]</ref>. Note that violation counts are shown on a logscale where 0 cannot be plotted, so completely legal solutions are depicted with exactly 1 violation. Relatively few solutions submitted to the contest were legal (35%), but they are generally a cut above the rest. Of the illegal solutions, as violations increase, routed wirelength decreases. To emphasize the trend, a linear least-squares fit of the data has been added for the illegal solutions.</p><p>particular, DLM offers a natural way to handle net weights and timing optimization in routing, and explains several empirical effects observed in negotiated-congestion techniques such as the last-gasp problem and the relative simplicity of 2-d formulations compared to multi-layer <ref type="bibr">(3-d)</ref> formulations. Proposed algorithms are implemented in FGR <ref type="foot" target="#foot_0">1</ref> , a high-performance global router for nanometer scale designs.</p><p>Our key contributions are:</p><p>• A routing technique based on Discrete Lagrange Multipliers (DLM) which provides a natural way to handle net weights and timing optimization in global routing. FGR handles two-and three-dimensional routing of ASICs with up to 870,000 nets.<ref type="foot" target="#foot_1">2</ref> • Extensions of A*-search to restructure net topologies so as to avoid congestion and circumvent obstacles. • Improved wirelength on the ISPD '07 Global Routing Contest suite <ref type="bibr" target="#b17">[18]</ref>. FGR produces smaller wirelengths than the winners of the contest on every benchmark, and is able to route without overflows every benchmark that the winners routed without overflows. In terms of wirelength, FGR outperforms BoxRouter This paper is organized as follows. Section II, reviews relevant background and previous work. Section III describes the architecture of the FGR router, the mathematical basis for its key algorithms, and important insights into the integration of major components. We benchmark FGR against state of the art in Section IV and conclude in Section V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. BACKGROUND AND PREVIOUS WORK</head><p>Routing plays a key role in VLSI physical design as it determines the specific shape and layout of interconnect, impacting performance, power and manufacturability. Routing is traditionally divided into the two steps of global and detail routing.</p><p>Global and Detail Routing. During global routing, complex design rules are abstracted away and a design is divided into a regular grid (see Figure <ref type="figure" target="#fig_1">2</ref>). Routes are created for each net that connect adjacent grid cells. Capacities are assigned to pairs of adjacent grid cells to model limited routing resources between the cells. Since different metal layers may use distinct wire pitches, routing capacities at each layer may differ to reflect this. A global routing solution is legal if all nets are connected and all capacity constraints are satisfied.</p><p>Detail routing takes a global routing solution with a small number of capacity violations (overflows), or none at all, and assigns wires to routing tracks while enforcing spacing constraints and more sophisticated design rules. Starting with slightly illegal global routes can make detail routing considerably more difficult, therefore a global router must minimize violations and wirelength, seeking to avoid violations entirely when possible.</p><p>Traditional algorithms for detail routing often assume a specific, small number of metal layers and operate in isolated layout regions -channels or switch-boxes. However, overthe-cell routing with six or more metal layers made many such algorithms obsolete and lead to the adoption of similar graphtheoretical techniques in global and detail routing, perhaps with different layout, resource and delay models.</p><p>In our experience with Cadence WarpRoute, three quarters of total runtime is spent in detail routing, but the quality of global routes profoundly affects the runtime and success of detail routing. A recent proposal <ref type="bibr" target="#b31">[32]</ref> suggests invoking a fast global router during global and detail placement, so as to mitigate wiring congestion early. This application is particularly attractive for sub-130nm technology nodes where lateral capacitance of wires is a major contributor to interconnect delay. In this context, accurate timing analysis requires information about regions through which a given net passes as well as wire density in these regions <ref type="bibr" target="#b40">[41]</ref>.</p><p>Maze Routing connects pairs of terminals on the routing grid using standard search techniques such as BFS and Dijkstra's algorithm <ref type="bibr" target="#b11">[12]</ref>. More than 50% of nets in modern designs connect only two pins. BFS can find the shortest path between a source location and a target location, if one exists, but cannot handle routing segments with non-trivial weights. Dijkstra's algorithm can handle non-negative costs of routing segments, but is at least several times slower than BFS. A*search is a minor modification to Dijkstra's algorithm that significantly improves speed during 2-d and 3-d routing <ref type="bibr" target="#b15">[16]</ref>. In A*-search, a lower bound of the distance to the target is added to node priority in Dijkstra's algorithm. Straight-line distance is commonly used as a lower bound.</p><p>Pattern Routing <ref type="bibr" target="#b20">[21]</ref> is a technique that severely restricts the number of ways in which a net can be routed to simplify the routing process. For example, L-shape routing seeks to implement each two-pin net with a single bend. This technique is surprisingly useful in ASIC routing and justified by via minimization. Empirical studies <ref type="bibr" target="#b42">[43]</ref> show that in a fullyrouted design a majority of all 2-pin nets take on L-shapes. In global routing, where minor detours are abstracted away, L-shapes are even more prevalent. Two-bend routes are often called Z-shapes, but generic pattern-based routing can consider any finite number of routing topologies for each net, and selects one of them. It is particularly amenable to Integer Linear Programming formulations <ref type="bibr" target="#b5">[6]</ref>, as described later in the section.</p><p>Multi-pin nets. Most global routing algorithms decompose nets with three or more pins into two-pin subnets at the beginning of global routing as this eases maze routing. This decomposition has been traditionally done using Minimal Spanning Tree (MST) algorithms, but using fast and extremely accurate Rectilinear Steiner Minimal Tree (RSMT) construction algorithms has become increasingly popular in the literature <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref>. Four decompositions of a 5-pin net by Steiner trees and MSTs are shown in Figure <ref type="figure" target="#fig_2">3</ref>. The RSMT tool FLUTE <ref type="bibr" target="#b8">[9]</ref> is used by BoxRouter 1.0 [6], BoxRouter 2.0 <ref type="bibr" target="#b6">[7]</ref> and FastRoute <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref>. FLUTE uses look-up tables for nets with nine or fewer pins and quickly builds optimal trees for such nets <ref type="bibr" target="#b8">[9]</ref>. For larger nets, a divide-and-conquer method is employed <ref type="bibr" target="#b8">[9]</ref>. FastSteiner <ref type="bibr" target="#b18">[19]</ref> is another RSMT algorithm that is more scalable than most RSMT algorithms. FastSteiner does not guarantee optimality, but frequently produces solutions with smaller total wirelength than FLUTE for nets with more than nine pins. In Section IV-C we compare MST with sharing to a combination of FLUTE and FastSteiner, and find that Steiner constructors lead to smaller routed length but greater via counts.</p><p>Rip-up-and-re-route (RRR) takes an initial, usually illegal, routing solution and iterates greedy one-net-at-a-time routing passes for nets that compete for routing resources, but may change the ordering each time in hope to better reconcile these nets. In each iteration, nets that pass through congested regions are "ripped up" (all resources for the net are removed from the routing grid) and are rerouted with a maze router to use lesser congested regions. Major differences between various implementations <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b27">[28]</ref>, <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref> include which nets are ripped up and rerouted at each iteration, the order in which to rip up nets and reroute them, if nets are allowed to be rerouted through areas that are already congested, and the costs associated with routing through a particular routing edge given its current congestion.</p><p>Congestion Amplification <ref type="bibr" target="#b14">[15]</ref> was recently introduced as an improvement to pricing of routing resources during RRR. Many routers that employ RRR do not penalize nets for going through uncongested regions, and then drastically increase cost once a routing edge is full. The authors of <ref type="bibr" target="#b14">[15]</ref> propose to use a more gradual linear cost function for edges before they become full in order to spread wires from areas that are likely to become congested. In addition, when congestion estimates are calculated after each iteration of RRR, regions with high congestion have their estimates artificially increased (amplified) and regions with low congestion have their estimates decreased. This provides a greater incentive for maze routers to avoid highly congested regions, often at the cost of increased wirelength.</p><p>Negotiated-congestion Routing (NCR) <ref type="bibr" target="#b27">[28]</ref> was introduced in the mid-1990s for global routing in FPGAs and is used in VPR (the dominant place-and-route tool for FPGAs) <ref type="bibr" target="#b2">[3]</ref>, but has not seen much use in the ASIC literature. NCR builds upon RRR by gradually making routing edges that are consistently congested more expensive, encouraging the maze router to choose alternative routes when they are available. The cost c e of routing edge e c e = (b e + h e ) • p e <ref type="bibr" target="#b0">(1)</ref> is a function of the base cost (b e ), added cost reflecting congestion history (h e ), and penalty for current congestion (p e ) <ref type="bibr" target="#b27">[28]</ref>. NCR seeks to minimize e c e .</p><p>To begin negotiated-congestion routing, each net is routed using the smallest possible wirelength regardless of edge capacities. Next, rip-up-and-re-route proceeds. At the beginning of a RRR iteration, the historical cost h e of all over-capacity routing edges is increased:</p><formula xml:id="formula_0">h k+1 e = h k e + h inc if e is overfull h k e otherwise (<label>2</label></formula><formula xml:id="formula_1">)</formula><p>where h inc is a constant. The choice of h inc affects convergence time and solution quality: higher values lead to faster convergence but higher routed wirelength. After cost adjustment, each net of the design is individually ripped up and rerouted by a maze router. The authors suggest that only nets passing through congested regions need to be rerouted and this approach is used in FGR. The ordering of nets during rip-up-and-re-route is the same for each iteration, but can be chosen arbitrarily, according to the authors of <ref type="bibr" target="#b27">[28]</ref>, because the gradual cost increase in congested areas removes ties that require sophisticated net ordering techniques in traditional RRR implementations. Reported implementations of NCR do not handle multilayer routing and via minimization -key aspects of nanoscale ASIC layout. Additionally, NCR has not been validated in the literature at the scale of large ASIC netlists.</p><p>Multi-level routing techniques work similarly to those in partitioning <ref type="bibr" target="#b19">[20]</ref> and placement <ref type="bibr" target="#b4">[5]</ref>. The original routing problem is effectively made simpler through a series of coarsening stages where routing grid cells are combined and many nets become subsumed within a single cell. This adds a hierarchy to the routing formulation. At the top of the hierarchy is the coarsest form of the routing problem which is small enough to be solved with sophisticated techniques that may not scale to large routing instances such as multi-commodity flow based techniques <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b15">[16]</ref>, described below. Essential to the coarsening stage is the proper aggregation of routing resources so that routing solutions at higher levels closely resemble valid routing solutions at lower levels.</p><p>After the coarsest level of the hierarchy has been routed, iterative refinement of the current routing solution begins. The problem is un-coarsened by one level and the current solution is adapted to the finer routing grid. This stage is nontrivial as nets can gain additional pins as the routing grid is refined and new nets that were previously subsumed by routing cells will become visible and need to be routed from scratch. This refinement process iterates until the finest level of the hierarchy, the original routing problem, has been successfully routed. Multilevel routers in the literature generally have smaller runtimes than flat techniques and show higher completion rates <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Combinatorial optimization techniques.</head><p>Other sophisticated techniques for routing have been proposed, such as the use of multi-commodity flows (MCF) <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b15">[16]</ref> and integer linear programming (ILP) <ref type="bibr" target="#b5">[6]</ref>. Both of these techniques attempt to route nets simultaneously in order to avoid the problems associated with net ordering.</p><p>There are a variety of ILP formulations for routing. Many require that multi-pin nets be divided into a small number of two-pin topologies. For each two-pin net, one sets up several constraints to ensure that the pins are connected. Constraints are also added so that the number of nets passing through each routing segment does not exceed the capacity. Solving this formulation for all nets simultaneously will optimally solve the given routing problem if possible, but has its drawbacks including difficulty expressing non-linear delay models.</p><p>Multi-commodity flow (MCF) techniques take a different approach to solve the ILP formulation by relaxing it into a linear programming (LP) formulation. An approximation algorithm which successively adjusts routing edge weights and builds new weighted Steiner trees per net at each iteration is used to solve the LP. ILP-based BoxRouter 1.0 has been compared to a recent MCF-based router <ref type="bibr" target="#b5">[6]</ref> and found to be superior in speed and solution quality. Additionally, MCF techniques offer less flexibility in terms of objective functions and constraints than the RRR and NCR frameworks.</p><p>FastRoute <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref> uses a simplified, more greedy form of RRR and finishes orders of magnitude faster than other routers. However, it was able to legally route only 6 of 16 benchmarks at the ISPD '07 contest <ref type="bibr" target="#b17">[18]</ref>, while other routers completed up to 12 benchmarks without violations. Additionally, on the easier ISPD '98 benchmarks, it routes fewer benchmarks than FGR (see Table <ref type="table" target="#tab_3">III</ref>).</p><p>FastRoute 1.0 <ref type="bibr" target="#b31">[32]</ref> first uses FLUTE to decompose nets and estimate congestion in the design, then attempts to restructure Steiner trees to avoid congestion. FastRoute 2.0 <ref type="bibr" target="#b32">[33]</ref> features the following modification of RRR. When a single subnet is ripped up, the net to which the subnet belongs will be separated into two connected components. It becomes the maze router's job to connect the two components of the net in the least costly way. While this optimization allows the router to move Steiner points away from congested regions, it invalidates the point-to-point lower bound on which A*search relies. Hence, the slower Dijkstra's algorithm must be used instead.</p><p>BoxRouter 1.0 <ref type="bibr" target="#b5">[6]</ref> avoids fine-grain net ordering in congested regions through the use ILP formulations. BoxRouter 1.0 decomposes nets using Steiner trees produced with FLUTE but never re-examines their decomposition. Next it performs a pass of pattern routing that identifies the most congested rectangular region, where it formulates an ILP to route as many nets using L-shapes as possible. Remaining nets are routed by the maze router, using as few resources outside the region as possible. Next, the region is expanded, and an incremental ILP formulation is used. This cycle repeats until the entire layout is covered by the expanding region.</p><p>Multilevel Advanced Routing System (MARS) <ref type="bibr" target="#b10">[11]</ref> is a multi-level router based on the techniques first presented in <ref type="bibr" target="#b9">[10]</ref> with several important enhancements. The first is that MARS performs accurate resource reservation during the coarsening phase of multi-level routing. This takes into account those nets which are subsumed into the coarsened routing grid and removes resources for them. This results in more accurate resource counts at higher levels of the routing hierarchy which better represent the original routing problem. The second enhancement is that MARS divides multi-pin nets using congestion-driven Steiner trees. At each level of the routing hierarchy, each net is examined and new Steiner trees are built to divide multi-pin nets. First MSTs are built for each net using the routing grid and not purely based on HPWL. Next, the edges of the MST for a particular net are sorted based on length and maze search is performed to join the edge to any other part of the existing tree. The new attachment points become Steiner points, and the Steiner tree for the net is formed from all of the paths found during maze search. Lastly, MARS uses historical costs based on congestion, calculated differently than in NCR, to price routing edges during maze routing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. HIGH-PERFORMANCE GLOBAL ROUTING</head><p>In this section we describe the architecture of FGR, the mathematical basis for its key algorithms, and important implementation insights.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Basic Algorithmic Framework</head><p>Routing algorithms must carefully balance wirelength minimization and congestion. Some detours may be necessary to avoid routing violations and overcapacity GCells, but excessive detouring leads to overconsumption of routing resources, aggravating congestion. In particular, the results of the ISPD '07 routing contest <ref type="bibr" target="#b17">[18]</ref> show that some routers are good at finding violation-free solutions, some are good at minimizing wirelength, but few are good at both. This trend is illustrated in Figure <ref type="figure">1</ref> which shows routed wirelength vs. violation count for 2-d solutions submitted to the contest. A likely source of this inflexibility is the common use of uniform, predetermined rules in all regions of the chip as in FastRoute <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref> and the Chi dispersion router <ref type="bibr" target="#b14">[15]</ref>.</p><p>In continuous optimization, dynamic pricing of constraint satisfaction can be modeled by Lagrange multipliers -a mathematical method for optimizing a multivariate function subject to a number of constraints <ref type="bibr" target="#b21">[22]</ref>:</p><formula xml:id="formula_2">min x∈X W (x) subject to C e (x) = 0, 1 ≤ e ≤ n<label>(3)</label></formula><p>The constrained optimization is reduced to the unconstrained optimization of the Lagrangian function</p><formula xml:id="formula_3">F F (x, λ) = W (x) + n e=1 λ e C e (x)<label>(4)</label></formula><p>where λ = (λ 1 , . . . , λ n ) are positive real-valued Lagrange multipliers. In the case of routing, C e (x) represents the overflow penalty of routing edge e. W (x) represents the total wirelength of routing solution x and is usually defined as a sum over nets or routing edges</p><formula xml:id="formula_4">W (x) = m i=1 R i (x) = n e=1 B e (x) = n e=1 net i uses e b e<label>(5)</label></formula><p>where R i (x) is the number of segments used by net i and B e (x) is the number of nets passing through edge e. Thus Equation 4 can be rewritten</p><formula xml:id="formula_5">F (x, λ) = n e=1 B e (x) + λ e C e (x)<label>(6)</label></formula><p>Here both original unknowns x and the Lagrange multipliers {λ e } are considered variables subject to optimization. For large, sparse, convex problems, iterative techniques are used, such as steepest descent, Newton's method, etc. In particular, Lagrange multipliers are updated additively as follows</p><formula xml:id="formula_6">λ k+1 = λ k + αC(x k ) (7)</formula><p>where α &gt; 0 is a line-search parameter. Note the similarity in the update of the Lagrange multipliers and how h e is updated in Equation <ref type="formula" target="#formula_0">2</ref>. While routing instances are large, sparse problems, they are discrete and non-convex. This calls for a different iterative optimization procedure, such as greedy search, hill-climbing or rip-up-and-re-route. However, since Lagrange multipliers remain continuous, the same update rule can be adopted.</p><p>Interpreting Equation <ref type="formula" target="#formula_5">6</ref>for a single edge e using the notation of NCR, c e is derived as</p><formula xml:id="formula_7">c e = b e + h e • p e<label>(8)</label></formula><p>which is different than Equation 1 <ref type="bibr" target="#b27">[28]</ref>, but also is more intuitive since it preserves the base cost. Therefore FGR uses this Discrete Lagrange Multiplier (DLM) formulation instead of NCR which was used in FGR's ISPD '07 contest submission.</p><p>To compute p e , FGR uses a new penalty function introduced in Section III-B below. Furthermore, the justification of dynamic cost updates through DLMs explains the results shown in Sections III-E, III-F and IV. While Lagrangian relaxation has been suggested for global routing before, all uses we are aware of are either (1) specific to timing-driven routing and maintain net-centric Lagrange multipliers <ref type="bibr" target="#b23">[24]</ref>, <ref type="bibr" target="#b29">[30]</ref> or (2) focus on a single net at a time <ref type="bibr" target="#b30">[31]</ref>. These algorithms use conventional history-based rip-up and re-route for the router's main loop. <ref type="foot" target="#foot_3">3</ref>In addition to being a rigorous mathematical technique, the use of Lagrange multipliers often admits application-specific interpretation. For example, it is used in macro-economics to mathematically describe market pricing -in a market economy, adequate resource pricing encourages consumers to look for competitive alternatives, leaving the most expensive resources to the consumers that gain most. A very similar interpretation holds in the case of routing, and the "fairness" of this pricing system is confirmed by good convergence properties in practice, as illustrated in Figure <ref type="figure" target="#fig_8">8</ref>.</p><p>In the initial routing formulation (Equation <ref type="formula" target="#formula_2">3</ref>) all nets are treated equally when optimizing total wirelength, but in many cases certain nets are more important than others for optimization, as in timing-driven routing. Each net is assigned a weight, and the goal is to optimize total weighted wirelength. Weighted wirelength is written as</p><formula xml:id="formula_8">W (x) = m i=1 w i R i (x) = n e=1 B e (x)<label>(9)</label></formula><p>where w i is the weight of net i and B e (x) is the total weight of nets passing through routing edge e B e (x) =</p><formula xml:id="formula_9">net i uses e w i • b e<label>(10)</label></formula><p>By replacing B e in Equation <ref type="formula" target="#formula_5">6</ref>with B e , the Lagrange relaxation becomes</p><formula xml:id="formula_10">F (x, λ) = n e=1 net i uses e w i • b e + λ e C e (x)<label>(11)</label></formula><p>As a result, the cost c e of edge e during maze routing is different for different nets that may be routed through it and must be rewritten as c e (i)</p><formula xml:id="formula_11">c e (i) = w i • b e + h e • p e<label>(12)</label></formula><p>Note that the original NCR formulation does not separate b e and makes it difficult to account for net weights.</p><p>To gauge the effectiveness of net weighting in DLM, we choose a random subset of 10% of the nets of the ISPD '07 benchmark newblue2 and increase their weight from the default of 1 to 2 and route from scratch. Distributions of detours on the nets are shown in Figure <ref type="figure">4</ref>. Detouring on the nets with higher weight is reduced as is the overall detouring on the design. Runtime and total wirelength are affected negligibly. Thus using net weights is an effective method for controlling detouring and on selected nets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Congestion Penalty</head><p>Let r e and u e represent the resources and current usage of a routing edge e and define the relative overflow ω e = u e /r e . The congestion penalty term p e for edge e is computed as a function of ω e .</p><formula xml:id="formula_12">p e = exp k(ω e − 1) if ω e &gt; 1 ω e otherwise (<label>13</label></formula><formula xml:id="formula_13">)</formula><p>The exponential nature of our cost function for overfull routing edges serves to amplify congestion and gives the maze router incentive to avoid overfull edges when re-routing nets (see Figure <ref type="figure" target="#fig_4">5</ref>, where k = ln 5). We have studied 0 &lt; k ≤ ln 10 and found that higher values of k reduce runtime, but increase detouring and routed length. FGR uses k = ln 5 by default. Instead of using uniform weights of 1 for routing edges to create an initial routing solution, which is common in NCR, FGR uses b e + p e as the weight for edges to create an initial solution, where p e is calculated on the fly per routing edge according to Equation <ref type="formula" target="#formula_12">13</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Without net weighting</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>All nets</head><p>Only weighted nets Fig. <ref type="figure">4</ref>.</p><p>Cumulative distributions of detouring without (above) and with (below) net weighting on the 2-d newblue2 benchmark. Net detours are measured as a ratio of routed net length to Steiner wirelength as given by FLUTE <ref type="bibr" target="#b8">[9]</ref>. When weights are applied to a subset of the nets, detouring on those nets is reduced significantly without increasing detouring of other nets. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Via Pricing and Optimization</head><p>The closest previous works to ours -those on NCR -do not consider via minimization because they focus on FPGA routing. Nonetheless, given that the resistivity of tungsten (the material of vias) is much higher than that of copper and aluminum, vias are critical in timing-driven routing. An unnecessarily large number of vias can hamper routability because each via obstructs a section of its track. Furthermore, the high variability in via parasitics <ref type="bibr" target="#b36">[37]</ref> and the common practice of post-route via doubling to improve yield <ref type="bibr" target="#b22">[23]</ref>, <ref type="bibr" target="#b24">[25]</ref> suggest that via minimization is a key issue in routing at the nanometer scale. Table I illustrates just how significant vias are in the ISPD '07 contest benchmarks. Vias represent from 26% to 49% of the total cost of FGR's solutions to the 2-d benchmarks. Comparing two-layer routing with 6-layer routing, via counts approximately triple and account for 50% to 74% of total cost.</p><p>To model the cost of vias, FGR treats them as segments in the routing graph. These segments connect adjacent routing layers as shown in Figure <ref type="figure" target="#fig_1">2</ref> and have unlimited capacity. Via routing segments have a different base cost, usually higher than that for regular segments. This flexibility allows FGR to price vias in specific applications. For example, in the ISPD '07 contest one via is equivalent to three routing grid segments, so the cost of vias in FGR is set to 3b e . Assigning via segments non-zero costs in the routing grid allows A*-search to naturally optimize via counts when finding shortest paths. However, to use A*-search, an accurate lower bound for path cost is also needed. One could ignore vias in the lower bound calculation, but FGR uses the layer difference of the source and target which is more accurate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Interactions Between Single-and Multi-Net Routing</head><p>FGR initially decomposes nets using an RSMT or RMST topology. However, given that congestion-driven Steiner trees are not easy to construct and precise congestion in every GCell is not known beforehand, it is important to modify net topologies during multi-net routing.</p><p>Figure <ref type="figure" target="#fig_5">6</ref> compares the net decomposition and restructuring techniques used by FGR to those in prior work. During DLM, the most congested subnets are ripped up and rerouted by A*-search. When ripping up a subnet with endpoints P 1 and P 2 , FastRoute 2.0 tries to reconnect the two components of the net, not necessarily using P 1 or P 2 , which requires a more sophisticated lower bound than Manhattan distance to use A*-search. When re-routing a subnet, FGR requires the replacement segments to pass between P 1 and P 2 , based on the following result.</p><p>Theorem 1: Consider shortest paths between two trees embedded into the routing grid. Let P 1 and P 2 be nodes arbitrarily selected in the trees T 1 and T 2 , respectively. If the costs of routing edges taken by tree segments are set to zero, then there is a one-to-one correspondence between (i) shortest paths between T 1 and T 2 and (ii) shortest paths between P 1 and P 2 .</p><p>Proof: Assume ∃ a shortest path A → B joining T 1 and T 2 such that A ∈ T 1 and B ∈ T 2 . ∃ unique non-self-intersecting paths P 1 → A and B → P 2 consisting of edges contained in T 1 and T 2 , respectively. cost(P</p><formula xml:id="formula_14">1 → A) = cost(B → P 2 ) = 0. Thus cost(P 1 → A → B → P 2 ) = cost(A → B).</formula><p>For the sake of contradiction, assume P 1 → A → B → P 2 is not a shortest path; ∃<ref type="foot" target="#foot_4">4</ref> path P 1 P 2 with cost(P 1 P 2 ) &lt; cost(A → B). P 1 P 2 connects T 1 and T 2 , so cost(P 1 P 2 ) ≥ cost(A → B). Contradiction. Conversely, let P 1 → P 2 be a shortest path. Let C be the last vertex along P 1 → P 2 such that C ∈ T 1 and let D be the first vertex along P 1 → P 2 such that D ∈ T 2 . ∃ unique non-self-intersecting paths P 1 → C and D → P 2 consisting of edges contained in T 1 and T 2 , respectively. Temporary change of edge costs to 0 is easy to implement during A*-search because nets are routed individually and any cost adjustments can be reverted before considering other nets. However, in order to use A*-search, a correct lower bound must be supplied. FGR normally uses the 3-d Manhattan distance multiplied by the minimum cost of any routing segment. The naive solution -to ignore the 0-cost edges -may produce estimates that are greater than the true cost, which would cause A*-search to produce incorrect solutions. However, literally setting an edge's cost to zero forces the lower bound will to be zero. Therefore, in our implementation we set the cost of previously used edges to ε &gt; 0, a small value. We call this technique ε-sharing and illustrate it in Figure <ref type="figure" target="#fig_7">7</ref>, where FGR modifies the net topology to avoid congestion.</p><formula xml:id="formula_15">cost(P 1 → C) = cost(D → P 2 ) = 0 ⇒ cost(P 1 → P 2 ) = cost(C → D).</formula><p>While prior state-of-the-art routers (BoxRouter, FastRoute and MaizeRouter) consistently start by decomposing multipin nets with minimal Steiner trees, we believe that integration of ε-sharing into a powerful DLM framework facilitates additional opportunities. As illustrated in Figure <ref type="figure" target="#fig_2">3</ref>, Steiner trees tend to generate net decompositions with many flat subnets which offer no flexibility in routing. MSTs tend to have fewer edges but with more flexibility, which can be exploited by DLM to avoid congestion. Moreover, the gradual addition of sharing to MSTs during DLM-based topology restructuring can generate high-quality congestion-driven Steiner trees without the need to estimate congestion before routing. Starting with minimal Steiner trees seems to require heavier restructuring to achieve similar effects, and could not only slow down maze routing, but also make RRR or DLM less successful. Using RSMTs vs. RMSTs is covered in Section IV-C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Overcoming the "Last Gasp" Problem</head><p>Discrete Lagrange multipliers work well at the large scale because the statistical behavior of numerous discrete variables is not very different from the continuous case. However, when only several violations remain, the routing task becomes much more discrete. In our experiments with almost every benchmark we have observed unusual behavior where FGR spends many DLM iterations when its solution is nearly legal before it is able to terminate with a completely legal solution. Indeed, more than 75% of DLM's iterations for the adaptec2 benchmark <ref type="bibr" target="#b17">[18]</ref> take place when less than 0.01% of routing segments have overflow. We term this undesirable behavior the "last gasp" problem and illustrate it on the adaptec1 2-d benchmark in Figure <ref type="figure" target="#fig_8">8</ref>. To rectify this situation, we propose the following improvement. When the percentage of routing edges with overflow becomes small, restrict the maze router to using only edges that have available space and weigh routing edges only by their base cost b e . Thus if there is any way to route the net without causing overflow, it will be used to avoid further rip-up iterations. Otherwise, default DLM is used. In many cases this last phase of DLM reduces iterations without impacting total routed wirelength.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. 3-dimensional Routing</head><p>The difficulties experienced by DLM due to discreteness also suggest that traditional 2-d routing may be considerably easier than proper 3-d routing where smaller edge capacities are spread through multiple routing layers. In other words, aggregating edge capacities in one layer would encourage continuous-like resource pricing, making it easier to satisfy all constraints. This is consistent with what experimental observations discussed in Section IV-D.  Fig. <ref type="figure">9</ref>. Layer assignment in FGR.</p><p>FGR performs 3-d routing by first projecting the routing instance onto a 2-d grid and aggregating the capacities of edges that project onto each other. This grid contains a single layer of horizontal wires and a single layer of vertical wires connected by a layer of vias, such as the grid depicted at the right of Figure <ref type="figure" target="#fig_1">2</ref>. Capacities on higher layers may be smaller due to increased pitch, but for each routing grid edge FGR calculates the number of wires that are allowed to pass through it, which takes wire widths and pitches into account. FGR routes this 2d problem instance as normal until a legal solution is found or a runtime/iteration limit is reached. Next FGR performs layer assignment for each routing segment used in the 2-d solution.</p><p>Theorem 2: If the 2-d instance generated as a result of the aggregating process describe above has a legal solution and via counts are unconstrained, the original 3-d instance must have a legal solution. Proof: 3-d routes can be constructed by the algorithm in Figure <ref type="figure">9</ref>.</p><p>FGR's method will produce a 3-d solution that uses exactly the same number of routing segments as the 2-d solution, but differ in via counts. Unfortunately the difference in via counts is usually large and proportional to the number of layers in the 3-d instance. To counteract this phenomenon, FGR performs full 3-d cleanup which consists of a single round of RRR for every subnet to reduce vias. In this round of optimization, the cost of each routing segment is much simpler than in DLM: each routing segment is assigned a cost of 1 and vias are priced as in Section III-C. It is easy to lower-bound the cost of a path with these edge costs by the 3-d Manhattan distance, so it is particularly amenable to A*-search. Each subnet is ripped up and rerouted by the maze router individually, and edges with no spare capacity are not allowed. While Theorem 2 is not a surprising result, the fact that direct 3-d routing is less successful than 2-d routing with 3-d post-processing was unexpected and, in fact, undermined FGR's performance in the ISPD '07 routing contest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. EXPERIMENTAL RESULTS</head><p>We have implemented FGR in C++ without external libraries (compiled with GCC 3.4.5), but added optional interface to the Steiner-tree packages FLUTE <ref type="bibr" target="#b8">[9]</ref> and FastSteiner <ref type="bibr" target="#b18">[19]</ref> to compare them with MST decompositions. The core algorithms and data structures of FGR were implemented in one month. All runs were performed on 2.4 GHz Opteron workstations running Linux. FGR was compiled in 32-bit mode and was therefore limited to less than 4GB of RAM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Performance on ISPD '98 Benchmarks</head><p>Table II describes the ISPD '98 IBM benchmarks and compares FGR to BoxRouter 1.0 <ref type="bibr" target="#b5">[6]</ref> in terms of runtime. Table <ref type="table" target="#tab_3">III</ref> compares FGR to BoxRouter 1.0 and FastRoute 2.0 <ref type="bibr" target="#b32">[33]</ref> in terms of solution quality. Unlike all previous routers in the literature, FGR is able to route all of the IBM designs without overflow. Both BoxRouter 1.0 and FastRoute 2.0, which report the best results on this suite so far, produce solutions with overflow on 4 and 3 of the benchmarks, respectively. Overall, FGR produces solutions with 2.7% less wirelength than BoxRouter 1.0 and 3.6% less wirelength than FastRoute 2.0. In addition, FGR is faster than BoxRouter 1.0 on 7 of the 10 benchmarks and uses 35% less runtime to complete the entire suite. Unlike  the ISPD '07 contest benchmarks, the ISPD '98 benchmarks feature only a single metal layer, making via minimization unnecessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Performance on ISPD '07 Benchmarks</head><p>Table <ref type="table" target="#tab_5">IV</ref> shows statistics of the benchmarks used at the ISPD '07 Global Routing Contest <ref type="bibr" target="#b17">[18]</ref>. These benchmarks are considerably larger than the ISPD '98 benchmarks and include both two-and three-dimensional variants. These benchmarks also feature non-trivial routing obstacles, and, consequently, routing resources are not spread evenly throughout the layout as in the ISPD '98 suite. Table IV also shows runtimes and memory requirements for FGR on these benchmarks. In all cases FGR stays within the 32-bit memory space and finishes well under a given 24-hour timeout on all but the newblue1 and newblue3 benchmarks on which no router at the ISPD '07 contest was able to find a legal solution. 5  Next, we compare FGR to the routers that scored best at the ISPD '07 contest. Since an earlier version of FGR placed 1st in the 2-d category, we exclude it from comparison (however, the version we report improves upon FGR's results in the 5 FGR can be stopped much earlier, with only a slight increase in overflows.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Steiner Trees vs. MSTs</head><p>Traditionally net decomposition has been done using Minimal Spanning Tree (MST) algorithms, but fast and extremely accurate Rectilinear Steiner Minimal Tree (RSMT) construction algorithms have become increasingly popular in the literature <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref>. FGR can use any well-formed net decomposition, so we study how the choice of net decomposition affects FGR's overall results-we compare MST to a combination of FLUTE <ref type="bibr" target="#b8">[9]</ref> and FastSteiner <ref type="bibr" target="#b18">[19]</ref> that returns  with layer assignment, most likely because 3-d routing is more complex. On the easiest benchmarks, adaptec4 and newblue2, full 3-d routing takes at least 50% longer, but is able to decrease via counts significantly and in turn improve total cost by 2.0% and 2.1%, respectively. On the other hand, on the benchmarks where FGR with layer assignment cannot find a legal solution within 24 hours, newblue1 and newblue3, full 3d routing produces solutions with significantly more overflow given the same timeout.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. CONCLUSIONS</head><p>In this paper we have presented FGR, a high-performance global router for nanometer scale designs. FGR's implementation is very compact-core algorithms and data structures require only 1200 lines of C++ code, which is available for download from http://vlsicad.eecs.umich.edu/ BK/FGR/. FGR outperforms the best results from the ISPD '07 Global Routing Contest, as well as previous literature, in terms of route completion, runtime and total wirelength. In particular, FGR improves upon wirelengths produced by BoxRouter 1.0 and MaizeRouter in March 2007 by 10.6% and 9.1%, respectively. Comparing FGR 1.1 to most recent routers, FGR 1.1 outperforms Archer in wirelength by 10.1% and BoxRouter 2.0 by 4.9%. FGR is likely to boost research in physical design, while also leading to better commercial place-and-route tools <ref type="bibr" target="#b13">[14]</ref>.</p><p>The superficial similarity between negotiated-congestion routing and Lagrangian relaxation was known to the authors since 2001 and may have been observed by others, but we were unable to find any discussion in the literature. More importantly, by formulating Lagrange multipliers and explicitly deriving cost updates, our work demonstrates a discrepancy between the two approaches. The Lagrangian approach to large-scale routing explains the last-gasp problem and shows why multi-layer routing formulations are more difficult to solve directly than two-dimensional routing. While negotiatedcongestion routing does not specify how to handle net weights, we derive the necessary formulas for using net weights with Lagrange multipliers.</p><p>Another key challenge is to integrate accurate congestion modeling provided by FGR into global and detail placement. This could be used to mitigate congestion early and provide accurate information about length of individual wires, which is particularly important in timing-driven placement.</p><p>FGR's core algorithms are directly relevant to detail routing of ASICs and FPGAs, while its constraint-driven nature makes it amenable to the handling of complex design rules. To this end, a key challenge for future research is to develop a prototype of a detail routing tool based on negotiated-congestion routing. Such a prototype would be particularly useful to explore design rules and models expected at future technology nodes as well as manufacturability and yield optimization which are a focus of modern industrial tools.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Fig.1. Routed wirelength vs. violations for all competing routers on 2-d ISPD '07 benchmarks<ref type="bibr" target="#b17">[18]</ref>. Note that violation counts are shown on a logscale where 0 cannot be plotted, so completely legal solutions are depicted with exactly 1 violation. Relatively few solutions submitted to the contest were legal (35%), but they are generally a cut above the rest. Of the illegal solutions, as violations increase, routed wirelength decreases. To emphasize the trend, a linear least-squares fit of the data has been added for the illegal solutions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Pictorial representations of the global routing grid. The images on the left and in the middle show how the layout is abstracted into a regular grid of GCells. GCells are represented by vertices, with adjacent vertices connected by graph edges. Capacities on edges that join GCells can be defined as the number of routing tracks that cross GCell boundaries. The image at the right shows that horizontal and vertical connections on different layers with vias connecting them.</figDesc><graphic url="image-1.png" coords="2,48.96,53.10,255.10,54.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Decomposition of a 5-pin net by minimal Steiner tree (a), MST (b) and MSTs with sharing (c)&amp;(d). The choice of (c) or (d) depends on congestion. The minimal Steiner tree (a) contains 5 flat subnets and 1 L-shaped subnet, whereas the shared MST (d) has 2 flat subnets and 3 L-shaped subnets which gives it greater flexibility.</figDesc><graphic url="image-2.png" coords="3,61.08,53.13,226.70,90.15" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>nets (cumulative) Detoured net length (relative to min Steiner)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig.5. Cost of a routing edge as a function of relative overflow. Cost is linear while the edge is not overfilled, but grows exponentially once the edge is overfull.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. A comparison of the net decomposition techniques used by BoxRouter 1.0 [6], FastRoute 2.0 [33] and FGR. In Section IV-C, we compare the use of RMSTs and RSMT in FGR.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Assume for the sake of contradiction C → D is not a shortest path; ∃ path A B, A ∈ T 1 , B ∈ T 2 , with cost(A B) &lt; cost(C → D) = cost(P 1 → P 2 ). ∃ P 1 A and B P 2 such that cost(P 1 A) = cost(B P 2 ) = 0 ⇒ cost(P 1 A B P 2 ) = cost(A B) &lt; cost(P 1 → P 2 ). Contradiction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Re-routing a subnet and changing net topology in FGR. The shaded boxes represent obstacles. The tree in (a) passes through a congested segment in the middle which must be ripped up. The dashed arrows in (b) represent several possible re-routings that a restructuring algorithm may consider. The re-routings shown in (c) are two that FGR will consider during DLM. Paths considered by FGR must start and end along the endpoints of the segment that was removed. Both of these re-routings reuse routing segments from the net and create new Steiner points if chosen. The use of temporary zero-cost edges is required to preserve the efficiency of A*-search.</figDesc><graphic url="image-3.png" coords="7,317.04,53.11,240.90,53.21" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 8 .</head><label>8</label><figDesc>Fig.8. Violation count and wirelength on the 2-d ISPD '07 benchmark adaptec1 plotted as a function of (a) iteration number and (b) time. Violation counts are plotted on a log-scale and decrease, while wirelength is plotted on a linear scale and monotonically increases. Note that the majority of DLM iterations occur when 100 or fewer violations remain, but total wirelength noticeably increases during that phase.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE II STATISTICS</head><label>II</label><figDesc>OF THE ISPD '98 IBM BENCHMARK SUITE<ref type="bibr" target="#b16">[17]</ref>. RUNTIMES FOR BOXROUTER 1.0<ref type="bibr" target="#b5">[6]</ref> AND FGR 1.0 ARE GIVEN IN SECONDS. FGR IS FASTER THAN BOXROUTER ON 7 OF THE 10 BENCHMARKS AND USES 35% LESS RUNTIME TO SOLVE THE ENTIRE SUITE.</figDesc><table><row><cell>Bench-mark</cell><cell># nets</cell><cell>Grid</cell><cell cols="2">Router runtime (s) BoxRouter 1.0 FGR 1.0</cell></row><row><cell>ibm01</cell><cell>11507</cell><cell>64×64</cell><cell>6</cell><cell>10</cell></row><row><cell>ibm02</cell><cell>18429</cell><cell>80×64</cell><cell>25</cell><cell>13</cell></row><row><cell>ibm03</cell><cell>21621</cell><cell>80×64</cell><cell>13</cell><cell>5</cell></row><row><cell>ibm04</cell><cell>26163</cell><cell>96×64</cell><cell>18</cell><cell>29</cell></row><row><cell>ibm05</cell><cell>27777</cell><cell>128×64</cell><cell>37</cell><cell>6</cell></row><row><cell>ibm06</cell><cell>33354</cell><cell>128×64</cell><cell>25</cell><cell>18</cell></row><row><cell>ibm07</cell><cell>44394</cell><cell>192×64</cell><cell>39</cell><cell>20</cell></row><row><cell>ibm08</cell><cell>47944</cell><cell>192×64</cell><cell>68</cell><cell>18</cell></row><row><cell>ibm09</cell><cell>50393</cell><cell>256×64</cell><cell>50</cell><cell>20</cell></row><row><cell>ibm10</cell><cell>64227</cell><cell>256×64</cell><cell>73</cell><cell>92</cell></row><row><cell>Total</cell><cell></cell><cell></cell><cell>354</cell><cell>231</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>TABLE IV STATISTICS</head><label>IV</label><figDesc>OF THE ISPD '07 GLOBAL ROUTING CONTEST BENCHMARKS<ref type="bibr" target="#b17">[18]</ref>. FOR FGR 1.0 WE LIST RUNTIME (IN MINUTES), THE NUMBER OF ITERATIONS OF RIP-UP-AND-RE-ROUTE (WHICH ARE VERY SIMILAR FOR 2-D AND 3-D VARIANTS), AND MAXIMUM MEMORY USAGE, WHICH IS SIGNIFICANTLY GREATER FOR 3-D THAN FOR 2-D VARIANTS.</figDesc><table><row><cell>Bench-mark</cell><cell># nets</cell><cell>Grid</cell><cell cols="2">FGR 1.0 on 2-d variants time (m) rip-ups</cell><cell>FGR 1.0 on 3-d variants time (m) memory</cell></row><row><cell cols="3">adaptec1 219794 324×324</cell><cell>451</cell><cell>557</cell><cell>430</cell><cell>869 MB</cell></row><row><cell cols="3">adaptec2 260159 424×424</cell><cell>56</cell><cell>2930</cell><cell>64</cell><cell>960 MB</cell></row><row><cell cols="3">adaptec3 466295 774×779</cell><cell>179</cell><cell>284</cell><cell>243</cell><cell>2393 MB</cell></row><row><cell cols="3">adaptec4 515304 774×779</cell><cell>19</cell><cell>47</cell><cell>55</cell><cell>2377 MB</cell></row><row><cell cols="3">adaptec5 867441 465×468</cell><cell>713</cell><cell>790</cell><cell>740</cell><cell>2309 MB</cell></row><row><cell cols="3">newblue1 331663 399×399</cell><cell>1441</cell><cell>983</cell><cell>1442</cell><cell>1154 MB</cell></row><row><cell cols="3">newblue2 463213 557×463</cell><cell>4</cell><cell>20</cell><cell>10</cell><cell>1621 MB</cell></row><row><cell cols="3">newblue3 551667 973×1256</cell><cell>1555</cell><cell>23</cell><cell>1501</cell><cell>3676 MB</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7"><head>TABLE VI COMPARING</head><label>VI</label><figDesc>NET DECOMPOSITION BY MST VS. STEINER TREES ON THE ISPD '07 BENCHMARKS<ref type="bibr" target="#b17">[18]</ref>. TIMETAKEN  FOR DECOMPOSITION BY MST OR STEINER TREES IS LESS THAN 1 MINUTE ON ALL BENCHMARKS AND DOES NOT IMPACT RUNTIMES. WHILE USING STEINER TREE DECOMPOSITIONS RESULTS IN A REDUCTION IN ROUTED SEGMENT LENGTH OF 0.5%, IT INCREASES VIA COUNTS BY 1.8% AND THUS INCREASES THE TOTAL COST OF ROUTING SOLUTIONS BY 0.7%. DECOMPOSITION BY STEINER TREES INCREASES ROUTING TIME BY 22%.Steiner tree every time. FGR merges segments of decomposed nets, as described in Section III-D, and produces non-trivial Steiner trees even when given decompositions by MSTs. The results on the ISPD '07 benchmarks are shown in TableVI. Time taken for decomposition by MSTs or Steiner trees is less than 1 minute on all benchmarks and does not significantly impact runtimes. As expected, routed segment length is smaller when Steiner tree algorithms are used. On the other hand, using Steiner tree algorithms actually increases via counts by 1.8% and causes total cost to increase by 0.7%. All evidence we have seen suggests that MST decompositions leave more flexibility than minimum Steiner trees, allowing one to avoid some amount of detouring. Prior work has shown that optimal Steiner trees for a given set of points can vary widely, but specialized techniques can increase flexibility<ref type="bibr" target="#b3">[4]</ref>. However, FLUTE and FastSteiner do not currently optimize tree flexibility. In addition, Steiner points may inadvertently be placed in congested areas by the Steiner tree constructor, causing increased congestion and detouring. Congestion-driven Steiner trees could be helpful in this context, but apparently MSTs already provide a good solution and can also be biased to avoid congestion.D. Layer Assignment vs. Full 3-d RoutingSection III-F above describes that FGR performs 3-d routing by first flattening the routing instance onto a 2-d grid, routing the new 2-d problem instance, and then converting the 2d solution into a 3-d solution by assigning layers to routed segments, adding vias as necessary. FGR is also capable of solving 3-d problems directly by using full 3-d maze routing, and in TableVIIwe compare both methods. It is readily apparent that full 3-d routing takes far longer than 2-d routing</figDesc><table><row><cell></cell><cell cols="4">Decomposition by MST</cell><cell cols="4">Decomposition by Steiner trees</cell></row><row><cell cols="7">Benchmark Segment Vias Total Time Segment Vias</cell><cell>Total</cell><cell>Time</cell></row><row><cell></cell><cell cols="2">WL (e5) (e5)</cell><cell>cost</cell><cell cols="3">(m) WL (e5) (e5)</cell><cell>cost</cell><cell>(m)</cell></row><row><cell>adaptec1 2-d</cell><cell>35.88</cell><cell cols="3">6.19 54.44 451</cell><cell>35.78</cell><cell>6.24</cell><cell>54.49</cell><cell>403</cell></row><row><cell>adaptec1 3-d</cell><cell cols="4">36.37 17.36 88.45 430</cell><cell>36.26</cell><cell>18.04</cell><cell>90.37</cell><cell>395</cell></row><row><cell>adaptec2 2-d</cell><cell>33.21</cell><cell cols="2">6.36 52.30</cell><cell>56</cell><cell>33.10</cell><cell>6.43</cell><cell>52.38</cell><cell>170</cell></row><row><cell>adaptec2 3-d</cell><cell cols="3">33.74 18.72 89.89</cell><cell>64</cell><cell>33.62</cell><cell>19.37</cell><cell>91.72</cell><cell>168</cell></row><row><cell>adaptec3 2-d</cell><cell cols="4">96.09 11.60 130.89 179</cell><cell>95.55</cell><cell cols="2">11.67 130.57</cell><cell>222</cell></row><row><cell>adaptec3 3-d</cell><cell cols="4">97.02 34.21 199.66 243</cell><cell>96.42</cell><cell cols="2">35.49 202.90</cell><cell>281</cell></row><row><cell>adaptec4 2-d</cell><cell cols="4">90.02 11.66 125.00 19</cell><cell>89.37</cell><cell cols="2">11.72 124.53</cell><cell>18</cell></row><row><cell>adaptec4 3-d</cell><cell cols="4">91.28 30.56 182.96 55</cell><cell>90.59</cell><cell cols="2">31.59 185.35</cell><cell>58</cell></row><row><cell>adaptec5 2-d</cell><cell cols="5">102.79 16.45 152.13 713 102.56</cell><cell cols="2">16.63 152.45</cell><cell>771</cell></row><row><cell>adaptec5 3-d</cell><cell cols="5">103.89 52.03 259.98 740 103.62</cell><cell cols="2">53.78 264.97</cell><cell>796</cell></row><row><cell>newblue1 2-d</cell><cell>24.15</cell><cell cols="4">7.76 47.42 1441 24.00</cell><cell>7.74</cell><cell>47.22</cell><cell>1441</cell></row><row><cell>newblue1 3-d</cell><cell cols="5">24.15 23.37 94.26 1442 24.00</cell><cell>24.00</cell><cell>96.01</cell><cell>1442</cell></row><row><cell>newblue2 2-d</cell><cell>46.81</cell><cell cols="2">9.90 76.51</cell><cell>4</cell><cell>46.41</cell><cell>9.95</cell><cell>76.27</cell><cell>4</cell></row><row><cell>newblue2 3-d</cell><cell cols="4">47.91 28.08 132.16 10</cell><cell>47.51</cell><cell cols="2">29.08 134.75</cell><cell>10</cell></row><row><cell>newblue3 2-d</cell><cell cols="5">75.63 11.20 109.23 1555 75.24</cell><cell cols="3">11.15 108.71 1460</cell></row><row><cell>newblue3 3-d</cell><cell cols="5">75.63 32.69 173.71 1501 75.24</cell><cell cols="3">33.04 174.35 1462</cell></row><row><cell>Ratio</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="4">-0.52% +1.81% +0.74% +22.0%</cell></row><row><cell>the better</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8"><head>TABLE VII COMPARING</head><label>VII</label><figDesc>LAYER ASSIGNMENT WITH FULL 3-D ROUTING ON THE 3-D INSTANCES OF THE ISPD '07 BENCHMARKS [18]. TOTAL COST OF THE BETTER OF THE TWO SOLUTIONS (COMPARED FIRST BY OVERFLOW THEN BY TOTAL COST) FOR EACH BENCHMARK ARE HIGHLIGHTED IN BOLD.</figDesc><table><row><cell cols="6">Layer Assignment Bench-Total Segment Vias Total Time Total Segment Vias Total Time Full 3-d Routing mark ovfl WL (e5) (e5) cost (m) ovfl WL (e5) (e5) cost (m)</cell></row><row><cell></cell><cell>#1</cell><cell>0</cell><cell cols="2">36.37 17.36 88.45 430 1456</cell><cell>36.02 17.55 88.70 1453</cell></row><row><cell>adaptec</cell><cell>#2 #3 #4</cell><cell>0 0 0</cell><cell>33.74 18.71 89.89 97.02 34.21 199.66 243 64 91.28 30.56 182.96 55</cell><cell>2 2 0</cell><cell>33.36 19.06 90.54 1444 96.69 34.77 201.01 1487 91.39 29.32 179.36 83</cell></row><row><cell></cell><cell>#5</cell><cell>0</cell><cell cols="3">103.89 52.03 259.98 740 5512 102.78 52.27 259.61 1462</cell></row><row><cell>newblue</cell><cell cols="5">#1 #2 #3 39828 75.63 32.69 173.71 1501 51098 75.73 29.30 163.63 1827 514 24.15 23.37 94.26 1442 1012 24.21 22.33 91.19 1447 0 47.91 28.08 132.16 10 0 47.93 27.15 129.40 18</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0">"Fairly Good Router"</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1">This is almost an order of magnitude greater than what has been reported in the literature for most ASIC and FPGA routers. In the</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="32" xml:id="foot_2">-bit address space, FGR scales up to 1,000,000 nets, but can also be compiled to run in the 64-bit address space.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_3">The authors of<ref type="bibr" target="#b23">[24]</ref> briefly mention the similarity of history-based rip-up and re-route to Lagrangian relaxation, but make no modifications to the NCR formulation.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_4">Here, denotes paths assumed to exist for the sake of contradiction.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments. This work was partially supported by the National Science Foundation (NSF) and the Horace H. Rackham School of Graduate Studies at the University of Michigan.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">On Whitespace and Stability in Physical Synthesis</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">N</forename><surname>Adya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">L</forename><surname>Markov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">G</forename><surname>Villarrubia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Integration: the VLSI Journal</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="340" to="362" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Global Routing by New Approximations for Multicommodity Flow</title>
		<author>
			<persName><forename type="first">C</forename><surname>Albrecht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TCAD</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="622" to="632" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">VPR: A New Packing, Placement and Routing Tool for FPGA Research</title>
		<author>
			<persName><forename type="first">V</forename><surname>Betz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FPGA</title>
				<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="213" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Creating and Exploiting Flexibility in Rectilinear Steiner Trees</title>
		<author>
			<persName><forename type="first">E</forename><surname>Bozorgzadeh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kastner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sarrafzadeh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TCAD</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="605" to="615" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Multilevel Optimization for Large-scale Circuit Placement</title>
		<author>
			<persName><forename type="first">T</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Kong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Shinnerl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICCAD</title>
				<meeting>ICCAD</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="171" to="176" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">BoxRouter: A New Global Router Based on Box Expansion and Progressive ILP</title>
		<author>
			<persName><forename type="first">M</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">Z</forename><surname>Pan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. DAC</title>
				<meeting>DAC</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="373" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">BoxRouter 2.0: Architecture and Implementation of a Hybrid and Robust Global Router</title>
		<author>
			<persName><forename type="first">M</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">Z</forename><surname>Pan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ICCAD</title>
		<imprint>
			<biblScope unit="page" from="503" to="508" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Wire Density Driven Global Routing for CMP Variation and Timing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Xiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Puri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">Z</forename><surname>Pan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICCAD</title>
				<meeting>ICCAD</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="487" to="492" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">FLUTE: Fast Lookup Table Based Rectilinear Steiner Minimal Tree Algorithm for VLSI Design</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C N</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-C</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TCAD</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="70" to="83" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Multilevel Approach to Full-Chip Gridless Routing</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICCAD</title>
				<meeting>ICCAD</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="396" to="403" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">MARS-A Multilevel Full-Chip Gridless Routing System</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TCAD</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="382" to="394" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Introduction to Algorithms, Second Edition</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Cormen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Leiserson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Stein</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>MIT Press and McGraw-Hill</publisher>
			<biblScope unit="page" from="595" to="601" />
		</imprint>
	</monogr>
	<note>Section 24.3: Dijkstra&apos;s algorithm</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Automated Rip-up and Reroute Techniques</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">A</forename><surname>Dees</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">G</forename><surname>Karger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. DAC</title>
				<meeting>DAC</meeting>
		<imprint>
			<date type="published" when="1982">1982</date>
			<biblScope unit="page" from="432" to="439" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">IC Routing Contest Boosts CAD Research</title>
		<author>
			<persName><forename type="first">R</forename><surname>Goering</surname></persName>
		</author>
		<ptr target="http://www.eetimes.com/showArticle.jhtml?articleID=198500084" />
	</analytic>
	<monogr>
		<title level="j">EE Times</title>
		<imprint>
			<date type="published" when="2007-03-22">March 22. 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Improved Global Routing through Congestion Estimation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hadsell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">H</forename><surname>Madden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. DAC</title>
				<meeting>DAC</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="28" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A Survey on Multi-net Global Routing for Integrated Circuits</title>
		<author>
			<persName><forename type="first">J</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Sapatnekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Integration, the VLSI Journal</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="49" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<ptr target="http://www.ece.ucsb.edu/∼kastner/labyrinth" />
		<title level="m">ISPD 1998 Global Routing benchmark suite</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<ptr target="http://www.ispd.cc/ispd07contest.html" />
		<title level="m">ISPD 2007 Global Routing Contest and benchmark suite</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Highly Scalable Algorithms for Rectilinear and Octilinear Steiner Trees</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">B</forename><surname>Kahng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">I</forename><surname>Mandoiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Zelikovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ASP-DAC</title>
				<meeting>ASP-DAC</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="827" to="833" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Multilevel Hypergraph Partitioning: Applications in VLSI Domain</title>
		<author>
			<persName><forename type="first">G</forename><surname>Karypis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Aggarwal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shekhar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TVLSI</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="69" to="79" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Pattern Routing: Use and Theory for Increasing Predictability and Avoiding Coupling</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kastner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Bozorgzadeh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sarrafzadeh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TCAD</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="777" to="790" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<ptr target="http://en.wikipedia.org/wiki/Lagrangemultipliers" />
		<title level="m">Lagrange multipliers</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Post-routing Redundant Via Insertion for Yield/Reliability Improvement</title>
		<author>
			<persName><forename type="first">K.-Y</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T.-C</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ASP-DAC</title>
				<meeting>ASP-DAC</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="303" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Timing-driven Routing for FPGAs based on Lagrangian Relaxation</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D F</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TCAD</title>
		<imprint>
			<biblScope unit="page" from="506" to="510" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Recent Research and Emerging Challenges in Physical Design for Manufacturability/Reliability</title>
		<author>
			<persName><forename type="first">C.-W</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ASP-DAC</title>
				<meeting>ASP-DAC</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="238" to="243" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Efficient Obstacle-avoiding Rectilinear Steiner Tree Construction</title>
		<author>
			<persName><forename type="first">C.-W</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ISPD</title>
				<meeting>ISPD</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="127" to="134" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Routing Technology Came from Within Cadence, execs say</title>
		<author>
			<persName><forename type="first">D</forename><surname>Mcgrath</surname></persName>
		</author>
		<ptr target="http://www.eetimes.com/showArticle.jhtml?articleID=192700243" />
	</analytic>
	<monogr>
		<title level="j">EE Times</title>
		<imprint>
			<date type="published" when="2006">Sept. 8, 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">PathFinder: A Negotiationbased Performance-driven Router for FPGAs</title>
		<author>
			<persName><forename type="first">L</forename><surname>Mcmurchie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Ebeling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM Symp. on FPGAs</title>
				<meeting>ACM Symp. on FPGAs</meeting>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="111" to="117" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Personal communication</title>
		<author>
			<persName><forename type="first">M</forename><surname>Moffitt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007-03">March 2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">A Length-matching Routing Algorithm for High-performance Printed Circuit Boards</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Ozdal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D F</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TCAD</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2784" to="2794" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Archer: A History-driven Global Routing Algorithm</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">M</forename><surname>Ozdal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">D F</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ICCAD</title>
		<imprint>
			<biblScope unit="page" from="488" to="495" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">FastRoute: A Step to Integrate Global Routing into Placement</title>
		<author>
			<persName><forename type="first">M</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Chu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICCAD</title>
				<meeting>ICCAD</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="464" to="471" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">FastRoute 2.0: A High-quality and Efficient Global Router</title>
		<author>
			<persName><forename type="first">M</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Chu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ASP-DAC</title>
				<meeting>ASP-DAC</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="250" to="255" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">True Crosstalk Aware Incremental Placement with Noise Map</title>
		<author>
			<persName><forename type="first">H</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">Z</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">G</forename><surname>Villarubia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICCAD</title>
				<meeting>ICCAD</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="402" to="409" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Seeing the Forest and the Trees: Steiner Wirelength Optimization in Placement</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">L</forename><surname>Markov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE TCAD</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="632" to="644" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">High-Performance Routing at the Nanometer Scale</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">L</forename><surname>Markov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ICCAD</title>
		<imprint>
			<biblScope unit="page" from="496" to="502" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Physical CAD Changes to Incorporate Design for Lithography and Manufacturability</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">K</forename><surname>Scheffer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ASP-DAC</title>
				<meeting>ASP-DAC</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="768" to="773" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Electronic Design Automation for Integrated Circuits Handbook</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">K</forename><surname>Scheffer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Lavagno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Martin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006">2006</date>
			<publisher>CRC Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Efficient Rectilinear Steiner Tree Construction with Rectilinear Blockages</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C N</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">M</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICCD</title>
				<meeting>ICCD</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="38" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Solving Hard Instances of FPGA Routing with a Congestion-Optimal Restrained-Norm Path Search Space</title>
		<author>
			<persName><forename type="first">K</forename><surname>So</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ISPD</title>
				<meeting>ISPD</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="151" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">System and Method for Estimating Capacitance of Wires Based on Congestion Information</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">V</forename><surname>Srinivas</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000-05-26">May 26, 2000, issued Feb. 11, 2003</date>
		</imprint>
	</monogr>
	<note type="report_type">U.S. Patent 6519745</note>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Method for Estimating Routability and Congestion in a Cell Placement for Integrated Circuit Chip</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">C</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">U.S. Patent</title>
		<imprint>
			<biblScope unit="volume">5587923</biblScope>
			<date type="published" when="1994">Sept. 7, 1994, issued Dec. 24, 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Probabilistic Congestion Prediction</title>
		<author>
			<persName><forename type="first">J</forename><surname>Westra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Bartels</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Groeneveld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ISPD</title>
				<meeting>ISPD</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="204" to="209" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Is Probabilistic Congestion Estimation Worthwhile?</title>
		<author>
			<persName><forename type="first">J</forename><surname>Westra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Groeneveld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SLIP</title>
				<meeting>SLIP</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="99" to="106" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
