<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Close Look on n-Grams in Intrusion Detection: Anomaly Detection vs. Classification</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Christian</forename><surname>Wressnegger</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">idalab GmbH</orgName>
								<address>
									<settlement>Berlin</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Guido</forename><surname>Schwenk</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Berlin University of Technology</orgName>
								<address>
									<settlement>Berlin</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Daniel</forename><surname>Arp</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">University of Göttingen</orgName>
								<address>
									<settlement>Göttingen</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Konrad</forename><surname>Rieck</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">University of Göttingen</orgName>
								<address>
									<settlement>Göttingen</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Close Look on n-Grams in Intrusion Detection: Anomaly Detection vs. Classification</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">F61B5998A370CF1DE398EB76BB651E42</idno>
					<idno type="DOI">10.1145/2517312.2517316</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:14+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C.2.0 [Computer-Communication Networks]: General-Security and Protection</term>
					<term>K.6.5 [Computing Milieux]: Management of Computing and Information Systems-Security and Protection -Invasive software</term>
					<term>I.5.1 [Pattern Recognition]: Models-Statistical Intrusion Detection, Machine Learning, n-Gram Models</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Detection methods based on n-gram models have been widely studied for the identification of attacks and malicious software. These methods usually build on one of two learning schemes: anomaly detection, where a model of normality is constructed from n-grams, or classification, where a discrimination between benign and malicious n-grams is learned. Although successful in many security domains, previous work falls short of explaining why a particular scheme is used and more importantly what renders one favorable over the other for a given type of data. In this paper we provide a close look on n-gram models for intrusion detection. We specifically study anomaly detection and classification using n-grams and develop criteria for data being used in one or the other scheme. Furthermore, we apply these criteria in the scope of web intrusion detection and empirically validate their effectiveness with different learning-based detection methods for client-side and service-side attacks.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Computer security faces a constant and daily growth of new threats in the Internet. The attack vectors, types and ramifications of these threats are manifold. On the client side, malware infections pose a risk to the security of individual hosts and connected networks. Numerous types of malware are used for infecting computers at a large scale and conducting illegal activities, such as the distribution of spam messages or the theft of personal data [see 2 <ref type="bibr">, 12]</ref>. On the server side, a plethora of attacks target network services, which range from classic exploits against vulnerable implementations to sophisticated injection attacks, such as XSS and CSRF. These attacks are regularly used for compromising web servers and retrieving sensitive data, such as passwords and credit card numbers.</p><p>A few years ago it might have been possible to craft detection rules for these threats manually. Nowadays however, manual analysis fails to keep pace with attack development and more automation is needed to handle the overwhelming amount of novel threats. As a result, alternative lines of research have been explored for the detection of attacks, most notably methods based on machine learning. Several of these learning-based approaches build on the concept of n-grams, that is, attacks are identified by analyzing substrings of length n extracted from the observed data stream. Such n-gram models have been successfully applied for spotting malicious activity in system call traces <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b50">51]</ref>, packet payloads <ref type="bibr" target="#b48">[49,</ref><ref type="bibr" target="#b49">50]</ref>, executable files <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b34">35]</ref> and JavaScript code <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b36">37]</ref>.</p><p>In terms of machine learning these detection methods can be roughly categorized into one of two learning schemes: anomaly detection and classification. In the first case, a model of normality is constructed from n-grams and used to identify attacks as deviations thereof [e.g., <ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b48">49]</ref>, whereas in the second case a discrimination between benign and malicious n-grams is learned [e.g., <ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b36">37]</ref>. Although both schemes have been successfully applied in a large body of previous work, little is known about when to favor one over the other in a detection task and how the distribution and characteristics of the extracted n-grams influence this choice.</p><p>In this paper we take a close look on n-gram models for intrusion detection. We study both learning schemes in detail and shed light on what makes a problem and its data suitable for one or the other setting. As part of this analysis we develop three suitability criteria, namely the perturbation, density and variability of n-grams, that enable us to assess whether data fits the scheme of anomaly detection or classification should be used. We study these criteria on seven common types of data used in intrusion detection, including text and binary protocols as well as system call traces and JavaScript code. In a case study on web intrusion detection, we finally validate our criteria in both learning schemes.</p><p>In summary, the contributions of the analysis presented in this paper are as follows:</p><p>• We discuss the scope of anomaly detection and classification for intrusion detection and define prerequisites for practical application.</p><p>• We devise suitability criteria for n-gram models for intrusion detection that help selecting an appropriate learning scheme.</p><p>• Finally, we demonstrate the validity of the developed criteria in a case study on client-side and server-side web intrusion detection.</p><p>The rest of the paper is structured as follows: The two prevalent learning schemes for intrusion detection are presented in Section 2, while n-gram models are discussed in Section 3. In Section 4 we analyze datasets from different domains and develop our suitability criteria. These criteria are evaluated in a series of experiments, whose results are presented in Section 5. Section 6 discusses related work and Section 7 concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">LEARNING SCHEMES</head><p>In many fields of application where learning methods are applicable for decision making one often is confronted with the selection of the underlying learning scheme. For intrusion detection two schemes are prevalent: classification and anomaly detection. In this section we shortly review both of these schemes in order to identify possible indicators for deciding when to use the one or the other. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Classification.</head><p>In computer security often very strict definitions are in demand for deciding about something being benign or malicious, which immediately suggests a classification task. The identification of the two classes is achieved by learning a discrimination as illustrated in Figure <ref type="figure" target="#fig_0">1(a)</ref>. Several learning methods, such as decision trees, neuronal networks and boosting can be used for learning a classification <ref type="bibr" target="#b7">[8]</ref>. An intuitive example is the two-class SVM that learns a hyperplane separating two classes with maximum margin in a feature space [see 43]. Learning a classification, however, requires enough data of both classes in order to be able to generalize to unseen samples. If one class is represented by a few instances only, it is likely that the learning will overfit and thereby impede detection of unknown attacks. In this regard a lack of data for one class is already a crucial factor for abstaining from using classification.</p><p>In some cases of intrusion detection, sufficient data for both classes can be acquired automatically. For example, for learning a client-side detection of web-based attacks, it is possible to actively visit benign and malicious web pages using honeyclients and special crawlers [e.g., <ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b41">42]</ref>. This crawling enables one to assemble a recent collection of training data for both classes. In other settings, as for example the server-side detection of web-based attacks, one is restricted to passively wait for attacks using network honeypots. As a consequence, it is not possible to put together a representative set of server-side attacks in a timely manner and classification methods should not be employed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Anomaly Detection.</head><p>Detecting unknown attacks is of critical importance in security, as these may relate to zero-day exploits or new instances of known malware. Fortunately, it is possible to take this scenario into account using anomaly detection-even if no attacks are available for learning. By focusing on the prominent class and learning its structure, it is possible to differentiate that class from everything else, as illustrated in Figure <ref type="figure" target="#fig_0">1</ref>(b). Several methods are suitable for learning such a model of normality, for example, by analyzing the density, probability or boundary of the given class <ref type="bibr" target="#b7">[8]</ref>. A common method for anomaly detection is the spherical one-class SVM (or SVDD) that determines a hypersphere enclosing the data with minimum volume [ <ref type="bibr">see 43]</ref>.</p><p>At this point it is important to stress that anomaly detection methods do not explicitly learn to discriminate benign from malicious data, but instead normality from anomalies. This semantic gap requires one to design features and detection systems carefully, as otherwise identified anomalies may not reflect malicious activity <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b44">45]</ref>. Moreover, it is also necessary to sanitize the training data to avoid incorporating attacks in the model of normality <ref type="bibr" target="#b4">[5]</ref>. Nonetheless, anomaly detection is the learning scheme of choice if little or no data is available for the attack class, as for example, when learning a server-side detection of attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Prerequisites.</head><p>In summary, both learning schemes offer their advantages if used in the right setting. We thus arrive at the following prerequisites for learning-based detection:</p><p>• Classification. If enough representative data is available for both classes, this scheme allows to learn a model for discriminating one class from the other. Depending on the type of attacks, this discrimination may generalize to unknown attacks but is not guaranteed to do so.</p><p>• Anomaly Detection. If only one class is available for learning, anomaly detection allows to learn a model for detecting unknown attacks. However, a careful design of the detection system is necessary in order to limit the semantic gap between attacks and anomalies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">N-GRAM MODELS</head><p>Most learning methods operate on numeric vectors rather than on raw data. Therefore, it often is necessary to construct a map to a vector space for interfacing with learning methods. In some settings, this can be achieved by defining numeric measures describing the data, such as the length or the entropy of packets. A more generic map, however, can be developed using the concept of n-gram models. Initially proposed for natural language processing <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b45">46]</ref>, n-grams have become the representation of choice in many detection systems [e.g., <ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b48">49]</ref>.</p><p>To describe data in terms of n-grams, each data object x first needs to be represented as a string of symbols from an alphabet A, where A is often defined as bytes or tokens. For example, for analyzing network packets, we simply consider the data in each packet as a string of bytes. Similarly, we can model JavaScript code in web pages by representing the code as a string of lexical tokens.</p><p>By moving a window of n symbols over each object x, we can then extract all substrings of length n. These substrings (n-grams) give rise to a map to a high-dimensional vector space, where each dimension is associated with the occurrences of one n-gram. Formally, this map φ can be constructed using the set S of all possible n-grams as, φ : x → φs(x) s∈S with φs(x) = occ(s, x)</p><p>where the function occ(s, x) simply returns the frequency, the probability or a binary flag for the occurrences of the n-gram s in the data object x.</p><p>Several methods for the detection of attacks and malicious software indirectly make use of this map. For example, the methods PAYL <ref type="bibr" target="#b49">[50]</ref>, McPAD <ref type="bibr" target="#b31">[32]</ref> and Anagram <ref type="bibr" target="#b48">[49]</ref> analyze byte n-grams for detecting server-side attacks, where the first two consider frequencies and the latter binary flags for the occurrences of n-grams. Similarly, the methods Cujo <ref type="bibr" target="#b36">[37]</ref> and PJScan <ref type="bibr" target="#b23">[24]</ref> use token n-grams with a binary map for identifying malicious JavaScript code in web pages and PDF documents, respectively.</p><p>Although n-grams provide generic and effective means for modeling data, the exponential growth of the resulting vector space apparently impedes efficient operation. However, the number of n-grams in a particular object x is linear in the object's size and thus efficient data structures can be used for processing the extracted n-grams. For example, the method Anagram <ref type="bibr" target="#b48">[49]</ref> builds on Bloom Filters <ref type="bibr" target="#b0">[1]</ref> for storing n-grams, while the detector Cujo <ref type="bibr" target="#b36">[37]</ref> uses sparse feature vectors to efficiently represent the n-grams. Later on we show that this sparsity is not only beneficial for dealing with high-dimensional vectors but also provides a good indicator for the feasibility of anomaly detection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">DATA ANALYSIS</head><p>Based on the presented n-gram models, we now study the characteristics of different types of data and their respective n-grams. A summary of the considered datasets is given in Table <ref type="table" target="#tab_0">1</ref>. Before we proceed to defining suitability criteria, we provide further details on the datasets and describe the different sources we gathered the data from.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Datasets</head><p>In order to cover a large variety of data from different fields of applications we consider two scenarios: First, data for client-side intrusion detection and second, data for serverside intrusion detection. The first datasets cover system call traces of programs and JavaScript code of web pages, while the latter involve binary and text-based network protocols.</p><p>Client-side Datasets.</p><p>The JavaScript dataset is gathered by randomly drawing 230,000 URLs from the list of the top most visited web pages provided by Alexa<ref type="foot" target="#foot_0">1</ref> . For analysis, the URLs are actively crawled using the client-side honeypot ADSandbox <ref type="bibr" target="#b6">[7]</ref> in order to (a) extract all JavaScript code and (b) analyze the code dynamically. The output of this analysis-events monitored during the execution of the code-constitutes the first JavaScript dataset (JS-Dyn). For the second dataset (JS-Stat) we additionally process the plain JavaScript code similarly to Rieck at al. <ref type="bibr" target="#b36">[37]</ref> by extracting lexical tokens, such as identifiers and numerical constants. We scan all URLs using the GoogleSafeBrowsing service to limit the number of attacks in the data.</p><p>The dataset of system call traces (Syscalls) is extracted from the original DARPA IDS evaluation datasets <ref type="bibr" target="#b26">[27]</ref> and corresponds to audit trails of the Solaris BSM module. Although outdated and criticized <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b29">30]</ref> we still consider this dataset useful for studying the characteristics of n-gram models on client-side data.</p><p>Server-side Datasets.</p><p>The application layer of the Internet protocol suite contains a variety of different protocols based on which we can build our study. In particular we consider DNS and SMB as representatives for binary protocols and HTTP and FTP for text-based protocols.</p><p>The DNS dataset has been recorded in a period of one week at our research institute resulting in a total of 294,431 requests. In case of SMB an overall amount of 22.6 GB of data in 154,460 messages has been collected on a single day at our institute. SMB often encapsulates files and consequently involves far more data than other protocols. The HTTP data has been recorded from a content management system running at our institute in a period of one week and incorporates 237,080 HTTP requests. For the FTP communication we make use of data recorded at the Lawrence Berkeley National Laboratory (LBNL) during a period of 10 days with more than 22,000 FTP sessions <ref type="bibr" target="#b30">[31]</ref>.</p><p>On top of the distinction between client-side and serverside detection we differentiate the datasets according to the used type of n-grams. For our analyses and experiments we use the types as shown in Table <ref type="table" target="#tab_0">1</ref>, which are consistent with previous work [see <ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b48">49]</ref>. Specifically, we use byte n-grams for the network protocols and token n-grams for the JavaScript and system call datasets, where the tokens correspond to events, lexical tokens and system call identifiers, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Analysis and Discussion</head><p>When it comes to the application of learning-based methods there are several prerequisites to be clarified beforehand. For instance, how much training data is needed in order to learn an expressive model? Obviously the more data is used for training, the better the outcome might be. To detail this rather general statement Wang et al. for instance specify the "likelihood of seeing new n-grams as training time increases" <ref type="bibr" target="#b48">[49]</ref> in order to indicate the completeness of their model in terms of the amount of training data. If this measure converges, the training set can be considered as sufficiently large.</p><p>If one looks at an even earlier stage of learning other very important considerations need to be made. For instance, is the underlying problem, the data to be used and the constructed feature space suitable for learning? Unfortunately previous work often falls short of explaining the reasons for or against particular methods and features. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dataset</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Suitability Criteria</head><p>We have worked out three criteria for a problem's suitability for being learned in an anomaly detection setting: The perturbation within a dataset's main class, the density of the used feature space and the variability of the n-grams in the individual classes. In this section we study these criteria exemplarily on the following datasets: FTP, HTTP, both views on the JavaScript code (JS-Dyn &amp; JS-Stat) and the system call traces (Syscalls).</p><p>Criteria 1 (Perturbation). The perturbation is the expected ratio of n-grams in a benign object that are not part of the training data.</p><p>A perturbation value of 0 means that all possible n-grams in the dataset have been observed in the training phase, whereas a high value indicates that despite training a large number of unseen n-grams is still to be expected in benign objects during testing.</p><p>This measure is closely related to the likelihood of unseen n-grams as discussed by Wang et al. <ref type="bibr" target="#b48">[49]</ref>. However, convergence of the likelihood only tells one that the training does not improve anymore with an increasing amount of data. It does not allow to draw conclusions about the data's suitability for anomaly detection as such. To do so we consider the likelihood of the last objects observed during the training phase as the expected perturbation during testing. Figure <ref type="figure" target="#fig_3">2</ref>(a) illustrates the perturbation for our five datasets on the example of 3-gram models. Note that one of those clearly stands out, namely the datasets composed out of the dynamic JavaScript reports. The other four quickly converge to zero and do not exhibit any significant level of perturbation after training. Also JS-Dyn seems to converge but to a value unequal to zero. Hence, in this particular case benign data constantly exhibits 5-10% of unseen n-grams. This renders anomaly detection very difficult, as each benign object appears to be anomalous to 5-10% already.</p><p>So, where do the perturbations in the JS-Dyn dataset come from? The dataset covers the behavior of JavaScript code and thus contains variable names and strings. As a result, the alphabet of the n-grams is not fixed, that is, there exists an infinite number of tokens, consisting of variable names and strings. This is of course not a flaw of the sandbox, but rather a feature as the behavior is monitored with great detail. The resulting reports simply are not suitable for being learned on with token n-grams in an anomaly detection setting. For classification in turn Rieck et al. <ref type="bibr" target="#b36">[37]</ref> show that the dataset can be used with great success.</p><p>However, in order to be able to still use anomaly detection one needs to preprocess the data such that the parts causing the perturbation are abstracted. For JS-Stat this was done by lexically analyzing the raw program code and introducing dedicated string tokens that hide but describe the raw data <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b36">37]</ref>. That way also the names of functions, parameters and variables are abstracted. Similarly it is possible to abstract reports from JS-Dyn.</p><p>Criteria 2 (Density). The density is the ratio of the number of unique n-grams in a dataset to the total number of all possible n-grams induced by the underlying alphabet.</p><p>As second criteria we use the density of a training dataset when mapped into the feature space induced by n-grams. A value close to 0 indicates low density, i.e. the feature space is sparse, whereas a value of 1 means that the feature space is maximally dense. This is directly related to the overall size of the feature space and can provide some indication of how well a class can be learned for anomaly detection. For instance, if the datasets have been oversimplified in the course of lowering the perturbation, it might happen that the remaining symbols are too general to reflect the characteristics that differentiate one class from the other. Therefore, in feature space both classes occupy an identical and above all, dense region. This of course assumes a certain homogeneity of the benign and malicious data.    shows the density of the HTTP, FTP, JS-Stat and Syscalls datasets. Obviously, it is not possible to measure the density for an infinite large set of n-grams as induced by the dynamic JavaScript reports. Therefore, the JS-Dyn dataset is not present in the figure. Using the density it is possible to estimate how well it can be learned on a particular dataset. In Section 5 we experimentally show this relation based on the HTTP and JS-Stat datasets. At first sight the plotted values seem vanishingly low due to logarithmic scale and the overall size of the feature space as denominator. However, the steepness of the density's decay over increasing n-gram lengths is the crucial indicator here.</p><p>Criteria 3 (Variability). The variability is the ratio of the data's entropy to its maximal value as induced by the alphabet size (normalized entropy).</p><p>The third suitability criteria is the variability of a dataset to be used for training. A value of close to 0 means that the variability of the data is very low, whereas a value of 1 indicates maximal uncertainty about the next element in a sequence. The corresponding values for our datasets are illustrated in Figure <ref type="figure" target="#fig_4">2(c</ref>). As the variability is normalized to its maximal value, consequently it again cannot be determined for data that has a virtually infinite set of unique n-gram tokens such as the dynamic JavaScript reports (JS-Dyn). Therefore, this dataset is yet again spared out in the figure for this criteria.</p><p>Using the variability it is possible to characterize the structure of the datasets. It is equally important for anomaly detection as well as classification that the data possesses noticeable structure which can be learned and used for detection. Random data which by nature does not present any kind of visible structure, but largest possible variability would appear as a flat line at the maximum of 1.0. For the other datasets (from JS-Stat over HTTP and FTP down to Syscalls) a constant decay of the variability levels can be observed. This directly mirrors the difficulty to learn a model based on these datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Case Study: Binary-based Protocols</head><p>In this section we examine binary-based protocols with respect to the criteria set up in the previous section in more detail. Such protocols are not to be categorically ruled out only because they happen not to be human readable and therefore, less intuitively comprehensible. Depending on the specific dataset it might be necessary to parse and generalize the protocol beforehand, though. However, for this study and in line with previous work we apply byte n-grams on the raw payloads, similarly to HTTP and FTP.</p><p>In particular we examine the SMB/CIFS protocol suite and the DNS protocol. SMB is mainly used for the transfer of data, but includes other functionality such as the Windows RPC (MSRPC ). Our SMB dataset features the special property that data was mainly retrieved from the server and only in a few exceptions uploaded by the client. This allows us to study two different scenarios in the use of SMB: First, the use of largely pure SMB requests send by the client to the server and only little additional raw data (SMB-Client) and second, SMB commands that are heavily interleaved with the transmitted data (SMB-Server ). DNS on the other hand consists out of relatively short requests and in a large part of printable characters-the requested domain name.</p><p>In both cases the basis for a low perturbation is provided due to the bounded alphabet of 256 bytes. Figure <ref type="figure" target="#fig_8">3(a)</ref> illustrates the perturbation levels for DNS and the SMB datasets. Especially DNS quickly reaches zero perturbation, whereas SMB-Server requires much more data and also SMB-Client would have needed more training. Note that SMB-Server not only stands out clearly, but its peak is displaced with respect to the beginning of the recording. This indicates that in the beginning similarly to SMB-Client mainly pure message blocks are exchanged, before at some point the transmission of large amounts of raw data starts.</p><p>Such raw data often is compressed and therefore exhibits a high entropy. Therefore, the uncertainty about the overall observed n-grams increases and obscures the structure of the protocol. Figure <ref type="figure" target="#fig_8">3</ref>(c) shows the variability and reveals the lack of perceptible structure of the SMB-Server dataset. SMB-Client on the other hand does not fully share this problem. This suggests that learning n-gram models of SMB traffic would be feasible if the interleaved raw data, which constitutes additional noise for the learning algorithm, is excluded. This is equally true for classification as well as anomaly detection, whereby it is especially critical for the latter. One option to restrict the data to a manageable subset is, for instance, to only look at Windows RPC messages <ref type="bibr" target="#b14">[15]</ref>.</p><p>The density exposes another interesting property of the considered binary protocols. Figure <ref type="figure" target="#fig_8">3(b)</ref> shows that for ngrams of lengths up to n = 3 the density is especially high.    This happens due to the use of numeric variables as part of the protocol that may span over the entire range of byte values, such as length specifiers for subsequent fields, headers, etc. With larger values of n this influence decreases. SMB-Client and the DNS requests even align with the values for the HTTP dataset. In summary, the developed criteria largely confirm previously expressed concerns regarding the suitability of binary protocols and especially SMB [e.g., 15] for learning. However, simultaneously it is shown that learning cannot be ruled out categorically. Constraining the use of raw data in SMB can lower the complexity to a feasible level. Also DNS requests appear to be very well manageable. Nevertheless, one needs to note that in the case of DNS the type of attacks usually differ from those seen for HTTP and FTP. For DNS it is often about the sequence and chronology of requests in order to implement denial-of-service or spoofing attacks. Therefore, although the DNS requests' data as such is suitable for classification as well as anomaly detection, learning such attacks can only succeed if timing information and relations of the requests are included in the data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.3">Pitfalls</head><p>Finally we want to point out a particular pitfall that generally comes with the use of hash functions and is related to the density criteria described earlier. For intrusion detection based on n-grams this is of special interest whenever methods make use of hashing to represent n-grams [e.g 49].</p><p>When using hash functions it is necessary to take the influence of collisions into account. Two or more objects (e.g. n-grams) may by chance result in the same hash value. Depending on the size of the feature space this is more or less likely, but of course also the overall number of hashed and store objects influences the number of collisions. This can be thought as the saturation of the hash function's output range. In the worst case an n-gram model may describe all possible n-grams (when fully saturated) rather than those representing normal or malicious behavior, thereby artificially increasing the density of the feature space (cf. Section 4.2.1). Figure <ref type="figure" target="#fig_9">4</ref> shows the influence of the saturation of a hash function's output range on the convergence of the dataset's perturbation. One curve shows a seemingly ideal convergence for JS-Dyn (5 -grams), whereas the other suggests a far from optimal behavior. On closer examination it becomes clear that this happens due to different hash saturation levels of 80.44% and 9.69% respectively. Hence, we have made sure not to exceed a hash saturation of 10% for our analyses in order to minimize collisions and obtain the most accurate results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">EXPERIMENTS</head><p>We proceed with an empirical evaluation of the proposed suitability criteria. In particular, we study the performance of n-gram models for web intrusion detection. To this end, we focus on three of the datasets from Section 4.1, namely the HTTP dataset, comprising requests to a web server, and the JS-Stat and JS-Dyn datasets, covering analysis reports of JavaScript code retrieved by a web client.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Malicious Datasets</head><p>For the HTTP dataset, we select several recent exploits contained in the Metasploit framework <ref type="bibr" target="#b28">[29]</ref> as attacks. These exploits used with different payload encoders, resulting in a total of 89 HTTP attack samples. We run and record these attacks under controlled conditions against the same content management system from which we have collected the benign HTTP data. For JavaScript datasets, we use 609 attacks collected using the Wepawet service <ref type="bibr" target="#b3">[4]</ref>. These attacks cover drive-by downloads of different types and campaigns, such as malicious web pages involved in SQL injection attacks and spam campaigns. The attacks are described in more detail in <ref type="bibr" target="#b36">[37]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Detection Methods</head><p>We consider two anomaly detection and classification methods for our experiments: First, we employ a one-class and a two-class version of the detection method Anagram, and second, we make use of a one-class and two-class SVM s. Both methods have been successfully applied for network intrusion detection [e.g., <ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b48">49]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Anagram Detector.</head><p>Originally designed for analyzing packet payloads only, Anagram <ref type="bibr" target="#b48">[49]</ref> has turned into a generic anomaly detection method that found its way into different approaches and domains [e.g., <ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b19">20]</ref>. Anagram extends the method PAYL <ref type="bibr" target="#b49">[50]</ref> and uses a Bloom filter for analyzing high-order n-grams of bytes. During the training phase the methods stores each observed n-gram in the Bloom filter, while for testing it computes the fraction of previously unseen n-grams in an object using lookups in that filter. Anagram can be extended to also support classification by using a second Bloom filter trained on malicious content. For our experiments we thus train one filter for benign data and another one for known attacks. For anomaly detection we only consider the benign filter of Anagram, whereas for classification we combine the scores of both filters to obtain a joint decision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Support Vector Machines (SVMs).</head><p>As second learning method we consider SVMs which can be used for anomaly detection as well as classification <ref type="bibr" target="#b40">[41]</ref>. The detection performance (as true positives rates) of the four different detection methods on our datasets. In particular we choose a 4 -gram model for HTTP as well as JS-Stat and use 3 -grams for JS-Dyn.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dataset</head><p>In particular, we consider the regular two-class SVM that learns a separating hyperplane with maximum margin and the corresponding one-class SVM <ref type="bibr" target="#b39">[40]</ref>. Note that this oneclass SVM is equivalent to the spherical one-class SVM discussed earlier if used with an appropriate kernel function.</p><p>The decision function of both schemes then is given by</p><formula xml:id="formula_0">f (x) = s∈S φs(x) • ws + b</formula><p>where φ is the map as define in Section 3 and w the weight vector representing the hyperplane with bias b. To enable an efficient learning with high-dimensional vectors, we apply feature hashing <ref type="bibr" target="#b43">[44]</ref>, that is, the vector space is indexed using the hash values of each n-gram. This acceleration technique resembles the mechanism of Bloom filters used in the Anagram detector.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Experimental Setup</head><p>For all experiments we randomly split the benign and malicious datasets into two partitions in a ratio of three to one, considering them as known and unknown data. The latter is strictly used for performance evaluation, whereas the other one is used for training. The splitting is repeated 10 times and the results are averaged. For the malicious datasets we additionally take care that the partitions contain distinct attack types. In case of HTTP this can be done according to the 28 exploits generated by Metasploit, while for the JavaScript attacks we utilize the labels of a popular antivirus scanner, resulting in 30 distinct attack types.</p><p>As described in the previous section Anagram is defined over the binary embedding of n-grams. For the SVM experiments we similarly to Anagram make use of that embedding. As a matter of fact our experiments show that in line with previous work [e.g., <ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b48">49]</ref> this embedding often performs better than a map based on n-gram frequencies. Additionally, in order to avoid a bias on the object size we normalize the feature vectors φ(x) to one, i.e., φ(x) 2 = 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Results and Discussion</head><p>The results of our experiments are listed in Table <ref type="table" target="#tab_1">2</ref>. For each method and setting the true-positive rate is given for different false-positive rates: 1%, 0.1% and 0.01%. The anomaly detection scheme is prefixed with 1C and the classification scheme with 2C, respectively.</p><p>We can note at first, that for each dataset at least one combination of n-grams and a learning scheme performs well, such that over 81.5% of the attacks can be identified with 0.01% false alarms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>JavaScript (JS-Dyn).</head><p>Using our criteria from Section 4.2 we identify this dataset of dynamic JavaScript reports as the least suitable for anomaly detection. The conducted experiments substantiate this find-ing and our criteria. The difference between classification and anomaly detection is obvious (shaded in dark gray in Table <ref type="table" target="#tab_1">2</ref>) for both tested detection methods. The 2-class implementation of Anagram as well as the SVM clearly outperform their anomaly detection counterparts by 50-60 percent points and more. This result confirms our analysis and conclusions about this dataset and simultaneously backs up findings from previous work <ref type="bibr" target="#b36">[37]</ref>, where the effectiveness of classification in this setting was shown.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>JavaScript (JS-Stat).</head><p>For this dataset of statically analyzed JavaScript code our criteria show that it is very well possible to use anomaly detection, but learning might prove difficult. This is indicated by the higher density of the dataset and slower decay thereof over increasing length of the n-grams. Also the variability is higher than for datasets such as HTTP, for which anomaly detection provably works very well [see <ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b48">49]</ref>. In our results this is especially notable for anomaly detection using SVMs for which we experience a similarly significant drop as for the dynamic reports. The Anagram implementation is not influenced to the same extend. However, at a second glance the detection performance for anomaly detection with Angram (1C-Anagram) drops measurably faster in comparison to classification (2C-Anagram) when it comes to smaller thresholds for the false-positive rate. If we further increase the n-gram length this effect intensifies. For instance, for 7-grams in the anomaly detection setting the true-positive rates drop to 47.8% and 15.9% for false-positive rates of 0.1% and 0.01%, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Web Requests (HTTP).</head><p>It does not come as surprise that both, anomaly detection and classification work well for the HTTP dataset. As summarized in Table <ref type="table" target="#tab_1">2</ref> this holds true for the Anagram detector as well as the detection using SVMs. The ability to successfully detect anomalies in web requests has been proven true in several research works before [e.g., <ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b48">49,</ref><ref type="bibr" target="#b49">50]</ref> and is in line with our criteria.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.1">Summary</head><p>In our experiments we show that it is not only a blackand-white decision about whether one or the other learning strategy can be used for a particular dataset, but also about the used parameters and methods. If a specific setting out of learning method and parameters works satisfactory (c.f. Anagram on JS-Stat using 4-grams) there is no point to push forward in a region where it does worse (7-grams). However, detailed analysis of the datasets can-next to the fundamental suitability for a specific learning scheme-also provide an insight about which parameter range might be usable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">RELATED WORK</head><p>The use of n-grams is popular throughout various disciplines and fields. In the following we provide an overview of n-gram models in computer security and highlight approaches using anomaly detection and classification. Moreover, we discuss work that addresses properties and limits of n-grams in detection systems.</p><p>Anomaly Detection using n-Grams.</p><p>One of the first methods for the detection of attacks using n-grams has been devised by Forrest et al. <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b15">16]</ref>. The method detects anomalous program behavior by counting the number of unknown n-grams in system call traces. Following this seminal work, several related approaches have been proposed for host-based anomaly detection, for example, using probabilistic models <ref type="bibr" target="#b50">[51]</ref>, rule-based learning <ref type="bibr" target="#b24">[25]</ref>, one-class SVMs <ref type="bibr" target="#b8">[9]</ref>, neural networks <ref type="bibr" target="#b13">[14]</ref> and the inclusion of system call arguments <ref type="bibr" target="#b21">[22]</ref>.</p><p>On the network side, first approaches for anomaly detection using n-grams have focused on byte frequencies, that is, 1-grams over bytes <ref type="bibr" target="#b22">[23,</ref><ref type="bibr" target="#b49">50]</ref>. An example is the method PAYL <ref type="bibr" target="#b49">[50]</ref> that embeds packet payloads in a vector space and detects anomalies by computing the distance to the average 1-gram distribution. Several methods extend this work to support high-order n-grams [e.g., <ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b48">49]</ref>. For example, the method Anagram <ref type="bibr" target="#b48">[49]</ref> makes use of Bloom filters for efficiently determining the fraction of unseen n-grams in packet payloads, while the method by Rieck and Laskov <ref type="bibr" target="#b37">[38]</ref> builds on Trie data structures for computing distances in the resulting vector space. Similarly, the system McPAD <ref type="bibr" target="#b31">[32]</ref> uses an approximation of high-order n-grams for efficiently learning an ensemble of one-class SVMs.</p><p>A further example for anomaly detection using n-grams is the method PJScan <ref type="bibr" target="#b23">[24]</ref>, which analyzes n-grams of lexical tokens from JavaScript code. In contrast to other work, PJScan learns a one-class SVM on malicious instances of JavaScript code and thereby realizes a reverse anomaly detection, where everything deviating from the learned model is identified as benign.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Classification using n-Grams.</head><p>A large body of security research has studied classification using n-grams. For example, Kolter and Maloof <ref type="bibr" target="#b20">[21]</ref> evaluate several classification methods, such as decision trees, boosting methods and SVMs for detecting malicious executable files. To reduce the dimensionality of the induced vector space, the authors restrict the analysis to 500 n-grams selected using the information gain. Similarly, Reddy and Pujari <ref type="bibr" target="#b35">[36]</ref> attempt to extract "relevant n-grams" for learning a classification between benign and malicious files. As a further extension, the method McBoost <ref type="bibr" target="#b33">[34]</ref> precedes the classification of malware with an unpacking stage that allows to extract n-grams from obfuscated code. In a similar line of research, Jacob et al. <ref type="bibr" target="#b18">[19]</ref> make use of n-grams over bytes to classify malware without unpacking it.</p><p>Inspired by the frequent use of word n-grams in information retrieval, several authors have also explored the use of n-grams over larger alphabets for detecting malicious data. The method Cujo <ref type="bibr" target="#b36">[37]</ref>, for instance, uses n-grams of lexical tokens for classifying benign and malicious JavaScript code with an SVM, while the method Malheur <ref type="bibr" target="#b38">[39]</ref> conducts a classification using n-grams of events observed during the monitoring of malware in a sandbox.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Analysis of n-Gram Models.</head><p>With the increasing use of n-grams in detection systems, a branch of security research has started to explore evasion against this representation. As a result of this work, Wagner and Soto <ref type="bibr" target="#b47">[48]</ref> introduce mimicry attacks evading anomaly detection based on system call sequences and thereby subvert n-gram models. The blending attacks by Fogla et al. <ref type="bibr" target="#b9">[10]</ref> share the same idea but operate on the network level and are capable of thwarting the method PAYL.</p><p>Apart from these adversarial settings, however, there is little work on the characteristics of n-gram models and the selection of a learning scheme. As one example, Lee and Xiang <ref type="bibr" target="#b25">[26]</ref> make use of information-theoretic measures to quantify what types of probabilistic methods are applicable for anomaly detection. In the course of that they identify a relation between the conditional entropy and the length of n-grams. The influence of the n-gram length is further studied by Tan and Maxion <ref type="bibr" target="#b46">[47]</ref>. In a thorough analysis they identify blind spots in anomaly detection systems and reason about the optimal length of n-grams.</p><p>More recently Hadžiosmanović et al. <ref type="bibr" target="#b14">[15]</ref> compare the performance of multiple anomaly detection systems, including Anagram and McPad, on a number of binary protocols. Although insightful in terms of the performance of the individual systems, the authors unfortunately missed out on explaining the reasons for the observations made.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSIONS</head><p>The detection of novel threats is a challenging and enduring problem of computer security. While methods based on n-grams cannot generally eliminate this problem, they provide means for automatizing the generation of detection models and thereby help to better fend off novel attacks. However, several of the proposed solutions are rather ad hoc and there is little reasoning about why a particular n-gram model or learning scheme is used.</p><p>This paper aims at improving this situation and provides insights on n-gram models for intrusion detection. To this end, we have studied the use of anomaly detection and classification techniques with n-grams. As result of our analysis, we define prerequisites that allow to decide whether one of the two schemes is applicable (Section 2). Moreover, we develop three suitability criteria that can be computed from n-gram data prior to the design of a detection method (Section 4). These criteria enable a practitioner to assess the complexity of the detection task and help to select an appropriate learning scheme.</p><p>Our suitability criteria, however, only provide indications for favoring one scheme over the other and should not be considered alone for designing a detection method. Depending on a particular detection task, it may be possible to operate a learning scheme in a slightly imperfect setting for the sake of other constraints, such as run-time performance. Nonetheless, the criteria can guide the development of detection methods and help to avoid tedious experiments with different learning schemes.</p><p>To support further research in this field, the implementations and the prototype for conducting our analysis are open-source software and will be made publicly available at http://mlsec.org/salad.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Schematic depiction of learning schemes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The suitability criteria on example of the FTP, HTTP, JS-Dyn, JS-Stat and the Syscalls datasets. (a) The perturbation within a dataset (averaged on a sliding window of 5000 samples), (b) the density of the introduced feature space and (c) the variability of the n-grams in these datasets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 2 (</head><label>2</label><figDesc>Figure 2(b)  shows the density of the HTTP, FTP, JS-Stat and Syscalls datasets. Obviously, it is not possible to measure the density for an infinite large set of n-grams as induced by the dynamic JavaScript reports. Therefore, the JS-Dyn dataset is not present in the figure. Using the density it is possible to estimate how well it can be learned on a particular dataset. In Section 5 we experimentally show this relation based on the HTTP and JS-Stat datasets. At first sight the plotted values seem vanishingly low due to logarithmic scale and the overall size of the feature space as denominator. However, the steepness of the density's decay over increasing n-gram lengths is the crucial indicator here.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The suitability criteria applied to the binary-based protocols in our datasets: (a) Perturbation, (b) Density and (c) Variability. For the latter two we additionally included the HTTP communication dataset as a baseline.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: The influence of the saturation of a hash function's output range on the example of 5 -grams extracted from the dynamic JavaScript reports (JS-Dyn).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Description of the datasets used for our analyses and experiments. Additionally to the size of the datasets also the used n-gram types are specified.</figDesc><table><row><cell></cell><cell>HTTP</cell><cell>FTP</cell><cell>JS-Stat &amp; JS-Dyn</cell><cell>Syscalls</cell><cell>DNS</cell><cell>SMB</cell></row><row><cell>Size</cell><cell cols="2">237,080 reqs 22,615 sessions</cell><cell>230,000 URLs</cell><cell cols="3">25,797 traces 294,431 reqs 154,460 msg blocks</cell></row><row><cell>n-gram type</cell><cell>byte</cell><cell>byte</cell><cell>token</cell><cell>token</cell><cell>byte</cell><cell>byte</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table><row><cell></cell><cell></cell><cell cols="2">1C-Anagram</cell><cell></cell><cell>2C-Anagram</cell><cell></cell><cell>1C-SVM</cell><cell>2C-SVM</cell></row><row><cell></cell><cell>1%</cell><cell cols="2">0.1% 0.01 %</cell><cell>1%</cell><cell>0.1% 0.01 %</cell><cell>1%</cell><cell cols="2">0.1% 0.01 %</cell><cell>1%</cell><cell>0.1% 0.01 % FP</cell></row><row><cell>HTTP</cell><cell cols="5">100% 93.0% 93.0% 95.7% 93.9% 83.8%</cell><cell cols="2">100% 100%</cell><cell>98.2%</cell><cell>100% 100%</cell><cell>100%</cell></row><row><cell>JS-Dyn</cell><cell cols="2">37.9% 5.7%</cell><cell>0.0%</cell><cell cols="4">95.4% 81.6% 81.5% 41.6% 0.1%</cell><cell>0.0%</cell><cell>98.1% 71.2% 71.2%</cell></row><row><cell>JS-Stat</cell><cell cols="8">94.8% 87.1% 63.1% 96.2% 83.2% 82.9% 50.9% 23.1% 14.8% 99.3% 97.4% 94.6%</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Alexa Top Sites, http://www.alexa.com/topsites</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors would like to thank Marco Cova for making the JavaScript attack dataset available. Furthermore, the authors gratefully acknowledge funding from the German Federal Ministry of Education and Research (BMBF) under the project PROSEC (FKZ 01BY1145).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Space/time trade-offs in hash coding with allowable errors</title>
		<author>
			<persName><forename type="first">B</forename><surname>Bloom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communication of the ACM</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="422" to="426" />
			<date type="published" when="1970">1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Measuring pay-per-install: The commoditization of malware distribution</title>
		<author>
			<persName><forename type="first">J</forename><surname>Caballero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Grier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kreibich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX Security Symposium</title>
		<meeting>of USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">N-gram-based text categorization</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cavnar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Trenkle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SDAIR</title>
		<meeting>of SDAIR<address><addrLine>Las Vegas, NV, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-04">Apr. 1994</date>
			<biblScope unit="page" from="161" to="175" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Detection and analysis of drive-by-download attacks and malicious JavaScript code</title>
		<author>
			<persName><forename type="first">M</forename><surname>Cova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the International World Wide Web Conference</title>
		<meeting>of the International World Wide Web Conference</meeting>
		<imprint>
			<publisher>WWW</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="281" to="290" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Casting out demons: Sanitizing training data for anomaly sensors</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cretu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Stavrou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Locasto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Stolfo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Keromytis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="81" to="95" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Gauging similarity with n-grams: Language-independent categorization of text</title>
		<author>
			<persName><forename type="first">M</forename><surname>Damashek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">267</biblScope>
			<biblScope unit="page" from="843" to="848" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">ADSandbox: Sandboxing JavaScript to fight malicious websites</title>
		<author>
			<persName><forename type="first">A</forename><surname>Dewald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Freiling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM Symposium on Applied Computing (SAC)</title>
		<meeting>of ACM Symposium on Applied Computing (SAC)</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="1859" to="1864" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Duda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">E</forename><surname>Hart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Stork</surname></persName>
		</author>
		<title level="m">Pattern classification</title>
		<imprint>
			<publisher>John Wiley &amp; Sons</publisher>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
	<note>second ed.</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Applications of Data Mining in Computer Security. Kluwer, 2002, ch. A geometric framework for unsupervised anomaly detection: detecting intrusions in unlabeled data</title>
		<author>
			<persName><forename type="first">E</forename><surname>Eskin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Arnold</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Prerau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Portnoy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Stolfo</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Polymorphic blending attacks</title>
		<author>
			<persName><forename type="first">P</forename><surname>Fogla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sharif</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Kolesnikov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX Security Symposium</title>
		<meeting>of USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="241" to="256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A sense of self for unix processes</title>
		<author>
			<persName><forename type="first">S</forename><surname>Forrest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hofmeyr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Somayaji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Longstaff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy<address><addrLine>Oakland, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="120" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An Inquiry Into the Nature and Causes of the Wealth of Internet Miscreants</title>
		<author>
			<persName><forename type="first">J</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Perrig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM Conference on Computer and Communications Security (CCS)</title>
		<meeting>of ACM Conference on Computer and Communications Security (CCS)</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Challenging the anomaly detection paradigm: A provocative discussion</title>
		<author>
			<persName><forename type="first">C</forename><surname>Gates</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of New Security Paradigms Workshop (NSPW)</title>
		<meeting>of New Security Paradigms Workshop (NSPW)</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="21" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Learning program behavior profiles for intrusion detection</title>
		<author>
			<persName><forename type="first">A</forename><surname>Ghosh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schwartzbard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Schatz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX Workshop on Intrusion Detection and Network Monitoring</title>
		<meeting>of USENIX Workshop on Intrusion Detection and Network Monitoring<address><addrLine>Santa Clara, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-04">Apr. 1999</date>
			<biblScope unit="page" from="51" to="62" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">N-gram against the machine: On the feasibility of the n-gram network analysis for binary protocols</title>
		<author>
			<persName><forename type="first">D</forename><surname>Hadžiosmanović</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Simionato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Bolzoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Zambon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Etalle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Adances in Intrusion Detection</title>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="354" to="373" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Intrusion detection using sequences of system calls</title>
		<author>
			<persName><forename type="first">S</forename><surname>Hofmeyr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Forrest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Somayaji</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="151" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Comparing anomaly detection techniques for HTTP</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">L</forename><surname>Ingham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Inoue</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Adances in Intrusion Detection (RAID)</title>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="42" to="62" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">EvilSeed: A guided approach to finding malicious web pages</title>
		<author>
			<persName><forename type="first">L</forename><surname>Invernizzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Benvenuti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">M</forename><surname>Comparetti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Cova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A static, packer-agnostic filter to detect similar malware samples</title>
		<author>
			<persName><forename type="first">G</forename><surname>Jacob</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">M</forename><surname>Comparetti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Neugschwandtner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Detection of Intrusions and Malware &amp; Vulnerability Assessment</title>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="102" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">ReDeBug: finding unpatched code clones in entire os distributions</title>
		<author>
			<persName><forename type="first">J</forename><surname>Jang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Learning to detect and classify malicious executables in the wild</title>
		<author>
			<persName><forename type="first">J</forename><surname>Kolter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Maloof</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="issue">JMLR</biblScope>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">On the detection of anomalous system call arguments</title>
		<author>
			<persName><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mutz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Valeur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of European Symposium on Research in Computer Security (ESORICS)</title>
		<meeting>of European Symposium on Research in Computer Security (ESORICS)</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="326" to="343" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Service specific anomaly detection for network intrusion detection</title>
		<author>
			<persName><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Toth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kirda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM Symposium on Applied Computing (SAC)</title>
		<meeting>of ACM Symposium on Applied Computing (SAC)</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="201" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Static detection of malicious JavaScript-bearing PDF documents</title>
		<author>
			<persName><forename type="first">P</forename><surname>Laskov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Šrndić</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Annual Computer Security Applications Conference (ACSAC)</title>
		<meeting>of Annual Computer Security Applications Conference (ACSAC)</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="373" to="382" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Learning patterns from unix process execution traces for intrusion detection</title>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Stolfo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Chan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of AAAI Workshop on Fraud Detection and Risk Management</title>
		<meeting>of AAAI Workshop on Fraud Detection and Risk Management<address><addrLine>Providence, RI, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="50" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Information-theoretic measures for anomaly detection</title>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Xiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2001 IEEE Symposium on Security and Privacy</title>
		<meeting>the 2001 IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="130" to="143" />
		</imprint>
	</monogr>
	<note>Proc. of IEEE Symposium on Security and Privacy</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Results of the DARPA 1998 offline intrusion detection evaluation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Lippmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Cunningham</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Fried</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kendall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Webster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Zissman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Adances in Intrusion Detection (RAID)</title>
		<imprint>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">An analysis of the 1999 DARPA/Lincoln Laboratory evaluation data for network anomaly detection</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mahoney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Chan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Adances in Intrusion Detection</title>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="220" to="237" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">K</forename><surname>Maynor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Mookhey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cervini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Beaver</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">Metasploit</forename><surname>Toolkit</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007">2007</date>
			<publisher>Syngress</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Testing intrusion detection systems: a critique of the 1998 and 1999 DARPA intrusion detection system evaluations as performed by Lincoln Laboratory</title>
		<author>
			<persName><forename type="first">J</forename><surname>Mchugh</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="262" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A high-level programming environment for packet trace anonymization and transformation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Conference on Applications, Technologies, Architectures and Protocols for Computer Communications</title>
		<meeting>of Conference on Applications, Technologies, Architectures and Protocols for Computer Communications</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="339" to="351" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">McPAD: A multiple classifier system for accurate payload-based anomaly detection</title>
		<author>
			<persName><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Ariu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Fogla</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Giacinto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="864" to="881" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Using an ensemble of one-class SVM classifiers to harden payload-based anomaly detection systems</title>
		<author>
			<persName><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of International Conference on Data Mining (ICDM)</title>
		<meeting>of International Conference on Data Mining (ICDM)</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="488" to="498" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Classification of packed executables for accurate computer virus detection</title>
		<author>
			<persName><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lanzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pattern Recognition Letters</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="1941" to="1946" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Boosting scalability in malware collection and analysis using statistical classification of executables</title>
		<author>
			<persName><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Lanzi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><surname>Mcboost</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Annual Computer Security Applications Conference (ACSAC)</title>
		<meeting>of Annual Computer Security Applications Conference (ACSAC)</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="301" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">N-gram analysis for computer virus detection</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">K S</forename><surname>Reddy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K</forename><surname>Pujari</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="231" to="239" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Cujo: Efficient detection and prevention of drive-by-download attacks</title>
		<author>
			<persName><forename type="first">K</forename><surname>Rieck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dewald</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Annual Computer Security Applications Conference (ACSAC)</title>
		<meeting>of Annual Computer Security Applications Conference (ACSAC)</meeting>
		<imprint>
			<date type="published" when="2010-12">Dec. 2010</date>
			<biblScope unit="page" from="31" to="39" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Detecting unknown network attacks using language models</title>
		<author>
			<persName><forename type="first">K</forename><surname>Rieck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Laskov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA)</title>
		<meeting>of International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA)</meeting>
		<imprint>
			<date type="published" when="2006-07">July 2006</date>
			<biblScope unit="page" from="74" to="90" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Automatic analysis of malware behavior using machine learning</title>
		<author>
			<persName><forename type="first">K</forename><surname>Rieck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Trinius</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Willems</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer Security (JCS)</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="639" to="668" />
			<date type="published" when="2011-06">June 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Estimating the support of a high-dimensional distribution</title>
		<author>
			<persName><forename type="first">B</forename><surname>Schölkopf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Platt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Shawe-Taylor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Williamson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Computation</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="1443" to="1471" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Learning with Kernels</title>
		<author>
			<persName><forename type="first">B</forename><surname>Schölkopf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smola</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Autonomous learning for detection of javascript attacks: Vision or reality?</title>
		<author>
			<persName><forename type="first">G</forename><surname>Schwenk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bikadorov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Krueger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Rieck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM CCS Workshop on Artificial Intelligence and Security (AISEC)</title>
		<meeting>of ACM CCS Workshop on Artificial Intelligence and Security (AISEC)</meeting>
		<imprint>
			<date type="published" when="2012-10">Oct. 2012</date>
			<biblScope unit="page" from="93" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Kernel Methods for Pattern Analysis</title>
		<author>
			<persName><forename type="first">J</forename><surname>Shawe-Taylor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Cristianini</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Hash kernels for structured data</title>
		<author>
			<persName><forename type="first">Q</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Petterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Dror</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Langford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vishwanathan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research (JMLR)</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="2615" to="2637" />
			<date type="published" when="2009">2009</date>
			<pubPlace>Nov</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Outside the closed world: On using machine learning for network intrusion detection</title>
		<author>
			<persName><forename type="first">R</forename><surname>Sommer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="305" to="316" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">N-gram statistics for natural language understanding and text processing</title>
		<author>
			<persName><forename type="first">C</forename><surname>Suen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="164" to="172" />
			<date type="published" when="1979-04">Apr. 1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Defining the operational limits of stide, an anomaly-based intrusion detector</title>
		<author>
			<persName><forename type="first">K</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Maxion</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="188" to="201" />
		</imprint>
	</monogr>
	<note>Why 6?</note>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Soto</surname></persName>
		</author>
		<title level="m">Proc. of ACM Conference on Computer and Communications Security (CCS)</title>
		<meeting>of ACM Conference on Computer and Communications Security (CCS)</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Anagram: A content anomaly detector resistant to mimicry attack</title>
		<author>
			<persName><forename type="first">K</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Parekh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Stolfo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Adances in Intrusion Detection</title>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="226" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Anomalous payload-based network intrusion detection</title>
		<author>
			<persName><forename type="first">K</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Stolfo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Adances in Intrusion Detection</title>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="203" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Detecting intrusions using system calls: alternative data methods</title>
		<author>
			<persName><forename type="first">C</forename><surname>Warrender</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Forrest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Pearlmutter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="133" to="145" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
