<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">High-Level Area and Power Estimation for VLSI Circuits †</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Mahadevamurty</forename><surname>Nemani</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECE Dept. and Coordinated Science Lab</orgName>
								<orgName type="institution">University of Illinois at Urbana-Champaign Urbana</orgName>
								<address>
									<postCode>61801</postCode>
									<region>Illinois</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Farid</forename><forename type="middle">N</forename><surname>Najm</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECE Dept. and Coordinated Science Lab</orgName>
								<orgName type="institution">University of Illinois at Urbana-Champaign Urbana</orgName>
								<address>
									<postCode>61801</postCode>
									<region>Illinois</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">High-Level Area and Power Estimation for VLSI Circuits †</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">8CB8AC10923F7B44B4E5B2598FCCBDD8</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T06:56+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper addresses the problem of computing the area complexity of a multi-output combinational logic circuit, given only its functional description, i.e., Boolean equations, where area complexity is measured in terms of the number of gates required for an optimal multilevel implementation of the combinational logic. The proposed area model is based on transforming the given multi-output Boolean function description into an equivalent single-output function. The model is empirical, and results demonstrating its feasibility and utility are presented. Also, a methodology for converting the gate count estimates, obtained from the area model, into capacitance estimates is presented. Highlevel power estimates based on the total capacitance estimates and average activity estimates are also presented.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Rapid increase in the design complexity and reduction in design time have resulted in a need for CAD tools that can help make important design decisions early in the design process. To do so, these tools must operate with a design description at a high level of abstraction. One design criterion that has received increased attention lately is power dissipation. This is due to the increasing demand for low power mobile and portable electronics. As a result, there is a need for high level power estimation and optimization. Specifically, it would be highly beneficial to have a power estimation capability, given only a functional view of the design, such as when a circuit is described only with Boolean equations. In this case, no structural information is known -the lower-level (gate-level or lower) description of this function is not available. Of course, a given Boolean function can be implemented in many ways, with varying power dissipation levels. We are interested in predicting the nominal power dissipation that a minimal area implementation of the function would have.</p><p>For a combinational circuit, since the only available information is its Boolean function, we consider that its power dissipation will be modeled as follows:</p><formula xml:id="formula_0">P avg ∝ D avg AC avg (1)</formula><p>where D avg is an estimate of the average node switching activity that a gate-level implementation of this circuit would have, A is an estimate of the gate count (assuming some target gate library), and C avg is an estimate of the average node capacitance (including drain capacitance and interconnect loading capacitance). The estimation of D avg was covered in <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref>.</p><p>The problem of estimating A from a high-level description of the circuit corresponds to the problem of highlevel area estimation. This problem is of independent interest, as the information it provides can be very useful, for instance, during floorplanning. The estimation of gate count (or simply, area) A of single-output Boolean functions was explored in <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref>, where the problem was addressed using a notion of complexity of the on-set and the off-set of a Boolean function. In this paper the authors propose an area model to predict the area complexity of multi-output Boolean functions. This area model is based on a transformation, which transforms the given multi-output Boolean function into an equivalent single-output function. The transformation is such that it helps us infer the area complexity of the multi-output Boolean function from the area complexity of the single-output function, thus enabling the utilization of the complexity based area model of <ref type="bibr" target="#b4">[5]</ref>, developed for single-output functions. However, the proposed area model, like its singleoutput counterparts <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref>, is inherently limited to circuits which do not have large exclusive-or arrays in them. Circuits with large exclusive-or arrays are also the source of problems in other CAD areas, such as BDD construction for verification. One way around the problem of exclusive-or arrays is to require that the Boolean function specification explicitly list exclusiveor gates. In that case, these can be identified up-front and excluded from the analysis, so that the proposed method is applied only to the remaining circuitry. In any case, in the remainder of this paper we will not consider circuits composed of large exclusive-or arrays.</p><p>Before leaving this section, we should mention some previous work on layout area estimation from an RTL view. Wu et. al. <ref type="bibr" target="#b5">[6]</ref> proposed a layout area model for datapath and control for two commonly used layout architectures based on the transistor count. For datapath units, the average transistor count was obtained by averaging the number of transistors over different implementations and, for control logic, they calculate the number of transistors from the sum of products (SOP) expression for the next state and control signals.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IEEE 1997 International Conference on Computer Aided Design</head><p>A similar model was proposed by Kurdahi et.al. <ref type="bibr" target="#b6">[7]</ref>. Both these models consider the effect of interconnect on the overall area, while <ref type="bibr" target="#b6">[7]</ref> considers the effect of cell placement on the overall area. Since the controller area, in <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref>, is estimated based on the number of AND and OR gates required to implement the SOP expression, the optimal number of gates required to implement the function can be much smaller than the above sum. This is because it is frequently possible to apply logic optimization algorithms to give a much better implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The Multi-Output Area Model</head><p>We aim to estimate the minimum number of gates (A) required for a multi-level implementation the function, given only its high level description (Boolean equations) and a target technology library. The area model proposed for single-output Boolean functions <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref> is based on the notion of complexity of the on and off-sets of a Boolean function. One such complexity measure which will be used in this paper is the linear measure, defined in <ref type="bibr" target="#b4">[5]</ref>.</p><p>Our approach to solving the multi-output area estimation problem is inspired by the multi-valued logic approach to address the problem of two-level minimization of multi-output Boolean functions <ref type="bibr" target="#b7">[8]</ref>. The approach is based on transforming a binaryvalued, multi-output Boolean function into an equivalent multi-valued-input, single-output (binary-valued) Boolean function. The transformation is accomplished by adding an m-valued input to the Boolean function. Each value of the multi-valued input corresponds to one of the original m outputs. In our approach we perform a similar transformation, except that we use log 2 (m) binary-valued inputs to implement an mvalued input. An equivalent way of representing the transformation is to think of the additional log 2 (m) binary-valued inputs as control signals of a multiplexor, and that the value of the control word corresponds to the output being selected. This corresponds to multiplexing the m outputs of a m-output Boolean function, as shown if Fig. <ref type="figure" target="#fig_0">1</ref>. The original n input m output function f is thus transformed to a (n + log 2 m ) input, single-output Boolean function f . Since f is a single-output function, its area can be computed by the application of the area model of <ref type="bibr" target="#b4">[5]</ref>.</p><p>It must be noted that since we are applying the area estimation technique to f , which is made up of all the outputs, we are in effect dealing with all the outputs at the same time and thus automatically accounting for the effect of sharing.</p><p>A natural question to ask is, what is the relation between the (optimal) area of f and that of f . To answer this question, consider the following two scenarios. In the first scenario, let all the outputs of the multi-output Boolean function be the same. In this case the area of the multi-output Boolean function is equal to the area of any of its outputs. Also note that the prime implicants of the on and off-sets of f are independent of the control inputs. Hence the complexity measure of f is equal to the complexity measure of any of the outputs of f. Also, as all the outputs of the function are the same, there is no need for the multiplexor. Thus the area contribution of the multiplexor to the overall area of a minimized f is zero. Now consider the second scenario. Here, assume that all the outputs of the multi-output Boolean function have disjoint support sets. It then follows that the optimal area of f is equal to the sum of the optimal area complexity of f and the area complexity of the multiplexor. Thus one has to subtract the area of the multiplexor from the area complexity of f in order to get the area complexity of f. Moreover every prime implicant in the on and off-sets of f contains all the control inputs. In the first scenario, when the contribution of the multiplexor to the area of f was zero, we saw that the control inputs were absent from all the prime implicants, while in the second scenario when the contribution of the multiplexor to the area of f is maximum, we saw that all the control inputs are present in every prime implicant of f . Thus there seems to be a correlation between the influence of the multiplexor on the area of f and the number of control inputs in the prime implicants of f.</p><p>The difference A( f ) -A(f) represents the area contribution of the multiplexor to an optimal area implementation of f . Note that after optimization it might so happen that certain control inputs become redundant for certain outputs. This manifests itself as some control inputs being absent in some prime implicants of on and off-sets of f . Thus, we may think of A( f ) -A(f) as representing the area of a reduced multiplexor resulting from the optimization. This reduced multiplexor area is related to the number of remaining control signals, which leads us to a method for estimating this area, as follows.</p><p>From the above considerations, we propose that an appropriate area model for a multi-output function f, in terms of the area of f and the area of a m to 1 multiplexor is given by</p><formula xml:id="formula_1">A(f) = A( f) -αA mux (2)</formula><p>where A mux is the area complexity of an m to 1 multiplexor, and 0 ≤ α ≤ 1 is a coefficient that represents the contribution of the multiplexor to the area complexity of f . In the following, we present an approach for estimating α.</p><p>Note that the complexity measure <ref type="bibr" target="#b4">[5]</ref> of a m to 1 multiplexor is given by log 2 m + 1, i.e., the complexity of a m to 1 multiplexor is proportional to the number of control inputs. This is true because every prime implicant of a m to 1 multiplexor has a size given by log 2 m + 1. In <ref type="bibr" target="#b4">[5]</ref> it was observed that the area complexity (A mux ) is approximately exponential in the complexity measure. Hence it follows that:</p><formula xml:id="formula_2">A mux ∝ 2 log 2 m (3)</formula><p>Let C i denote the number of control inputs in a prime implicant P i . Then define C on to be the average number of control inputs in a prime implicant belonging to the on-set of f , so that:</p><formula xml:id="formula_3">C on = Kon i=1 C i K on (<label>4</label></formula><formula xml:id="formula_4">)</formula><p>where K on is the number of prime implicants in the on-set of f . Similarly, one can define C off . From the above discussion it follows that C on and C off can be used to measure the area contribution of the multiplexor to an optimal area implementation of f. Notice that the optimal implementation of f will contain a (implicit) reduced multiplexor whose area depends on the smaller of C on and C off . Thus, we can model this area contribution, in a fashion analogous to equation (3), as:</p><formula xml:id="formula_5">A( f ) -A(f) ∝ 2 min{Con,Coff } (5)</formula><p>It then follows from equations (3) and ( <ref type="formula">5</ref>) that:</p><formula xml:id="formula_6">α = 2 min{Con,Coff }-log 2 m (6)</formula><p>It must be noted that α can be computed with minimal effort from the prime implicants of f , and once α is available, A(f) can be computed using (2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">High-Level Area Estimation Flow</head><p>The transformation, as stated in the previous section, does not place any restriction on the number of outputs that can be dealt with at a time (m). However, we have observed that in practice there is a trade-off between run time of the area estimation procedure and m. As the value of m increases we observed that the time taken to generate the prime implicants usually increases. However, using too small a value of m can affect the accuracy by overestimating the area, as the sharing between all outputs is not captured. After experimenting with different values of m, it was found that a reasonable choice for the value of m was 16.</p><p>Typically, a multi-output Boolean function has outputs with varying support set sizes. Outputs whose support set size is very small, for instance 1, 2 or 3, consume very little area. For these outputs very little area optimization can be done. One can make a reliable area prediction for such outputs without having to resort to the above approach. In fact it was found that an area estimate of two gates for outputs whose support set size is two, and an estimate of three gates for outputs with support set size of three, works very well in practice. As far as outputs with support set size of one are concerned, their contribution to an optimal area implementation depends on whether or not they are realized by inversion of a primary input signal. Those which are realized by inversion are assumed to contribute an area of one gate while the rest are assumed not to contribute to the area. The above approach yields benefits in terms of both run time and accuracy, and has been adopted in our area estimation procedure. The flow diagram for the overall area estimation procedure is given in Fig. <ref type="figure" target="#fig_1">2</ref>. The area estimation tool reads an input description of f and partitions the function into two subfunctions. One sub-function (f 1 ) comprises of all outputs whose support set size is less than or equal to three, while the other (f 2 ), comprises of all outputs whose support set size is greater than three. The partitioning of the network into f 1 and f 2 can be performed by a breadth first search and is fairly inexpensive. We estimate the area of f 1 in the following fashion:</p><formula xml:id="formula_7">A(f 1 ) = β|f 1 1 | + 2|f 2 1 | + 3|f 3 1 | (7)</formula><p>Here, |f 1 1 | is the number of outputs in f 1 with support set size equal to 1, β is a fraction of these outputs which are realized by inversion of a primary input signal, |f 2  1 | is the number of outputs in f 1 with support set size equal to 2, and |f 3  1 | is the number of outputs in f 1 with support set size equal to 3. For estimating the area of f 2 we use the transformation based approach described above. Let the outputs of f 2 be grouped into I groups of size sixteen each. Let the Boolean function comprising of the ith group of outputs be g i . We apply the multiplexor transformation to g i , and compute α, probability and the linear measure of the resultant ĝi . We then compute the area complexity of g i using ( <ref type="formula">2</ref>) and ( <ref type="formula">6</ref>). This procedure is repeated until all the outputs have been used up, and the area of f 2 is estimated as:</p><formula xml:id="formula_8">A(f 2 ) = I i=1 A(g i )<label>( 8 )</label></formula><p>Finally, the area of f is computed as:</p><formula xml:id="formula_9">A(f) = A(f 1 ) + A(f 2 ) ( 9 )</formula><p>It must be noted that the proposed area model does not account for area sharing across groups. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Empirical Results</head><p>The above proposed area model for multi-output functions was tested on several ISCAS-89 and MCNC benchmark circuits. These circuits are listed in Table <ref type="table" target="#tab_0">1</ref> which, in addition to primary input and output counts, shows the functionality of these benchmarks. These circuits were optimized in SIS using rugged.script for optimization, and mapped using the library lib2.genlib. The area predicted using the area model was compared with the SIS optimal area.</p><p>The performance of the model on all the benchmarks in Table <ref type="table" target="#tab_0">1</ref>, except s13207 * and s35932, is shown in Fig. <ref type="figure" target="#fig_2">3</ref>. Circuit s13207 * is a modified version of s13207, obtained by deleting the primary outputs which contain exclusive-or arrays in them. The SISoptimal area of s13207 * was 1367. The estimated area for this circuit was 1045. The circuit s35932 could not be optimized in SIS in one piece. Hence the circuit was partitioned based on the support set sizes (in a fashion similar to the above discussion) and optimized separately in SIS. The resulting SIS-area that was obtained was 7252. The area estimated by the area estimation tool was 8761. The execution time required by our area estimation tool is also given in Table <ref type="table" target="#tab_0">1</ref>, in cpu seconds on a SUN sparc5 with 24 MB RAM. We compared these run times, on the above benchmarks, with one run of SIS using script.rugged followed by SIS technology mapping. The speedup obtained is shown in Fig. <ref type="figure" target="#fig_3">4</ref>. The figure shows a speedup between 2x and 24x. Notice that a speedup of 10x was obtained on large benchmarks like s35932 and s13207 * . It must be kept in mind that the reported SIS time for s35932 was obtained after the circuit was partitioned. Strictly speaking the circuit was not completed in SIS. Hence we believe that on large benchmarks the speedups that can be obtained in practice can be significant. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Estimation of C avg</head><p>In order to estimate the power, one needs to estimate not only the area complexity but also C avg , which is the average node capacitance (including interconnect) in a circuit. If C tot is the total circuit capacitance of an optimal area implementation and A is the number of gates, then:</p><formula xml:id="formula_10">C avg = C tot A (<label>10</label></formula><formula xml:id="formula_11">)</formula><p>This quantity depends on the target gate library and on the fan-out structure of the circuit. In order to estimate this, it is assumed that one has access to a few area optimal circuit implementations in the desired target library. This does not appear to be an unreasonable assumption. In this case, an estimate of C avg can be obtained by performing an average of the C avg estimates obtained from the area optimal circuit implementations.</p><p>In order to test the accuracy of this approach, only a few benchmarks from the benchmark set listed in Table <ref type="table" target="#tab_0">1</ref> were used to obtain an estimate of C avg . These benchmarks were s13207 * , s35932, k2 and i8. This estimated value of C avg was used to compute C tot , assuming that the exact value of A was available. The estimated value of C tot was compared with the true value of C tot , and the results are shown in Fig. <ref type="figure" target="#fig_4">5</ref>, which validates the above estimation procedure for C avg .</p><p>The estimated value of C avg was combined with the estimated area complexity of Boolean functions to obtain an estimate of the total capacitance of the Boolean function, C tot . The plot comparing the actual versus predicted values of C tot , when both A and C avg are estimated, is shown in Fig. <ref type="figure" target="#fig_5">6</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">High-Level Power Estimation</head><p>The area estimate can be used to estimate the power dissipated by a Boolean function, by combining it with average activity estimates <ref type="bibr" target="#b2">[3]</ref> and the average node capacitance estimate. We will compare our power estimates to the power dissipated by a gate level optimal area implementation of the Boolean function under two different timing models, namely, the zero-delay model and the general-delay timing model <ref type="bibr" target="#b2">[3]</ref>. In the case of the general-delay timing model the delays were obtained from a gate library and an event driven simulation was performed. It must be noted that the activity prediction model <ref type="bibr" target="#b2">[3]</ref> does not account for the increase in switching activity due to glitches, as is probably to be expected from a high-level model. Hence it is important to check the accuracy of the high-level power model against the zero-delay simulation results. This is shown in Fig. <ref type="figure" target="#fig_7">7</ref>. Since the activity prediction model <ref type="bibr" target="#b2">[3]</ref> depends on the input switching statistics of the circuit, we varied the signal probabilities at the circuit inputs from 0.1 to 0.9. Thus, each benchmark circuit is represented by a number of data points in the figure.  For the benchmarks vda and k2, the predicted power is significantly different from the actual zerodelay power inspite of the fact that the predicted total capacitance is very close to the true value of total capacitance. This is because of an over-estimation in the average activity of the circuit. The correlation plot between predicted and actual zero-delay power obtained after removal of the power estimates corresponding to these two circuits is shown in Fig. <ref type="figure" target="#fig_9">8</ref>. The better agreement in this plot shows that indeed for all but two of the benchmarks considered, the method works rather well. These two circuits are responsible for most of the bad points in Fig. <ref type="figure" target="#fig_7">7</ref>.  We also compared the predicted power against the general-delay simulation results. This is shown in Fig. <ref type="figure" target="#fig_10">9</ref>. As is to be expected, the error in the prediction increases. This is due to the possible presence, in the general-delay case, of multiple transitions per cycle at a logic node, i.e., glitches. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions</head><p>In this paper we presented a new area model to predict the area complexity of multi-output Boolean functions. This was based on transforming the multioutput function at hand to an equivalent single-output function. The advantages of this model is that no additional characterization in necessary beyond that done for single-output functions. Moreover it offers a natural framework to account for sharing occurring in a multi-output function. The predicted capacitance was then combined with average activity estimates <ref type="bibr" target="#b2">[3]</ref> to get high level power estimates.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Transformation of a m output Boolean function into a single output Boolean function.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Flow of the Area estimation Procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Actual Area versus Predicted Area.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Speed up versus Number of Cases.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Error between actual and estimated values of Ctot assuming A is known.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 .</head><label>6</label><figDesc>Figure 6. Actual versus Estimated values of Ctot versus Number of Cases.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. Comparison between actual zerodelay power and predicted power.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Comparison between actual zerodelay power and predicted power after deletion of points corresponding to vda and k2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. Comparison between actual general-delay power and predicted power.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Characteristics and run-times for the benchmark function set</figDesc><table><row><cell cols="5">CIRCUIT Circuit Inputs Outputs CPU Time</cell></row><row><cell>Name</cell><cell>Function</cell><cell></cell><cell></cell><cell>sec</cell></row><row><cell>b9</cell><cell>Logic</cell><cell>41</cell><cell>21</cell><cell>5.7</cell></row><row><cell>c8</cell><cell>Logic</cell><cell>28</cell><cell>18</cell><cell>4.9</cell></row><row><cell>example2</cell><cell>Logic</cell><cell>85</cell><cell>66</cell><cell>28</cell></row><row><cell>frg2</cell><cell>Logic</cell><cell>143</cell><cell>139</cell><cell>268</cell></row><row><cell>i7</cell><cell>Logic</cell><cell>199</cell><cell>67</cell><cell>23.1</cell></row><row><cell>i8</cell><cell>Logic</cell><cell>133</cell><cell>81</cell><cell>81.5</cell></row><row><cell>i6</cell><cell>Logic</cell><cell>138</cell><cell>67</cell><cell>17.5</cell></row><row><cell>cht</cell><cell>Logic</cell><cell>47</cell><cell>36</cell><cell>6.5</cell></row><row><cell>alu2</cell><cell>ALU</cell><cell>10</cell><cell>6</cell><cell>12.8</cell></row><row><cell>alu4</cell><cell>ALU</cell><cell>14</cell><cell>8</cell><cell>104</cell></row><row><cell>term1</cell><cell>Logic</cell><cell>34</cell><cell>10</cell><cell>17.4</cell></row><row><cell>ttt2</cell><cell>Logic</cell><cell>24</cell><cell>21</cell><cell>6.25</cell></row><row><cell>apex6</cell><cell>Logic</cell><cell>135</cell><cell>99</cell><cell>45.3</cell></row><row><cell>apex7</cell><cell>Logic</cell><cell>49</cell><cell>37</cell><cell>20.3</cell></row><row><cell>x1</cell><cell>Logic</cell><cell>51</cell><cell>35</cell><cell>12.8</cell></row><row><cell>x3</cell><cell>Logic</cell><cell>135</cell><cell>99</cell><cell>53</cell></row><row><cell>x4</cell><cell>Logic</cell><cell>94</cell><cell>71</cell><cell>28.6</cell></row><row><cell>vda</cell><cell>Logic</cell><cell>17</cell><cell>39</cell><cell>39.3</cell></row><row><cell>k2</cell><cell>Logic</cell><cell>45</cell><cell>45</cell><cell>170.1</cell></row><row><cell>s298</cell><cell>Controller</cell><cell>17</cell><cell>20</cell><cell>4.4</cell></row><row><cell>s386</cell><cell>Controller</cell><cell>13</cell><cell>13</cell><cell>4.2</cell></row><row><cell>s400</cell><cell>Controller</cell><cell>24</cell><cell>27</cell><cell>8.5</cell></row><row><cell>s444</cell><cell>Controller</cell><cell>24</cell><cell>27</cell><cell>8.5</cell></row><row><cell>s510</cell><cell>Controller</cell><cell>25</cell><cell>13</cell><cell>6.9</cell></row><row><cell>s526</cell><cell>Controller</cell><cell>24</cell><cell>27</cell><cell>10.4</cell></row><row><cell>s526n</cell><cell>Controller</cell><cell>24</cell><cell>27</cell><cell>10</cell></row><row><cell>s641</cell><cell>Controller</cell><cell>59</cell><cell>43</cell><cell>41.4</cell></row><row><cell>s713</cell><cell>Controller</cell><cell>58</cell><cell>42</cell><cell>42.3</cell></row><row><cell>s820</cell><cell>Controller</cell><cell>37</cell><cell>24</cell><cell>16.3</cell></row><row><cell>s832</cell><cell>Controller</cell><cell>37</cell><cell>24</cell><cell>16.5</cell></row><row><cell>s953</cell><cell>Controller</cell><cell>39</cell><cell>52</cell><cell>38.8</cell></row><row><cell>s1196</cell><cell>Logic</cell><cell>28</cell><cell>32</cell><cell>163</cell></row><row><cell>s1238</cell><cell>Logic</cell><cell>28</cell><cell>32</cell><cell>141</cell></row><row><cell>s1494</cell><cell>Controller</cell><cell>27</cell><cell>25</cell><cell>26.8</cell></row><row><cell>s1488</cell><cell>Controller</cell><cell>27</cell><cell>25</cell><cell>29.3</cell></row><row><cell>s13207</cell><cell>Logic</cell><cell>152</cell><cell>783</cell><cell>212.8</cell></row><row><cell>s35932</cell><cell>Logic</cell><cell>1763</cell><cell>1728</cell><cell>942.4</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>† This work was supported in part by Intel Corp., by Rockwell, and by an NSF CAREER Award (MIP-9623237).</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Towards a High-Level Power Estimation Capability</title>
		<author>
			<persName><forename type="first">F</forename><surname>Najm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM/IEEE International Symposium on Low-Power Design</title>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="87" to="92" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Information theoretic measures of energy consumption at register transfer level</title>
		<author>
			<persName><forename type="first">D</forename><surname>Marculescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Marculescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Pedram</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium of Low Power Design</title>
		<imprint>
			<date type="published" when="1995">1995</date>
			<biblScope unit="page" from="81" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Towards a high-level power estimation capability</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nemani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Najm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Computer Aided Design</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="588" to="589" />
			<date type="published" when="1996-06">June 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">High-level power estimation and the area complexity of Boolean functions</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nemani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Najm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium of Low Power Electronics and Design</title>
		<imprint>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="329" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">High-Level Area Prediction for Power Estimation</title>
		<author>
			<persName><forename type="first">M</forename><surname>Nemani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Najm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Custom Integrated Circuits Conference</title>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Layout area models for high level synthesis</title>
		<author>
			<persName><forename type="first">A</forename></persName>
		</author>
		<author>
			<persName><forename type="first">C-H</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Chaiyakul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Gajski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Computer Aided Design</title>
		<imprint>
			<date type="published" when="1991">1991</date>
			<biblScope unit="page" from="34" to="37" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Linking register transfer and physical levels of design</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">J</forename><surname>Kurdahi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">D</forename><surname>Gajski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Ramachandran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Chaiyakul</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEICE Transactions on Information and Systems</title>
		<imprint>
			<date type="published" when="1993-09">September 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Synthesis and Optimization of Digital Circuits</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">De</forename><surname>Micheli</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994">1994</date>
			<publisher>McGraw-Hill Inc</publisher>
			<pubPlace>New York, NY</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
