<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Sergey</forename><surname>Ioffe</surname></persName>
							<email>sioffe@google.com</email>
							<affiliation key="aff0">
								<address>
									<addrLine>1600 Amphitheatre Pkwy</addrLine>
									<postCode>94043</postCode>
									<settlement>Google, Mountain View</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2022-12-25T13:56+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Training Deep Neural Networks is complicated by the fact that the distribution of each layer's inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs. Our method draws its strength from making normalization a part of the model architecture and performing the normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and be less careful about initialization, and in some cases eliminates the need for Dropout. Applied to a stateof-the-art image classification model, Batch Normalization achieves the same accuracy with 14 times fewer training steps, and beats the original model by a significant margin. Using an ensemble of batch-normalized networks, we improve upon the best published result on ImageNet classification: reaching 4.82% top-5 test error, exceeding the accuracy of human raters.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Deep learning has dramatically advanced the state of the art in vision, speech, and many other areas. Stochastic gradient descent (SGD) has proved to be an effective way of training deep networks, and SGD variants such as momentum <ref type="bibr" target="#b19">(Sutskever et al., 2013)</ref> and Adagrad <ref type="bibr" target="#b3">(Duchi et al., 2011)</ref> have been used to achieve state of the art performance. SGD optimizes the parameters Θ of the network, so as to Proceedings of the 32 nd International Conference on Machine Learning, Lille, France, 2015. JMLR: W&amp;CP volume 37. Copyright 2015 by the author(s). minimize the loss</p><formula xml:id="formula_0">Θ = arg min Θ 1 N N i=1 (x i , Θ)</formula><p>where x 1...N is the training data set. With SGD, the training proceeds in steps, at each step considering a minibatch x 1...m of size m. Using mini-batches of examples, as opposed to one example at a time, is helpful in several ways. First, the gradient of the loss over a mini-batch</p><formula xml:id="formula_1">1 m m i=1 ∂ (xi,Θ)</formula><p>∂Θ is an estimate of the gradient over the training set, whose quality improves as the batch size increases. Second, computation over a mini-batch can be more efficient than m computations for individual examples on modern computing platforms.</p><p>While stochastic gradient is simple and effective, it requires careful tuning of the model hyper-parameters, specifically the learning rate and the initial parameter values. The training is complicated by the fact that the inputs to each layer are affected by the parameters of all preceding layers -so that small changes to the network parameters amplify as the network becomes deeper.</p><p>The change in the distributions of layers' inputs presents a problem because the layers need to continuously adapt to the new distribution. When the input distribution to a learning system changes, it is said to experience covariate shift <ref type="bibr" target="#b17">(Shimodaira, 2000)</ref>. This is typically handled via domain adaptation <ref type="bibr" target="#b7">(Jiang, 2008)</ref>. However, the notion of covariate shift can be extended beyond the learning system as a whole, to apply to its parts, such as a sub-network or a layer. Consider a network computing</p><formula xml:id="formula_2">= F 2 (F 1 (u, Θ 1 ), Θ 2 )</formula><p>where F 1 and F 2 are arbitrary transformations, and the parameters Θ 1 , Θ 2 are to be learned so as to minimize the loss . Learning Θ 2 can be viewed as if the inputs x = F 1 (u, Θ 1 ) are fed into the sub-network = F 2 (x, Θ 2 ).</p><p>For example, a gradient descent step</p><formula xml:id="formula_3">Θ 2 ← Θ 2 − α m m i=1 ∂F 2 (x i , Θ 2 ) ∂Θ 2</formula><p>(for mini-batch size m and learning rate α) is exactly equivalent to that for a stand-alone network F 2 with input x. Therefore, the input distribution properties that aid the network generalization -such as having the same distribution between the training and test data -apply to training the sub-network as well. As such it is advantageous for the distribution of x to remain fixed over time. Then, Θ 2 does not have to readjust to compensate for the change in the distribution of x.</p><p>Fixed distribution of inputs to a sub-network would have positive consequences for the layers outside the subnetwork, as well. Consider a layer with a sigmoid activation function z = g(W u + b) where u is the layer input, the weight matrix W and bias vector b are the layer parameters to be learned, and g(x) = 1 1+exp(−x) . As |x| increases, g (x) tends to zero. This means that for all dimensions of x = W u + b except those with small absolute values, the gradient flowing down to u will vanish and the model will train slowly. However, since x is affected by W, b and the parameters of all the layers below, changes to those parameters during training will likely move many dimensions of x into the saturated regime of the nonlinearity and slow down the convergence. This effect is amplified as the network depth increases. In practice, the saturation problem and the resulting vanishing gradients are usually addressed by using Rectified Linear Units <ref type="bibr" target="#b11">(Nair &amp; Hinton, 2010)</ref> ReLU (x) = max(x, 0), careful initialization <ref type="bibr" target="#b0">(Bengio &amp; Glorot, 2010;</ref><ref type="bibr" target="#b16">Saxe et al., 2013)</ref>, and small learning rates. If, however, we could ensure that the distribution of nonlinearity inputs remains more stable as the network trains, then the optimizer would be less likely to get stuck in the saturated regime, and the training would accelerate.</p><p>We refer to the change in the distributions of internal nodes of a deep network, in the course of training, as Internal Covariate Shift. Eliminating it offers a promise of faster training. We propose a new mechanism, which we call Batch Normalization, that takes a step towards reducing internal covariate shift, and in doing so dramatically accelerates the training of deep neural nets. It accomplishes this via a normalization step that fixes the means and variances of layer inputs. Batch Normalization also has a beneficial effect on the gradient flow through the network, by reducing the dependence of gradients on the scale of the parameters or of their initial values. This allows us to use much higher learning rates without the risk of divergence. Furthermore, batch normalization regularizes the model and reduces the need for Dropout <ref type="bibr" target="#b18">(Srivastava et al., 2014)</ref>. Finally, Batch Normalization makes it possible to use saturating nonlin-earities by preventing the network from getting stuck in the saturated modes.</p><p>In Sec. 4.2, we apply Batch Normalization to the bestperforming ImageNet classification network, and show that we can match its performance using only 7% of the training steps, and can further exceed its accuracy by a substantial margin. Using an ensemble of such networks trained with Batch Normalization, we achieve the top-5 error rate that improves upon the best known results on ImageNet classification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Towards Reducing Internal Covariate Shift</head><p>We define Internal Covariate Shift as the change in the distribution of network activations due to the change in network parameters during training. To improve the training, we seek to reduce the internal covariate shift. By fixing the distribution of the layer inputs x as the training progresses, we expect to improve the training speed. It has been long known <ref type="bibr" target="#b9">(LeCun et al., 1998b;</ref><ref type="bibr" target="#b21">Wiesler &amp; Ney, 2011)</ref> that the network training converges faster if its inputs are whitened -i.e., linearly transformed to have zero means and unit variances, and decorrelated. As each layer observes the inputs produced by the layers below, it would be advantageous to achieve the same whitening of the inputs of each layer. By whitening the inputs to each layer, we would take a step towards achieving the fixed distributions of inputs that would remove the ill effects of the internal covariate shift.</p><p>We could consider whitening activations at every training step or at some interval, either by modifying the network directly or by changing the parameters of the optimization algorithm to depend on the network activation values <ref type="bibr" target="#b22">(Wiesler et al., 2014;</ref><ref type="bibr" target="#b14">Raiko et al., 2012;</ref><ref type="bibr" target="#b13">Povey et al., 2014;</ref><ref type="bibr" target="#b2">Desjardins &amp; Kavukcuoglu)</ref>. However, if these modifications are interspersed with the optimization steps, then the gradient descent step may attempt to update the parameters in a way that requires the normalization to be updated, which reduces the effect of the gradient step. For example, consider a layer with the input u that adds the learned bias b, and normalizes the result by subtracting the mean of the activation computed over the training data: will grow indefinitely while the loss remains fixed. This problem can get worse if the normalization not only centers but also scales the activations. We have observed this empirically in initial experiments, where the model blows up when the normalization parameters are computed outside the gradient descent step.</p><formula xml:id="formula_4">x = x − E[x] where x = u + b, X = {x 1...N } is</formula><p>The issue with the above approach is that the gradient descent optimization does not take into account the fact that the normalization takes place. To address this issue, we would like to ensure that, for any parameter values, the network always produces activations with the desired distribution. Doing so would allow the gradient of the loss with respect to the model parameters to account for the normalization, and for its dependence on the model parameters Θ. Let again x be a layer input, treated as a vector, and X be the set of these inputs over the training data set. The normalization can then be written as a transformation x = Norm(x, X ) which depends not only on the given training example x but on all examples X -each of which depends on Θ if x is generated by another layer. For backpropagation, we would need to compute the Jacobians ∂Norm(x,X ) ∂x and ∂Norm(x,X ) ∂X</p><p>; ignoring the latter term would lead to the explosion described above. Within this framework, whitening the layer inputs is expensive, as it requires computing the covariance matrix Cov</p><formula xml:id="formula_5">[x] = E x∈X [xx T ] − E[x]E[x] T</formula><p>and its inverse square root, to produce the whitened activations Cov</p><formula xml:id="formula_6">[x] −1/2 (x − E[x]</formula><p>), as well as the derivatives of these transforms for backpropagation. This motivates us to seek an alternative that performs input normalization in a way that is differentiable and does not require the analysis of the entire training set after every parameter update. Some of the previous approaches (e.g. <ref type="bibr" target="#b10">(Lyu &amp; Simoncelli, 2008)</ref>) use statistics computed over a single training example, or, in the case of image networks, over different feature maps at a given location. However, this changes the representation ability of a network by discarding the absolute scale of activations. We want to a preserve the information in the network, by normalizing the activations in a training example relative to the statistics of the entire training data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Normalization via Mini-Batch Statistics</head><p>Since the full whitening of each layer's inputs is costly, we make two necessary simplifications. The first is that instead of whitening the features in layer inputs and outputs jointly, we will normalize each scalar feature independently, by making it have zero mean and unit variance. For a layer with d-dimensional input x = (x (1) . . . x (d) ), we will normalize each dimension</p><formula xml:id="formula_7">x (k) = x (k) − E[x (k) ] Var[x (k) ]</formula><p>where the expectation and variance are computed over the training data set. As shown in <ref type="bibr" target="#b9">(LeCun et al., 1998b)</ref>, such normalization speeds up convergence, even when the features are not decorrelated.</p><p>Note that simply normalizing each input of a layer may change what the layer can represent. For instance, normalizing the inputs of a sigmoid would constrain them to the linear regime of the nonlinearity. To address this, we make sure that the transformation inserted in the network can represent the identity transform. To accomplish this, we introduce, for each activation x (k) , a pair of parameters γ (k) , β (k) , which scale and shift the normalized value:</p><formula xml:id="formula_8">y (k) = γ (k) x (k) + β (k) .</formula><p>These parameters are learned along with the original model parameters, and restore the representation power of the network. Indeed, by setting</p><formula xml:id="formula_9">γ (k) = Var[x (k) ] and β (k) = E[x (k) ],</formula><p>we could recover the original activations, if that were the optimal thing to do.</p><p>In the batch setting where each training step is based on the entire training set, we would use the whole set to normalize activations. However, this is impractical when using stochastic optimization. Therefore, we make the second simplification: since we use mini-batches in stochastic gradient training, each mini-batch produces estimates of the mean and variance of each activation. This way, the statistics used for normalization can fully participate in the gradient backpropagation. Note that the use of minibatches is enabled by computation of per-dimension variances rather than joint covariances; in the joint case, regularization would be required since the mini-batch size is likely to be smaller than the number of activations being whitened, resulting in singular covariance matrices.</p><p>Consider a mini-batch B of size m. Since the normalization is applied to each activation independently, let us focus on a particular activation x (k) and omit k for clarity. We have m values of this activation in the mini-batch,</p><formula xml:id="formula_10">B = {x 1...m }.</formula><p>Let the normalized values be x 1...m , and their linear transformations be y 1...m . We refer to the transform</p><formula xml:id="formula_11">BN γ,β : x 1...m → y 1...m</formula><p>as the Batch Normalizing Transform. We present the BN Transform in Algorithm 1. In the algorithm, is a constant added to the mini-batch variance for numerical stability.</p><p>The BN transform can be added to a network to manipulate any activation. In the notation y = BN γ,β (x), we indicate that the parameters γ and β are to be learned, but it should be noted that the BN transform does not independently process the activation in each training example. </p><formula xml:id="formula_12">{y i = BN γ,β (x i )} µ B ← 1 m m i=1</formula><p>x i // mini-batch mean</p><formula xml:id="formula_13">σ 2 B ← 1 m m i=1 (x i − µ B ) 2 // mini-batch variance x i ← x i − µ B σ 2 B + // normalize y i ← γ x i + β ≡ BN γ,β (x i ) //</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>scale and shift</head><p>Algorithm 1: Batch Normalizing Transform, applied to activation x over a mini-batch.</p><p>shifted values y are passed to other network layers. The normalized activations x are internal to our transformation, but their presence is crucial. The distributions of values of any x has the expected value of 0 and the variance of 1, as long as the elements of each mini-batch are sampled from the same distribution, and if we neglect . This can be seen by observing that m i=1 x i = 0 and 1 m m i=1 x 2 i = 1, and taking expectations. Each normalized activation x (k) can be viewed as an input to a sub-network composed of the linear transform y (k) = γ (k) x (k) + β (k) , followed by the other processing done by the original network. These sub-network inputs all have fixed means and variances, and although the joint distribution of these normalized x (k) can change over the course of training, we expect that the introduction of normalized inputs accelerates the training of the sub-network and, consequently, the network as a whole.</p><p>During training we need to backpropagate the gradient of loss through this transformation, as well as compute the gradients with respect to the parameters of the BN transform. We use chain rule, as follows:</p><formula xml:id="formula_14">∂ ∂ xi = ∂ ∂yi • γ ∂ ∂σ 2 B = m i=1 ∂ ∂ xi • (x i − µ B ) • −1 2 (σ 2 B + ) −3/2 ∂ ∂µ B = m i=1 ∂ ∂ xi • −1 √ σ 2 B + ∂ ∂xi = ∂ ∂ xi • 1 √ σ 2 B + + ∂ ∂σ 2 B • 2(xi−µ B ) m + ∂ ∂µ B • 1 m ∂ ∂γ = m i=1 ∂ ∂yi • x i ∂ ∂β = m i=1 ∂ ∂yi</formula><p>Thus, BN transform is a differentiable transformation that introduces normalized activations into the network. This ensures that as the model is training, layers can continue learning on input distributions that exhibit less internal covariate shift, thus accelerating the training. Furthermore, the learned affine transform applied to these normalized activations allows the BN transform to represent the identity transformation and preserves the network capacity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Training and Inference with Batch-Normalized Networks</head><p>To Batch-Normalize a network, we specify a subset of activations and insert the BN transform for each of them, according to Alg. 1. Any layer that previously received x as the input, now receives BN(x). A model employing Batch Normalization can be trained using batch gradient descent, or Stochastic Gradient Descent with a mini-batch size m &gt; 1, or with any of its variants such as Adagrad <ref type="bibr" target="#b3">(Duchi et al., 2011)</ref>. The normalization of activations that depends on the mini-batch allows efficient training, but is neither necessary nor desirable during inference; we want the output to depend only on the input, deterministically. For this, once the network has been trained, we use the normalization</p><formula xml:id="formula_15">x = x − E[x]</formula><p>Var[x] + using the population, rather than mini-batch, statistics. Neglecting , these normalized activations have the same mean 0 and variance 1 as during training. We use the unbiased variance estimate Var</p><formula xml:id="formula_16">[x] = m m−1 • E B [σ 2 B ]</formula><p>, where the expectation is over training mini-batches of size m and σ 2 B are their sample variances. Using moving averages instead, we can track the accuracy of a model as it trains. Since the means and variances are fixed during inference, the normalization is simply a linear transform applied to each activation. It may further be composed with the scaling by γ and shift by β, to yield a single linear transform that replaces BN(x). Algorithm 2 summarizes the procedure for training batch-normalized networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Batch-Normalized Convolutional Networks</head><p>Batch Normalization can be applied to any set of activations in the network. Here, we focus on transforms that consist of an affine transformation followed by an elementwise nonlinearity:</p><formula xml:id="formula_17">z = g(W u + b)</formula><p>where W and b are learned parameters of the model, and g(•) is the nonlinearity such as sigmoid or ReLU. This formulation covers both fully-connected and convolutional layers. We add the BN transform immediately before the nonlinearity, by normalizing x = W u + b. We could have also normalized the layer inputs u, but since u is likely the output of another nonlinearity, the shape of its distribution is likely to change during training, and constraining its first and second moments would not eliminate the covariate shift. In contrast, W u + b is more likely to have a symmetric, non-sparse distribution, that is "more Gaus-</p><formula xml:id="formula_18">Input: Network N with trainable parameters Θ; subset of activations {x (k) } K k=1 Output: Batch-normalized network for inference, N inf BN 1: N tr BN ← N // Training BN network 2: for k = 1 . . . K do 3: Add transformation y (k) = BN γ (k) ,β (k) (x (k) ) to N tr BN (Alg. 1) 4:</formula><p>Modify each layer in N tr BN with input x (k) to take y (k)  </p><formula xml:id="formula_19">[x] ← E B [µ B ] Var[x] ← m m−1 E B [σ 2 B ]</formula><p>11:</p><p>In</p><formula xml:id="formula_20">N inf BN , replace the transform y = BN γ,β (x) with y = γ √ Var[x]+ • x + β − γ E[x] √ Var[x]+</formula><p>12: end for Algorithm 2: Training a Batch-Normalized Network sian" <ref type="bibr" target="#b6">(Hyvärinen &amp; Oja, 2000)</ref>; normalizing it is likely to produce activations with a stable distribution.</p><p>Note that, since we normalize W u + b, the bias b can be ignored since its effect will be canceled by the subsequent mean subtraction (the role of the bias is subsumed by β in Alg. 1). Thus, z = g(W u + b) is replaced with</p><formula xml:id="formula_21">z = g(BN(W u))</formula><p>where the BN transform is applied independently to each dimension of x = W u, with a separate pair of learned parameters γ (k) , β (k) per dimension.</p><p>For convolutional layers, we additionally want the normalization to obey the convolutional property -so that different elements of the same feature map, at different locations, are normalized in the same way. To achieve this, we jointly normalize all the activations in a mini-batch, over all locations. In Alg. 1, we let B be the set of all values in a feature map across both the elements of a mini-batch and spatial locations -so for a mini-batch of size m and feature maps of size p × q, we use the effective mini-batch of size m = |B| = m • p q. We learn a pair of parameters γ (k) and β (k) per feature map, rather than per activation. Alg. 2 is modified similarly, so that during inference the BN transform applies the same linear transformation to each activation in a given feature map.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Batch Normalization enables higher learning rates</head><p>In traditional deep networks, too high a learning rate may result in the gradients that explode or vanish, as well as getting stuck in poor local minima. Batch Normalization helps address these issues. By normalizing activations throughout the network, it prevents small changes in layer parameters from amplifying as the data propagates through a deep network. For example, this enables the sigmoid nonlinearities to more easily stay in their non-saturated regimes, which is crucial for training deep sigmoid networks but has traditionally been hard to accomplish.</p><p>Batch Normalization also makes training more resilient to the parameter scale. Normally, large learning rates may increase the scale of layer parameters, which then amplify the gradient during backpropagation and lead to the model explosion. However, with Batch Normalization, backpropagation through a layer is unaffected by the scale of its parameters. Indeed, for a scalar a,</p><formula xml:id="formula_22">BN(W u) = BN((aW )u)</formula><p>and thus ∂BN((aW )u) ∂u = ∂BN(W u) ∂u , so the scale does not affect the layer Jacobian nor, consequently, the gradient propagation. Moreover, ∂BN((aW )u)</p><formula xml:id="formula_23">∂(aW ) = 1 a • ∂BN(W u)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>∂W</head><p>, so larger weights lead to smaller gradients, and Batch Normalization will stabilize the parameter growth.</p><p>We further conjecture that Batch Normalization may lead the layer Jacobians to have singular values close to 1, which is known to be beneficial for training <ref type="bibr" target="#b16">(Saxe et al., 2013)</ref>. Consider two consecutive layers with normalized inputs, and the transformation between these normalized vectors: z = F ( x). If we assume that x and z are Gaussian and uncorrelated, and that F ( x) ≈ J x is a linear transformation for the given model parameters, then both x and z have unit covariances, and I = Cov[ z] = JCov[ x]J T = JJ T . Thus, J is orthogonal, which preserves the gradient magnitudes during backpropagation. Although the above assumptions are not true in reality, we expect Batch Normalization to help make gradient propagation better behaved. This remains an area of further study.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Experiments</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Activations over time</head><p>To verify the effects of internal covariate shift on training, and the ability of Batch Normalization to combat it, we considered the problem of predicting the digit class on the MNIST dataset <ref type="bibr" target="#b8">(LeCun et al., 1998a)</ref>. We used a very simple network, with a 28x28 binary image as input, and 3 fully-connected hidden layers with 100 activations each. Each hidden layer computes y = g(W u + b) with sigmoid nonlinearity, and the weights W initialized to small random Gaussian values. The last hidden layer is followed by a fully-connected layer with 10 activations (one per class) and cross-entropy loss. We trained the network for 50000 steps, with 60 examples per mini-batch. We added Batch Normalization to each hidden layer of the network, as in Sec. 3.1. We were interested in the comparison between the baseline and batch-normalized networks, rather than achieving the state of the art performance on MNIST (which the described architecture does not).</p><p>Figure <ref type="figure" target="#fig_3">1</ref>(a) shows the fraction of correct predictions by the two networks on held-out test data, as training progresses.</p><p>The batch-normalized network enjoys the higher test accuracy. To investigate why, we studied inputs to the sigmoid, in the original network N and batch-normalized network N tr BN (Alg. 2) over the course of training. In Fig. <ref type="figure" target="#fig_3">1(b,c</ref>) we show, for one typical activation from the last hidden layer of each network, how its distribution evolves. The distributions in the original network change significantly over time, both in their mean and the variance, which complicates the training of the subsequent layers. In contrast, the distributions in the batch-normalized network are much more stable as training progresses, which aids the training.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">ImageNet classification</head><p>We applied Batch Normalization to a new variant of the Inception network <ref type="bibr" target="#b20">(Szegedy et al., 2014)</ref>, trained on the Im-ageNet classification task <ref type="bibr" target="#b15">(Russakovsky et al., 2014)</ref>. The network has a large number of convolutional and pooling layers, with a softmax layer to predict the image class, out of 1000 possibilities. Convolutional layers use ReLU as the nonlinearity. The main difference to the network described in <ref type="bibr" target="#b20">(Szegedy et al., 2014)</ref> is that the 5 × 5 convolutional layers are replaced by two consecutive layers of 3×3 convolutions with up to 128 filters. The network contains 13.6 • 10 6 parameters, and, other than the top softmax layer, has no fully-connected layers. We refer to this model as Inception in the rest of the text. The training was performed on a large-scale, distributed architecture <ref type="bibr" target="#b1">(Dean et al., 2012)</ref>, using 5 concurrent steps on each of 10 model replicas, using asynchronous SGD with momentum <ref type="bibr" target="#b19">(Sutskever et al., 2013)</ref>, with the mini-batch size of 32. All networks are evaluated as training progresses by computing the validation accuracy @1, i.e. the probability of predicting the correct label out of 1000 possibilities, on a held-out set, using a single crop per image.</p><p>In our experiments, we evaluated several modifications of Inception with Batch Normalization. In all cases, Batch Normalization was applied to the input of each nonlinearity, in a convolutional way, as described in section 3.2, while keeping the rest of the architecture constant.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1.">ACCELERATING BN NETWORKS</head><p>Simply adding Batch Normalization to a network does not take full advantage of our method. To do so, we applied the following modifications:</p><p>Increase learning rate. In a batch-normalized model, we have been able to achieve a training speedup from higher learning rates, with no ill side effects (Sec. 3.3).</p><p>Remove Dropout. We have found that removing Dropout from BN-Inception allows the network to achieve higher validation accuracy. We conjecture that Batch Normalization provides similar regularization benefits as Dropout, since the activations observed for a training example are affected by the random selection of examples in the same mini-batch.</p><p>Shuffle training examples more thoroughly. We enabled within-shard shuffling of the training data, which prevents the same examples from always appearing in a mini-batch together. This led to about 1% improvement in the validation accuracy, which is consistent with the view of Batch Normalization as a regularizer: the randomization inherent in our method should be most beneficial when it affects an example differently each time it is seen.</p><p>Reduce the L 2 weight regularization. While in Inception an L 2 loss on the model parameters controls overfitting, in modified BN-Inception the weight of this loss is reduced by a factor of 5. We find that this improves the accuracy on the held-out validation data.</p><p>Accelerate the learning rate decay. In training Inception, learning rate was decayed exponentially. Because our network trains faster than Inception, we lower the learning rate 6 times faster.</p><p>Remove Local Response Normalization While Inception and other networks <ref type="bibr" target="#b18">(Srivastava et al., 2014)</ref> benefit from it, we found that with Batch Normalization it is not necessary.</p><p>Reduce the photometric distortions.</p><p>Because batchnormalized networks train faster and observe each training example fewer times, we let the trainer focus on more "real" images by distorting them less.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Model</head><p>Steps BN-x5-Sigmoid: Like BN-x5, but with sigmoid nonlinearity g(t) = 1 1+exp(−x) instead of ReLU. We also attempted to train the original Inception with sigmoid, but the model remained at the accuracy equivalent to chance.</p><p>In Figure <ref type="figure" target="#fig_5">2</ref>, we show the validation accuracy of the networks, as a function of the number of training steps. Inception reached the accuracy of 72.2% after 31 • 10 6 training steps. The Figure <ref type="figure">3</ref> shows, for each network, the number of training steps required to reach the same 72.2% accuracy, as well as the maximum validation accuracy reached by the network and the number of steps to reach it.</p><p>By only using Batch Normalization (BN-Baseline), we match the accuracy of Inception in less than half the number of training steps. By applying the modifications in Sec. 4.2.1, we significantly increase the training speed of the network. BN-x5 needs 14 times fewer steps than Inception to reach the 72.2% accuracy. Interestingly, increasing the learning rate further (BN-x30) causes the model to train somewhat slower initially, but allows it to reach a higher final accuracy. This phenomenon is counterintuitive and should be investigated further. BN-x30 reaches 74.8% after 6 • 10 6 steps, i.e. 5 times fewer steps than required by Inception to reach 72.2%.</p><p>We also verified that the reduction in internal covariate shift allows deep networks with Batch Normalization to be trained when sigmoid is used as the nonlinearity, despite the well-known difficulty of training such networks. Indeed, BN-x5-Sigmoid achieves the accuracy of 69.8%. Without Batch Normalization, Inception with sigmoid never achieves better than 1/1000 accuracy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.3.">ENSEMBLE CLASSIFICATION</head><p>The current reported best results on the ImageNet Large Scale Visual Recognition Competition are reached by the Deep Image ensemble of traditional models <ref type="bibr" target="#b23">(Wu et al., 2015)</ref> and the ensemble model of <ref type="bibr" target="#b5">(He et al., 2015)</ref>. The latter reports the top-5 error of 4.94%, as evaluated by the ILSVRC test server. Here we report a test error of 4.82% on test server. This improves upon the previous best result, and exceeds the estimated accuracy of human raters according to <ref type="bibr" target="#b15">(Russakovsky et al., 2014)</ref>.</p><p>For our ensemble, we used 6 networks. Each was based on BN-x30, modified via some of the following: increased initial weights in the convolutional layers; using Dropout (with the Dropout probability of 5% or 10%, vs. 40% for the original Inception); and using non-convolutional Batch Normalization with last hidden layers of the model. Each network achieved its maximum accuracy after about 6 • 10 6 training steps. The ensemble prediction was based on the arithmetic average of class probabilities predicted by the constituent networks. The details of ensemble and multicrop inference are similar to <ref type="bibr" target="#b20">(Szegedy et al., 2014)</ref>.</p><p>We demonstrate in Fig. <ref type="figure">4</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusion</head><p>We have presented a novel mechanism for dramatically accelerating the training of deep networks. It is based on the premise that covariate shift, which is known to complicate the training of machine learning systems, also applies to sub-networks and layers, and removing it from internal activations of the network may aid in training. Our proposed method draws its power from normalizing activations, and from incorporating this normalization in the network architecture itself. This ensures that the normalization is appropriately handled by any optimization method that is being used to train the network. To enable stochastic optimization methods commonly used in deep network training, we perform the normalization for each mini-batch, and backpropagate gradients through the normalization parameters. Batch Normalization adds only two extra parameters per activation, and in doing so preserves the representation ability of the network. We presented an algorithm for constructing, training, and performing inference with batch-normalized networks. The resulting networks can be trained with saturating nonlinearities, are more tolerant to increased training rates, and often do not require Dropout for regularization.</p><p>Merely adding Batch Normalization to a state-of-the-art image classification model yields a substantial speedup in training. By further increasing the learning rates, removing Dropout, and applying other modifications afforded by Batch Normalization, we reach the previous state of the art with only a small fraction of training steps -and then beat the state of the art in single-network image classification. Furthermore, by combining multiple models trained with Batch Normalization, we perform better than the best known system on ImageNet, by a significant margin.</p><p>Our method bears similarity to the standardization layer of (Gülc ¸ehre <ref type="bibr">&amp; Bengio, 2013)</ref>, though the two address different goals. Batch Normalization seeks a stable distribution of activation values throughout training, and normal-izes the inputs of a nonlinearity since that is where matching the moments is more likely to stabilize the distribution. On the contrary, the standardization layer is applied to the output of the nonlinearity, which results in sparser activations. We have not observed the nonlinearity inputs to be sparse, neither with nor without Batch Normalization. Other notable differences of Batch Normalization include the learned scale and shift that allow the BN transform to represent identity, handling of convolutional layers, and deterministic inference that does not depend on the minibatch.</p><p>In this work, we have not explored the full range of possibilities that Batch Normalization potentially enables. Our future work includes applications of our method to Recurrent Neural Networks <ref type="bibr" target="#b12">(Pascanu et al., 2013)</ref>, where the internal covariate shift and the vanishing or exploding gradients may be especially severe, and which would allow us to more thoroughly test the hypothesis that normalization improves gradient propagation (Sec. 3.3). More study is needed of the regularization properties of Batch Normalization, which we believe to be responsible for the improvements we have observed when Dropout is removed from BN-Inception. We plan to investigate whether Batch Normalization can help with domain adaptation, in its traditional sense -i.e. whether the normalization performed by the network would allow it to more easily generalize to new data distributions, perhaps with just a recomputation of the population means and variances (Alg. 2). Finally, we believe that further theoretical analysis of the algorithm would allow still more improvements and applications.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>the set of values of x over the training set, and E[x] = 1 N N i=1 x i . If a gradient descent step ignores the dependence of E[x] on b, then it will update b ← b + ∆b, where ∆b ∝ −∂ /∂ x. Then u + (b + ∆b) − E[u + (b + ∆b)] = u + b − E[u + b]. Thus, the combination of the update to b and subsequent change in normalization led to no change in the output of the layer nor, consequently, the loss. As the training continues, b</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Rather, BN γ,β (x) depends both on the training example and the other examples in the mini-batch. The scaled and Input: Values of x over a mini-batch: B = {x 1...m };Parameters to be learned: γ, β Output:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>clarity, x ≡ x (k) , γ ≡ γ(k) , µ B ≡ µ mini-batches B, each of size m, and average over them: E</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. (a) The test accuracy of the MNIST network trained with and without Batch Normalization, vs. the number of training steps. Batch Normalization helps the network train faster and achieve higher accuracy. (b, c) The evolution of input distributions to a typical sigmoid, over the course of training, shown as {15, 50, 85}th percentiles. Batch Normalization makes the distribution more stable and reduces the internal covariate shift.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Single crop validation accuracy of Inception and its batch-normalized variants, vs. the number of training steps.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>that batch normalization allows us to set new state-of-the-art on the ImageNet classification challenge benchmarks.Figure 4. Batch-Normalized Inception comparison with previous state of the art on the provided validation set comprising 50000 images. *Ensemble results are test server evaluation results on the test set. The BN-Inception ensemble has reached 4.9% top-5 error on the 50000 images of the validation set. All other reported results are on the validation set.</figDesc><table><row><cell>Model</cell><cell cols="5">Resolution Crops Models Top-1 error Top-5 error</cell></row><row><cell>GoogLeNet ensemble</cell><cell>224</cell><cell>144</cell><cell>7</cell><cell>-</cell><cell>6.67%</cell></row><row><cell>Deep Image low-res</cell><cell>256</cell><cell>-</cell><cell>1</cell><cell>-</cell><cell>7.96%</cell></row><row><cell>Deep Image high-res</cell><cell>512</cell><cell>-</cell><cell>1</cell><cell>24.88</cell><cell>7.42%</cell></row><row><cell>Deep Image ensemble</cell><cell>up to 512</cell><cell>-</cell><cell>-</cell><cell>-</cell><cell>5.98%</cell></row><row><cell>MSRA multicrop</cell><cell>up to 480</cell><cell>-</cell><cell>-</cell><cell>-</cell><cell>5.71%</cell></row><row><cell>MSRA ensemble</cell><cell>up to 480</cell><cell>-</cell><cell>-</cell><cell>-</cell><cell>4.94%*</cell></row><row><cell>BN-Inception single crop</cell><cell>224</cell><cell>1</cell><cell>1</cell><cell>25.2%</cell><cell>7.82%</cell></row><row><cell>BN-Inception multicrop</cell><cell>224</cell><cell>144</cell><cell>1</cell><cell>21.99%</cell><cell>5.82%</cell></row><row><cell>BN-Inception ensemble</cell><cell>224</cell><cell>144</cell><cell>6</cell><cell>20.1%</cell><cell>4.82%*</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Vincent Vanhoucke and Jay Yagnik for help and discussions, and the reviewers for insightful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Understanding the difficulty of training deep feedforward neural networks</title>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xavier</forename><surname>Glorot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of AISTATS 2010</title>
				<meeting>AISTATS 2010</meeting>
		<imprint>
			<date type="published" when="2010-05">May 2010</date>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="249" to="256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Large scale distributed deep networks</title>
		<author>
			<persName><forename type="first">Jeffrey</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Greg</forename><forename type="middle">S</forename><surname>Corrado</surname></persName>
		</author>
		<author>
			<persName><surname>Monga</surname></persName>
		</author>
		<author>
			<persName><surname>Rajat</surname></persName>
		</author>
		<author>
			<persName><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><surname>Kai</surname></persName>
		</author>
		<author>
			<persName><surname>Devin</surname></persName>
		</author>
		<author>
			<persName><surname>Matthieu</surname></persName>
		</author>
		<author>
			<persName><surname>Le</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Quoc</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mark</forename><forename type="middle">Z</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName><surname>Ranzato</surname></persName>
		</author>
		<author>
			<persName><surname>Marc'aurelio</surname></persName>
		</author>
		<author>
			<persName><surname>Senior</surname></persName>
		</author>
		<author>
			<persName><surname>Andrew</surname></persName>
		</author>
		<author>
			<persName><surname>Tucker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yang</forename><surname>Paul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ke</forename><surname>Ng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><forename type="middle">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
				<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">Guillaume</forename><surname>Desjardins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Koray</forename><surname>Kavukcuoglu</surname></persName>
		</author>
		<title level="m">Natural neural networks</title>
				<imprint/>
	</monogr>
	<note>unpublished)</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Adaptive subgradient methods for online learning and stochastic optimization</title>
		<author>
			<persName><forename type="first">John</forename><surname>Duchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Elad</forename><surname>Hazan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoram</forename><surname>Singer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mach. Learn. Res</title>
		<idno type="ISSN">1532-4435</idno>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="2121" to="2159" />
			<date type="published" when="2011-07">July 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Knowledge matters: Importance of prior information for optimization</title>
		<author>
			<persName><forename type="first">C</forename><surname>Gülc ¸ehre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<idno>CoRR, abs/1301.4083</idno>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification</title>
		<author>
			<persName><forename type="first">K</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Sun</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015-02">February 2015</date>
		</imprint>
	</monogr>
	<note>ArXiv e-prints</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Independent component analysis: Algorithms and applications</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hyvärinen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Oja</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Neural Netw</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">4-5</biblScope>
			<biblScope unit="page" from="411" to="430" />
			<date type="published" when="2000-05">May 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">A literature survey on domain adaptation of statistical classifiers</title>
		<author>
			<persName><forename type="first">Jing</forename><surname>Jiang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Gradientbased learning applied to document recognition. Proceedings of the IEEE</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Bottou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Haffner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998-11">November 1998a</date>
			<biblScope unit="volume">86</biblScope>
			<biblScope unit="page" from="2278" to="2324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<author>
			<persName><forename type="first">Y</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Bottou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Orr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">Efficient</forename><surname>Muller</surname></persName>
		</author>
		<author>
			<persName><surname>Backprop</surname></persName>
		</author>
		<title level="m">Neural Networks: Tricks of the trade</title>
				<editor>
			<persName><forename type="first">G</forename><surname>Orr</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">K</forename><surname>Muller</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1998">1998b</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Nonlinear image representation using divisive normalization</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lyu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Simoncelli</surname></persName>
		</author>
		<idno type="DOI">10.1109/CVPR.2008.4587821</idno>
	</analytic>
	<monogr>
		<title level="m">Proc. Computer Vision and Pattern Recognition</title>
				<meeting>Computer Vision and Pattern Recognition</meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2008">Jun 23-28 2008</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Rectified linear units improve restricted boltzmann machines</title>
		<author>
			<persName><forename type="first">Vinod</forename><surname>Nair</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
				<imprint>
			<publisher>Omnipress</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="807" to="814" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">On the difficulty of training recurrent neural networks</title>
		<author>
			<persName><forename type="first">Razvan</forename><surname>Pascanu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tomas</forename><surname>Mikolov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th International Conference on Machine Learning, ICML 2013</title>
				<meeting>the 30th International Conference on Machine Learning, ICML 2013<address><addrLine>Atlanta, GA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-06">June 2013. 2013</date>
			<biblScope unit="page" from="1310" to="1318" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Sanjeev. Parallel training of deep neural networks with natural gradient and parameter averaging</title>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Povey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaohui</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Khudanpur</forename></persName>
		</author>
		<idno>CoRR, abs/1410.7455</idno>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Deep learning made easier by linear transformations in perceptrons</title>
		<author>
			<persName><forename type="first">Tapani</forename><surname>Raiko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Harri</forename><surname>Valpola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yann</forename><surname>Lecun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Artificial Intelligence and Statistics (AISTATS)</title>
				<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="924" to="932" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Olga</forename><surname>Russakovsky</surname></persName>
		</author>
		<author>
			<persName><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><surname>Su</surname></persName>
		</author>
		<author>
			<persName><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathan</forename><surname>Krause</surname></persName>
		</author>
		<author>
			<persName><surname>Satheesh</surname></persName>
		</author>
		<author>
			<persName><surname>Sanjeev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sean</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><surname>Zhiheng</surname></persName>
		</author>
		<author>
			<persName><surname>Karpathy</surname></persName>
		</author>
		<author>
			<persName><surname>Andrej</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Aditya</forename><surname>Khosla</surname></persName>
		</author>
		<author>
			<persName><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName><surname>Michael</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alexander</forename><forename type="middle">C</forename><surname>Berg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename><surname>Fei-Fei</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note>ImageNet Large Scale Visual Recognition Challenge</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Exact solutions to the nonlinear dynamics of learning in deep linear neural networks</title>
		<author>
			<persName><forename type="first">Andrew</forename><forename type="middle">M</forename><surname>Saxe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><forename type="middle">L</forename><surname>Mcclelland</surname></persName>
		</author>
		<author>
			<persName><surname>Ganguli</surname></persName>
		</author>
		<author>
			<persName><surname>Surya</surname></persName>
		</author>
		<idno>CoRR, abs/1312.6120</idno>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Improving predictive inference under covariate shift by weighting the log-likelihood function</title>
		<author>
			<persName><forename type="first">Hidetoshi</forename><surname>Shimodaira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Statistical Planning and Inference</title>
		<imprint>
			<biblScope unit="volume">90</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="227" to="244" />
			<date type="published" when="2000-10">October 2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Dropout: A simple way to prevent neural networks from overfitting</title>
		<author>
			<persName><forename type="first">Nitish</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alex</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><surname>Ilya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mach. Learn. Res</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1929" to="1958" />
			<date type="published" when="2014-01">January 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">On the importance of initialization and momentum in deep learning</title>
		<author>
			<persName><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName><surname>Martens</surname></persName>
		</author>
		<author>
			<persName><surname>James</surname></persName>
		</author>
		<author>
			<persName><forename type="first">George</forename><forename type="middle">E</forename><surname>Dahl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><forename type="middle">E</forename><surname>Hinton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
				<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="1139" to="1147" />
		</imprint>
	</monogr>
	<note>JMLR.org</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Going deeper with convolutions</title>
		<author>
			<persName><forename type="first">Christian</forename><surname>Szegedy</surname></persName>
		</author>
		<author>
			<persName><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><surname>Yangqing</surname></persName>
		</author>
		<author>
			<persName><surname>Sermanet</surname></persName>
		</author>
		<author>
			<persName><surname>Pierre</surname></persName>
		</author>
		<author>
			<persName><surname>Reed</surname></persName>
		</author>
		<author>
			<persName><surname>Scott</surname></persName>
		</author>
		<author>
			<persName><surname>Anguelov</surname></persName>
		</author>
		<author>
			<persName><surname>Dragomir</surname></persName>
		</author>
		<author>
			<persName><surname>Erhan</surname></persName>
		</author>
		<author>
			<persName><surname>Dumitru</surname></persName>
		</author>
		<author>
			<persName><surname>Vanhoucke</surname></persName>
		</author>
		<author>
			<persName><surname>Vincent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Andrew</forename><surname>Rabinovich</surname></persName>
		</author>
		<idno>CoRR, abs/1409.4842</idno>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A convergence analysis of log-linear training</title>
		<author>
			<persName><forename type="first">Simon</forename><surname>Wiesler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hermann</forename><forename type="middle">;</forename><surname>Ney</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Shawe-Taylor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename><surname>Zemel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bartlett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">C N</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName><surname>Weinberger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
				<editor>
			<persName><forename type="first">K</forename><forename type="middle">Q</forename></persName>
		</editor>
		<meeting><address><addrLine>Granada, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-12">December 2011</date>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="657" to="665" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Mean-normalized stochastic gradient for large-scale deep learning</title>
		<author>
			<persName><forename type="first">Simon</forename><surname>Wiesler</surname></persName>
		</author>
		<author>
			<persName><surname>Richard</surname></persName>
		</author>
		<author>
			<persName><surname>Alexander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ralf</forename><surname>Schlüter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hermann</forename><surname>Ney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Acoustics, Speech, and Signal Processing</title>
				<meeting><address><addrLine>Florence, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-05">May 2014</date>
			<biblScope unit="page" from="180" to="184" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Deep image: Scaling up image recognition</title>
		<author>
			<persName><forename type="first">Ren</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><surname>Yan</surname></persName>
		</author>
		<author>
			<persName><surname>Shengen</surname></persName>
		</author>
		<author>
			<persName><surname>Shan</surname></persName>
		</author>
		<author>
			<persName><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qingqing</forename><surname>Dang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gang</forename><surname>Sun</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
