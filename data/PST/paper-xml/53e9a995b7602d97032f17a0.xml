<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Defense against Low-rate TCP-targeted Denial-of-Service Attacks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Guang</forename><surname>Yang</surname></persName>
							<email>yangg@cs.ucla.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">UCLA</orgName>
								<address>
									<postCode>90095</postCode>
									<settlement>Los Angeles</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Mario</forename><surname>Gerla</surname></persName>
							<email>gerla@cs.ucla.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">UCLA</orgName>
								<address>
									<postCode>90095</postCode>
									<settlement>Los Angeles</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">M</forename><forename type="middle">Y</forename><surname>Sanadidi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="institution">UCLA</orgName>
								<address>
									<postCode>90095</postCode>
									<settlement>Los Angeles</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Defense against Low-rate TCP-targeted Denial-of-Service Attacks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">C6EAC59DD33B44B4716F0EA260850546</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T10:15+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Denial-of-Service</term>
					<term>TCP</term>
					<term>Retransmission Timeout</term>
					<term>Randomization</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Abstruct-Low-rate TCP-targeted Denial-of-Service (DOS) attacks aim at the fact that most operating systems in use today have a common base TCP Retransmission Timeout (RTO) of 1 sec. An attacker injects periodic bursts of packets to fill the bottleneck queue and forces TCP connections to timeout with near-zero throughput. This paper proposes randomization on TCP RTO as defense against such attacks. With RTO randomization, an attacker cannot predict the next TCP timeout and consequently cannot inject the burst at the exact instant. An analytic performance model on the throughput of randomized TCP is developed and validated. Simulation results show that randomization can effectively mitigate the impact of such DOS attacks while maintaining fairness and friendliness to other connections.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>The primary goal of Denial-of-Service (DOS) attacks is to deny legitimate users the access to particular resources [3]. Sometimes attackers can execute so-called "asymmetric" attacks in which they use limited resources to cause damage to systems with much more resources. Low-rate TCP-targeted DOS attacks, brought to our attention in <ref type="bibr">[6]</ref>, are such asymmetric attacks aiming at the TCP timeout mechanism <ref type="bibr">[11][12]</ref>.</p><p>Briefly speaking, TCP timeout mechanism was designed for loss recovery in the presence of severe congestion. TCPfust retransmits a lost packet when detecting three duplicate acknowledgements (DUPACKs). In case of severe congestion, however, the sender may not be able to receive enough DUPACKs. When an outstanding packet has not been acknowledged for an interval of Retransmission Timeout (RTO), it incurs a timeout. TCP interprets timeout as an indication of severe congestion and reduces its window to one packet. It then retransmits the lost packet and waits for the ACK. Note that since TCP is selfclocked, in case the ACK does not come in, TCP will not send any other packet until it times out again.</p><p>In most implementations, a minimum RTO (minRTO) of 1 sec is imposed following the recommendation in [l]. This fixed value makes TCP vulnerable to low-rate DOS attacks. Initially, the attacker sends a burst of packets to the bottleneck queue and fills it quickly (assuming the attacker can send at a high rate). TCP packets in preexisting connections traversing the bottleneck are dropped due to buffer overflow, forcing these connections to time out. Since TCP connections have minRTO = 1 sec, they will time out virtually at the same time, i.e., after 1 Fax: +1-310-825-2273 sec. The attacker temporarily holds its transmission until 1 sec later when TCPs start to transmit again, forcing them to another round of timeout. Such periodic attacks have low overall rates but can cause huge damage to TCP.</p><p>Since the common minRTO value is the weakness that lowrate DOS attacks aim at, removing it is an obvious approach to solution. In <ref type="bibr">[6]</ref> the authors have pointed out that randomization on minRTO "shifts and smoothes TCP's null frequencies" and could mitigate the impact of attacks, but "the fundamental !r,ideoff between TCP performance and vulnerability to lowrate DOS attacks remains". They have also proposed another candidate solution with collaboration of intermediate routers. Since many proposals for router assistance for TCP have not worked out weli in the past due to deployment issues, we believe end-to-end solutions ought to be pursued further.</p><p>ir rrganized as follows. Section I1 recapitulates the problem brnirghl up by low-rate TCP-targeted DOS attacks. Section I11 analyzes the performance of our RTO randomization scheme with a simple model validated by simulation. Section IV presents the evaluation of RTO randomization, including effectiveness, rverheod. fairness and friendliness. Finally Section V summarizes vur work and concludes the paper.</p><p>The rest of thic 11. LOW-RATE TCP-TARGETED DOS ATTACKS Although TCP-specific DOS attacks such as TCP SYN flooding [4] have been studied for years, low-rate TCP-targeted DOS attacks did not bring up much attention until <ref type="bibr">[6]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. TCP timeout mechanism</head><p>Reno-based TCP variants have two mechanisms associated with data retransmission: fast retransmitlfast recovery and timeout. When losses are sporadic, the sender may retransmit a lost packets upon receiving three DUPACKs. When losses are dense, however, there may not be a sufficient number of DU-PACKS to trigger fast retransmit. If the sender has not received an ACK on an outstanding packet for a certain period of time since the packet was sent, it times out: TCP interprets the timeout as indication of severe congestion. It reduces its congestion window to one packet and retransmits the lost packet.</p><p>Time between when the packet was sent and when the timeout occurs is called RTO. Base RTO is computed as max{SRTT + 4 x RTTVAR,minRTO). The minimum 0-7803-8623-W04/$20.00 02004 IEEE RTO, minRTO, was recommended as 1 sec in [l] for the purpose of achieving near-maximal throughput. It has been shown that S R T T + 4 x R T T V A R is usually less than 1 sec, so effectively most TCP connections have the base RTO = 1 sec. In addition, TCP uses Karn's clamped retransmit backoff algorithm in case of consecutive timeouts: each successive RTO is double the value of the previous until it reaches 64 times the base. In other words, if SRTT + 4 x R T T V A R &lt; minRTO = lsec, then RTO can be 1, 2,4, 8, . . . , 6 4 sec. For more details on the TCP timeout mechanism, please see <ref type="bibr" target="#b6">[7]</ref>[8].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Square wave attacks</head><p>A low-rate TCP-targeted DOS attack can be conceptually illustrated as a "square wave" <ref type="bibr">[6]</ref>. The attacker periodically sends short bursts of packets to a bottleneck link in the network. The sending rate during a burst is sufficiently high so as to fill the bottleneck queue quickly. After the queue is full, TCP packets that traverse the bottleneck are dropped due to buffer overflow. If a large number of packets in a TCP window are dropped, the connection is forced to timeout. The attacker is quiet between bursts of transmission, so its overall average sending rate is low. AQM schemes such as RED [5] may alleviate this problem since the attacking packets will be preferentially dropped if they occupy a large fraction of the queue. Some legitimate TCP packets will then make through, avoiding complete lockout. We plan to investigate AQM schemes in future experiments.</p><p>In this paper we only consider drop-tail queues. We illustrate the "square wave" in Fig. <ref type="figure" target="#fig_0">1</ref>. Important parameters of the attack include a) attack rate, b) burst length, and c) inter-burstperiod. For the attacker, a higher sending rate means a shorter time to fill the queue but also a bigger chance of being detected. In [6] the authors have mentioned "double-rate" attacks, but practically single-rate attacks are much simpler. Multiple legitimate connections competing with each other may also "help" the attacker fill the queue quickly.</p><p>A longer burst length keeps the queue full for a longer time, increasing the effectiveness of the attack. On the other hand, it also increases the average attack rate and chance of being detected. Intuitively, a burst length equal to RTT will suffice since it blocks the transmisslon of a whole window of TCP packets. Bursts shorter than R'IT can also cause severe damage as long as they force TCP to timeout. The inter-burst period is closely related to RTO. As we have explained, once TCP connections are forced to timeout by the attack, they will time out virtually at the same time. By choosing an appropriate inter-burst period, the attacker can exploit this synchronization to cause substantial damage. For example, an inter-burst period of 1 sec leads to a very strong attack in that it coincides with the base RTO.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Discussion</head><p>Law rate is a unique characteristic of this type of attacks. The attacker is active only at the moments when TCP is sending packets. According to [6], when the attack burst length is shorter than 300 msec, existing AQM schemes such as RED <ref type="bibr">[5]</ref> and RED-PD [9] cannot distinguish between attack and legitimate flows. Therefore conventional defense against DOS attacks cannot be applied directly.</p><p>Although the bottleneck queue is the target, an attacher does not need to locate it as long as its access link has a higher capacity. Since the backbone network is usually with high speed, low-rate DOS attacks are likely to cause damage at the ends, e.g. in Local Area Networks (LANs).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="111.">RTO RANDOMIZATION</head><p>In this section we propose a solution, i.e., RTO randomization, against low-rate TCP-targeted DOS attacks. Randomization makes it more difficult for the attacker to predict the next TCP timeout instant and carry out a properly timed attack burst.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. How to randomize?</head><p>The authors of <ref type="bibr">[6]</ref> have pointed out that minRTO randomization has some counter-effects against the attacks. A model on TCP throughput with minRTO randomization has been developed and validated with simulation where minRTO = uniform (1, 1.2). The observation is that randomization "shifts and smoothes TCP's null frequencies" but "the fundamental tradeoff between TCP performance and vulnerability to lowrate DOS attacks remains".</p><p>We now present our study on RTO randomization. It shows that by appropriately choosing randomization ranges, negative impacts of the attacks can be mitigated without sacrificing fairness or friendliness. We were inspired by the fact that several link layer protocols, e.g. Ethernet, have similar,Fxponential backoff schemes upon collisions, but their schemes differ significantly from that of TCP in that they, while exponentially increasing the upper bound of the range, choose the timeout value randomly in that range <ref type="bibr">[8]</ref>. We believe a similar strategy can be used in TCP as defense against the attacks. We start from a simple case where we strictly preserve min-RTO = 1 sec. Instead of using a deterministic value of 2" for the nth successive timeout (TCP does not double the timeout value after n &gt; 6), we choose a random value uniformly between 2" and 2" + l. We denote this option as [t, t + l). By spreading RTO across a range, different TCP connections produce different RTOs after an attack burst; the attacker is not able to synchronize the next round of timeout.</p><p>[t,t + 1) is conservative since it always produces a RTO greater than or equal to the value chosen in legacy TCP. Statistically the average of the randomized RTO is 0.5 sec larger. There are other options that spread the range to both sides of 2". Specifically, we consider the ranges a) 2" -0.5 to 2" +0.5, and b) 0.5 x 2" to 1.5 x 2n, for the nth timeout. We denote them as [t -0.5, t + 0.5) and [0.5t, 1.5t), respectively. As we will see, the fact that RTO occasionally goes below 1 sec does not compromise the stability; moreover, in most cases [t, t + 1) will suffice in defending against the attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Throughput analysis: no backoff</head><p>We develop a simple analytic model to better understand TCP throughput with RTO randomization. The model makes a few assumptions but still predicts the performance fairly well.</p><p>In the analysis we denote T as inter-burst period, 1 as burst length, tout as RTO randomized in the range of (tO,minr and 1 &gt; RTT,,, where RTT,,, is the maximum RTT. Thus the attack burst is set sufficiently long so that every TCP packet in the window is dropped during the burst, and TCP goes to timeout with probability 1. Consider a single TCP connection under attack. The time line is illustrated in Fig. <ref type="figure">2</ref>. After the attack starts, all TCP packets in the current window are dropped; the connection is forced to timeout with RTO as tout. When the TCP connection emerges from timeout and sends the first packet tout later, it faces one of the following cases (see Fig. 1) tout -L?] . T 2 1 + RTT,,,. This is the case where the packet finds the bottleneck queue empty with no attack under way. TCP can use up to the full bandwidth until the next attack burst. To simplify the expression, we assume TCP window immediately reaches the pipe size and uses all available bandwidth, i.e., we ignore the time in slow start. This is an optimistic nevertheless realistic assumption, since in our scenario (to be described next) the pipe size is just 25 packets and the round-trip propagation delay is only 12 msec. The utilization in the cycle delimited by two consecutive packet-drop events is 2) 1 5 tout -1 9 1 .T &lt; 1 + RTT,,,,. This is the case where the packet finds no attack under way, but the bottleneck queue still has some attacking packets. TCP packets have to wait until all attacking packets are cleared before they are transmitted. We approximately estimate this waiting time as RTT,,, starting from the end of last attack burst. The utilization in the cycle is</p><formula xml:id="formula_0">. T -tout)/( . T ) . (T -1 -RTTmax)/( [ *I T ) .</formula><p>3 ) tout-L*] .T &lt; 1. This is the case where the packet finds the attack under way. The packet is dropped and the connection is forced to timeout again. No TCP packet is successfully transmitted in the period of tout. Although the next cycle begins at the moment of the (failed) retransmission, we assume it begins at the beginning of the current attack burst, which gives the "memoryless" property between cycles and greatly reduces the complexi ty.</p><p>To compute the average throughput we use renewal theory. It is well known that if the system behavior is described by a sequence of independent cycles, the throughput is [2]:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Aueraoe number o f transmissions in a c&lt;rcle</head><p>Average cycle time</p><p>In order to compute the above quantities, it is helpful to introduce the indicator function f ( t ) as Functions g ( t ) and h(t) are defined similarly: g ( t ) = 1 when case 2) holds and 0 elsewhere; h(t) = 1 when case 3) holds and 0 elsewhere. The average transmission time in a cycle is c. Throughput analysis: with backoff Aanalysis above does not take TCP backoff scheme into account. With backoff, case 3) needs some changes. When the retransmission is lost, the next RTO randomization range will be different. Consider a one-time backoff scheme, in which after the retransmission is lost, the RTO randomization range changes further retransmission failures will not cause backoff. After a successful retransmission, the range is reset to [tO,,in,</p><p>In this scheme, a cycle in case 3) should include all intermediate timeouts up to the successful retransmission. Since all timeouts following the first one have the same to [tl,min,tl,max) (usually t1,min &gt; t0,min and t1,rnaz &gt; randomization range of [ t l , , , i n , t l , m a z ) , this is exactly the no backoff scenario as we have analyzed. Therefore, in the onetime backoff model, the average transmission time and cycle length of case 3) can be derived from results of the previous analysis (see Fig. <ref type="figure" target="#fig_3">4</ref>). We will not discuss this further due to space limit. By iteration we have obtained The that corresponds to Karn's algorithm and solved the equations numerically. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Model validation</head><p>We validate the model with simulation for randomization ranges [t, t + 1) and [t -0.5, t + 0.5) in Fig. <ref type="figure" target="#fig_5">5</ref>. [0.5t, 1.5t) has similar results to [t -0.5, t + 0.5) and is not presented here. The bottleneck bandwidth is 1.5 Mbps with 6 msec oneway propagation delay and 25-packet queue size, giving a RTT range from 12 to 132 msec. The attack burst length is set to 150 msec, longer than the maximum RTT. The attack rate is 5 Mbps in order to fill the queue fast.</p><p>Although the model slightly overestimates the throughput, due to the "optimistic" assumptions, it still predicts the trend of TCP throughput well. The difference between one-time backoff and Karn's algorithm is very small. This confirms that consecutive timeouts are indeed very rare after RTO randomization. In next section we will present extensive simulation results to evaluate RTO randomization, in addition to the analysis above. We will also study the fairnesdfriendliness properties of TCP with RTO randomization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. PERFORMANCE EVALUATION A. Throughput of single connection</head><p>We compare the throughput of legacy TCP and TCP with RTO randomization. Simulation setup, illustrated in Fig. <ref type="figure" target="#fig_4">6</ref>, mimics the one-hop scenario in [6]. Bottleneck capacity is 1.5 Mbps with 6 msec one-way propagation delay. Queue buffer size is 25 packets such that RTT varies between 12 and 132 msec. Since the buffer size is relatively large, the attack rate is set as twice the bottleneck capacity (i.e. 3 Mbps) so as to fill the queue fast. The attack burst length is 80 msec, comparable to RTT. One TCP connection and the attack flow start at nO and end at n l . We also set up another TCP connection going in the reverse direction as background traffic. Each simulation runs 300 seconds. Fig. <ref type="figure" target="#fig_6">7</ref> shows normalized TCP throughput with or without RTO randomization. Without randomization, TCP throughput drops to near zero when inter-burst period is 0.5 or 1 sec, as </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>pointed out in [6].</head><p>With any of the randomization ranges, TCP utilizes at least 15% of the bandwidth resource when inter-burst period is 0.5 sec, more than 30% in all other cases, noticeably around 45% when inter-burst period is 1 sec. We can also see that when the inter-burst period is much longer than 1 sec, RTO randomization does not incur much performance degradation. All three randomization ranges have similar results in terms of TCP throughput. Table <ref type="table">I</ref> compares the number of timeout events and the total time in the timeout state with different randomization ranges and attack inter-burst periods. Due to space limit we only present selected data here. In a strong attack situation with the inter-burst period of 0.5 or 1 sec, randomization induces more timeouts but less time in the timeout state. Consecutive timeouts occur less frequently when we randomize the RTO.</p><p>In a weak attack situation, both the number of timeouts and the total time in timeout state are close to the non-randomized counterpart. Among the three options, [t, t + 1) has longer total time because its average RTO is larger. Without attacks, we observe zero timeout in all cases (not shown in the table). This supports our argument that randomization has minimal impact on TCP throughput in weak attack situations. Fig. <ref type="figure" target="#fig_7">8</ref> presents the distribution of RTO when the inter-burst period is 1 (strong attack) or 5 sec (weak attack) as graphic supplement to Table <ref type="table">I</ref>. Another interesting observation is that when inter-burst period is 2 or 5 sec, [t -0.5, t+0.5) and [0.5t, 1.5t) have the same results. The reason is that since the attack is weak, RTO never</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>' I 'I</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TABLE I NUMBER OF TIMEOUTS WITH DIFFERENT RANDOMIZATION RANGES AND ATTACK INTER-BURST PERIODS</head><p>backs off; [t -0.5, t + 0.5) and [0.5t, 1.5t) are both reduced to [0.5,1.5). Because we use a sequence of pseudo-random numbers for easy replays, these two ranges become identical.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Throughput/f irrzess/friendliness of multiple connections</head><p>We now evaluate RTO randomization in a multipleconnection situation. Topology and attacker behavior are similar to the previous experiment except that the bottleneck bandwidth is 5 Mbps. Five TCP connections and one attack flow start at node n O and end at node nl. One background TCP connection is set up in the reverse direction.</p><p>We run three sets of experiments with different attack interburst periods. A fourth set is the reference set with no attack. The upper-left, upper-right, lower-left and lower-right graphs in Fig. <ref type="figure">9</ref> are with attack inter-burst period of 0.5, 1.0, 3.0 sec, and without attack, respectively. In each graph, normalized throughput of the five TCP connections is shown. In the upper two graphs, throughput of non-randomized connections is near-zero while randomized connections have decent throughput. Fig. <ref type="figure">9</ref> also shows good fairness between randomized connections. We also investigate into the friendliness between randomized and non-randomized connections. To this end, we run multipleconnection simulations with mixed settings, each corresponding to one point on the horizontal axis. In setting 1 all five connections are non-randomized; in settings 2 to 4, three of the connections are non-randomized; two of them are randomized with [t, t + l ) , [t -0.5, t + 0.5) or [0.5t, 1.5t), respectively. Experiment settings reported in Fig. <ref type="figure" target="#fig_9">10</ref> are the mirror images of those reported in Fig. <ref type="figure">9</ref>, namely upper-left, upper-right, lower-left and lower-right graphs are with attack inter-burst period of 0.5, 1.0, 3.0 sec, and without attack, respectively. In each graph, the four groups correspond to the experiments that we just mentioned. As the lower two graphs of Fig. <ref type="bibr">IO</ref> show, introducing randomization into some of the connections does not hurt the throughput of non-randomized ones. All three alternatives are friendly to legacy TCP. As for the upper two graphs, friendliness are not an issue since non-randomized connections are simply killed by the attack anyway! </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. RTT heterogeneity, attack burst length and rate</head><p>Next we study the performance of RTO randomization with RTT heterogeneity and other parameter selections. We use the simulation setup in  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SC"dCrS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Receivers</head><p>Simulation setup with RTT heterogeneity. are minimum RTTs including no queuing delay). Randomization helps improve the throughput of connections for all RTTs while favoring shorter RTTs as all other TCP variants.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RTrrnrn(M.cj</head><p>Fig. <ref type="figure" target="#fig_10">12</ref>. ization ranges and RTTs. Throughput is in number of packets.</p><p>Normalized throughput of TCP connections with different random-Fig. <ref type="figure" target="#fig_10">13</ref> shows normalized aggregate throughput of five TCP connections as attack burst length changes. Inter-burst period is 1 sec, attack rate is 10 Mbps. Under this condition, 80 msec is sufficient to kill non-randomized connections, while randomized connections can still achieve 30-40% of the maximum throughput. Note that 80 msec is about the average RTT over the five connections.</p><p>A W L m L m g m ,"=j Fig. <ref type="figure" target="#fig_10">13</ref>. Aggregate normalized throughput of TCP connections with different randomization ranges and attack burst lengths.</p><p>Similarly, Fig. <ref type="figure" target="#fig_12">14</ref> shows the aggregate throughput of five TCP connections as attack rate increases. Burst length is fixed at 80 msec. The attack rate of 7 Mbps (1.4 times the bottleneck capacity) is sufficient to fill the bottleneck queue quickly and kill non-randomized connections. Randomized connections can survive even the 10 Mbps attack rate, achieving 30-40% of the maximum throughput.</p><p>To summarize, RTO randomization provides good defense against low-rate TCP-targeted DOS attacks. It significantly improves TCP throughput in case of attacks while induces little performance degradation when no attack is in presence. It also maintains good fairness to itself and friendliness to legacy TCP. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. CONCLUSION</head><p>In this paper, we have addressed the problem of low-rate DOS attacks against TCP. We have verified via simulation experiments the claims by the authors of [6]. In particular, we have confirmed that current TCP implementations with minRTO = 1 sec are vulnerable to these attacks. A more important finding is that by choosing an appropriate range, end-to-end RTO randomization can cure this problem effectively, instead of just shifting and smoothing the null frequencies as found in [6].</p><p>By randomizing RTO in a range large enough, it prevents an attacker from predicting the next RTO value. We have analyzed the performance of RTO randomization via a simple model. Extensive study has been carried out on the three typical randomization ranges, denoted as [t,t + l), [t -0.5,t + 0.5) and [0.5t, 1.5t) respectively, using throughput, overhead, fairness and friendliness as criteria. All three ranges behave similarly, thus we suggest using [t,t + 1) since it complies with the min-RTO = 1 sec recommendation [I].</p><p>Our next step in this research will be to implement the RTO randomization scheme and test it on the Internet. At the same time, we will also investigate into the potential protection offered by RED and other AQM schemes against low-rate TCPtargeted DOS attacks.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Illustration of a low-rate TCP-targeted DOS attack.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>4 Fig. 2 .</head><label>42</label><figDesc>Fig. 2. Illustration of the analytic model for randomization.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Three cases for the model without backoff scheme.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Case 3 for the model with one-time backoff.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. One-hop simulation setup.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Comparison between model and simulation. Left and right graphs are with [t, t + 1) and [t -0.5, t + 0.5), respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. TCP throughput with different randomization ranges.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Cumulative Distribution Function (CDF) of timeout length with different inter-burst periods. Left and right graphs are with inter-burst period of 1 and 5 sec, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>Fig. 9.Per-connection throughput of 5 TCP connections with different randomization ranges and attack inter-burst periods. Upper-left, upper-right, lower-left and lower-right graphs are with attack inter-burst period of 0.5, 1.0, 3.0 sec, and without attack, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 10 .</head><label>10</label><figDesc>Fig. 10. Average normalized throughput of TCP connections with different randomization ranges and attack inter-burst periods. Upper-left, upper-right, lower-left and lower-right graphs are with aitack inter-burst period of 0.5, 1 .O, 3.0 sec, and without attack, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. I 1</head><label>1</label><figDesc>where TCP connections have different RTTs. Queue buffers are set to NS-2[lo]  default values. We first evaluate the impact of RTT heterogeneity, then consider the attack burst length and rate. Fig. 12 shows individual throughput of five TCP connections with different RTTs (20, 40, 60, 100 and 200 msec as labeled</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig</head><label></label><figDesc>Fig. 11.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. Aggregate normalized throughput of TCP connections with different randomization ranges and attack rates.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">On estimufing end-to-endnehvorkpath pmperties</title>
		<author>
			<persName><forename type="first">M</forename><surname>Allman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM 1999</title>
		<meeting>ACM SIGCOMM 1999<address><addrLine>Cambridge, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-09">Aug. -Sep., 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Bertsekas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gallager</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dufu</forename><surname>Networks</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991-12">Dec. 1991</date>
			<publisher>Prentice Hall</publisher>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<author>
			<persName><forename type="first">Coordinated</forename><surname>Certq</surname></persName>
		</author>
		<author>
			<persName><surname>Center</surname></persName>
		</author>
		<ptr target="http://www.cert.org/t~h-tips/denial-ofservice.html" />
		<title level="m">Denial of Service Attacks</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<ptr target="http://www.cert.org/advisories/CA-1996-21.html" />
		<title level="m">CERTB Advisory CA-1996-21, TCP SYN Flooding ond IP Spoofing Aftucks</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Rundoni Eurly Defection Cotewaysfor Congeslion Avoidunce</title>
		<author>
			<persName><forename type="first">S</forename><surname>Floyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Jacobson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEWACM Transactions on Networking</title>
		<imprint>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="397" to="413" />
			<date type="published" when="1993-08">Aug. 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Low-Rote TCP-Turgeted Denial of Service Affacks (The Shrew vs. fhe Mice and Elephants)</title>
		<author>
			<persName><forename type="first">A</forename><surname>Kuzmanovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">W</forename><surname>Knightly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM 2003</title>
		<meeting>ACM SIGCOMM 2003</meeting>
		<imprint>
			<publisher>Karlsruhe. Germany</publisher>
			<date type="published" when="2003-08">Aug. 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Improving Round-Trip Time Estiniafes in Reliable Trnnsport Protocols</title>
		<author>
			<persName><forename type="first">P</forename><surname>Karn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Patridge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM 1987</title>
		<meeting>ACM SIGCOMM 1987</meeting>
		<imprint>
			<date type="published" when="1987-08">Aug. 1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">W</forename><surname>Kurose</surname></persName>
		</author>
		<author>
			<persName><surname>Ross</surname></persName>
		</author>
		<title level="m">Computer Networking: A Top-Down Approach Feufuring fhe Infernef</title>
		<imprint>
			<publisher>Pearson Addison Wesley</publisher>
			<date type="published" when="2002-07">Jul. 2002</date>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Confrolling high-bondwidfhflows ut the congested roufer</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mahajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Floyd</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE ICNP</title>
		<meeting>IEEE ICNP<address><addrLine>Riverside, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-11">2001. Nov. 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<ptr target="http://www.isi.edu/nsnam/ns" />
		<title level="m">NS-2 Network Simulator</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<author>
			<persName><forename type="first">]</forename><forename type="middle">J</forename><surname>Postel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Transmission Control Protocol</title>
		<imprint>
			<date type="published" when="1981-09">Sep. 1981</date>
			<biblScope unit="volume">793</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Cornpuling TCP&apos;s Retransmission Timer, RFC 2988</title>
		<author>
			<persName><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Allman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000-11">Nov. 2000</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
