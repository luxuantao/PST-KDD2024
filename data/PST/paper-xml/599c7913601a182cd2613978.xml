<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Optimal Posted Prices for Online Cloud Resource Allocation</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Zijun</forename><surname>Zhang</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Z</forename><surname>Li</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Calgary ZONGPENG LI</orgName>
								<orgName type="institution" key="instit2">University of Calgary</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">CHUAN WU</orgName>
								<orgName type="institution" key="instit2">The University of Hong Kong</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Department of Computer Science</orgName>
								<orgName type="institution">University of Calgary; C. Wu</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="institution">the University of Hong Kong</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Optimal Posted Prices for Online Cloud Resource Allocation</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1145/3084460</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-01-01T13:29+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Cloud Computing</term>
					<term>Posted Pricing</term>
					<term>Resource Allocation</term>
					<term>Online Algorithms</term>
					<term>Competitive Analysis</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We study online resource allocation in a cloud computing platform through posted pricing: The cloud provider publishes a unit price for each resource type, which may vary over time; upon arrival at the cloud system, a cloud user either takes the current prices, renting resources to execute its job, or refuses the prices without running its job there. We design pricing functions based on current resource utilization ratios, in a wide array of demand-supply relationships and resource occupation durations, and prove worst-case competitive ratios in social welfare. In the basic case of a single-type, non-recycled resource (allocated resources are not later released for reuse), we prove that our pricing function design is optimal, in that it achieves the smallest competitive ratio among all possible pricing functions. Insights obtained from the basic case are then used to generalize the pricing functions to more realistic cloud systems with multiple types of resources, where a job occupies allocated resources for a number of time slots till completion, upon which time the resources are returned to the cloud resource pool.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Over the past decade, cloud computing has proliferated as the new computing paradigm that provides flexible, on-demand computing services in a pay-as-you-go fashion. Various applications and systems are built upon cloud computing models, including big data analytics, cloud radio access networks (C-RAN), network function virtualization (NFV), to name a few. Despite the common illusion that a cloud consists of an unlimited 'sea' of resources, real-world clouds are constrained by finite system capacity <ref type="bibr" target="#b15">[17,</ref><ref type="bibr" target="#b22">24]</ref> (e.g., physical capacity of a cloud data center), which may become tight in periods of peak demand <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b10">12]</ref>. A fundamental problem in cloud computing is cloud resource allocation, i.e., to determine which user demands to satisfy at each time point. A natural goal is to maximize the social welfare of the cloud eco-system, which represents the aggregated 'happiness' of the cloud provider and the cloud users <ref type="bibr" target="#b3">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>22:2 • Zijun Zhang, Zongpeng Li, and Chuan Wu</head><p>Cloud resource allocation in practice exhibits a nature of online decision making: cloud users with job requests arrive at the cloud system at arbitrary time points, and the cloud provider decides resource allocation upon each arrival. A natural, de facto standard of cloud resource allocation is through a posted pricing mechanism: the cloud provider publishes resource prices; cloud users act as price takers who utilize the resources if the prices are acceptable (i.e., its valuation of the job exceeds the cost of resource renting), and will otherwise give up the cloud service.</p><p>Major cloud providers today, such as Amazon Web Services, Microsoft Azure, and Google Cloud, typically adopt fixed prices, i.e., resource usage is charged at fixed unit prices posted on their websites. However, a dynamic pricing strategy based on realtime demand-supply is more efficient in many scenarios <ref type="bibr" target="#b2">[4]</ref>, to fully exploit the resource capacity of a cloud system, and to better satisfy user demands. For practical cloud computing systems that employ dynamic pricing strategies, e.g., Amazon EC2 Spot Instances <ref type="bibr" target="#b0">[1]</ref>, short-term prices may not be driven by realtime demand-supply <ref type="bibr" target="#b1">[3]</ref>; however, the price differences across different service regions and over different time periods are still relevant to demand and supply. Inspired by the Spot Instances model, various dynamic pricing strategies have been proposed in recent literature, including auction mechanisms <ref type="bibr" target="#b11">[13,</ref><ref type="bibr" target="#b13">15,</ref><ref type="bibr" target="#b21">23,</ref><ref type="bibr" target="#b23">25,</ref><ref type="bibr" target="#b25">27,</ref><ref type="bibr" target="#b27">29,</ref><ref type="bibr" target="#b28">30]</ref>, and other dynamic pricing strategies for revenue maximization and efficient cloud resource utilization <ref type="bibr" target="#b12">[14,</ref><ref type="bibr" target="#b17">19,</ref><ref type="bibr" target="#b24">26]</ref>.</p><p>This work studies effective pricing functions for a cloud provider to employ, for computing unit resource prices at each time point. The computed prices are posted as 'take it or leave it' prices for cloud users to decide whether to rent the cloud resources, while users' job valuations are not revealed to the cloud provider. Such prices can also serve in a posted-price auction mechanism for cloud job admission and charging. With meticulously designed online prices, our goal is to maximize the social welfare of the cloud, which equals the overall valuation of executed user jobs, minus a possible operational cost, over the entire system span.</p><p>Both social welfare maximization and provider revenue maximization are possible goals in cloud resource allocation <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b18">20]</ref>. Social welfare represents the aggregate gain of the cloud provider and cloud users, indicating overall system efficiency. Compared to maximizing provider revenue, maximizing social welfare ensures good user experience, which is important for long-term market competitiveness of a cloud provider <ref type="bibr" target="#b26">[28]</ref>. Furthermore, for public clouds operated by nonprofit organizations, and private clouds serving internal jobs, maximizing social welfare is more relevant than maximizing revenue <ref type="bibr" target="#b16">[18]</ref>. In these cases, the pricing schemes studied in this paper can be used as mechanisms for allocating cloud resources to users based on their urgency and priorities. In the auction design literature, there further exist techniques that can relate social welfare maximizing mechanisms with revenue maximizing mechanisms <ref type="bibr" target="#b8">[10]</ref>.</p><p>Our study of the pricing functions has been partly inspired by dual price design in competitive online algorithms based on the classic primal-dual framework <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b6">8]</ref>. In primal-dual online algorithm design, a key idea is to update dual prices using exponential functions for making primal resource allocation decisions, leading to provable competitive ratios. Nonetheless, no explicit justification exists in the literature on the choice of using exponential dual price functions.</p><p>In this work, we borrow the exponential form of the pricing function from the literature of primal-dual online algorithms, and propose the optimal form of the exponential pricing functions for a fundamental cloud resource allocation problem. We then provide an intuitive explanation of the optimality of the exponential pricing function. For the first time in the literature, we generalize the pricing function to scenarios with bounded total demand, where the optimal form is no longer necessarily an exponential function. Interestingly, this result also contributes to the literature on knapsack problems, in that our problem is closely related to a variant of the online knapsack problem <ref type="bibr" target="#b9">[11]</ref>, where the total weight of items is upper bounded.</p><p>We start by investigating the basic case of a single type of cloud resource without resource recycling, and design resource pricing functions based on the current resource utilization levels that capture realtime demand-supply of cloud resources. We prove the optimality of our pricing function design. We then investigate the cases of multiple resource types, and limited resource occupation durations. Our contributions are summarized below.</p><p>First, we justify the use of exponential pricing functions in the literature of both cloud computing <ref type="bibr" target="#b11">[13,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b20">22,</ref><ref type="bibr" target="#b27">29,</ref><ref type="bibr" target="#b28">30]</ref> and online algorithms <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b6">8]</ref>, both from a theoretical point of view and with intuitive interpretation. We prove the optimality of the pricing function under mild system assumptions that are standard in recent literature.</p><p>Second, we derive the optimal pricing functions for more realistic cloud resource allocation scenarios, where the potential total demand for resources is bounded.</p><p>Third, we extend the pricing functions to take into account multiple resource types. We propose a joint pricing and scheduling strategy when the cloud system runs over multiple time slots. We prove tight competitive ratios for these scenarios, which were not properly proven in previous literature. We make no assumptions on the arrival process and the distribution of user valuations.</p><p>We further verify effectiveness of our price design in realistic cloud computing scenarios through simulation studies, with assumptions in theoretical analysis relaxed. We show that the parameters involved in our pricing functions can be practically optimized in different scenarios, to achieve consistently good performance ratios against the offline optimal social welfare.</p><p>Finally, we note that our pricing models and algorithms are generally applicable to posted pricing mechanism design in other online resource allocation systems, which share similar characteristics as a cloud computing system.</p><p>In the rest of the paper, we review related literature in Sec. 2. The basic and general models of cloud resource pricing are studied in Sec. 3 and Sec. 4, respectively. Sec. 5 presents simulation studies, and Sec. 6 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">RELATED WORK</head><p>Recently, auction mechanisms have been extensively studied for online cloud resource allocation and pricing. Zhang et al. <ref type="bibr" target="#b27">[29]</ref> design an online auction mechanism for IaaS clouds, aiming to maximize both social welfare and provider profit. Zhou et al. <ref type="bibr" target="#b28">[30]</ref> extend the auction mechanism to deal with computing jobs with soft deadlines. Shi et al. <ref type="bibr" target="#b20">[22]</ref> propose an online mechanism for virtual cluster allocation and pricing. These studies exploit the primal-dual framework for online mechanism design, and adopt exponential pricing functions to compute dual prices, for deciding resource allocation and user payments. Competitive ratios of the online mechanisms are proven, but the rational of adopting exponential pricing functions is lacking, and the optimality of such exponential functions are not studied. Indeed, a wide spectrum of increasing functions are conceivable for cloud resource pricing. Our pricing functions are applicable to both posted pricing mechanisms and online auctions. The analysis of optimality of our pricing functions is independent from the primal-dual framework.</p><p>Apart from auction mechanisms, a wide range of resource pricing schemes have been studied in the literature. While static pricing is prevalent in today's cloud market, dynamic pricing based on realtime demand-supply can be more efficient in many scenarios <ref type="bibr" target="#b2">[4]</ref>. Li et al. <ref type="bibr" target="#b12">[14]</ref> design a pricing algorithm for cloud resources, which updates current prices based on historical resource utilization ratios. Their experiment demonstrates the advantage of the pricing algorithm in terms of cost reduction and efficient resource allocation. Mihailescu and Teo <ref type="bibr" target="#b17">[19]</ref> propose a dynamic pricing scheme for federated clouds, where different cloud providers share and trade resources for enhanced scalability and reliability. They show that user welfare and the percentage of successful requests are increased by dynamic pricing, as compared to fixed pricing. The pricing schemes developed in this work are both dynamic and usage-based, i.e., the unit price of cloud resource is driven by demand-supply dynamics, and the total price is proportional to the amount and service time of requested resources.</p><p>The online social welfare maximization problem studied in this work is related to a variant of the online knapsack problem <ref type="bibr" target="#b9">[11]</ref>. Two assumptions are made in this literature: the weight of each item is much smaller than the capacity of the knapsack, and the density (value to weight ratio) of every item falls in a known range [L, U ]. Under these assumptions, Buchbinder and Naor <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b5">7]</ref> design an algorithm achieving a competitive ratio of O (log (U /L)), as well as an Ω (log (U /L)) lower bound on the competitive ratio of any algorithm. In the context scarcity level as defined by Definition 3.1 V ol (ρ*) total value obtained by an online solution, given a final utilization level ρ* V opt (ρ*) total value obtained by an optimal offline solution, given a final utilization level ρ* of advertising auctions, Zhou et al. <ref type="bibr" target="#b29">[31]</ref> design a (log (U /L) + 1)-competitive algorithm for an online knapsack problem under the above assumptions. Interestingly, their algorithm is equivalent to our proposed pricing strategy for the most basic case, as will be discussed in Sec. 3.2.1. Nevertheless, our proof of optimality is different from that given by Zhou et al. <ref type="bibr" target="#b29">[31]</ref>, and leads to an intuitive interpretation on the choice of exponential pricing functions. More importantly, the total weight of items is assumed to be unbounded in the previous work, which is impractical in real-world applications. In this work, we develop a more general pricing strategy that achieves better competitive ratios for bounded total weight, and prove the optimality of the proposed strategy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CLOUD RESOURCE PRICING: THE BASIC CASE</head><p>We start by designing pricing functions for a basic, yet fundamental version of the online resource allocation problem, following the posted pricing framework as described in Algorithm 1. By analyzing the basic case of allocating a single-type, non-recycled resource, we develop necessary techniques and theoretical results, for the online pricing and scheduling of more realistic cloud resource allocation problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The Basic Resource Allocation Problem</head><p>Consider a cloud provider whose data center is for now assumed to provision a single type of resource, to be allocated to a large number of cloud users. The users in a set U come in an arbitrary sequence. Upon arrival, a user decides immediately whether to rent cloud resources, by comparing the valuation of its job with the overall price of required resources for executing the job. Let d i denote the amount of resource demanded by a user i ∈ U, and v i be the value of successfully finishing i's job. In practice, v i is often influenced by multiple factors, such as the purpose and priority of the job, and what is gained from the job's completion. Without loss of generality, we normalize user resource demands, assuming the total amount of resource in the cloud is 1, so that d i can be considered as the proportion of the entire resource pool demanded by user i. Let p be the unit price of the resource posted by the cloud provider, which may vary over time. A user i accepts the price and rents resource at quantity d i , if and only if v i ≥ d i p, where p is the current unit resource price at the time of user arrival. Effectively, v i ALGORITHM 1: Online pricing and resource allocation Input: simply serves as a threshold for a price to be acceptable to user i. In this section, we assume that each unit of the resource, once allocated, will not be returned to the resource pool.</p><formula xml:id="formula_0">d i , v i , ∀i ∈ U Output: x i , ∀i ∈ U ρ = 0 ; //</formula><p>The utility of the cloud provider is the total payment received. The utility of a served user is the valuation of its job minus its payment. The utility of an unserved user is zero. Since payments cancel themselves, the social welfare of the entire cloud system is equivalent to the total valuation of served jobs, assuming no operational cost of the cloud.</p><p>Let x i indicate whether user i rents resource (at quantity d i ) or not upon its arrival. The social welfare maximization problem can be formulated as an integer linear program (ILP):</p><formula xml:id="formula_1">maximize i ∈U v i x i<label>(1)</label></formula><formula xml:id="formula_2">s.t.: i ∈U d i x i ≤ 1 (1a) x i ∈ {0, 1} ,∀i ∈ U (1b)</formula><p>This is a 0-1 knapsack problem, and can be solved to optimum using dynamic programming in the offline setting. However, for the online problem we investigate, the columns of the coefficient matrix of constraint (1a), corresponding to different user arrivals, are revealed one-by-one, while the value of x i is to be determined immediately when a user comes to the cloud. We apply an online resource allocation algorithm, as shown in Algorithm 1, to decide resource allocation given resource prices.</p><p>The performance of the posted pricing mechanisms in the online resource allocation algorithm clearly depends on the pricing function. We do not assume that users reveal their job valuations to the cloud provider. Consequently, the pricing strategy depends only on the demand-supply relationship of cloud resources. To evaluate the quality of a resource allocation solution, we resort to the standard notion of competitive ratio, defined as the ratio between the optimal objective value of the offline problem <ref type="bibr" target="#b0">(1)</ref> and that of the online solution. The smaller (closer to 1) the competitive ratio is, the better the online resource allocation solution. We will focus on the worst-case competitive ratio, as opposed to the average-case competitive ratio. We first make the following two mild assumptions: assumption 1. The variability of users' valuations is constrained, i.e., p ≤ v i /d i ≤ p, ∀i ∈ U, where p and p are lower bound and upper bound of the per-unit-resource job valuation of all users, respectively. assumption 2. The resource demand of each user is much smaller than the total resource capacity, i.e., d i ≪ 1, ∀i ∈ U.</p><p>Assumption 2 is standard in the literature of online resource allocation <ref type="bibr" target="#b27">[29,</ref><ref type="bibr" target="#b28">30]</ref> and online knapsack problems <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b5">7,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b29">31]</ref>, and is reasonable in large-scale data centers. We make this assumption to facilitate theoretical analysis, such that techniques from calculus (differentiation) can be applied, and rare, extreme cases can be eliminated. For example, if a high-valued bid demanding almost all the resource from a cloud provider is rejected, because a small fraction of the resource is occupied by other users, then the worst-case competitive ratio can be arbitrarily high. Such an assumption.</p><p>Nonetheless, it is possible to relax Assumption 2 to specifying an upper bound on d i instead, without significantly affecting our theoretical result. Specifically, differentiation and integration can be replaced with differences and summation, to derive similar results. We will relax this assumption in empirical studies later in the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Pricing Function Design</head><p>We design pricing functions that adjust resource prices based on realtime demand-supply. It is helpful to have some prior knowledge about the total resource demand. In practice, unlimited total resource demand is rare; an estimated upper bound on the overall resource demand can often be obtained. This is reflected through the following definition. Definition 3.1. Suppose the total resource demand of all users is upper bounded by 1 + β times the total resource supply, i.e., i ∈U d i ≤ 1 + β, with β &gt; −1. We refer to β as the scarcity level of the resource.</p><p>It is possible to have a known lower bound on the overall resource demand as well, but our algorithm design and analysis do not rely on such a lower bound.</p><p>We next present the optimal pricing function for β → ∞, and then derive the optimal pricing functions for finite β, based on the insight we gain from the analysis of the first case. We then further show in Sec. 3.3 that the results can be extended to the case with linear operational costs of cloud resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.2.1</head><p>Pricing Function for Large Total Demand. We begin with the case that the total demand for resource is much larger than the capacity of the cloud resource pool. We propose an optimal pricing function for the case that β → ∞, and then show the same pricing function is in fact optimal as long as β ≥ 1 (i.e., the overall resource demand is at least twice of the resource capacity). Definition 3.2. In Algorithm 1, oblivious of true valuations of users, a pricing function is optimal if it achieves the smallest possible worst-case competitive ratio in social welfare under Assumptions 1 and 2.</p><p>Let ρ be the resource utilization level, i.e., the amount of the resource already allocated. Note that ρ is a function of time, but this dependency is omitted for notational simplicity. The unit price of the resource at the respective resource utilization level is denoted by P 1 (ρ), designed as follows:</p><formula xml:id="formula_3">P 1 (ρ) =          p, ρ ∈ [0, 1/(log γ + 1)] pe (log γ +1)ρ−1 , ρ ∈ (1/(log γ + 1) , 1) +∞, ρ = 1 ,<label>(2)</label></formula><p>where γ = p/p. An illustration of the pricing function for p = 1, p = 10 is given in Fig. <ref type="figure" target="#fig_0">1</ref> (blue lines in both subfigures). Intuitively, when ρ is quite small, it is desirable to keep the price at the lowest level (p), to allow all potential users to rent the resource. As ρ increases, the amount of satisfied demand increases, as well as the obtained social welfare, and hence it is reasonable to raise price to filter out users with low valuations. When ρ = 1, cloud resource is exhausted, so we use an infinitely high price to reject all subsequent users. Note that even if we need the lower bound and upper bound of the per-unit-resource valuation in (2), when applying this pricing function in online resource allocation, we can use estimates of the bounds, which can be further calibrated over time as more users arrive and more price taking decisions are learned.</p><p>We next prove the worst-case competitive ratio of Algorithm 1 when using the pricing function in (2), as well as the optimality of the pricing function when β → ∞ (this default condition omitted in all lemmas, claims and theorems before Theorem 3.8), and then generalize the conclusion to the case β ≥ 1 in Theorem 3.8.</p><p>Definition 3.3. ρ* ∈ [0, 1] denotes the final utilization level of the resource after all users have decided whether to rent the cloud resource to execute their jobs.</p><p>The following lemma implies that when the final resource utilization level is low, the total demand of potential users also tends to be low, thus it is possible to satisfy all user demands online. Lemma 3.4. If ρ* ∈ [0, 1/(log γ + 1)], the worst-case competitive ratio achieved by Algorithm 1 using the pricing function in</p><formula xml:id="formula_4">(2) is α 1,1 = 1.</formula><p>Proof. According to the pricing function in (2), for ρ ∈ [0, 1/(log γ + 1)], the unit price is a constant, p, which by Assumption 1 is acceptable to any potential user, thus ρ* ∈ [0, 1/(log γ + 1)] implies that the total demand of all users is exactly ρ*. The social welfare achieved by the pricing function in (2) is the total value of all users, which is also the maximum possible social welfare achieved by solving the offline problem <ref type="bibr" target="#b0">(1)</ref>. Therefore, the worst-case competitive ratio is 1. □</p><p>For a final utilization level ρ*, let V ol (ρ*) be the total value obtained by an online solution, and V opt (ρ*) be that obtained by an optimal offline solution. Thus, in any worst case, the ratio</p><formula xml:id="formula_5">V opt (ρ*)/V ol (ρ*) is maximized. Lemma 3.5. If ρ* ∈ (1/(log γ + 1) , 1]</formula><p>, the worst-case competitive ratio achieved by Algorithm 1 using the pricing function in</p><formula xml:id="formula_6">(2) is α 1,2 = log γ + 1.</formula><p>Proof. For any ρ* ∈ (1/(log γ + 1) , 1], the worst case of the online solution is that the valuations of satisfied users are the same as the prices they accept. By Assumption 2, the minimum total value of an online solution is</p><formula xml:id="formula_7">V ol (ρ*) = ∫ ρ* 0 P 1 (ρ) dρ = p log γ + 1 e (log γ +1)ρ*−1 ,<label>(3)</label></formula><p>22:8 • Zijun Zhang, Zongpeng Li, and Chuan Wu as shown by the blue area under the curve (AUC) in Fig. <ref type="figure" target="#fig_0">1b</ref>. At the same time, any unsatisfied user has a unit value smaller than P 1 (ρ*), because otherwise ρ* cannot be the final resource utilization. Hence in the worst case, there can be a set of unsatisfied users with a total demand of 1 (i.e., i ∈U opt d i = 1, ∀r ∈ R, where U opt is the set of users chosen by the optimal offline solution), and each with a unit value of P 1 (ρ*) − ϵ i , where ϵ i is an arbitrarily small positive number, such that the optimal offline solution is to satisfy their demands with all available resource. This yields the maximum optimal offline value given Eq. ( <ref type="formula" target="#formula_7">3</ref>):</p><formula xml:id="formula_8">V opt (ρ*) = i ∈U opt d i (p (ρ*) − ϵ i ) = p (ρ*) − ϵ = pe (log γ +1)ρ*−1 − ϵ,<label>(4)</label></formula><p>as shown by the red AUC (partially covered by the blue one) in Fig. <ref type="figure" target="#fig_0">1b</ref>. Here, ϵ = i ∈U opt ϵ i , and hence can also be arbitrarily small. Note that, there can be a case which leads to a larger optimal offline total value, by increasing the online value corresponding to ρ ∈ [0, ρ*] (i.e., the blue AUC in Fig. <ref type="figure" target="#fig_0">1b</ref>) until it is large enough and becomes part of the optimal offline value. However, the online value will increase more than the optimal offline value does in this case, making it impossible to be a worst case. Therefore, the worst-case competitive</p><formula xml:id="formula_9">ratio α 1,2 = sup ϵ &gt;0 V opt (ρ*) V ol (ρ*) = log γ + 1, ∀ρ* ∈ (1/(log γ + 1) , 1]. □</formula><p>An illustration of the worst-case competitive ratio at different final resource utilization levels is shown in Fig. <ref type="figure" target="#fig_2">1a</ref> (red line).</p><p>Theorem 3.6. The worst-case competitive ratio of Algorithm 1 using the pricing function in (2) is</p><formula xml:id="formula_10">α 1 = log γ + 1.<label>(5)</label></formula><p>Proof. The worst-case competitive ratio of the pricing function in (2) is the maximum possible competitive ratio for all ρ* ∈ [0, 1]. Hence following Lemma 3.4 and 3.5,</p><formula xml:id="formula_11">α 1 = max α 1,1 , α 1,2 = log γ + 1. □</formula><p>We next show the optimality of the pricing function based on the observation that, to achieve a finite worst-case competitive ratio, any pricing function should contain a constant (p) part at the beginning of the function. Proof. If the claim does not hold and P (0) &gt; p, there can be a case where ρ* = 0, such that the online total value V ′ ol (ρ*) = 0, while the optimal offline total value V ′ opt (ρ*) = P (0) − ϵ &gt; 0, where ϵ is an arbitrarily small positive number. Thus the worst-case competitive ratio α ≥ sup ϵ &gt;0</p><formula xml:id="formula_12">V ′ opt (ρ*) V ′ ol (ρ*)</formula><p>= +∞, which contradicts the assumption that α is finite. If the claim does not hold and P (0) = p, there must be a ρ 0 ∈ (0, 1/α] such that P (ρ 0 ) &gt; P (ρ) , ∀ρ ∈ [0, ρ 0 ). There can be a case where ρ* = ρ 0 , such that the online total value</p><formula xml:id="formula_13">V ′ ol (ρ*) = ∫ ρ 0 0 P (ρ) dρ &lt; ρ 0 P (ρ 0 ) ,</formula><p>while the optimal offline total value V ′ opt (ρ*) = P (ρ 0 )−ϵ. Thus the worst-case competitive ratio α ≥ sup ϵ &gt;0</p><formula xml:id="formula_14">V ′ opt (ρ*) V ′ ol (ρ*) &gt; 1/ρ 0 , which contradicts ρ 0 ≤ 1/α. □</formula><p>Theorem 3.7. the pricing function in (2) is optimal according to Definition 3.2, i.e., using it Algorithm 1 achieves the smallest worst-case competitive ratio.</p><p>Proof. We prove this theorem by way of contradiction. Assume that there exists a pricing function, P ′ 1 (ρ), which achieves a worst-case competitive ratio α ′ 1 &lt; α 1 . According to Claim 3.1 and Theorem 3.6, we have</p><formula xml:id="formula_15">P ′ 1 (ρ) = p, ∀ρ ∈ 0, 1/α ′ 1 , and hence ∫ 1/α ′ 1 0 P ′ 1 (ρ) dρ &lt; ∫ 1/α ′ 1 0 P 1 (ρ) dρ,</formula><p>where P 1 (ρ) is the pricing function in (2).</p><p>If there exists some ρ ∈ 1/α ′ 1 , 1 such that P ′ 1 (ρ) ≥ P 1 (ρ) we find the smallest one, and denote it by ρ 1 . Then there can be a case where ρ* = ρ 1 , such that the online total value</p><formula xml:id="formula_16">V ′ ol (ρ*) = ∫ ρ 1 0 P ′ 1 (ρ) dρ &lt; ∫ ρ 1 0 P 1 (ρ) dρ = V ol (ρ*) ,</formula><p>while the optimal offline total value</p><formula xml:id="formula_17">V ′ opt (ρ*) = P ′ 1 (ρ 1 ) − ϵ ≥ P 1 (ρ 1 ) − ϵ = V opt (ρ*)</formula><p>, where ϵ is an arbitrarily small positive number. Thus the worst-case competitive ratio</p><formula xml:id="formula_18">α ′ 1 ≥ sup ϵ &gt;0 V ′ opt (ρ*) V ′ ol (ρ*) &gt; sup ϵ &gt;0 V opt (ρ*) V ol (ρ*) = α 1 , contradicting the assumption α ′ 1 &lt; α 1 . Therefore, P ′ 1 (ρ) &lt; P 1 (ρ) , ∀ρ ∈ 1/α ′ 1 , 1 . For ρ* = 1, since P ′ 1<label>(1)</label></formula><p>≤ p (a unit price higher than p will have all potential users rejected) is finite, we now have</p><formula xml:id="formula_19">V ′ ol (ρ*) = ∫ 1 0 P ′ 1 (ρ) dρ &lt; ∫ 1 0 P 1 (ρ) dρ = V ol (ρ*) .</formula><p>However, as cloud resource is exhausted, subsequent users will not be served, regardless of their valuations. There can be a case where the optimal offline total value</p><formula xml:id="formula_20">V ′ opt (ρ*) = p = V opt (ρ*). Thus the worst-case competitive ratio α ′ 1 ≥ V ′ opt (ρ*) V ′ ol (ρ*) &gt; V opt (ρ*) V ol (ρ*) = α 1 , contradicting the assumption that α ′ 1 &lt; α 1 . □</formula><p>We next generalize the optimality result for all β ≥ 1.</p><p>Theorem 3.8. For β ≥ 1, the pricing function in (2) is optimal according to Definition 3.2, and the corresponding worst-case competitive ratio is α 1 .</p><p>Proof. For any possible input set of users, we can prune the users that can be satisfied by neither the online solution or the optimal offline solution, without affecting the online or offline social welfare, given a certain pricing function. Clearly, the resulting set of users has a total demand no greater than 2, which can also happen given any β ≥ 1. Consequently, all the discussions above can be generalized to β ≥ 1. □</p><p>The following property (which holds for all β ≥ 1) is useful for guiding the design of pricing functions in more realistic cloud computing scenarios. Property 1. For the pricing function in (2), and any ρ* ∈ (1/α 1 , 1], i.e., the monotonically increasing part of P 1 (ρ), we have sup</p><formula xml:id="formula_21">ϵ &gt;0 V opt (ρ*) = α 1 V ol (ρ*) ,<label>(6)</label></formula><p>and hence</p><formula xml:id="formula_22">d sup ϵ &gt;0 V opt (ρ*) dρ* = α 1 dV ol (ρ*) dρ* ,<label>(7)</label></formula><p>and a constant (w.r.t. ρ*) worst-case competitive ratio, α 1 .</p><p>Proc  Proof. This a corollary that follows from Eq. ( <ref type="formula" target="#formula_7">3</ref>), (4), Lemma 3.5 and Theorem 3.5. □ Property 1 is illustrated in Fig. <ref type="figure" target="#fig_0">1b</ref>, where the light red area corresponds to dV opt (ρ*)</p><formula xml:id="formula_23">d ρ* ρ*=0.7</formula><p>, and the light blue area corresponds to dV ol (ρ*)</p><formula xml:id="formula_24">d ρ* ρ*=0.7</formula><p>. Intuitively, this property implies the best trade-off between the worst-case competitive ratios corresponding to different ρ* values. That is, any changes to the pricing function in (2) that may decrease the competitive ratio for some ρ*, will increase the competitive ratio for some other ρ*, and thus can only lead to a worse competitive ratio over all possible values of ρ*.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.2.2</head><p>Pricing Function for Small Total Demand. In the case that β ∈ (−1, 0], the total resource demand is no larger than the total resource supply. The optimal strategy is simply serving all user demands by setting a unit resource price below the smallest per-unit-resource valuation of cloud users. Theorem 3.9. For β ∈ (−1, 0], pricing function</p><formula xml:id="formula_25">P 4 (ρ) = p<label>(8)</label></formula><p>is optimal according to Definition 3.2, and the corresponding worst-case competitive ratio achieved by Algorithm 1 is 1.</p><p>The proof is straightforward and hence omitted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Pricing Function for</head><p>Total Demand Up to Twice of Supply. In the case that β ∈ (0, 1), we first derive pricing functions that have Property 1, and then prove the optimality of the functions. In the following derivation, we assume that all pricing functions are continuous and non-decreasing, for the solution existence of our differential equations. However, the assumptions are not required by the proof of optimality. The following claim will be useful in the derivation. Claim 3.2. For any β &gt; −1, if a pricing function P (ρ) leads to a finite worst-case competitive ratio of α, then</p><formula xml:id="formula_26">P (ρ) = p, ∀ρ ∈ [0, 1/α].</formula><p>Proof. For β &gt; 0, the proof is similar to that of Claim 3.1 and is omitted. For β ∈ (−1, 0], the claim follows immediately from Theorem 3.9. □</p><p>Our derivation of the pricing function is further divided into two cases.</p><p>Case 1: β ∈ (β 0 , 1) where β 0 ∈ (0, 1), such that β &gt; 1/α 2 and α 2 is the worst-case competitive ratio achieved using the optimal pricing function for β ∈ (β 0 , 1). According to Claim 3.2, the pricing function</p><formula xml:id="formula_27">P 2 (ρ) = p, ∀ρ ∈ [0, 1/α 2 ].</formula><p>When ρ* ∈ (1/α 2 , 1), as discussed for Eq. ( <ref type="formula" target="#formula_7">3</ref>), the minimum total value of an online solution is</p><formula xml:id="formula_28">V ol (ρ*) = ∫ ρ* 0 P 2 (ρ) dρ,<label>(9)</label></formula><p>and hence</p><formula xml:id="formula_29">dV ol (ρ*) dρ* = d ∫ ρ* 0 P 2 (ρ) dρ dρ* = P 2 (ρ*) ,<label>(10)</label></formula><p>which is illustrated by the light blue area in Fig. <ref type="figure" target="#fig_3">2a</ref>. Since P 2 (ρ) is non-decreasing, when ρ* ∈ (1/α 2 , β], we still have V opt (ρ*) = P 2 (ρ*) − ϵ as discussed for Eq. ( <ref type="formula" target="#formula_8">4</ref>), where ϵ is an arbitrarily small positive value. Thus</p><formula xml:id="formula_30">d sup ϵ &gt;0 V opt (ρ*) dρ* = dP 2 (ρ*) dρ* . (<label>11</label></formula><formula xml:id="formula_31">)</formula><p>It follows from Eq. ( <ref type="formula" target="#formula_22">7</ref>), ( <ref type="formula" target="#formula_29">10</ref>) and ( <ref type="formula" target="#formula_30">11</ref>) that</p><formula xml:id="formula_32">dP 2 (ρ) dρ − α 2 P 2 (ρ) = 0. (<label>12</label></formula><formula xml:id="formula_33">)</formula><p>Solving the differential equation above gives P 2 (ρ) = Ce α 2 ρ , where C is a constant to be determined. Since we assumed the continuity of P 2 (ρ), we let lim ρ→1/α 2 + P 2 (ρ) = P 2 (1/α 2 ) = p, and then we obtain C = p/e, and</p><formula xml:id="formula_34">P 2 (ρ) = pe α 2 ρ−1 , ∀ρ ∈ (1/α 2 , β].</formula><p>When ρ* ∈ (β, 1), having a set of users with a unit value of P 2 (ρ*) − ϵ to consume all resource is no longer possible in the worst case. Instead, there can be a set of unsatisfied users with a total demand of 1 + β − ρ*, and with a unit value of P 2 (ρ*) − ϵ, such that the optimal offline solution yields the maximum optimal offline total value given Eq. ( <ref type="formula" target="#formula_28">9</ref>):</p><formula xml:id="formula_35">V opt (ρ*) = (1 + β − ρ*) (P 2 (ρ*) − ϵ) + ∫ ρ* β P 2 (ρ) dρ,<label>(13)</label></formula><p>as shown by the red and yellow AUCs (partially covered by the blue one) in Fig. <ref type="figure" target="#fig_3">2a</ref>. We have</p><formula xml:id="formula_36">d sup ϵ &gt;0 V opt (ρ*) dρ* = (1 + β − ρ*) dP 2 (ρ*) dρ* ,<label>(14)</label></formula><p>which is illustrated by the light red areas in Fig. <ref type="figure" target="#fig_3">2a</ref>. Note that, there can be a case which leads to a larger optimal offline total value, by increasing the value corresponding to ρ ∈ [β, ρ*] (i.e., the yellow AUC in Fig. <ref type="figure" target="#fig_3">2a</ref>). Suppose the increased optimal offline total value is V opt (ρ*) + ∆ (∆ &gt; 0), the online total value will also be increased to V ol (ρ*) + ∆. However, since the competitive ratio now changes to sup ϵ &gt;0</p><formula xml:id="formula_37">V opt (ρ*)+∆ V ol (ρ*)+∆ &lt; sup ϵ &gt;0 V opt (ρ*) V ol (ρ*)</formula><p>, it cannot be the worst case. It follows from Eq. ( <ref type="formula" target="#formula_22">7</ref>), ( <ref type="formula" target="#formula_29">10</ref>) and ( <ref type="formula" target="#formula_36">14</ref>) that</p><formula xml:id="formula_38">(1 + β − ρ) dP 2 (ρ) dρ − α 2 P 2 (ρ) = 0. (<label>15</label></formula><formula xml:id="formula_39">)</formula><p>Solving the differential equation above gives</p><formula xml:id="formula_40">P 2 (ρ) = C(1 + β − ρ) −α 2 ,</formula><p>where C is a constant to be determined. Again, due to the continuity of P 2 (ρ), we let lim ρ→β + P 2 (ρ) = P 2 (β) = pe α 2 β −1 . Then we obtain C = pe α 2 β −1 , and</p><formula xml:id="formula_41">P 2 (ρ) = pe α 2 β −1 (1 + β − ρ) −α 2 , ∀ρ ∈ (β, 1].</formula><p>To have a constant competitive ratio at ρ* = 1− and ρ* = 1, as suggested by Property 1, we let P 2 (1) = pe α 2 β −1 β −α 2 = p = γp, which leads to</p><formula xml:id="formula_42">α 2 = log γ + 1 β − log β . (<label>16</label></formula><formula xml:id="formula_43">)</formula><p>To obtain the value of β 0 , let β = β 0 = 1/α 2 . By Eq. ( <ref type="formula" target="#formula_42">16</ref>), we obtain</p><formula xml:id="formula_44">β 0 = W (log γ ) log γ . (<label>17</label></formula><formula xml:id="formula_45">)</formula><p>Here, W (•) is the Lamber W -function (a.k.a. the omega function or the product logarithm), which is the inverse function of f (W ) = W e W . Therefore, for β ∈ (β 0 , 1), the pricing function is   An example of P 2 (ρ) is shown in Fig. <ref type="figure" target="#fig_3">2b</ref> by the dashed line corresponding to β = 0.5, where β 0 = 0.399. In practice, β can be estimated or optimized against competitive ratios.</p><formula xml:id="formula_46">P 2 (ρ) =                p, ρ ∈ [0, 1/α 2 ] pe α 2 ρ−1 , ρ ∈ (1/α 2 , β] pe α 2 β −1 (1 + β − ρ) −α 2 , ρ ∈ (β, 1) +∞, ρ = 1 . (<label>18</label></formula><p>Theorem 3.10. For β ∈ (β 0 , 1), the pricing function in <ref type="bibr" target="#b16">(18)</ref> is optimal according to Definition 3.2, and the corresponding worst-case competitive ratio is α 2 .</p><p>Proof. The proof of the worst-case competitive ratio α 2 follows that of Theorem 3.6, and is omitted. Suppose there exists a pricing function, P ′ 2 (ρ), which achieves a worst-case competitive ratio α ′ 2 &lt; α 2 . According to Claim 3.2 and the proof of Theorem 3.7, we have</p><formula xml:id="formula_47">∫ β 0 P ′ 2 (ρ) dρ &lt; ∫ β 0 P 2 (ρ) dρ,</formula><p>where P 2 (ρ) is the pricing function in <ref type="bibr" target="#b16">(18)</ref>. If there exists some ρ ∈ (β, 1) such that P ′ 2 (ρ) ≥ P 2 (ρ), we identify the smallest one and denote it by ρ 1 . Then there can be a case where ρ* = ρ 1 , such that the online total value</p><formula xml:id="formula_48">V ′ ol (ρ*) = ∫ ρ 1 0 P ′ 2 (ρ) dρ &lt; ∫ ρ 1 0 P 2 (ρ) dρ − ∆ = V ol (ρ*) − ∆,</formula><p>where ∆ = ∫ ρ 1 β P 2 (ρ) − P ′ 2 (ρ) dρ; while the optimal offline total value V ′ opt (ρ*) ≥ V opt (ρ*) − ∆ according to Eq. ( <ref type="formula" target="#formula_35">13</ref>). Thus the worst-case competitive ratio</p><formula xml:id="formula_49">α ′ 2 ≥ sup ϵ &gt;0 V ′ opt (ρ*) V ′ ol (ρ*) &gt; sup ϵ &gt;0 V opt (ρ*)−∆ V ol (ρ*)−∆ &gt; α 2 , contradicting the assumption α ′ 2 &lt; α 2 . Therefore, P ′ 2 (ρ) &lt; P 2 (ρ) , ∀ρ ∈ (β,<label>1</label></formula><p>). For ρ* = 1, since P ′ 2 (1) ≤ p (a unit price higher than p will reject all potential users) is finite, we now have</p><formula xml:id="formula_50">V ′ ol (ρ*) = ∫ 1 0 P ′ 2 (ρ) dρ &lt; ∫ 1 0 P 2 (ρ) dρ − ∆ = V ol (ρ*) − ∆,</formula><p>where ∆ = ∫ 1 β P 2 (ρ) − P ′ 2 (ρ) dρ. However, as the resource is exhausted, subsequent users will not be satisfied regardless of their valuations. There can be a case where the optimal offline total value V ′ opt (ρ*) = V opt (ρ*) − ∆ according to Eq. ( <ref type="formula" target="#formula_35">13</ref>). Thus the worst-case competitive ratio α</p><formula xml:id="formula_51">′ 2 ≥ V ′ opt (ρ*) V ′ ol (ρ*) &gt; V opt (ρ*)−∆ V ol (ρ*)−∆ &gt; α 2 , contradicting the assumption α ′ 2 &lt; α 2 . □ Case 2: β ∈ (0, β 0 ].</formula><p>From the definition of β 0 , we have β ≤ 1/α 3 , where α 3 is the worst-case competitive ratio of the optimal pricing function in this case. According to Claim 3.2, the pricing function</p><formula xml:id="formula_52">P 3 (ρ) = p, ∀ρ ∈ [0, 1/α 3 ].</formula><p>When ρ* ∈ (1/α 3 , 1), V ol (ρ*) follows Eq. ( <ref type="formula" target="#formula_29">10</ref>) with P 2 (ρ*) replaced by P 3 (ρ*); V opt (ρ*) follows Eq. ( <ref type="formula" target="#formula_35">13</ref>), ( <ref type="formula" target="#formula_36">14</ref>) with P 2 (ρ*) replaced by P 3 (ρ*). Then, following Eq. ( <ref type="formula" target="#formula_38">15</ref>), we have</p><formula xml:id="formula_53">P 3 (ρ) = C(1 + β − ρ) −α 3 .</formula><p>As discussed for Eq. ( <ref type="formula" target="#formula_42">16</ref>), we let lim ρ→1/α 3 + P 3 (ρ) = P 3 (1/α 3 ) = p, P 3 (1) = p = γp. Solving the resulting equations:</p><formula xml:id="formula_54">C 1 + β − 1 α 3 −α 3 = p, Cβ −α 3 = γp, we get α 3 = log γ (1 + β) log γ − W βγ 1+β log γ ,<label>(19)</label></formula><p>and the pricing function for β ∈ (0, β 0 ] is:</p><formula xml:id="formula_55">P 3 (ρ) =          p, ρ ∈ [0, 1/α 3 ] pγ β α 3 (1 + β − ρ) −α 3 , ρ ∈ (1/α 3 , 1) +∞, ρ = 1 . (<label>20</label></formula><formula xml:id="formula_56">)</formula><p>An example of P 3 (ρ) is shown in Fig. <ref type="figure" target="#fig_3">2b</ref> by the dashed line corresponding to β = 0.2. Theorem 3.11. For β ∈ (0, β 0 ], the pricing function in <ref type="bibr" target="#b18">(20)</ref> is optimal according to Definition 3.2, and the corresponding worst-case competitive ratio is α 3 .</p><p>Proof. The proof is similar to that of Theorem 3.10 and is omitted. □</p><p>For better illustrating how β ∈ (0, 1) affects the competitive ratio as dictated by Theorems 3.8, 3.10 and 3.11, we plot the competitive ratio as a function of β in Fig. <ref type="figure" target="#fig_4">3</ref>. As shown in the figure, for a certain value of γ , the competitive ratio decreases with the decrease of β, and reaches the minimum value 1 when β drops to 0. Putting Eq. (2), ( <ref type="formula" target="#formula_46">18</ref>) and ( <ref type="formula" target="#formula_55">20</ref>) together, we have obtained a 2-dimensional piecewise pricing function, P (ρ; β). An illustration of the pricing function is given in Fig. <ref type="figure" target="#fig_5">4</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Linear Operational Cost</head><p>Resource provisioning in real-world cloud computing systems often incurs an operational cost. If such cost is proportional to the amount of resources provisioned, then we have a linear operational cost <ref type="bibr" target="#b27">[29]</ref>. We can extend the proposed pricing strategy to accommodate such linear operational cost by making two modifications. First, we replace Assumption 1 by: assumption 3. The variability of users' valuations is constrained, i.e., p</p><formula xml:id="formula_57">+ c ≤ v i /d i ≤ p + c.</formula><p>Here, c ≥ 0 is the operational cost of using a unit of resource. Second, we replace the pricing functions (2), ( <ref type="formula" target="#formula_46">18</ref>) and <ref type="bibr" target="#b18">(20)</ref>, by P ′ 1 (ρ) = P 1 (ρ) + c, P ′ 2 (ρ) = P 2 (ρ) + c and P ′ 3 (ρ) = P 3 (ρ) + c. Then all discussions about the proposed pricing strategy remain valid, including the proof of optimality. In the rest of this paper, we ignore operational cost for simplicity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">PRICING MULTIPLE RESOURCE TYPES WITH RESOURCE RECYCLING</head><p>In this section, we extend our resource allocation problem in (1) to one with multiple types of resources (Sec. 4.1), and then further investigate the practical case where resource occupation spans multiple time slots (Sec. 4.2). We show that, by carefully designing the pricing and scheduling strategy, the worst-case competitive ratio in social welfare will not be influenced by the number of resource types, or by the number of requested time slots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Pricing Function for Multiple Types of Resources</head><p>Now we consider a cloud system that provisions multiple types of resources in a set R, as exemplified by CPU, GPU, RAM, and disk storage. Let d i,r be user i's demand for resource r , ∀r ∈ R. Again, we assume the total amount of each type of resource is 1, so that d i,r is the proportion of the overall supply of resource r demanded by i.</p><p>The offline social welfare maximization problem is:</p><formula xml:id="formula_58">maximize i ∈U v i x i (21) s.t.: i ∈U d i,r x i ≤ 1,∀r ∈ R (21a) x i ∈ {0, 1} ,∀i ∈ U (21b)</formula><p>The online resource allocation algorithm we apply to determine x i immediately after user i arrives at the cloud, is the same as Alg. 1, except that d i and the pricing function will be redefined.</p><p>Given the optimal pricing functions (2) (for β ≥ 1), ( <ref type="formula" target="#formula_46">18</ref>) (for β ∈ (β 0 , 1)), ( <ref type="formula" target="#formula_55">20</ref>) (for β ∈ (0, β 0 ]) and ( <ref type="formula" target="#formula_25">8</ref>) (for β ∈ (−1, 0]) in case of a single resource type, we can simply price each type of resource independently as p r , using these pricing functions, and sum them up by r ∈R d i,r p r to form a total price; a user i accepts the prices and rents resources at quantities d i,r 's, if and only if v i is no smaller than the total price. Before doing so, we need to redefine p and p. One way is to define them for each type of resource independently, as p r = inf i v i d i, r , and p r = sup i v i d i, r , as done by Zhang et al. <ref type="bibr" target="#b27">[29]</ref>. However, a drawback of this definition is that p r can be infinite, as we do not assume that every user demands all types of resources. A remedy is to define the same p and p for all types of resources, as p = inf i v i d i , and p = sup i v i d i , where d i = r ∈R d i,r . In this way, Assumption 1 or 3 remains intact. The definitions of p and p are a simple extension of Assumption 1 to the multi-resource case. Compared to the former definition, they do not make any (implicit) assumptions on the ratio of different resources each user demands, and thus are more practical. Moreover, summing up the demand for different types of resources is reasonable when each d i,r is normalized by the total supply of the corresponding resource, such that their values are all in the range of [0, 1]. Then given the resource utilization ρ r and scarcity level β r of each type of resource r ∈ R, we define an average unit price for any resource for user i as</p><formula xml:id="formula_59">P i ρ = 1 d i r ∈R d i,r P (ρ r ; β r ) (<label>22</label></formula><formula xml:id="formula_60">)</formula><p>where ρ denotes the vector of ρ r , ∀r ∈ R, and P (ρ r ; β r ) is defined by Eq. ( <ref type="formula" target="#formula_3">2</ref>), ( <ref type="formula" target="#formula_46">18</ref>), ( <ref type="formula" target="#formula_55">20</ref>) and <ref type="bibr" target="#b6">(8)</ref>. Therefore, d i P i ρ is the total price for user i. Note that we omit β r in P i ρ for notation simplicity, but different β r will lead to different P i ρ . While it is traightforward to adapt the pricing strategy for a single resource type to multiple resource types, the resulting worst-case competitive ratio will be different. Specifically, we denote the final resource utilization level of resource r by ρ r *, ∀r ∈ R, according to Definition 3.3, and analyze competitive ratios in three cases: (i) ρ r * ∈ [0, 1/α r ] , ∀r ∈ R; (ii) there exists an r ∈ R such that ρ r * ∈ (1/α r , 1), but no r ∈ R such that ρ r * = 1; (iii) there exists an r ∈ R such that ρ r * = 1. Here, α r is defined by Eq. ( <ref type="formula" target="#formula_10">5</ref>), ( <ref type="formula" target="#formula_42">16</ref>) or <ref type="bibr" target="#b17">(19)</ref> for β = β r . We denote the three cases by ρ* ∈ Ω 1 , ρ* ∈ Ω 2 and ρ* ∈ Ω 3 , respectively, and observe that Ω 1 ∪ Ω 2 ∪ Ω 3 covers all possible values of ρ*. Without loss of generality, here we assume not all β r ≤ 0; otherwise the worst-case competitive ratio would be 1. Lemma 4.1. For ρ* ∈ Ω 1 , the worst-case competitive ratio achieved by Alg. 1 using pricing function <ref type="bibr" target="#b20">(22)</ref> for multiple types of resources is α 1 = 1.</p><p>Proof. For ρ* ∈ Ω 1 , according to the pricing function in <ref type="bibr" target="#b20">(22)</ref>, P i ρ* = p, which by Assumption 1 is acceptable to any potential users, thus the total demand of all users for resource r is exactly ρ r *. The social welfare achieved by the pricing function in <ref type="bibr" target="#b20">(22)</ref> is the total value of all users, which is also the maximum possible social welfare achieved by solving the offline problem <ref type="bibr" target="#b19">(21)</ref>. Therefore, the worst-case competitive ratio α 1 = 1. □ For ρ* ∈ Ω 2 , we first present the following claim, which states that worst cases happen when all users demand only one specific type of resource, driving the average unit price to slightly beyond p.</p><formula xml:id="formula_61">Claim 4.1. Let ρ r * ∈ [0, 1/α r ] for r ∈ R 1 , ρ r * ∈ (1/α r , 1) for r ∈ R 2 , where R 1 ∪ R 2 = R. For ρ* ∈ Ω 2 ,</formula><p>there exists a worst case that happens when ρ r * = 0 for r ∈ R 1 , and ρ r * = 1/α r + ϵ for r ∈ R 2 , where |R 2 | = 1. Here, ϵ is an arbitrarily small number.</p><p>The proof can be found in the appendix. Lemma 4.2. For ρ* ∈ Ω 2 , the corresponding worst-case competitive ratio α 2 = α r r ∈R min {1, 1 + β r }, where α r is defined by Eq. ( <ref type="formula" target="#formula_10">5</ref>), ( <ref type="formula" target="#formula_42">16</ref>) or <ref type="bibr" target="#b17">(19)</ref> for β = β r , and r = arg max r ∈R α r .</p><p>Proof. According to Claim 4.1, we let ρ r * = 0 for r ∈ R 1 , and ρ r * = 1/α r + ϵ for r ∈ R 2 , and let |R 2 | = 1. Then from Eq. ( <ref type="formula" target="#formula_93">31</ref>) and (32), R 2 = {r } maximizes α ρ* , and thus is a worst case for ρ* ∈ Ω 2 . The corresponding competitive ratio</p><formula xml:id="formula_62">α 2 = sup ϵ &gt;0 r ∈R p min {1, 1 + β r } pρ r * = α r r ∈R min {1, 1 + β r } .<label>(23)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>□</head><p>For ρ* ∈ Ω 3 , the following claim states that worst cases happen when all users satisfied by an online solution demand only one specific type of resource until it is exhausted.</p><formula xml:id="formula_63">Claim 4.2. Let ρ r * ∈ [0, 1) for r ∈ R 3 , ρ r * = 1 for r ∈ R 4 , where R 3 ∪ R 4 = R. For ρ* ∈ Ω 3 ,</formula><p>there exists a worst case that happens when ρ r * = 0 for r ∈ R 3 , and ρ r * = 1 for r ∈ R 4 , where</p><formula xml:id="formula_64">|R 4 | = 1.</formula><p>The proof can be found in the appendix. Lemma 4.3. For ρ* ∈ Ω 3 , the corresponding worst-case competitive ratio α 3 ≥ α r r ∈R min {1, 1 + β r }.</p><p>Proof. According to Claim 4.2, we let ρ r * = 0 for r ∈ R 3 , and ρ r * = 1 for r ∈ R 4 , and let |R 4 | = 1. Then from Eq. ( <ref type="formula">33</ref>) and (34), we have the worst-cast competitive ratio for ρ* ∈ Ω 3</p><formula xml:id="formula_65">α 3 = max r ′ ∈R ′ r ∈R\{r ′ } p min {1, 1 + β r } + α r ′ ∫ 1 0 P (ρ; β r ′ ) dρ ∫ 1 0 P (ρ; β r ′ ) dρ ,<label>(24)</label></formula><p>where R ′ = {r |β r &gt; 0}. Since it is assumed that β r &gt; 0, we have min {1, 1 + β r } = 1, and hence</p><formula xml:id="formula_66">α r ∫ 1 0 P (ρ; β r ) dρ ∫ 1 0 P (ρ; β r ) dρ = p min {1, 1 + β r } p/α r .</formula><p>And since α r ∫ 1 0 P (ρ; β r ) dρ ≤ p min {1, 1 + β r }, we have</p><formula xml:id="formula_67">α 3 ≥ r ∈R\{r } p min {1, 1 + β r } + α r ∫ 1 0 P (ρ; β r ) dρ ∫ 1 0 P (ρ; β r ) dρ ≥ r ∈R p min {1, 1 + β r } p/α r = α r r ∈R min {1, 1 + β r } .</formula><p>□ By Lemma 4.1, 4.2 and 4.3, we have the following theorem:</p><p>Theorem 4.4. The worst-case competitive ratio achieved by Alg. 1 using the pricing function in <ref type="bibr" target="#b13">(15)</ref> for multiple types of resources is given by Eq. <ref type="bibr" target="#b22">(24)</ref>.</p><p>As shown by Lemma 4.3, the worst-case competitive ratio for multiple resource types increases roughly linearly with the number of resource types. However, from Claim 4.1, 4.2, and the analysis above, it is clear that the worst cases happen in rather extreme scenarios, where all satisfied users demand only one type of resource, unrealistic in practical cloud computing systems. In fact, the supply of and the demand for resources in a cloud computing system are often balanced to some extent, since otherwise the supply would be adjusted to better meet the demand of users and to improve the system efficiency. Hence, we make the following realistic assumption: assumption 4. All types of resources share a common scarcity level, β R &gt; 0, and hence a common α R as defined by Eq. ( <ref type="formula" target="#formula_10">5</ref>), ( <ref type="formula" target="#formula_42">16</ref>) or <ref type="bibr" target="#b17">(19)</ref> for β = β R ; and the final utilization vector, ρ*, follows</p><formula xml:id="formula_68">min r ∈R ρ r * max r ∈R ρ r * ≥ η.<label>(25)</label></formula><p>Assumption 4 leads to an improved competitive ratio. </p><formula xml:id="formula_69">α 2 = | R | 1+( | R |−1)η α R . Since η ≤ 1, we have α 2 ≤ α R /η. For ρ* ∈ Ω 3 , as ϵ → 0, any worst case gives V ol ρ* = ∫ 1 0 P (ρ; β R ) dρ + (|R| − 1) ∫ η 0 P (ρ; β R ) dρ,<label>and</label></formula><formula xml:id="formula_70">V opt ρ* = α R V ol ρ* + (|R| − 1) (1 + β R − η) p − P (η; β R ) ,</formula><p>and hence the corresponding competitive ratio</p><formula xml:id="formula_71">α 3 = α R + (1 + β R − η) p − P (η; β R ) ∫ 1 0 P (ρ; β R ) dρ/(|R| − 1) + ∫ η 0 P (ρ; β R ) dρ . Let θ = (1 + β R − η) p − P (η; β R ) ∫ η 0 P (ρ; β R ) dρ ,</formula><p>we have α 3 &lt; α R + θ . Therefore, the worst-cast competitive ratio under Assumption 4 is upper bounded by max{α R /η, α R + θ }. □ Theorem 4.5 justifies the pricing function in <ref type="bibr" target="#b20">(22)</ref> by showing that, a direct extension of the optimal pricing functions for the single resource type case can achieve a reasonably good (degraded by a constant factor w.r.t. |R|) competitive ratio in scenarios with multiple resource types.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Pricing Function for Multiple Time Slots</head><p>In real-world cloud systems, a user job runs over its specified resource bundle in the cloud, across one or more time slots. Once the job is completed, the resources that it occupies are then released back to the cloud pool.</p><p>Therefore, cloud resources can be reused over time. Let T denote the set of all time slots that the system spans, and T i be the set of time slots when user i requires to use resources. y i (t) is an indication function as follows:</p><formula xml:id="formula_72">y i (t) = 1, t ∈ T i 0, otherwise .<label>(26)</label></formula><p>The offline social welfare maximization problem becomes:</p><formula xml:id="formula_73">maximize i ∈U v i x i<label>(27) s.t.</label></formula><p>:</p><formula xml:id="formula_74">i ∈U d i,r x i y i (t) ≤ 1,∀r ∈ R, t ∈ T (27a) x i ∈ {0, 1} ,∀i ∈ U (27b)</formula><p>Since y i (t) is input (not a variable) in this optimization problem, problem <ref type="bibr" target="#b25">(27)</ref> is still an ILP. The online resource allocation algorithm we apply to determine x i upon the arrival of user i is still the same as Alg. 1, except that d i and the pricing function will be redefined, and y i (t) needs to be further determined.</p><p>In fact, problem <ref type="bibr" target="#b19">(21)</ref> and problem <ref type="bibr" target="#b25">(27)</ref> are equivalent if we consider resource r in different time slots to be of different resource types. More specifically, let d i,r (t ) = d i,r y i (t), where r (t) ∈ R (t), and t ∈ T . Then problem <ref type="bibr" target="#b25">(27)</ref> will have exactly the same form as problem <ref type="bibr" target="#b25">(27)</ref>. Therefore, according to Lemma 4.3 and Theorem 4.4, the worst-case competitive ratio will increase roughly linearly with the number of time slots, |T |, if no other assumptions are made. If the number of slots required by each user is upper bounded, then the worst-case competitive ratio will increase roughly linearly with the maximum number of slots required by each user, which is also undesirable. Intuitively, this issue is caused by the fact that, if one of the time slots required by a user is unavailable (e.g., no available resources), then the demand of the user cannot be satisfied as a whole, even if other required slots are all available.</p><p>To address the aforementioned problem, we propose a strategy that satisfies users' demand in an elastic manner. Specifically, assuming we are allowed to satisfy user i with any |T i | slots in a larger set of time slots, T ′ i ⊇ T i , we can significantly improve the competitive ratio by choosing |T i | slots from T ′ i that yield the lowest total price. Concretely, the corresponding online resource scheduling strategy is that, we try to satisfy each user i with |T i | time slots chosen from T ′ i , and T ′ i = ⌈λ |T i |⌉, where λ is a constant factor. Here T ′ i can be interpreted as the allowed (loosened) time interval for completing the user's job. The overall price to user i is computed as the minimum possible total price of |T i | time slots selected from T ′ i . From the user perspective, the price each user receives is determined upon its arrival in the system, and does not change afterwards. A user i accepts the price and leases resource at quantities d i,r 's in the chosen |T i | time slots, if and only if v i is no smaller than the overall price. Once a user accepts the price, its job is guaranteed to be completed within λ |T i |. If the provider tells that a job cannot be completed within λ |T i |, the job will receive an infinitely high price according to the pricing function upon arrival (i.e., the user will reject the price and the job will not be executed).</p><p>In fact, similar non-consecutive execution schemes have been implemented on Amazon EC2 Spot Instance [2], and have been discussed in the literature <ref type="bibr" target="#b28">[30]</ref>. Here, we further justify the use of non-consecutive execution schemes from a theoretical point of view.</p><p>Without loss of generality, we assume both T i and T ′ i are consecutive time slots; and if</p><formula xml:id="formula_75">T i = [τ i , τ i + |T i | − 1], we let T ′ i = τ i , τ i + T ′ i − 1 .</formula><p>To formulate the offline version of the modified social welfare maximization problem, we can add the following constraints to problem <ref type="bibr" target="#b25">(27)</ref>:</p><formula xml:id="formula_76">t ∈ T ′ i y i (t) = |T i | ,∀i ∈ U (27c) y i (t) ∈ {0, 1} ,∀i ∈ U, t ∈ T (27d)</formula><p>Note that y i (t) now follows Eq. ( <ref type="formula" target="#formula_73">27c</ref>) and (27d), instead of Eq. ( <ref type="formula" target="#formula_72">26</ref>), and y i (t) becomes a variable. Therefore, the new problem is no longer an ILP. We reuse the notation P i (•) to denote the pricing function for user i; and we reuse the symbols, d i and ρ, to taken into account different time slots, i.e., d i = |T i | r ∈R d i,r , and ρ denotes the vector of ρ r (t) , ∀r ∈ R, t ∈ T . The definitions of p and p remain the same, i.e., p = inf i v i d i and p = sup i v i d i . Then under Assumption 4, our pricing strategy for online resource allocation can be described by the following pricing function:</p><formula xml:id="formula_77">P i ρ = 1 d i min y i ∈Y i       t ∈T ′ i r ∈R d i,r y i (t) P (ρ r (t) ; β R )       , (<label>28</label></formula><formula xml:id="formula_78">)</formula><p>where Y i is defined by Eq. ( <ref type="formula" target="#formula_73">27c</ref>) and (27d), and P (ρ r (t); β R ) is defined by Eq. ( <ref type="formula" target="#formula_3">2</ref>), ( <ref type="formula" target="#formula_46">18</ref>) and <ref type="bibr" target="#b18">(20)</ref>. Obviously, d i P i ρ is the total price for user i.</p><p>In general, P i ρ sets different unit prices for different time slots, according to the scheduled resource utilization levels. Note that, the overall price that each user receives for its resource demand over the requested resource usage duration is determined when the user comes to the system and requests resources, and does not change over the course.</p><p>Given an arbitrary set of time slots T , and the corresponding time horizon |T |, any T i ⊈ T can be ignored since it cannot be satisfied anyway. Furthermore, we ignore the marginal effect of any T ′ i ⊈ T , since |T | is usually significantly larger than T ′ i . Thus, we assume T i , T ′ i ⊆ T , ∀i ∈ U. As we did to analyze competitive ratios for multiple resource types, we divide possible values of final resource utilization levels into three cases: (i) ρ r * (t) ∈ [0, 1/α R ] , ∀r ∈ R, t ∈ T ; (ii) there exists an r ∈ R and a t ∈ T such that ρ r * (t) ∈ (1/α R , 1), but no r ∈ R or t ∈ T such that ρ r * (t) = 1; (iii) there exists an r ∈ R and a t ∈ T such that ρ r * (t) = 1. Here, α R is defined by Eq. ( <ref type="formula" target="#formula_10">5</ref>), <ref type="bibr" target="#b14">(16)</ref> or <ref type="bibr" target="#b17">(19)</ref> for β = β R . We denote the three cases by ρ* ∈ Π 1 , ρ* ∈ Π 2 and ρ* ∈ Π 3 , respectively. Lemma 4.6. For ρ* ∈ Π 1 , the worst-case competitive ratio achieved by our online resource scheduling strategy using pricing function <ref type="bibr" target="#b26">(28)</ref> </p><formula xml:id="formula_79">is α 1 = 1.</formula><p>Proof. The proof is similar to that of Lemma 4.1 and is omitted. □ Lemma 4.7. For ρ* ∈ Π 2 , the corresponding worst-case competitive ratio α 2 &lt; α R (λ−1)η + 1, where η is defined in Assumption 4.</p><p>Proof. Let T 1 = {t |ρ r * (t) ∈ [0, 1/α R ] , ∀r ∈ R}, and T 2 = {t |ρ r * (t) ∈ (1/α R , 1) , ∃r ∈ R}, and T 1 ∪ T 2 = T . For ρ* ∈ Π 2 , following the proof of Lemma 4.1, there exists a worst case that happens when ρ r * (t) = 0 for all r ∈ R and t ∈ T 1 ; while for t ∈ T 2 , ρ r * (t) = 1/α r + ϵ for some r ′ ∈ R, and ρ r * (t) = η (1/α r + ϵ) for r ∈ R\ {r ′ }. Here, ϵ is an arbitrarily small number. Following the proof of Theorem 4.5, as ϵ → 0, we have</p><formula xml:id="formula_80">V ol ρ* = |T 2 | [1 + (|R| − 1) η] p/α R ,</formula><p>as the minimum total value of the online solution. For any T i , since T ′ i = ⌈λ |T i |⌉, the demand will be satisfied regardless of the user's valuation, unless</p><formula xml:id="formula_81">T ′ i ∩ T 2 &gt; ⌈ λ−1 λ T ′ i ⌉.</formula><p>In other words, if the demand of user i is not satisfied by the online solution, there must be at least ⌈ λ−1 λ T ′ i ⌉ time slots in T ′ i that also belong to T 2 ; or equivalently, for any S ⊆ T , and any T ′ i ⊆ S that is not satisfied by the online solution,</p><formula xml:id="formula_82">T ′ i &lt; ⌊ λ λ−1 |S ∩ T 2 |⌋,</formula><p>and hence</p><formula xml:id="formula_83">|T i | &lt; ⌊ 1 λ−1 |S ∩ T 2 |⌋. Let T ′</formula><p>2 be the union of all sets of consecutive time slots that contain T 2 , and have a cardinality of</p><formula xml:id="formula_84">⌊ λ λ−1 |T 2 |⌋ − 1. When |T i | &lt; ⌊ 1 λ−1 |S ∩ T 2 |⌋</formula><p>, since at least one type of resource in at least one required time slot has a unit price above p, there can be a set of users in a worst case, demanding all resources in T ′ 2 time slots, with P i ρ = p, where</p><formula xml:id="formula_85">T ′ 2 &lt; 2⌊ 1 λ−1 |T 2 |⌋ + |T 2 |.</formula><p>Thus we have the maximum optimal offline total value</p><formula xml:id="formula_86">V opt ρ* &lt; T ′ 2 |R| p &lt; 2⌊ 1 λ − 1 |T 2 |⌋ + |T 2 | |R| p.</formula><p>Therefore, for ρ* ∈ Π 2 , the worst-cast competitive ratio</p><formula xml:id="formula_87">α 2 &lt; λ+1 λ−1 |R| |T 2 | p |T 2 | [1 + (|R| − 1) η] p/α R = λ + 1 λ − 1 |R| 1 + (|R| − 1) η α R ≤ (λ + 1) α R (λ − 1) η .<label>(29)</label></formula><p>□ Lemma 4.8. For ρ* ∈ Π 3 , the corresponding worst-case competitive ratio α 3 &lt; λ+1 (λ−1)η ′ , where η ′ = ∫ η 0 P (ρ; β R ) dρ/p.</p><p>Proof. Let T 3 = {t |ρ r * (t) ∈ [0, 1) , ∀r ∈ R}, and T 4 = {t |ρ r * (t) = 1, ∃r ∈ R}, and T 3 ∪ T 4 = T . For ρ* ∈ Π 2 , following the proof of Lemma 4.2, there exists a worst case that happens when ρ r * (t) = 0 for all r ∈ R and t ∈ T 3 ; while for t ∈ T 4 , ρ r * (t) = 1 for some r ′ ∈ R, and ρ r * (t) = η for r ∈ R\ {r ′ }. Following the proof of Theorem 4.5, we have</p><formula xml:id="formula_88">V ol ρ* = |T 4 | ∫ 1 0 P (ρ; β R ) dρ + (|R| − 1) ∫ η 0 P (ρ; β R ) dρ ,</formula><p>as the minimum total value of the online solution. For any T i , since T ′ i = ⌈λ |T i |⌉, the demand will be satisfied regardless of the user's valuation, unless</p><formula xml:id="formula_89">T ′ i ∩ T 4 &gt; ⌈ λ−1 λ T ′ i ⌉.</formula><p>In other words, if the demand of user i is not satisfied by the online solution, there must be at least ⌈ λ−1 λ T ′ i ⌉ time slots in T ′ i that also belong to T 4 ; or equivalently, for any S ⊆ T , and any T ′ i ⊆ S that is not satisfied by the online solution, T ′ i &lt; ⌊ </p><formula xml:id="formula_90">V opt ρ* &lt; T ′ 4 |R| p &lt; 2⌊ 1 λ − 1 |T 4 |⌋ + |T 4 | |R| p.</formula><p>Therefore, for ρ* ∈ Π 2 , the worst-cast competitive ratio</p><formula xml:id="formula_91">α 3 &lt; λ+1 λ−1 |R| |T 4 | p |R| |T 4 | ∫ η 0 P (ρ; β R ) dρ = λ + 1 (λ − 1) η ′ .<label>(30)</label></formula><p>□ Theorem 4.9. The worst-cast competitive ratio achieved by our online resource scheduling strategy using pricing function <ref type="bibr" target="#b26">(28)</ref> is upper bounded by λ+1 λ−1 max{α R /η, 1/η ′ }, which is a constant with respect to both |R| and |T |. Here, α R is defined by Eq. ( <ref type="formula" target="#formula_10">5</ref>), <ref type="bibr" target="#b14">(16)</ref>   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EMPIRICAL STUDIES</head><p>In this section, we evaluate the proposed pricing and scheduling strategies through simulation studies. To simulate realistic cloud computing scenarios, we relax the assumptions made previously for theoretical analysis. We use a Poisson process to model the arrival of users, with arrival rate between 20 and 50 per time slot. Each user requests 5 time slots on average and 5 different types of resources at most, unless otherwise specified. Each user demands 1 to 3 percent of each type of resource on average,<ref type="foot" target="#foot_1">1</ref> with different standard deviation for different resource types ranging from 0.2% to 2%. We set λ = 1.2 by default. The time horizon of simulations is 1000 time slots, which is large enough compared to the demand of each user. The statistics of the random input variables are stationary in all cases except the last one (shown in Fig. <ref type="figure" target="#fig_11">8</ref>). The optimal offline total values are obtained by solving problem <ref type="bibr" target="#b25">(27)</ref> with constraints (27c) and (27d). By relaxing the assumptions, we can now optimize the parameters in our pricing functions, e.g., β, p and p, to maximize average social welfare. Specifically, we employ pattern search for the optimization: we repeat each experiment for multiple iterations; in the first iteration, we fix the parameters to random estimates; then we add a perturbation (decays with iterations) to each parameter and run the experiment again; a perturbation is retained from one iteration to the next if the total value is improved. In practice, similar probing of parameter values can be done through online learning techniques such as reinforcement learning.</p><p>Our theoretical analysis suggests that, under mild assumptions, the worst-case competitive ratio is mainly influenced by the total demand level (Fig. <ref type="figure" target="#fig_4">3</ref>), but not by the number of resource types (Theorem 4.5), nor by the number of requested time slots (Theorem 4.9). We now investigate the impact of the three factors on social welfare and competitive ratio, as well as the robustness of the theoretical results, when the assumptions are relaxed.</p><p>To quantify different demand levels, we define the relative total demand as the ratio between the total demand of all potential users and the total resource supply Fig. <ref type="figure" target="#fig_7">5</ref> shows that, the optimal offline total value, V opt , increases almost linearly with a slope of 1, as the total demand increases. At the same time, the online total value, V ol , increases with a smaller slope. Consequently, the competitive ratio increases noticeably from 1.09 to 1.78. Although the results depict average system performance (rather than worst-case competitive ratios), it coincides with our worst-case analysis on the scarcity level, β, where larger β leads to a larger competitive ratio (see Fig. <ref type="figure" target="#fig_4">3</ref>).</p><p>Next, we vary the number of resource types, |R|, from 1 to 10 to see how it affects the competitive ratio. As shown in Fig. <ref type="figure" target="#fig_8">6</ref>, due to the increase in total demand and supply, both V opt and V ol increase linearly with |R|, while V opt increases slightly faster than V ol . Consequently, the competitive ratio only increases mildly (from 1.34   Similarly, it is also interesting to see how the number of time slots required by each user affects the competitive ratio. Different from the case of varying |R|, only the total demand will increase with the average number of required time slots. Thus we adjust the demand of each user accordingly to eliminate the effect of increasing relative total demand (Fig. <ref type="figure" target="#fig_7">5</ref>). As we can see in Fig. <ref type="figure" target="#fig_10">7a</ref>, V opt and V ol remain almost the same as the average number of required time slots increases, and so does the competitive ratio (varying slightly from 1.41 to 1.48). To further verify the proposed strategies, we vary the value of λ from 1 to 1.4 as shown in Fig. <ref type="figure" target="#fig_10">7b</ref>. We test the performance for two levels of total demands, 1.5 and 3. In this case, V opt stays almost the same as λ changes and is omitted from the figure. Clearly, V ol increases more from λ = 1 to λ = 1.2 than from λ = 1.2 to λ = 1.4, indicating λ = 1.2 is a good trade-off between the availability and timeliness of service.</p><p>The simulations conducted so far are based on stationary arrival processes of users. In practice, however, the arrival rate may change over time (e.g., fluctuating periodically). To capture this characteristic, we vary the arrival rate according to a sine curve with a period of 100 time slots. In Fig. <ref type="figure" target="#fig_11">8</ref>, as we increase the amplitude of the sine curve from 0 to 1 (normalized by the average arrival rate), both V opt and V ol decrease significantly, while the competitive ratio remains at around 1.5. The reason behind the results is that, when the arrival rate is very low, the resource utilization ratios stay low, and almost all demands can be satisfied; when the arrival rate is very high, a high proportion of the demands cannot be satisfied by either the optimal offline solution or the online solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUDING REMARKS</head><p>We studied online posted pricing strategies in a number of cloud resource allocation scenarios. We started by investigating the basic case of a single type of cloud resource without recycling, and proved optimality of a set of exponential pricing functions in terms of social welfare, which compute unit resource prices based on realtime demand-supply. Exploiting the insights acquired, we further derived pricing functions in more practical scenarios with multiple resource types and limited resource occupation durations, and proved tight competitive ratio bounds of these functions, without assumptions on user arrival process or valuation distribution. Empirical studies further reveal good performance of our pricing functions under realistic settings. Though set up in a cloud computing environment, our models and algorithms are also applicable to posted pricing in other related online resource allocation problems.</p><p>A PROOF OF CLAIM 4.1</p><p>Proof. In the worst case of online solution, the valuations of satisfied users are the same as the prices they accept. Thus by Assumption 2, we have </p><formula xml:id="formula_92">V ol ρ* =</formula><p>as the minimum total value of the online solution. On the other hand, any unsatisfied user i has an average unit value smaller than P i ρ* , otherwise ρ* cannot be the final resource utilization. We can decompose each user's value as v i = r ∈R d i,r U i,r ρ , and</p><formula xml:id="formula_94">U i,r ρ = v i d i P i ρ P (ρ r ; β r ) ,</formula><p>such that a user i's average unite value v i /d i &lt; P i ρ* if and only if U i,r ρ* &lt; P (ρ r ; β r ), for any r ∈ R. Here, U i,r ρ* can be seen as user i's unit value of resource r given a certain ρ*.</p><p>For r ∈ R 1 , in the worst case, there can be a set of unsatisfied users with a total demand of min {1, 1 + β r } for each type of resource, and with a unit value U i,r ρ* = p − ϵ r . Note that U i,r ρ* &lt; p does not contradict with Assumption. 1, since a small enough ϵ r can ensure v i /d i ≥ p. For r ∈ R 2 , the discussion on Eq. ( <ref type="formula" target="#formula_7">3</ref>), (9) for a single</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. An illustration of pricing function (2) for p = 1, p = 10.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Claim 3 . 1 .</head><label>31</label><figDesc>If a pricing function P (ρ) achieves a finite worst-case competitive ratio of α, then P (ρ) = p, ∀ρ ∈ [0, 1/α].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>( a )</head><label>a</label><figDesc>The worst-case V ol (ρ*) and V opt (ρ*) for β = 0.5, ρ* = 0.7 visualized by AUCs. Pricing functions and competitive ratios for different values of β.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 2 .</head><label>2</label><figDesc>Fig.2. Pricing functions and competitive ratios for β ∈ (0, 1), p = 1, p = 10.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Competitive ratios for different values of β and γ .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. 2-D pricing function P (ρ; β) for ρ ∈ [0, 1] , β ∈ [0, 1].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Theorem 4 . 5 .</head><label>45</label><figDesc>Under Assumption 4, the worst-case competitive ratio with the pricing function in (15) is upper bounded by a constant with respect to |R|. Proof. It can be shown that Claim 4.1 and 4.2 are still valid under Assumption 4. For ρ* ∈ Ω 2 , any worst case gives V ol ρ* = [1 + (|R| − 1) η] p/α R and V opt ρ* = |R| p, and hence the corresponding competitive ratio</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Online/offline social welfares and competitive ratios given different total demands.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 6 .</head><label>6</label><figDesc>Fig.6. Online/offline social welfares and competitive ratios given different numbers of resource types.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>Online/offline social welfares and competitive ratios given different numbers of required time slots. Online social welfare at different values of λ.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Performance of the elastic scheduling strategy discussed in Sec. 4.2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Online/offline social welfare and competitive ratios given different levels of arrival rate fluctuations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>P</head><label></label><figDesc>(ρ; β r ) dρ = r ∈R 1 ρ r *p + r ∈R 2 ∫ ρ r * 0 P (ρ; β r ) dρ,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 .</head><label>1</label><figDesc>Notation and definition</figDesc><table><row><cell>U</cell><cell>set of users</cell></row><row><cell>R</cell><cell>set of resource types</cell></row><row><cell>T</cell><cell>set of all time slots</cell></row><row><cell>T i</cell><cell>set of time slots required by user i</cell></row><row><cell>d i,r</cell><cell>amount of resource r demanded by user i</cell></row><row><cell>d i</cell><cell>total amount of resource demanded by user i</cell></row><row><cell>v i</cell><cell>value of successfully finishing user i's job</cell></row><row><cell>p</cell><cell>unit resource price at the time of user arrival</cell></row><row><cell>p/p</cell><cell>lower/upper bound of v i /d i</cell></row><row><cell>γ</cell><cell>ratio between p and p</cell></row><row><cell>ρ</cell><cell>resource utilization level</cell></row><row><cell>ρ r *</cell><cell>final resource utilization level as defined by Definition 3.3</cell></row><row><cell>β</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>22:10 • Zijun Zhang, Zongpeng Li, and Chuan Wu</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head></head><label></label><figDesc>λ λ−1 |S ∩ T 4 |⌋, and hence |T i | &lt; ⌊ 1 λ−1 |S ∩ T 4 |⌋. Let T ′ 4 be the union of all sets of consecutive time slots that contain T 4 , and have a cardinality of ⌊ λ λ−1 |T 4 |⌋ − 1. When |T i | &lt; ⌊ 1 λ−1 |S ∩ T 4 |⌋, since at least one type of resource in at least one required time slot is fully occupied, there can be a set of users in a worst case, demanding all resources in T ′ 4 time slots, with P i ρ = p, where T ′ 4 &lt; 2⌊ 1 λ−1 |T 4 |⌋ + |T 4 |. Thus we have the maximum optimal offline total value</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head></head><label></label><figDesc>or<ref type="bibr" target="#b17">(19)</ref> for β = β R , and η is defined as in Assumption 4.</figDesc><table><row><cell></cell><cell>2</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>3</cell></row><row><cell></cell><cell>1.8</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Relative social welfare</cell><cell>1.2 1.4 1.6</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>1.5 2.5 2</cell><cell>Competitive ratio</cell></row><row><cell></cell><cell>1</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>0.8</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>1</cell></row><row><cell></cell><cell>1</cell><cell>1.1</cell><cell>1.2</cell><cell>1.3</cell><cell>1.4</cell><cell>1.5</cell><cell>1.6</cell><cell>1.7</cell><cell>1.8</cell><cell>1.9</cell><cell>2</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">Relative total demand</cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="11">Proof. The theorem follows immediately from Lemmas 4.6, 4.7 and 4.8.</cell><cell>□</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0">Proc. ACM Meas. Anal. Comput. Syst., Vol. 1, No. 1, Article 22. Publication date: June 2017.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_1">These percentages are quite high as compared to practice. We set such percentages to evaluate performance of our pricing functions in the case that Assumption</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_2">is not true. Proc. ACM Meas. Anal. Comput. Syst., Vol. 1, No. 1, Article 22. Publication date: June 2017.</note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This work is supported by the National Natural Science Foundation of China (NSFC), under grant 61628209; and by the Research Grants Council (RGC) of Hong Kong, under grants HKU 717812, 718513, 17204715, 17225516, C7036-15G (CRF).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>resource type is still valid if we consider U i,r ρ* as unit value of resource; and according to Eq. ( <ref type="formula">6</ref>), we have</p><p>This yields the maximum optimal offline total value given Eq. ( <ref type="formula">31</ref>):</p><p>For r ∈ R 1 , ρ r * only affects the first term of Eq. ( <ref type="formula">31</ref>), while the first term of Eq. ( <ref type="formula">32</ref>) is a constant with respect to ρ r *. Thus in any worst case, the first term of Eq. ( <ref type="formula">31</ref>) should be minimized, and hence</p><p>where r = arg min r ∈R 2 α r . When |R 2 | ≥ 2, we can iteratively move r from R 2 to R 1 , and set ρ r * = 0 without decreasing α ρ* , until</p><p>Similarly, for the only r ∈ R 2 , we can decrease ρ r * to 1/α r + ϵ without decreasing α ρ* . Therefore, for ρ* ∈ Ω 2 , there exists a worst case that happens when ρ r * = 0 for r ∈ R 1 , and ρ r * = 1/α r +ϵ for r ∈ R 2 , where |R 2 | = 1. □</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B PROOF OF CLAIM 4.2</head><p>Proof. The worst case of online solution is that the valuations of satisfied users are the same as the prices they accept. Thus by Assumption 2, we have</p><p>as the minimum total value of the online solution. On the other hand, since there is at least one type of resource fully occupied, i.e., |R 4 | ≥ 1, there can be a case where all subsequent users demand a small amount of resource r ∈ R 4 , making it impossible to satisfy their demands regardless of their valuations. Hence the maximum optimal offline total value</p><p>where ρ 1 r = max {0, β r } and ρ 2 r = max {β r , ρ r *}. For r ∈ R 3 , Eq. (33) stays the same or increases as any ρ r * increases, while Eq. (34) stays the same or decreases. Thus there exists a worst case where ρ r * = 0, ∀r ∈ R 3 . Let r = arg min r ∈R 4 α r . Due to the same reason as discussed for Eq. <ref type="bibr" target="#b29">(31)</ref> and Eq. (32), when |R 4 | ≥ 2, we can iteratively move r from R 4 to R 3 , and set ρ r * = 0 without decreasing the competitive ratio, until |R 4 | = 1. □</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<ptr target="https://aws.amazon.com/ec2/spot/pricing/" />
		<title level="m">EC2 Spot Instances Pricing</title>
				<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Deconstructing amazon ec2 spot instance pricing</title>
		<author>
			<persName><forename type="first">Muli</forename><surname>Orna Agmon Ben-Yehuda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Assaf</forename><surname>Ben-Yehuda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dan</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName><surname>Tsafrir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Economics and Computation</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page">16</biblScope>
			<date type="published" when="2013">2013. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Cloud computing pricing models: a survey</title>
		<author>
			<persName><forename type="first">May</forename><surname>Al-Roomi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shaikha</forename><surname>Al-Ebrahim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sabika</forename><surname>Buqrais</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Imtiaz</forename><surname>Ahmad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Grid and Distributed Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="93" to="106" />
			<date type="published" when="2013">2013. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Automated negotiation with decommitment for dynamic resource allocation in cloud computing</title>
		<author>
			<persName><forename type="first">Bo</forename><surname>An</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Victor</forename><surname>Lesser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Irwin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Michael</forename><surname>Zink</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th International Conference on Autonomous Agents and Multiagent Systems</title>
				<meeting>the 9th International Conference on Autonomous Agents and Multiagent Systems</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="981" to="988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Online primal-dual algorithms for covering and packing problems</title>
		<author>
			<persName><forename type="first">Niv</forename><surname>Buchbinder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joseph</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Algorithms</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="689" to="701" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Improved bounds for online routing and packing via a primal-dual approach</title>
		<author>
			<persName><forename type="first">Niv</forename><surname>Buchbinder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joseph</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">47th Annual IEEE Symposium on Foundations of Computer Science (FOCS&apos;06)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2006">2006. 2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The design of competitive online algorithms via a primal: dual approach. Foundations and Trends® in Theoretical</title>
		<author>
			<persName><forename type="first">Niv</forename><surname>Buchbinder</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joseph</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Science</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="93" to="263" />
			<date type="published" when="2009">2009. 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Cloud computing and emerging IT platforms: Vision, hype, and reality for delivering computing as the 5th utility</title>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Buyya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shin</forename><surname>Chee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Srikumar</forename><surname>Yeo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">James</forename><surname>Venugopal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ivona</forename><surname>Broberg</surname></persName>
		</author>
		<author>
			<persName><surname>Brandic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation computer systems</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="599" to="616" />
			<date type="published" when="2009">2009. 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Reducing revenue to welfare maximization: Approximation algorithms and other generalizations</title>
		<author>
			<persName><forename type="first">Yang</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Constantinos</forename><surname>Daskalakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Weinberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-Fourth Annual ACM-SIAM Symposium on Discrete Algorithms. SIAM</title>
				<meeting>the Twenty-Fourth Annual ACM-SIAM Symposium on Discrete Algorithms. SIAM</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="578" to="595" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Online knapsack problems</title>
		<author>
			<persName><forename type="first">Deeparnab</forename><surname>Chakrabarty</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yunhong</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajan</forename><surname>Lukose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on internet and network economics (WINE)</title>
				<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A framework for ranking of cloud computing services</title>
		<author>
			<persName><forename type="first">Kumar</forename><surname>Saurabh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Steve</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Versteeg</surname></persName>
		</author>
		<author>
			<persName><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computer Systems</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="1012" to="1023" />
			<date type="published" when="2013">2013. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An Efficient Auction Mechanism for Service Chains in The NFV Market</title>
		<author>
			<persName><forename type="first">Sijia</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zongpeng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuanhe</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Communications, IEEE INFOCOM 2016-The 35th Annual IEEE International Conference on</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A pricing algorithm for cloud computing resources</title>
		<author>
			<persName><forename type="first">Hao</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jianhui</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guo</forename><surname>Tang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network Computing and Information Security (NCIS), 2011 International Conference on</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="69" to="73" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Dynamic auction mechanism for cloud resource allocation</title>
		<author>
			<persName><forename type="first">Wei-Yu</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guan-Yu</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hung-Yu</forename><surname>Wei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cluster, Cloud and Grid Computing (CCGrid), 2010 10th IEEE/ACM International Conference on</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="591" to="592" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">On resource management for cloud users: A generalized kelly mechanism approach</title>
		<author>
			<persName><surname>Rt Ma</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ming</forename><surname>Dah</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><forename type="middle">Cs</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Vishal</forename><surname>Lui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dan</forename><surname>Misra</surname></persName>
		</author>
		<author>
			<persName><surname>Rubenstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electrical Engineering</title>
		<imprint>
			<date type="published" when="2010">2010. 2010</date>
		</imprint>
	</monogr>
	<note type="report_type">Tech. Rep</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Resource management for Infrastructure as a Service (IaaS) in cloud computing: A survey</title>
		<author>
			<persName><forename type="first">S</forename><surname>Sunilkumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gopal</forename><surname>Manvi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shyam</forename><surname>Krishna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Network and Computer Applications</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="424" to="440" />
			<date type="published" when="2014">2014. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Socially optimal pricing of cloud computing resources</title>
		<author>
			<persName><forename type="first">Ishai</forename><surname>Menache</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Asuman</forename><surname>Ozdaglar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nahum</forename><surname>Shimkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th International ICST Conference on Performance Evaluation Methodologies and Tools</title>
				<meeting>the 5th International ICST Conference on Performance Evaluation Methodologies and Tools</meeting>
		<imprint>
			<publisher>ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="322" to="331" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Dynamic resource pricing on federated clouds</title>
		<author>
			<persName><forename type="first">Marian</forename><surname>Mihailescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yong</forename><forename type="middle">Meng</forename><surname>Teo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 10th IEEE/ACM International Conference on Cluster</title>
				<meeting>the 2010 10th IEEE/ACM International Conference on Cluster</meeting>
		<imprint>
			<publisher>Cloud and Grid Computing. IEEE Computer Society</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="513" to="517" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Truthful greedy mechanisms for dynamic virtual machine provisioning and allocation in clouds</title>
		<author>
			<persName><forename type="first">Mahyar</forename><surname>Movahed Nejad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lena</forename><surname>Mashayekhy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Grosu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015. 2015</date>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="594" to="603" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">RSMOA: A revenue and social welfare maximizing online auction for dynamic cloud resource provisioning</title>
		<author>
			<persName><forename type="first">Weijie</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zongpeng</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2014 IEEE 22nd International Symposium of Quality of Service (IWQoS)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="41" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">An online mechanism for dynamic virtual cluster provisioning in geo-distributed clouds</title>
		<author>
			<persName><forename type="first">Weijie</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zongpeng</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Communications, IEEE INFOCOM 2016-The 35th Annual IEEE International Conference on</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">An online auction framework for dynamic resource provisioning in cloud computing</title>
		<author>
			<persName><forename type="first">Weijie</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Linquan</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zongpeng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Francis</forename><surname>Lau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGMETRICS Performance Evaluation Review</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="71" to="83" />
			<date type="published" when="2014">2014. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Interconnected cloud computing environments: Challenges, taxonomy, and survey</title>
		<author>
			<persName><forename type="first">Rodrigo</forename><forename type="middle">N</forename><surname>Adel Nadjaran Toosi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajkumar</forename><surname>Calheiros</surname></persName>
		</author>
		<author>
			<persName><surname>Buyya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys (CSUR)</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="page">7</biblScope>
			<date type="published" when="2014">2014. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Revenue maximization with dynamic auctions in IaaS cloud markets</title>
		<author>
			<persName><forename type="first">Wei</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ben</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Baochun</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Quality of Service (IWQoS), 2013 IEEE/ACM 21st International Symposium on</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Dynamic cloud pricing for revenue maximization</title>
		<author>
			<persName><forename type="first">Hong</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Baochun</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Cloud Computing</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="158" to="171" />
			<date type="published" when="2013-06">2013. 2013. June 2017</date>
		</imprint>
	</monogr>
	<note>Proc. ACM Meas. Anal. Comput. Syst.. Publication date</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Combinatorial auction-based allocation of virtual machine instances in clouds</title>
		<author>
			<persName><forename type="first">Sharrukh</forename><surname>Zaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Grosu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Parallel and Distrib. Comput</title>
		<imprint>
			<biblScope unit="volume">73</biblScope>
			<biblScope unit="page" from="495" to="508" />
			<date type="published" when="2013">2013. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Dynamic service placement in geographically distributed clouds</title>
		<author>
			<persName><forename type="first">Qi</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quanyan</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohamed</forename><forename type="middle">Faten</forename><surname>Zhani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Raouf</forename><surname>Boutaba</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joseph</forename><forename type="middle">L</forename><surname>Hellerstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal on Selected Areas in Communications</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="762" to="772" />
			<date type="published" when="2013">2013. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Online auctions in IaaS clouds: welfare and profit maximization with server costs</title>
		<author>
			<persName><forename type="first">Xiaoxi</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhiyi</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zongpeng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Francis</forename><surname>Lau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGMETRICS Performance Evaluation Review</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="3" to="15" />
			<date type="published" when="2015">2015</date>
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">An Efficient Cloud Market Mechanism for Computing Jobs With Soft Deadlines</title>
		<author>
			<persName><forename type="first">Ruiting</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zongpeng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chuan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhiyi</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Networking</title>
		<imprint>
			<date type="published" when="2016">2016. 2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Budget constrained bidding in keyword auctions and online knapsack problems</title>
		<author>
			<persName><forename type="first">Yunhong</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Deeparnab</forename><surname>Chakrabarty</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rajan</forename><surname>Lukose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Internet and Network Economics</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="566" to="576" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Proc. ACM Meas. Anal. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2017-06">June 2017</date>
		</imprint>
	</monogr>
	<note>Publication date</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
