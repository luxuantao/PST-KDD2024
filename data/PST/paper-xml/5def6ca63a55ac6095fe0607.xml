<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DistTC: High Performance Distributed Triangle Counting</title>
				<funder ref="#_DPm2dkR #_S2qjKbp">
					<orgName type="full">DARPA</orgName>
				</funder>
				<funder ref="#_WDekay8 #_h4Xd5ZD #_n6wWqNV #_sAk5DGq #_pCWwReS">
					<orgName type="full">National Science Foundation</orgName>
					<orgName type="abbreviated">NSF</orgName>
				</funder>
				<funder ref="#_RnXE3DC #_H53EBeg">
					<orgName type="full">unknown</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Loc</forename><surname>Hoang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The University of Texas</orgName>
								<address>
									<settlement>Austin Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Vishwesh</forename><surname>Jatala</surname></persName>
							<email>vishwesh.jatala@austin.utexas.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">The University of Texas</orgName>
								<address>
									<settlement>Austin Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Xuhao</forename><surname>Chen</surname></persName>
							<email>xuhao.chen@austin.utexas.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">The University of Texas</orgName>
								<address>
									<settlement>Austin Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Udit</forename><surname>Agarwal</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The University of Texas</orgName>
								<address>
									<settlement>Austin Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Roshan</forename><surname>Dathathri</surname></persName>
							<email>roshan@cs.utexas.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">The University of Texas</orgName>
								<address>
									<settlement>Austin Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Gurbinder</forename><surname>Gill</surname></persName>
							<email>gill@cs.utexas.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">The University of Texas</orgName>
								<address>
									<settlement>Austin Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Keshav</forename><surname>Pingali</surname></persName>
							<email>pingali@cs.utexas.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">The University of Texas</orgName>
								<address>
									<settlement>Austin Austin</settlement>
									<region>Texas</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">DistTC: High Performance Distributed Triangle Counting</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-01-03T09:29+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>triangle counting</term>
					<term>distributed-memory</term>
					<term>multi-GPUs</term>
					<term>clusters</term>
					<term>partitioning</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We describe a novel multi-machine multi-GPU implementation of triangle counting which exploits a novel application-agnostic graph partitioning strategy that eliminates almost all inter-host communication during triangle counting. Experimental results show that this distributed triangle counting implementation can handle very large graphs such as clueweb12, which has almost one billion vertices and 37 billion edges, and it is up to 1.6? faster than TriCore, the 2018 Graph Challenge champion.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Triangle counting is a simple example of finding motifs (patterns) within undirected graphs, and it is used in applications such as social network analysis <ref type="bibr" target="#b0">[1]</ref>, graph statistics (e.g. clustering coefficients <ref type="bibr" target="#b1">[2]</ref>), and k-truss identification <ref type="bibr" target="#b2">[3]</ref>. The problem is to count the number of triangles contained in an undirected graph <ref type="foot" target="#foot_0">1</ref> .</p><p>Triangle counting algorithms are based on the following observation. Vertices v and w are said to be neighbors if they are connected by an edge. Let neighbors(v) denote the set of neighbors of a given vertex v. The number of triangles that contain given vertices v 1 and v 2 is the cardinality of the set neighbors(v 1 ) ? neighbors(v 2 ). This can be computed efficiently if the graph representation permits efficient access to the set of neighbors of a given vertex as Compressed Sparse Row (CSR) and Compressed Sparse Column (CSC) representations do. Two vertices that are not neighbors in the graph cannot be part of a triangle, so triangle counting is often implemented by iterating over all edges (v 1 , v 2 ) of the graph and, for each edge, intersecting the neighbor lists of v 1 and v 2 . The intersection of neighbor lists can be done efficiently if the neighbor list of each vertex is sorted by a key such as the vertex ID.</p><p>Although this algorithm is straightforward, implementing it efficiently can be challenging. First, the graphs we deal with today are very large; for example, the largest graph we use in this study is clueweb12, which has almost one billion vertices and 37 billion undirected edges (and 1,995,295,290,765 triangles). Second, the basic triangle counting algorithm described above is not a vertex program, which are programs in which vertex labels are updated iteratively using the labels of their neighbors in the graph (it is possible to reformulate the algorithm as a vertex program, but this is tricky and has its own disadvantages). Third, the DRAM of most machines is limited to 64-128 GB. This means execution on shared memory systems may not be possible, so alternatives such as distributed execution or out-of-core execution are necessary. However, systems support for non-vertex-programs is currently very limited. In particular, existing graph partitioning algorithms are designed for vertex programs, and it is not clear how one uses them effectively for triangle counting.</p><p>These problems limit the effectiveness of current implementations of triangle counting. Most implementations are either sequential or shared-memory multicore implementations <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref> so they cannot deal with very large graphs unless one uses a very expensive machine with many TBs of DRAM or nonvolatile memory (NVM) such as Intel's Optane memory. Other implementations are single GPU implementations <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b5">[6]</ref>, but these are even more constrained by memory limitations. Section II describes this related work in more detail.</p><p>In this paper, we address the triangle counting problem using distributed computing. Our implementation is based on a novel application-agnostic graph partitioning strategy, discussed in Section III, that eliminates almost all communication for distributed triangle counting. Section IV describes our triangle counting application which uses this partitioning strategy. Each machine in a distributed cluster performs triangle counting independently in its own partition without communicating with other hosts. At the end, the total triangle count is obtained by aggregating the local triangle counts from all machines. This triangle counting solution can be run in the cloud, which is very cost-effective.</p><p>Section V describes the experimental evaluation of our implementation called DistTC on a distributed multi-GPU platform. The results show that our solution can handle very large graphs such as clueweb12, which has almost one billion vertices and 37 billion undirected edges, and it is up to 1.6? faster than TriCore, the 2018 Graph Challenge champion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. RELATED WORK</head><p>Triangle counting has been implemented on various platforms including shared-memory CPUs <ref type="bibr" target="#b6">[7]</ref>, clusters <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref> and GPUs <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b12">[13]</ref>. We briefly discuss this prior work below.</p><p>Triangle counting on shared memory CPUs: Shun et al. <ref type="bibr" target="#b13">[14]</ref> detail a cache-oblivious parallel triangle counting on shared-memory multicore CPUs. Tangwongsan et al. <ref type="bibr" target="#b6">[7]</ref> present parallel algorithms for streaming graphs on the shared memory CPUs. Zhang et al. <ref type="bibr" target="#b14">[15]</ref> compare the performance of different triangle counting optimizations, such as hashing, merging, binary search, and SIMD.</p><p>Optimizations that apply to CPUs may not necessarily be useful for GPUs. For example, binary search of neighbor lists may not give faster performance on CPUs, but it does give better performance on GPUs due to coalesced memory accesses <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b15">[16]</ref>.</p><p>Triangle counting on single GPU: Green et al. <ref type="bibr" target="#b16">[17]</ref> and Voegele et al. <ref type="bibr" target="#b4">[5]</ref> implement triangle counting on a single GPU using a merge-based approach <ref type="bibr" target="#b17">[18]</ref>. Date et al. <ref type="bibr" target="#b18">[19]</ref> present a GPU algorithm that leverages the CPU as well to improve the performance of both triangle counting and ktruss: they use GPU zero-copy memory and unified memory capabilities to decrease CPU-GPU data transfer overhead, and they use the CPU to perform some computations. Wang et al. <ref type="bibr" target="#b19">[20]</ref> study three techniques for triangle counting on GPU: subgraph matching, programmable graph analytics with a setintersection approach, and a matrix formulation based on sparse matrix-matrix multiplies. Hu et al. <ref type="bibr" target="#b15">[16]</ref> presented a distributed implementation of triangle counting, and they noted that even on a single GPU, a binary search based intersection method for finding triangles can speed up computation on GPUs due to improved exploitation of memory bandwidth.</p><p>Our implementation leverages the binary search based intersection method <ref type="bibr" target="#b15">[16]</ref> to improve performance on a single host which in turn improves overall distributed runtime. We also use the CPUs to do graph partitioning and graph preprocessing.</p><p>Triangle counting on distributed CPUs and GPUs: Suri et al. <ref type="bibr" target="#b20">[21]</ref> implement triangle counting using MapReduce. They rank vertices by degree and distribute them across hosts in a round-robin fashion. Similarly, several other techniques <ref type="bibr" target="#b21">[22]</ref>, <ref type="bibr" target="#b22">[23]</ref>, <ref type="bibr" target="#b23">[24]</ref>, <ref type="bibr" target="#b24">[25]</ref> were also proposed to improve the performance of triangle counting using MapReduce framework. PDTL <ref type="bibr" target="#b25">[26]</ref> is a distributed CPU triangle counting solver that duplicates the graph across machines and does static load-balancing to split tasks. Pearce <ref type="bibr" target="#b26">[27]</ref> presents a CPU distributed triangle counting algorithm implemented in distributed asynchronous graph processing framework HavoqGT. TriCore <ref type="bibr" target="#b27">[28]</ref> is a multi-GPU triangle counting implementation which was used in a 2018 Graph Challenge champion's implementation <ref type="bibr" target="#b28">[29]</ref>. It partitions the CSR data across multiple GPUs and streams the edgelist from the CPU memory to the GPU memory on the fly. It uses binary search to increase coalesced memory accesses <ref type="bibr" target="#b15">[16]</ref> and employs load balancing by dynamically assigning independent units of work (created during preprocessing) to GPUs.</p><p>Our implementation is similar to TriCore <ref type="bibr" target="#b27">[28]</ref>, <ref type="bibr" target="#b28">[29]</ref> in that it uses binary search based intersection as well as independent units of work across multiple GPUs. However, our partitioning is static while TriCore dynamically assigns partitions to GPUs on the fly. Additionally, our partitioning policy can be used for multi-machine CPU and GPU implementations.</p><p>Miscellaneous: Huang et al. <ref type="bibr" target="#b29">[30]</ref> implement triangle counting on an FPGA: they use the low-latency capabilities of FPGA to improve energy efficiency over GPU implementations. Approximation techniques for triangle counting <ref type="bibr" target="#b23">[24]</ref>, <ref type="bibr" target="#b30">[31]</ref> have also been studied. Additionally, triangle counting has been explored for streaming graphs (e.g., <ref type="bibr" target="#b31">[32]</ref>, <ref type="bibr" target="#b32">[33]</ref>, <ref type="bibr" target="#b33">[34]</ref>).</p><p>Our implementation is targeted at static graphs since partitioning is done once at the beginning. However, our distributed algorithm is platform-agnostic as described in Section IV: one can use our partitioning policy to distribute computation across multiple platforms and aggregate the independent counts at the end to arrive at a correct solution, regardless of whether the compute units are CPUs, GPUs or FPGAs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. GRAPH PARTITIONING POLICY</head><p>The goal of our partitioning is to distribute an undirected graph across multiple machines for triangle counting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Proxy Model for Partitioning</head><p>Our graph partitioning is based on the proxy model of partitioning <ref type="bibr" target="#b34">[35]</ref> in which edges are distributed among the host machines and cached copies of the endpoints called proxy vertices are created. One proxy for a vertex in the graph will be designated a master proxy which is responsible for the canonical value of the vertex; all other proxies are designated as mirror proxies.</p><p>Periodically, the proxy vertices are synchronized to keep computation consistent across hosts. This involves mirror proxies communicating updates to the master proxy which will use them to determine the vertex's canonical value. This value is then communicated to all proxies for use in local computation.</p><p>This model can be extended further to support proxy edges: the partitioning can duplicate an edge among multiple hosts, and similarly, one edge will be designated the master proxy to reconcile edge data among hosts as necessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Partitioning for Triangle Counting</head><p>As detailed in Section I, triangle counting requires knowing the neighbors of vertices in order to compute the intersection of the neighbor lists. In a distributed setting, edges are distributed across machines, and not all the edges of a triangle may exist for a vertex on a host. Therefore, communication across hosts to determine the full set of neighbors would be required if not all edges are present.</p><p>To reduce communication, we partition the graph such that all proxy vertices on a particular host will know which vertices on that host are its neighbors; in other words, if two vertex proxies on a host are neighbors in the original graph, then an edge proxy will exist between the two proxies on that host. By doing so, it is possible to count the triangles that the vertex proxies present on a host create without requiring communication.</p><p>We detail this partitioning with an example. First, to avoid counting duplicate triangles, triangle counting algorithms typically establish a total order among the vertices of a given graph. Hence, we convert the given undirected graph (Figure <ref type="figure" target="#fig_0">1a</ref>) into a directed acyclic graph (DAG), where the undirected edges become directed edges based on some total ordering of vertices (Figure <ref type="figure" target="#fig_0">1b</ref>; the ordering is based on alphabetical order). In this example, the vertex lower in the total order will point to a vertex higher in the total order.</p><p>Next, we partition the directed graph across machines. Figure <ref type="figure" target="#fig_0">1c</ref> shows an example of partitioned graphs of the original graph shown in Figure <ref type="figure" target="#fig_0">1b</ref>. We use an outgoing edgecut policy to distribute edges: all outgoing edges of a vertex are placed on the host which contains the master proxy. In the example, vertices A, B, and C, along with their outgoing edges, are assigned to Host 1 while the vertices D, E, and F , along with their outgoing edges, are assigned to Host 2. For each edge whose endpoints are not assigned to a host, mirror proxies are created. For example, Host 1 creates the mirror proxies for D and E, as they are endpoints for the edges (C, D) and (C, E) which are not present.</p><p>Finally, edge proxies are created as necessary to get the proxy-induced subgraph on each host. Figure <ref type="figure" target="#fig_0">1d</ref> illustrates this: since the edge (D, E) exists in the original graph, a mirror proxy for the edge is created on Host 1.</p><p>The creation of edge proxies allows local triangle counting to proceed without communication. To understand this, consider Figure <ref type="figure" target="#fig_0">1c</ref>, which shows the partitioned graph before edge proxies are created. Note that communication is required to count a triangle whose endpoint(s) is a mirror proxy; for instance, triangle CDE cannot be identified on Host 1 without communication with Host 2 to determine if edge (D, E) exists. The creation of the proxy-induced subgraph avoids this problem and allows Host 1 to find the triangle without communication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Discussion</head><p>The partitioning strategy described in this section is application-agnostic and is implemented in the Customizable Streaming Partitioner (CuSP) framework <ref type="bibr" target="#b35">[36]</ref>. The experimental results in this paper are based on the partitions created by CuSP.</p><p>IV. DISTRIBUTED TRIANGLE COUNTING Figure <ref type="figure" target="#fig_1">2</ref> details the overall execution of our distributed triangle counting implementation. The graph is read, partitioned, and processed to sort the neighbor lists based on vertex IDs. The partitioned graph is then marshaled to the GPU for GPU processing. Finally, distributed triangle counting in done in two steps.</p><p>1) Each host counts the number of triangles locally.</p><p>2) The local counts are aggregated at the end of local computation to get the final triangle count. Note that during the computation, communication is needed only for the aggregation at the very end.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Local Triangle Counting</head><p>To count triangles locally on each host, we modify an IrGL-based triangle counting implementation <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b36">[37]</ref> to use binary search to find triangles instead of edgelist intersection to improve GPU locality <ref type="bibr" target="#b27">[28]</ref>, <ref type="bibr" target="#b28">[29]</ref>. As the graph is already preprocessed before it is marshaled to the GPU, there is no need to do graph preprocessing on the GPU: it is only responsible for counting triangles.</p><p>Local triangle counting on each host must take into account the fact that the graph is distributed across multiple hosts. To avoid overcounting triangles, a triangle ABC, A &lt; B &lt; C is only counted if the vertex A is a master proxy. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Correctness of Distributed Triangle Counting</head><p>We briefly discuss the correctness of our distributed triangle counting. Let ABC be a triangle such that A &lt; B &lt; C. For correctness, it (1) must be counted if it exists and (2) must be counted exactly once. We describe three observations from the partitioning described in Section III that are useful in reasoning about the correctness of the distributed triangle counting algorithm.</p><p>Observation 1. If undirected edges {A, B} and {A, C} exist, then directed edges (A, B) and (A, C) will be present on the same host that contains the master proxy of A. This holds because the host that has the master proxy has all its outgoing edges. This implies proxies for B and C exist on that host as well.</p><p>Observation 2. If proxies B and C exist on some host H and undirected edge {B, C} exists, then an edge proxy for directed edge (B, C) will exist on H. Observation 3. A triangle ABC can exist on more than one host since proxies for A, B, and C may exist on more than one host.</p><p>Let Host H a contain the master proxy for A. From Observation 1, H a contains edges (A, B) and (A, C), and H a contains the proxies for B and C. Following Observation 2, the edge (B, C) exists on H a , which means the triangle is counted by H a since all three edges exist and A is a master proxy. Therefore, if the triangle exists, it is counted by our approach. Secondly, it will be counted only once: even if triangle ABC exists on any other host H b (Observation 3), it not counted by the host since A's master proxy only exists on H a . Thus, if a triangle exists, it is counted exactly once.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Platform-Agnosticism</head><p>The approach described here can be used with any local triangle counting algorithm, provided it counts a triangle ABC only if A is a master proxy. In addition, the platform is not a factor: CPUs, GPUs, and/or FPGAs can all be used as long as they are able to aggregate triangle counts across all platforms at the end of the local computation. In general, the best local triangle counting algorithm will be platformdependent as explained in Section II.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. EVALUATION</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Experimental Setup</head><p>We implemented the proposed graph partitioning policy using the Customizable Streaming Partitioner (CuSP) <ref type="bibr" target="#b35">[36]</ref> framework. We modified CuSP to create edge proxies in addition to vertex proxies. We also modified it to treat undirected edges as a single directed edge based on a total ordering heuristic specified by the user. In this paper, we establish the order among the vertices based on their degree: edges point towards the vertex with a higher degree, and ties are broken so the edge points to the vertex with the larger vertex ID <ref type="bibr" target="#b4">[5]</ref>.</p><p>The machine used for our evaluation is the Bridges cluster <ref type="bibr" target="#b37">[38]</ref>, <ref type="bibr" target="#b38">[39]</ref> at the Pittsburgh Supercomputing Center <ref type="bibr" target="#b39">[40]</ref>. We used up to 64 NVIDIA Tesla P100 GPUs located on 32 distributed machines with 128GB DRAM each. Each P100 GPU has 16GB of memory. Each node in the cluster has 2 Intel Broadwell E5-2683 v4 CPUs with 16 cores per CPU. The nodes in the cluster are connected through the Intel Omni-Path Architecture.</p><p>We evaluated our DistTC application on the Graph500 inputs provided by the Graph Challenge; the graph properties are shown in Table <ref type="table" target="#tab_1">I</ref>. These inputs are relatively small in size, so we used a single GPU for them. In addition, we used the larger input graphs shown in Table <ref type="table" target="#tab_2">II</ref> on up to 64 GPUs (32 nodes on Bridges). rmat26 is a synthetic graph generated by an RMAT generator <ref type="bibr" target="#b40">[41]</ref>; twitter40 <ref type="bibr" target="#b41">[42]</ref>, friendster <ref type="bibr" target="#b42">[43]</ref> uk-2007, gsh-2015, and clueweb12 <ref type="bibr" target="#b43">[44]</ref>, <ref type="bibr" target="#b44">[45]</ref>, <ref type="bibr" target="#b45">[46]</ref>, <ref type="bibr" target="#b46">[47]</ref> are web crawls. Input graphs are symmetric, have no self-loops, and have no duplicated edges. We represent the input graphs in memory in a compressed sparse row (CSR) format. The tables report the number of undirected edges after dropping duplicated edges and self-loops; each undirected edge {a, b} is represented by two directed edges (a, b) and (b, a). The input graph is partitioned across machines using the strategy in Section III. We also sorted the neighbor lists of source and destination vertices of each edge during this preprocessing    step. We compiled our implementation using gcc 6.3.0 and cuda 9.0, and we report the results for a mean of three runs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Experimental Results</head><p>In this section, we analyze the performance of distributed triangle counting and compare it with other third-party implementations.</p><p>DistTC performance on single GPU: Table <ref type="table" target="#tab_1">I</ref> shows the performance of DistTC on the Graph500 inputs on a single GPU. It also shows the runtime of IrGL-generated single-GPU triangle counting code <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b36">[37]</ref> (denoted IrGL) that was a Graph Challenge 2017 champion. On average, DistTC achieves 1.54? speedup over IrGL. On a single GPU, we do not partition the graph, so the difference in performance is due to the computation phase on the GPU. IrGL uses merge-based intersection for computing the number of triangles on an edge, whereas DistTC employs binary search <ref type="bibr" target="#b28">[29]</ref>. Binary search has better locality and improved coalesced memory accesses <ref type="bibr" target="#b27">[28]</ref>, <ref type="bibr" target="#b28">[29]</ref>, so we observe an increase in performance even on a single GPU.</p><p>DistTC performance on multi-machine multi-GPUs: Table III shows the performance on multiple GPUs on multiple  </p><p>total time, which is end-to-end time taken to execute the application. Most of the preprocessing time is taken up in reading the graph from disk and partitioning it. With the increase in the number of GPUs, the time taken compute the number of triangles decreases since our distributed triangle counting algorithm is free from the synchronization except for the final aggregation. We also observe some scaling for the total time since increasing the number of hosts allows graphs to be read from disk faster and reduces the partitioning and marshalling time.</p><p>We also compare the performance of our approach with that of TriCore <ref type="bibr" target="#b27">[28]</ref>, <ref type="bibr" target="#b28">[29]</ref>, which is a multi-GPU implementation of triangle counting and a Graph Challenge 2018 champion, in Table <ref type="table" target="#tab_5">IV</ref>. As their source code is not available, we use the times reported in their paper which were collected on Tesla P100 GPUs. For friendster and twitter40, we compare execution time, while for gsh-2015, we compare the total endto-end execution time; these are the only times reported in their paper. For gsh-2015, the number of triangles reported by the TriCore paper seems incorrect since the number in their paper does not match the number reported by other runs (we ran a shared-memory Galois version of triangle counting on a multicore machine with Intel Optane non-volatile memory and obtained the same number of triangles as DistTC does) and the number of edges reported in their paper does not match the gsh-2015 specification <ref type="bibr">[48]</ref>.</p><p>For the small graphs with low runtime, we are competitive with TriCore's execution time. For the larger gsh-2015, our implementation is faster than TriCore's (end-to-end time) by 1.58?.</p><p>In summary, the proxy-edge based partitioning policy and the multi-machine, multi-GPU triangle counting implementation perform well as graphs get larger in size due to the elimination of communication except for the aggregation of independent counts across all hosts at the end of the computation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSION</head><p>This paper describes a high-performance distributed GPU implementation of triangle counting using a new partitioning scheme that duplicates edges to avoid communication during triangle counting. Evaluation of triangle counting with this new policy shows execution time scaling and good performance as graphs grow in size due to the removal of communication overhead during triangle counting computation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 :</head><label>1</label><figDesc>Fig. 1: Steps of partitioning for triangle counting.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 :</head><label>2</label><figDesc>Fig. 2: Execution flow for distributed triangle counting.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE I :</head><label>I</label><figDesc>Graph properties and performance comparison (in seconds) of Graph500 datasets on a single GPU.</figDesc><table><row><cell></cell><cell>Vertices</cell><cell>Undirected Edges</cell><cell># triangles</cell></row><row><cell>rmat26</cell><cell>67,108,864</cell><cell>1,065,788,093</cell><cell>43,646,321,254</cell></row><row><cell>twitter40</cell><cell>41,652,230</cell><cell>1,202,513,046</cell><cell>34,824,916,864</cell></row><row><cell>friendster</cell><cell>65,608,366</cell><cell>1,806,067,135</cell><cell>4,173,724,142</cell></row><row><cell>uk2007</cell><cell>105,896,435</cell><cell>3,301,876,564</cell><cell>286,701,284,103</cell></row><row><cell>gsh-2015</cell><cell>988,490,691</cell><cell>25,690,705,118</cell><cell>910,140,734,636</cell></row><row><cell cols="2">clueweb12 978,407,686</cell><cell cols="2">37,372,179,311 1,995,295,290,765</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE II :</head><label>II</label><figDesc>Large graphs and their properties</figDesc><table><row><cell>Graph</cell><cell>GPUs</cell><cell>Pre-Processing</cell><cell>Exec. Time</cell><cell>Total Time</cell></row><row><cell></cell><cell>16</cell><cell>30.16 (29.15)</cell><cell>5.95</cell><cell>36.11</cell></row><row><cell>rmat26</cell><cell>32</cell><cell>26.92 (25.99)</cell><cell>3.63</cell><cell>30.55</cell></row><row><cell></cell><cell>64</cell><cell>23.74 (22.89)</cell><cell>2.62</cell><cell>26.36</cell></row><row><cell></cell><cell>16</cell><cell>24.90 (24.20)</cell><cell>3.92</cell><cell>28.82</cell></row><row><cell>twitter40</cell><cell>32</cell><cell>20.81 (20.20)</cell><cell>2.83</cell><cell>23.64</cell></row><row><cell></cell><cell>64</cell><cell>18.73 (18.19)</cell><cell>2.35</cell><cell>21.08</cell></row><row><cell></cell><cell>16</cell><cell>52.13 (51.32)</cell><cell>2.49</cell><cell>54.62</cell></row><row><cell>friendster</cell><cell>32</cell><cell>41.80 (41.19)</cell><cell>1.64</cell><cell>43.44</cell></row><row><cell></cell><cell>64</cell><cell>36.13 (35.64)</cell><cell>1.50</cell><cell>37.63</cell></row><row><cell></cell><cell>16</cell><cell>12.16 (11.63)</cell><cell>8.64</cell><cell>20.80</cell></row><row><cell>uk2007</cell><cell>32</cell><cell>12.06 (11.66)</cell><cell>6.52</cell><cell>18.58</cell></row><row><cell></cell><cell>64</cell><cell>11.41 (11.05)</cell><cell>5.47</cell><cell>16.88</cell></row><row><cell></cell><cell>16</cell><cell>-</cell><cell>-</cell><cell>-</cell></row><row><cell>gsh-2015</cell><cell>32</cell><cell>143.43 (142.30)</cell><cell>16.44</cell><cell>159.87</cell></row><row><cell></cell><cell>64</cell><cell>143.72 (142.97)</cell><cell>15.25</cell><cell>158.97</cell></row><row><cell></cell><cell>16</cell><cell>-</cell><cell>-</cell><cell>-</cell></row><row><cell>clueweb12</cell><cell>32</cell><cell>-</cell><cell>-</cell><cell>-</cell></row><row><cell></cell><cell>64</cell><cell>162.92 (162.61)</cell><cell>9.49</cell><cell>172.41</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE III :</head><label>III</label><figDesc>Performance (in seconds) for large graphs on multiple GPUs (Partitioning time in parentheses).</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>TABLE IV :</head><label>IV</label><figDesc>Performance comparison (in seconds) with Tri-Core<ref type="bibr" target="#b28">[29]</ref>: friendster and twitter40 compares compute time; gsh-2015 compares end-to-end time.hosts using the large graphs shown in TableII. We used 16, 32, and 64 GPUs. In the table, we report the following metrics: (1) preprocessing time, which is the time taken by CuSP to load the graph from disk, partition it, add directions to edges, sort edges, construct the in-memory representation of each partition, and marshal the graph from the CPU to the GPU (in parentheses, we show the graph partitioning time, i.e., preprocessing time excluding the time to marshal the data from the CPU to the GPU), (2) execution time, which is the time taken to compute the number of triangles on the GPUs and aggregate the final result, and</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>A set of vertices {v 1 , v</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>, v</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_2"><p>} is said to be form a triangle if there is an edge in the graph between each pair of these vertices.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div><head>ACKNOWLEDGMENT</head><p>This research was supported by the <rs type="funder">NSF</rs> grants <rs type="grantNumber">1406355</rs>, <rs type="grantNumber">1618425</rs>, <rs type="grantNumber">1705092</rs>, <rs type="grantNumber">1725322</rs>, and by the <rs type="funder">DARPA</rs> contracts <rs type="grantNumber">FA8750-16-2-0004</rs> and <rs type="grantNumber">FA8650-15-C-7563</rs>. We used XSEDE grant <rs type="grantNumber">ACI-1548562</rs> through allocation <rs type="grantNumber">TG-CIE170005</rs>. We used the Bridges cluster, supported by <rs type="funder">NSF</rs> award number <rs type="grantNumber">ACI-1445606</rs>, at the <rs type="institution">Pittsburgh Supercomputing Center</rs>.</p></div>
			</div>
			<listOrg type="funding">
				<org type="funding" xml:id="_WDekay8">
					<idno type="grant-number">1406355</idno>
				</org>
				<org type="funding" xml:id="_h4Xd5ZD">
					<idno type="grant-number">1618425</idno>
				</org>
				<org type="funding" xml:id="_n6wWqNV">
					<idno type="grant-number">1705092</idno>
				</org>
				<org type="funding" xml:id="_sAk5DGq">
					<idno type="grant-number">1725322</idno>
				</org>
				<org type="funding" xml:id="_DPm2dkR">
					<idno type="grant-number">FA8750-16-2-0004</idno>
				</org>
				<org type="funding" xml:id="_S2qjKbp">
					<idno type="grant-number">FA8650-15-C-7563</idno>
				</org>
				<org type="funding" xml:id="_RnXE3DC">
					<idno type="grant-number">ACI-1548562</idno>
				</org>
				<org type="funding" xml:id="_pCWwReS">
					<idno type="grant-number">TG-CIE170005</idno>
				</org>
				<org type="funding" xml:id="_H53EBeg">
					<idno type="grant-number">ACI-1445606</idno>
				</org>
			</listOrg>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Wasserman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Faust</surname></persName>
		</author>
		<title level="m">Social Network Analysis: Methods and Applications, ser. Structural Analysis in the Social Sciences</title>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Collective dynamics of &apos;small-world&apos; networks</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Watts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">H</forename><surname>Strogatz</surname></persName>
		</author>
		<idno type="DOI">10.1038/30918</idno>
		<ptr target="http://dx.doi.org/10.1038/30918" />
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">393</biblScope>
			<biblScope unit="issue">6684</biblScope>
			<biblScope unit="page" from="440" to="442" />
			<date type="published" when="1998-06">Jun. 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Truss decomposition on shared-memory parallel systems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">K</forename><surname>Ahmed</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename><surname>Tom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Petrini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Karypis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE High Performance Extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2017-09">Sep. 2017</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Triangle Counting with A Multi-Core Computer</title>
		<author>
			<persName><forename type="first">E</forename><surname>Donato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ouyang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Peguero-Isalguez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE High Performance extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2018-09">Sep. 2018</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Parallel triangle counting and k-truss identification using graph-centric methods</title>
		<author>
			<persName><forename type="first">C</forename><surname>Voegele</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pingali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE High Performance Extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2017-09">Sep. 2017</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Update on Static Graph Challenge on GPU</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bisson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Fatica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE High Performance extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2018-09">Sep. 2018</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Parallel Triangle Counting in Massive Streaming Graphs</title>
		<author>
			<persName><forename type="first">K</forename><surname>Tangwongsan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pavan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tirthapura</surname></persName>
		</author>
		<idno type="DOI">10.1145/2505515.2505741</idno>
		<ptr target="http://doi.acm.org/10.1145/2505515.2505741" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22Nd ACM International Conference on Information &amp; Knowledge Management, ser. CIKM &apos;13</title>
		<meeting>the 22Nd ACM International Conference on Information &amp; Knowledge Management, ser. CIKM &apos;13<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="781" to="786" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">PATRIC: A Parallel Algorithm for Counting Triangles in Massive Networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Arifuzzaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Marathe</surname></persName>
		</author>
		<idno type="DOI">10.1145/2505515.2505545</idno>
		<ptr target="http://doi.acm.org/10.1145/2505515.2505545" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22Nd ACM International Conference on Information &amp; Knowledge Management, ser. CIKM &apos;13</title>
		<meeting>the 22Nd ACM International Conference on Information &amp; Knowledge Management, ser. CIKM &apos;13<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="529" to="538" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A fast parallel algorithm for counting triangles in graphs using dynamic load balancing</title>
		<author>
			<persName><forename type="first">S</forename><surname>Arifuzzaman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Marathe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE International Conference on Big Data (Big Data)</title>
		<imprint>
			<date type="published" when="2015-10">Oct 2015</date>
			<biblScope unit="page" from="1839" to="1847" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An Efficient MapReduce Algorithm for Counting Triangles in a Very Large Graph</title>
		<author>
			<persName><forename type="first">H.-M</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-W</forename><surname>Chung</surname></persName>
		</author>
		<idno type="DOI">10.1145/2505515.2505563</idno>
		<ptr target="http://doi.acm.org/10.1145/2505515.2505563" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22Nd ACM International Conference on Information &amp; Knowledge Management, ser. CIKM &apos;13</title>
		<meeting>the 22Nd ACM International Conference on Information &amp; Knowledge Management, ser. CIKM &apos;13<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="539" to="548" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Parallel Triangle Counting over Large Graphs</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Database Systems for Advanced Applications</title>
		<editor>
			<persName><forename type="first">L</forename><surname>Meng</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Feng</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">W</forename><surname>Bressan</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">W</forename><surname>Winiwarter</surname></persName>
		</editor>
		<editor>
			<persName><surname>Song</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="301" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Counting Triangles in Large Graphs on GPU</title>
		<author>
			<persName><forename type="first">A</forename><surname>Polak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)</title>
		<imprint>
			<date type="published" when="2016-05">May 2016</date>
			<biblScope unit="page" from="740" to="746" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A Comparative Study on Exact Triangle Counting Algorithms on the GPU</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Owens</surname></persName>
		</author>
		<idno type="DOI">10.1145/2915516.2915521</idno>
		<ptr target="http://doi.acm.org/10.1145/2915516.2915521" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Workshop on High Performance Graph Processing, ser. HPGP &apos;16</title>
		<meeting>the ACM Workshop on High Performance Graph Processing, ser. HPGP &apos;16<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Multicore triangle computations without tuning</title>
		<author>
			<persName><forename type="first">J</forename><surname>Shun</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Tangwongsan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE 31st International Conference on Data Engineering</title>
		<imprint>
			<date type="published" when="2015-04">April 2015</date>
			<biblScope unit="page" from="149" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Preliminary Exploration on Large-Scale Triangle Counting in Shared-Memory Multicore System</title>
		<author>
			<persName><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Spampinato</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mcmillan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Franchetti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE High Performance Extreme Computing (HPEC)</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">TriX: Triangle counting at extreme scale</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Swope</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE High Performance Extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2017-09">Sep. 2017</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fast Triangle Counting on the GPU</title>
		<author>
			<persName><forename type="first">O</forename><surname>Green</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Yalamanchili</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L.-M</forename><surname>Mungu?a</surname></persName>
		</author>
		<idno type="DOI">10.1109/IA3.2014.7</idno>
		<ptr target="http://dx.doi.org/10.1109/IA3.2014.7" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th Workshop on Irregular Applications: Architectures and Algorithms, ser. IA3 &apos;14</title>
		<meeting>the 4th Workshop on Irregular Applications: Architectures and Algorithms, ser. IA3 &apos;14<address><addrLine>Piscataway, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">GPU Merge Path: A GPU Merging Algorithm</title>
		<author>
			<persName><forename type="first">O</forename><surname>Green</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mccoll</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Bader</surname></persName>
		</author>
		<idno type="DOI">10.1145/2304576.2304621</idno>
		<ptr target="http://doi.acm.org/10.1145/2304576.2304621" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th ACM International Conference on Supercomputing, ser. ICS &apos;12</title>
		<meeting>the 26th ACM International Conference on Supercomputing, ser. ICS &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="331" to="340" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Collaborative (CPU + GPU) algorithms for triangle counting and truss decomposition on the Minsky architecture: Static graph challenge: Subgraph isomorphism</title>
		<author>
			<persName><forename type="first">K</forename><surname>Date</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Nagi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Hwu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE High Performance Extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2017-09">Sep. 2017</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A Comparative Study on Exact Triangle Counting Algorithms on the GPU</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Owens</surname></persName>
		</author>
		<idno type="DOI">10.1145/2915516.2915521</idno>
		<ptr target="http://doi.acm.org/10.1145/2915516.2915521" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Workshop on High Performance Graph Processing, ser. HPGP &apos;16</title>
		<meeting>the ACM Workshop on High Performance Graph Processing, ser. HPGP &apos;16<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Counting Triangles and the Curse of the Last Reducer</title>
		<author>
			<persName><forename type="first">S</forename><surname>Suri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vassilvitskii</surname></persName>
		</author>
		<idno type="DOI">10.1145/1963405.1963491</idno>
		<ptr target="http://doi.acm.org/10.1145/1963405.1963491" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th International Conference on World Wide Web, ser. WWW &apos;11</title>
		<meeting>the 20th International Conference on World Wide Web, ser. WWW &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="607" to="614" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Graph Twiddling in a MapReduce World</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing in Science Engineering</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="29" to="41" />
			<date type="published" when="2009-07">July 2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Counting Triangles in Massive Graphs with MapReduce</title>
		<author>
			<persName><forename type="first">T</forename><surname>Kolda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pinar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Plantenga</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Seshadhri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Task</surname></persName>
		</author>
		<idno type="DOI">10.1137/13090729X</idno>
		<idno>pp. S48-S77</idno>
		<ptr target="https://doi.org/10.1137/13090729X" />
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Scientific Computing</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Colorful Triangle Counting and a MapReduce Implementation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Pagh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Tsourakakis</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.ipl.2011.12.007</idno>
		<ptr target="http://dx.doi.org/10.1016/j.ipl.2011.12.007" />
	</analytic>
	<monogr>
		<title level="j">Inf. Process. Lett</title>
		<imprint>
			<biblScope unit="volume">112</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="277" to="281" />
			<date type="published" when="2012-03">Mar. 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">An Efficient MapReduce Algorithm for Counting Triangles in a Very Large Graph</title>
		<author>
			<persName><forename type="first">H.-M</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C.-W</forename><surname>Chung</surname></persName>
		</author>
		<idno type="DOI">10.1145/2505515.2505563</idno>
		<ptr target="http://doi.acm.org/10.1145/2505515.2505563" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22Nd ACM International Conference on Information &amp; Knowledge Management, ser. CIKM &apos;13</title>
		<meeting>the 22Nd ACM International Conference on Information &amp; Knowledge Management, ser. CIKM &apos;13<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="539" to="548" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">PDTL: Parallel and Distributed Triangle Listing for Massive Graphs</title>
		<author>
			<persName><forename type="first">I</forename><surname>Giechaskiel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Panagopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Yoneki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 44th International Conference on Parallel Processing</title>
		<imprint>
			<date type="published" when="2015-09">Sep. 2015</date>
			<biblScope unit="page" from="370" to="379" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Triangle counting for scale-free graphs at scale in distributed memory</title>
		<author>
			<persName><forename type="first">R</forename><surname>Pearce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE High Performance Extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2017-09">Sep. 2017</date>
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">TriCore: Parallel Triangle Counting on GPUs</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC18: International Conference for High Performance Computing, Networking, Storage and Analysis</title>
		<imprint>
			<date type="published" when="2018-11">Nov 2018</date>
			<biblScope unit="page" from="171" to="182" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">High-Performance Triangle Counting on GPUs</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">H</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE High Performance extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2018-09">Sep. 2018</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Triangle Counting and Truss Decomposition using FPGA</title>
		<author>
			<persName><forename type="first">S</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>El-Hadedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Q</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">S</forename><surname>Mailthody</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Date</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Nagi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Hwu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE High Performance extreme Computing Conference (HPEC)</title>
		<imprint>
			<date type="published" when="2018-09">Sep. 2018</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">DOULION: Counting Triangles in Massive Graphs with a Coin</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Tsourakakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<idno type="DOI">10.1145/1557019.1557111</idno>
		<ptr target="http://doi.acm.org/10.1145/1557019.1557111" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD &apos;09</title>
		<meeting>the 15th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD &apos;09<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="837" to="846" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Reductions in Streaming Algorithms, with an Application to Counting Triangles in Graphs</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Bar-Yossef</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Sivakumar</surname></persName>
		</author>
		<ptr target="http://dl.acm.org/citation.cfm?id=545381.545464" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Thirteenth Annual ACM-SIAM Symposium on Discrete Algorithms, ser. SODA &apos;02</title>
		<meeting>the Thirteenth Annual ACM-SIAM Symposium on Discrete Algorithms, ser. SODA &apos;02<address><addrLine>Philadelphia, PA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
			<biblScope unit="page" from="623" to="632" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Counting Triangles in Data Streams</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">S</forename><surname>Buriol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Frahling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Leonardi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Marchetti-Spaccamela</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Sohler</surname></persName>
		</author>
		<idno type="DOI">10.1145/1142351.1142388</idno>
		<ptr target="http://doi.acm.org/10.1145/1142351.1142388" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-fifth ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems, ser. PODS &apos;06</title>
		<meeting>the Twenty-fifth ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems, ser. PODS &apos;06<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="253" to="262" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A Space-Efficient Streaming Algorithm for Estimating Transitivity and Triangle Counts Using the Birthday Paradox</title>
		<author>
			<persName><forename type="first">M</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Seshadhri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Pinar</surname></persName>
		</author>
		<idno type="DOI">10.1145/2700395</idno>
		<ptr target="http://doi.acm.org/10.1145/2700395" />
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Knowl. Discov. Data</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="15" />
			<date type="published" when="2015-02">Feb. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Gluon: A Communication-optimizing Substrate for Distributed Heterogeneous Graph Analytics</title>
		<author>
			<persName><forename type="first">R</forename><surname>Dathathri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Hoang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-V</forename><surname>Dang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Brooks</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Dryden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Snir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pingali</surname></persName>
		</author>
		<idno type="DOI">10.1145/3192366.3192404</idno>
		<ptr target="http://doi.acm.org/10.1145/3192366.3192404" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI &apos;18</title>
		<meeting>the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI &apos;18<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="752" to="768" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">CuSP: A Customizable Streaming Edge Partitioner for Distributed Graph Analytics</title>
		<author>
			<persName><forename type="first">L</forename><surname>Hoang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Dathathri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pingali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 33rd IEEE International Parallel and Distributed Processing Symposium, ser. IPDPS</title>
		<meeting>the 33rd IEEE International Parallel and Distributed Processing Symposium, ser. IPDPS</meeting>
		<imprint>
			<date type="published" when="2019">2019. 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A Compiler for Throughput Optimization of Graph Algorithms on GPUs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Pai</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Pingali</surname></persName>
		</author>
		<idno type="DOI">10.1145/2983990.2984015</idno>
		<ptr target="http://doi.acm.org/10.1145/2983990.2984015" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, ser. OOPSLA 2016</title>
		<meeting>the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, ser. OOPSLA 2016<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="1" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Bridges: A Uniquely Flexible HPC Resource for New Communities and Data Analytics</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">A</forename><surname>Nystrom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Levine</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">Z</forename><surname>Roskies</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Scott</surname></persName>
		</author>
		<idno type="DOI">10.1145/2792745.2792775</idno>
		<ptr target="http://doi.acm.org/10.1145/2792745.2792775" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 XSEDE Conference: Scientific Advancements Enabled by Enhanced Cyberinfrastructure, ser. XSEDE &apos;15</title>
		<meeting>the 2015 XSEDE Conference: Scientific Advancements Enabled by Enhanced Cyberinfrastructure, ser. XSEDE &apos;15<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">XSEDE: Accelerating Scientific Discovery</title>
		<author>
			<persName><forename type="first">J</forename><surname>Towns</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Cockerill</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Dahan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Gaither</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Grimshaw</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Hazlewood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Lathrop</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Lifka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">D</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Roskies</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Wilkins-Diehr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing in Science and Engineering</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="62" to="74" />
			<date type="published" when="2014-10">Sept-Oct 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Pittsburgh Supercomputing Center</title>
		<ptr target="https://www.psc.edu/" />
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<author>
			<persName><forename type="first">D</forename><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R-Mat</forename></persName>
		</author>
		<idno type="DOI">10.1137/1.9781611972740.43</idno>
		<ptr target="http://epubs.siam.org/doi/abs/10.1137/1.9781611972740.43" />
		<title level="m">A Recursive Model for Graph Mining</title>
		<imprint>
			<biblScope unit="page" from="442" to="446" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">What is Twitter, a Social Network or a News Media</title>
		<author>
			<persName><forename type="first">H</forename><surname>Kwak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Moon</surname></persName>
		</author>
		<idno type="DOI">10.1145/1772690.1772751</idno>
		<ptr target="http://doi.acm.org/10.1145/1772690.1772751" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th International Conference on World Wide Web, ser. WWW &apos;10</title>
		<meeting>the 19th International Conference on World Wide Web, ser. WWW &apos;10<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="591" to="600" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">SNAP Datasets: Stanford Large Network Dataset Collection</title>
		<author>
			<persName><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Krevl</surname></persName>
		</author>
		<ptr target="http://snap.stanford.edu/data" />
		<imprint>
			<date type="published" when="2014-06">Jun. 2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">The ClueWeb12 Dataset</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">L</forename><surname>Project</surname></persName>
		</author>
		<ptr target="http://lemurproject.org/clueweb12/" />
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">The WebGraph Framework I: Compression Techniques</title>
		<author>
			<persName><forename type="first">P</forename><surname>Boldi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vigna</surname></persName>
		</author>
		<idno type="DOI">10.1145/988672.988752</idno>
		<ptr target="http://doi.acm.org/10.1145/988672.988752" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th International Conference on World Wide Web, ser. WWW &apos;04</title>
		<meeting>the 13th International Conference on World Wide Web, ser. WWW &apos;04<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="595" to="602" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Layered Label Propagation: A Multiresolution Coordinate-free Ordering for Compressing Social Networks</title>
		<author>
			<persName><forename type="first">P</forename><surname>Boldi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Rosa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Santini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vigna</surname></persName>
		</author>
		<idno type="DOI">10.1145/1963405.1963488</idno>
		<ptr target="http://doi.acm.org/10.1145/1963405.1963488" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th International Conference on World Wide Web, ser. WWW &apos;11</title>
		<meeting>the 20th International Conference on World Wide Web, ser. WWW &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="587" to="596" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">BUbiNG: Massive Crawling for the Masses</title>
		<author>
			<persName><forename type="first">P</forename><surname>Boldi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Marino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Santini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vigna</surname></persName>
		</author>
		<idno type="DOI">10.1145/2567948.2577304</idno>
		<ptr target="http://doi.acm.org/10.1145/2567948.2577304" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd International Conference on World Wide Web, ser. WWW &apos;14 Companion</title>
		<meeting>the 23rd International Conference on World Wide Web, ser. WWW &apos;14 Companion<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="227" to="228" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
