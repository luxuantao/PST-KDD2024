<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Lower and upper bounds for the mixed capacitated arc routing problem</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2005-03-30">30 March 2005</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">José-Manuel</forename><surname>Belenguer</surname></persName>
							<email>jose.belenguer@uv.es</email>
							<affiliation key="aff0">
								<orgName type="department">Dept d&apos;Estadística i Investigació Operativa</orgName>
								<orgName type="institution">Universitat de València</orgName>
								<address>
									<addrLine>C / Dr. Moliner</addrLine>
									<postCode>50-46100</postCode>
									<settlement>Burjassot (València)</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Enrique</forename><surname>Benavent</surname></persName>
							<email>enrique.benavent@uv.es</email>
							<affiliation key="aff0">
								<orgName type="department">Dept d&apos;Estadística i Investigació Operativa</orgName>
								<orgName type="institution">Universitat de València</orgName>
								<address>
									<addrLine>C / Dr. Moliner</addrLine>
									<postCode>50-46100</postCode>
									<settlement>Burjassot (València)</settlement>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Philippe</forename><surname>Lacomme</surname></persName>
							<email>lacomme@sp.isima.fr</email>
							<affiliation key="aff1">
								<orgName type="laboratory">LIMOS</orgName>
								<orgName type="institution">Université Blaise Pascal</orgName>
								<address>
									<addrLine>BP 10125</addrLine>
									<postCode>63173</postCode>
									<settlement>Aubière Cedex</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Christian</forename><surname>Prins</surname></persName>
							<email>prins@utt.fr</email>
							<affiliation key="aff2">
								<orgName type="laboratory">ISTIT</orgName>
								<orgName type="institution">Université de Technologie de Troyes</orgName>
								<address>
									<addrLine>BP 2060</addrLine>
									<postCode>10010</postCode>
									<settlement>Troyes Cedex</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Lower and upper bounds for the mixed capacitated arc routing problem</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2005-03-30">30 March 2005</date>
						</imprint>
					</monogr>
					<idno type="MD5">E4218EC20DC9BC050D7FD4E2C409522A</idno>
					<idno type="DOI">10.1016/j.cor.2005.02.009</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T08:28+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Capacitated arc routing problem</term>
					<term>Mixed graph</term>
					<term>Lower bound</term>
					<term>Cutting plane</term>
					<term>Heuristic</term>
					<term>Memetic algorithm</term>
					<term>Waste collection</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper presents a linear formulation, valid inequalities, and a lower bounding procedure for the mixed capacitated arc routing problem (MCARP). Moreover, three constructive heuristics and a memetic algorithm are described. Lower and upper bounds have been compared on two sets of randomly generated instances. Computational results show that the average gaps between lower and upper bounds are 0.51% and 0.33%, respectively.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction and background</head><p>The capacitated arc routing problem (CARP), introduced by Golden and Wong <ref type="bibr" target="#b0">[1]</ref>, considers an undirected network in which each edge has a traversal cost. A fleet of identical vehicles of limited capacity is based at a depot node. A subset of required edges with known demands must be serviced by a vehicle. The CARP consists of determining a set of vehicle trips of minimum total cost, such that each trip starts and ends at the depot, each required edge is serviced by one single trip and during one traversal, and the total demand for each trip does not exceed vehicle capacity. Assad and Golden <ref type="bibr" target="#b1">[2]</ref> list various applications for the CARP, like municipal waste collection, winter gritting and inspection of power lines.</p><p>The CARP is NP-hard. Exact methods <ref type="bibr" target="#b3">[3]</ref> are still limited to 20 required edges, explaining the importance of heuristics. Path-scanning <ref type="bibr" target="#b4">[4]</ref>, augment-merge <ref type="bibr" target="#b0">[1]</ref> and Ulusoy's heuristic <ref type="bibr" target="#b5">[5]</ref> are good examples of fast heuristics to compute one acceptable solution. Much better results can be obtained by metaheuristics. They include tabu search algorithms designed by Eglese and Li <ref type="bibr" target="#b6">[6]</ref> and by Hertz et al. <ref type="bibr" target="#b7">[7]</ref>, memetic algorithms proposed by Lacomme et al. <ref type="bibr">[8,</ref><ref type="bibr" target="#b9">9]</ref>, Greistorfer's tabu-scatter search approach <ref type="bibr" target="#b10">[10]</ref> and a guided local search from Beullens et al. <ref type="bibr" target="#b11">[11]</ref>. Comparisons with tight lower bounds computed by Belenguer and Benavent <ref type="bibr" target="#b12">[12]</ref> show that a majority of instances with up to 100 required edges can be solved to optimality by these algorithms.</p><p>In fact, the CARP is too simplistic to model real street networks encountered for instance in urban refuse collection. Indeed, its undirected graph can only model 2-way streets whose both sides are collected in parallel and in any direction. Even if this practice is common in low-traffic areas, actual networks also include two-way streets with independent sides and one-way streets. Clearly, such extensions can be tackled by extending the CARP with a mixed network, leading to a new problem called Mixed CARP or MCARP.</p><p>The MCARP is defined on a mixed network G = (V , E ∪ A) with a set V of n nodes, an edge-set E and an arc-set A. A fleet of K identical vehicles with limited capacity Q is based at a depot node s. K is either fixed or left as a decision variable. The m elements of E ∪ A are called links. Each time a link u is traversed without service by a vehicle, a cost c(u) called deadheading cost is incurred. A subset of required links must be serviced by the vehicles. It comprises a subset of required edges E R ⊆ E and a subset of required arcs A R ⊆ A. Each required link u has a demand r(u) and a service cost w(u). All costs and demands are non-negative integers.</p><p>The goal is to determine a least-cost set of vehicle trips, such that each trip starts and ends at the depot, each required link is serviced by one single trip and during one traversal (no split service), and the total demand processed by a trip fits vehicle capacity. The MCARP is NP-hard, since it includes NP-hard particular cases: the CARP or UCARP (undirected graph), the Directed CARP or DCARP (directed graph), the mixed rural postman problem or MRPP (if Q = ∞) and the mixed Chinese postman problem or MCPP (if Q=∞ and all links are required). To the best of our knowledge, no published paper addresses the MCARP.</p><p>The paper is organized as follows. Section 2 deals with a linear programming approach leading to a cutting plane algorithm that computes tight lower bounds for the MCARP. Fast constructive heuristics are presented in Section 3. Section 4 introduces a memetic algorithm. Section 5 is devoted to a computational evaluation, in which lower and upper bounds are compared on two sets of randomly generated MCARP instances.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">A lower bound for the MCARP</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">A linear formulation</head><p>This section presents a cutting plane algorithm to obtain a lower bound for the MCARP. The method is based on the formulations proposed by Belenguer and Benavent <ref type="bibr" target="#b12">[12]</ref> for the UCARP, by Nobert and Picard <ref type="bibr" target="#b13">[13]</ref> for the MCPP and by Corberán et al. <ref type="bibr" target="#b14">[14]</ref> for the general routing problem on a mixed graph. Nobert and Picard introduced the so-called balance constraints, that allow formulating the MCPP by considering only one variable per edge and arc. This makes the formulation more compact and, probably, tighter. They used the following characterization of an eulerian mixed graph, due to Ford and Fulkerson <ref type="bibr" target="#b15">[15]</ref>:</p><p>• Evenness condition. The degree of each node (number of links incident with it) is even.</p><p>• Balanced sets condition. For every proper subset of nodes S, the number of arcs entering S minus the number of arcs leaving S is less than or equal to the number of edges between S and V \S.</p><p>Let us introduce some notation. Given a subset of nodes S ⊆ V \{s}, S = ∅, we denote by + (S) the set of arcs leaving S, by -(S) the set of arcs entering S, and by (S) the set of edges between S and V \S. The cutset induced by S is defined as L (S) = + (S) ∪ -(S) ∪ (S). Let L(S) be the set of links having both extreme nodes in S. A subscript R in any of these sets indicates the corresponding subset of required edges/arcs/links: for instance + R (S) denotes the set of required arcs leaving S. r(S) denotes the total demand of the required links of L R (S) ∪ L R (S) and k(S) = r(S)/Q . Note that at least k(S) vehicles are needed to service the demands of the required links in</p><formula xml:id="formula_0">L R (S) ∪ L R (S). The unbalance of the cutset L (S) is defined as b(S) = | - R (S)| -| + R (S)| -| R (S)|.</formula><p>Given an MCARP solution (a set of trips for the vehicles), let x u be the total number of times the link u ∈ E ∪ A is traversed without service by the vehicles. We may construct an eulerian supergraph that corresponds to this MCARP solution, by adding to graph G R =(V , E R ∪A R ) x u copies (called deadheading links) of every link u ∈ E ∪A. For any subsets E ⊆ E, and A ⊆ A, we denote x(E ∪A )= u∈E ∪A x u . This leads to the following relaxed formulation for the MCARP:</p><formula xml:id="formula_1">Min u∈E R ∪A R w(u) + u∈E∪A c(u)x u ,<label>(2.1)</label></formula><formula xml:id="formula_2">s.t.: x( + (S)) -x( -(S)) + x( (S)) b(S) ∀S ⊆ V , S = ∅, (2.2) x( L (S)) 2k(S) -| L R (S)| ∀S ⊆ V \{s}, S = ∅, (2.3) x( L (S)) 1 ∀S ⊆ V \{s}, S = ∅, | L R (S)| is odd, (2.4) x u 0 ∀u ∈ E ∪ A, (2.5) x u integer ∀u ∈ E ∪ A.</formula><p>(2.6) Constraints (2.2) or balance constraints express the balanced sets condition to be satisfied by an eulerian mixed graph. Constraints (2.3) are called capacity constraints and are explained as follows: as noted above, since at least k(S) vehicles are needed to service the total demand of the required links L R (S)∪L R (S), the total number of deadheading traversals of the links in the cutset L (S) must be at least 2k(S) -| L R (S)|. Obviously, these constraints are only interesting when 2k(S) -| L R (S)| &gt; 0. Constraints (2.4) are called odd cutset constraints and directly derive from the evenness condition. Note that they can be dominated, in some cases, by the capacity constraints.</p><p>A directed version of the capacity constraints is also possible. Note that any vehicle servicing a link in L R (S) ∪ L R (S) has to cross the cutset L (S) twice, once from V \S to S and another time from S to V \S. Thus, the total number of times that the cutset has to be crossed from V \S to S is at least k(S), so we have the following valid constraints:</p><formula xml:id="formula_3">x( -(S)) + x( (S)) k(S) -| - R (S)| -| R (S)| ∀S ⊆ V \{s}, S = ∅. (2.7)</formula><p>Nevertheless, these constraints, as well as the corresponding ones in the reverse direction, have not been used because, as it can be easily shown, they can be generated from constraints (2.2) and (2.3). The above formulation is not complete for the MCARP because it may contain integer solutions that do not correspond to any MCARP solution. Furthermore, no complete formulation using the sole variables x u is known for the MCARP. This can be explained by the fact that variables x u provide information on the deadheading traversals of the set of routes in the MCARP solution, but nothing about the individual trips (see Belenguer and Benavent <ref type="bibr" target="#b12">[12]</ref> for a more detailed discussion on this topic for the UCARP).</p><p>Nevertheless, the formulation can be improved by adding new sets of valid constraints. Namely, the disjoint path (DP) inequalities, that were introduced by Belenguer and Benavent <ref type="bibr" target="#b12">[12]</ref> for the UCARP, can be easily adapted for the MCARP. In what follows, we show that any valid inequality in the UCARP formulation of Belenguer and Benavent <ref type="bibr" target="#b12">[12]</ref> can be translated into a valid inequality for the MCARP. The UCARP formulation uses the same variables x u , but they are associated with edges only, obviously.</p><p>Consider the MCARP defined on the mixed graph G = (V , A ∪ E), and let G U = (V , E ∪ U) be the undirected graph obtained from G by substituting every arc a ∈ A by an edge with the same cost and demand. Let us denote by f (u) ∈ A the arc that has originated the edge u ∈ U . Note that any feasible solution for the MCARP is also a feasible solution for the UCARP defined on G U (as an edge can be traversed in any direction). Now, let b ∈ R E∪U and a 0 ∈ R be such that the inequality u∈E∪U b u x u a 0 is a valid inequality for the UCARP defined on G U . Then, the inequality u∈E b u x u + u∈U b u x f (u) a 0 is obviously valid for the MCARP defined on G.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">A cutting plane algorithm for the MCARP</head><p>We propose a cutting plane algorithm (CPA) to obtain a lower bound for the MCARP which is based on the above formulation. This procedure can briefly be described as follows. At each iteration, we solve a linear program (LP) that contains: the objective function (2.1), the non-negativity constraints (2.5) and a subset of valid constraints (2.2)-(2.4) and DP inequalities. Note that the optimal cost of this LP is a lower bound for the MCARP. Then, we look for a set of valid inequalities violated by the optimal LP solution, we add them to the LP and proceed as before. The algorithm stops when no violated inequality is found. Note that even if the LP solution is integer, it may not correspond to an optimal solution for the MCARP because our formulation is not complete.</p><p>The set of constraints for the first LP is built as follows. Starting at a node v ∈ V \{s}, we generate a sequence of node sets (W i ) such that W 0 = {v} and, for i 1, W i+1 is generated from W i by adding to it all the nodes that are incident in G with at least one node of W i (excluding the depot, if necessary). The procedure stops when the current node set contains all the nodes except the depot. For each node set W i , constraints (2.2) corresponding to W i and V \W i are added to the LP if their right-hand sides are positive; furthermore, constraints (2.3) corresponding to W i and V \(W i ∪ {s}) are added to the LP if their right-hand sides are positive, and otherwise, the constraint that is added is <ref type="bibr">(2.4)</ref> </p><formula xml:id="formula_4">in the case that | L R (W i )| is odd.</formula><p>At each iteration of the cutting plane algorithm several identification procedures have been used to generate violated inequalities. Let x ∈ R E∪A be the optimal LP solution at the current iteration of the cutting plane algorithm.</p><p>Violated balance constraints can be identified as follows. Let z e = xe + 1 for each required link e ∈ E R ∪ A R , z e = xe for a non-required link, and consider the weighted graph G (z) = (V , E ∪ A) with weights z e . It is easy to see that the balance constraint (2.2), corresponding to set S ⊆ V , is violated by x iff f (S) = z( + (S))z( -(S)) + z( (S)) &lt; 0. A set S for which f (S) &lt; 0 is called an unbalanced set. Nobert and Picard <ref type="bibr" target="#b13">[13]</ref> showed that the most unbalanced set in G (z) can be found by solving a maximum flow problem on a graph with |V | + 2 nodes (see also <ref type="bibr">Benavent et al. [16]</ref> for a short description of the maximum flow problem to be solved).</p><p>Violated constraints (2.3), (2.4) and DP inequalities can be identified on a graph where the arcs are considered as (non-directed) edges. The identification procedures described by Belenguer and Benavent in <ref type="bibr" target="#b12">[12]</ref> are briefly recalled below.</p><p>Let G ( x) be the undirected weighted graph induced by the links e ∈ E ∪ A such that xe &gt; 0. The identification of violated odd cutset constraints (2.4) can be done in polynomial time using the odd minimum cut algorithm of Padberg and Rao <ref type="bibr" target="#b17">[17]</ref>.</p><p>Unfortunately, no exact polynomial algorithm is known to identify violated capacity constraints (2.3). We have used two heuristics that generate several node sets S ⊆ V \{s} to see whether (2.3) is violated. Furthermore, for every node set that is generated, constraints (2.2) and (2.4) are also tested. The first heuristic consists of finding the connected components of G ( x). The second heuristic consists of increasing the edge demands by a given percentage and finding a minimum cut in an auxiliary graph. The procedure is inspired by an algorithm <ref type="bibr" target="#b12">[12]</ref> that identifies a relaxed version of the capacity constraints, called fractional capacity constraints, and is applied with 10 different values of increasing percentage.</p><p>The identification of violated DP constraints is much more complex than the previous ones. One such constraint may involve one or several cutsets, so we use the strategy of storing in a pool the node sets generated by the above heuristics and try to combine them to build valid DP inequalities that are violated by the LP solution.</p><p>The preceding identification algorithms were combined using the following strategy: the heuristics that generate node sets S ⊆ V \{s} are called first; in case that these heuristics do not find any violated constraint of types (2.2), (2.3) or (2.4), the exact identification procedures for (2.2) and (2.4) are called. Finally, when all the previous procedures fail, the identification of violated DP inequalities is invoked.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Constructive heuristics for the MCARP</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Introduction</head><p>In this section, three CARP heuristics cited in introduction are generalized for the MCARP: pathscanning <ref type="bibr" target="#b4">[4]</ref>, augment-merge <ref type="bibr" target="#b0">[1]</ref> and Ulusoy's heuristic <ref type="bibr" target="#b5">[5]</ref>. Several possible improvements are also suggested, before their validation in the computational evaluation of Section 5. In fact, the heuristics are extended for an enriched MCARP with five additional features:</p><p>• a mixed multigraph, allowing parallel links between two nodes, • prohibited turns and turn penalties, • a common trip cost limit L (also called range constraint),</p><p>• windy edges, whose deadheading and/or service costs depend on the direction, • several dumping sites.</p><p>These additional features play a key role in applications. For instance, in solid waste collection, a service road parallel to a main road is easily tackled with a multigraph. Prohibited turns are widespread and must be taken into account. Some undesirable turns like U-turns can be allowed, but penalized with an extra-cost (turn penalty). A cost limit on the trips is useful to handle a vehicle range or a maximum driving time. A sloping street can be handled as a windy edge. Finally, several dumping sites are in general available to unload a vehicle before its return to the depot.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Additional notations for heuristics</head><p>For all heuristics of Sections 3 and 4, the mixed multigraph G is coded as a fully directed multigraph G * = (V , A * ), by replacing each edge by two opposite arcs and by adding one dummy loop for the depot and for each dumping site (the role of these loops is explained below). A * is a set of m * arcs, identified by indexes from 1 to m * instead of pairs of nodes, to distinguish between parallel arcs. Each arc u in A * has a head h(u), a tail t (u) and a deadheading cost c(u).</p><formula xml:id="formula_5">The = + required links of G correspond in G * to a subset R ⊆ A * with = 2 • + arcs. Each arc u ∈ R has a demand r(u), a service cost w(u) and a pointer inv(u). Each arc of A R is coded in R as one arc u with inv(u) = 0. Each edge from E R gives in R two opposite arcs u and v, with inv(u) = v, inv(v) = u, r(u) = r(v)</formula><p>, possibly with distinct costs if the edge is windy.</p><p>G * can include also a set of permitted turns (u, v), with associated turn penalties pen(u, v). Following Benavent and Soler <ref type="bibr" target="#b18">[18]</ref> for the RPP with turn penalties, we define a feasible path from arc u to arc v as a sequence of arcs</p><formula xml:id="formula_6">= (u = u 1 , u 2 , . . . , u k = v), such that, for i = 1 to k -1, h(u i ) = t (u i+1</formula><p>) and the turn (u i , u i+1 ) is allowed. The cost of is defined by Eq. (3.1). Using an adaptation of Dijkstra's shortest path algorithm <ref type="bibr" target="#b19">[19]</ref>, forbidden turns are made transparent by pre-computing an m * × m * arc-to-arc distance matrix D, in which d(u, v) is the cost of shortest feasible paths from u to v. Note that c(u) and c(v) are not counted in d(u, v), to ease operations like inserting one required arc z between two others u and v in a trip: the cost variation simply is d(u, z)</p><formula xml:id="formula_7">+ w(z) + d(z, v) -d(u, v) c( ) = pen(u, u 2 ) + k-1 i=2 (c(u i ) + pen(u i , u i+1 )).</formula><p>(3.1)</p><p>Let P be the set of allowed dumping nodes. Distances between one arc and the depot s or one dumping node are simply tackled by including in A * one fictitious loop = (s, s) for the depot and one similar loop for each dumping node. Note that</p><formula xml:id="formula_8">|A * | = m * = 2 • |E| + |A| + |P | + 1.</formula><p>The best dumping loop dump(u) for a trip whose last required arc is u and the minimal cost term(u) to finish the trip after u can be pre-computed by Eqs. (3.2-3.3), in,in which is the set of dumping loops and the cost of one dump operation.</p><formula xml:id="formula_9">dump(u) = arg min{d(u, v) + + d(v, ) : v ∈ },<label>(3.2</label></formula><p>)</p><formula xml:id="formula_10">term(u) = d(u, dump(u)) + + d(dump(u), ). (3.3)</formula><p>Solutions and trips are coded by lists. In the sequel, for any list , | | denotes the cardinal and (k) or k the element at rank k. A trip is a list of arcs from R representing distinct required links. Implicit shortest deadheading paths are assumed between these arcs. The load of the trip, load( ), is the sum of its demands and must not exceed Q (Eq. (3.4)). The cost of the trip, cost( ), includes the service costs of its required links, the costs of its connecting paths, and the cheapest cost for completing the trip. It must not exceed L (Eq. <ref type="bibr">(3.5)</ref>). An MCARP solution S simply is a list of trips (S 1 , S 2 , . . . , S |S| ). Its cost is the sum of its trip costs.</p><formula xml:id="formula_11">load( ) = i=1,| | r( i ) Q, (3.4) cost( ) = d( , 1 ) + i=1,| |-1 (w( i ) + d( i , i+1 )) + w( | | ) + term( | | ) L. (3.5)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Path-scanning heuristic</head><p>Path-scanning (PS) is a sequential heuristic building one trip at a time, inspired by the nearest-neighbour heuristic for the TSP. The emerging trip is extended recursively by adding at the end the closest required link. However, in arc routing, the distance from the last link serviced u to the nearest link v not yet serviced is often 0, e.g., when u and v are adjacent streets. This is why PS breaks ties by minimizing one of the five following criteria:</p><formula xml:id="formula_12">• F 1 (v) = term(v), the cost for completing the trip after v; • F 2 (v) = -term(v), equivalent to maximizing F 1 (v); • F 3 (v) = r(v)/w(v), a kind of "productivity" for link v; • F 4 (v) = -r(v)/w(v), equivalent to maximizing F 3 (v); • F 5 (v) = if load( ) W/2 then F 5 (v) := F 2 (v) else F 5 (v) := F 1 (v) endif</formula><p>In F 5 , the trip completion cost is maximized as long as the vehicle is at most half-full. Afterward, it is minimized. Fig. <ref type="figure" target="#fig_0">1</ref> gives an example, containing required edges only, with one dumping site coinciding with the depot and rule F 1 . The required edges are in boldface. Thin lines indicate shortest deadheading paths. The current trip ends at required edge u. The minimal distance to the edges not yet serviced is 3, with a set of two candidates Z = {a, b}. Edge a is chosen to extend the trip, since it minimizes the return cost to the depot.</p><p>For one given criterion F ∈ {F </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">Augment-merge</head><p>Fig. <ref type="figure">2</ref> illustrates augment-merge (AM) for the UCARP. AM starts with a trivial solution S with one trip per required link. These trips are sorted in decreasing cost order. For each trip S(i), i = 1, 2, . . . , -1, a first phase Augment scans each smaller trip S(j ), j = i + 1, i + 2, . . . , . If the unique required link v of S(j ) is on a deadheading path of S(i) and load(S(i)) + r(v) Q, then trip S(j ) is absorbed. The cost of S(i) does not change because deadheading and service costs are equal in the UCARP, but the total cost decreases by cost(S(j )).</p><p>A second phase Merge evaluates the concatenation of any two trips {S(i), S(j )}, subject to Q: e.g., concatenating S(i) then S(j ) in Fig. <ref type="figure">2</ref> yields a saving 8 + 6 -10 = 4. Merge concatenates the two trips with the largest positive saving and repeats this process until no such concatenation is possible. There are 8 ways of concatenating two trips: S(i) then S(j ) or S(j ) then S(i), with each trip inverted or not. In fact, only 4 ways need to be tested thanks to symmetries: S(i) then S(j ) gives the same saving as the inverse of S(j ) then the inverse of S(i).</p><p>In the MCARP, cost variations are affected by the multiple dumping sites, the distinction between service and deadheading costs, and the fact that a trip is no longer equivalent to its inverse, due to the asymmetry of D. To illustrate these changes, assume that several dumping sites are available in Fig. <ref type="figure">2</ref>.</p><p>The best initial "daisy" is obtained by selecting the best direction for each required edge u, i.e., the trip for u costs min(d( , u)</p><formula xml:id="formula_13">+ w(u) + term(u), d( , inv(u)) + w(inv(u)) + term(inv(u))). The saving of the Augment operation is now cost(S(j )) + term(u) -d(u, v) -w(v) -term(v). But, since v is on the path from u to the closest dumping site, term(u) = d(u, v) + c(v) + term(v)</formula><p>and the saving can be simplified as cost(S(j</p><formula xml:id="formula_14">)) + c(v) -w(v). It is still non-negative, since w(v) is contained in cost(S(j )).</formula><p>However, in addition to the capacity constraint, the absorption must now satisfy the range constraint cost(S(i))</p><formula xml:id="formula_15">+ w(v) -c(v) L.</formula><p>In Merge, the 8 ways of merging two trips must now be evaluated. Let last( ) and rev( ) denote, respectively, the last required link and the inverse of a trip . Note that all required edges of are flipped in rev( ), e.g., if = (u, v), then rev( ) = (inv(v), inv(u)). The merger in Fig. <ref type="figure">2</ref> yields a saving of term(u) + d( , v)d(u, v), while merging S(i) and rev(S(j )) would save cost(S(j )) + term(u)cost(rev(S(j )))+d( , inv(last(S(j ))))-d(u, inv(last(S(j )))). In practice, hopefully, many mergers can be discarded because the trips containing required arcs are not invertible. We do not detail the algorithm of AM, which is rather tedious because of the eight kinds of mergers. It can be implemented in a non-trivial way in O( 2 . log ), i.e., O(n 2 . log n) for real street networks with m * ≈ 4n. Two improvements are proposed. Firstly, the augment phase is disputable. If all links are required, it works well because the links absorbed by a trip are often contiguous. If not, the internal deadheads created between absorbed links cannot be recovered during the merge phase, leading to degraded results. This suggests a version of AM without augment, called M. Secondly, several pairs of trips may give the same saving in the merge phase. Some testing with M has shown an improvement if ties are broken by merging the pair {S(i), S(j )} with the largest discrepancy in load, i.e., such that |load(S(i)-load(S(j ))| is maximal. This version is called IM (Improved M). M and IM can be preceded or not by an Augment phase, giving four versions AM, M, AIM and IM which are evaluated in Section 5.5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.">Ulusoy's heuristic</head><p>The principle of the original UCARP heuristic is to compute a giant tour covering the required links (by relaxing vehicle capacity) and to split it into capacity feasible trips, using a shortest path procedure Split described below. Since an optimal giant tour does not necessarily provide an optimal solution after splitting, the first step may be solved by any heuristic.</p><p>Fig. <ref type="figure" target="#fig_1">3</ref> depicts Split on a simple undirected example for a giant tour = (a, b, c, d, e) of five required links, with demands in brackets and deadheading costs. Assuming here Q = 9, Split builds an acyclic auxiliary graph H with + 1 nodes indexed from 0 onward. Each sub-list ( (i), . . . , (j )) corresponding to a feasible trip is modeled in H as one arc (i -1, j), weighted by the trip cost. The sub-list is feasible if Q and L are not violated. The load and cost of the corresponding trip are computed using Eqs. (3.4) and <ref type="bibr">(3.5)</ref>. A shortest path from node 0 to node in H (boldface) indicates the best splitting, here 3 trips and a total cost 141. Note that Split returns an optimal MCARP solution, subject to the sequence fixed by the giant trip.</p><p>The shortest path is computed with Bellman's algorithm for directed acyclic graphs <ref type="bibr" target="#b19">[19]</ref>, whose complexity is linear in the number of arcs. For H, this number is at most • ( -1)/2. This O( 2 ) becomes O(n 2 ) for real street networks with m * ≈ 4n. It can also be improved when the smallest demand r min is large enough: since a trip contains at most = Q/r min required links, H contains O( • ) arcs. Our implementation runs in O( ) space, without generating H explicitly: for i = 1, 2, . . . , , all feasible sub-lists ( (i), . . . , (j )) are scanned and evaluated, and their costs are used to directly update node labels in Bellman's algorithm.</p><p>Ulusoy's heuristic can be improved by splitting several giant tours and by returning the best MCARP solution obtained. We suggest to relax vehicle capacity Q and trip cost limit L and to call path-scanning or its variants PSRC and PSRL to get giant tours. Recall that PS builds five giant tours (one per criterion) while PSRC and PSRL generate a specified number of tours (Section 3.3). The resulting heuristics are called UPS, URC and URL, respectively.</p><p>A last kind of improvement can be obtained by playing on the auxiliary graph H. For instance, in Fig. <ref type="figure" target="#fig_1">3</ref>, arc <ref type="bibr" target="#b0">(1,</ref><ref type="bibr" target="#b4">4)</ref>   <ref type="figure">(c,</ref><ref type="figure">d,</ref><ref type="figure">b</ref>) with cost 71. Better results can be achieved by assigning to each arc of H the cost corresponding to the best rotation. This technique can be applied to UPS, URC and URL, giving improved versions respectively called IUPS, IURC and IURL. All these variants are compared in Section 5.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Memetic algorithm</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">The existing memetic algorithm</head><p>A memetic algorithm (MA) is a genetic algorithm hybridised with a local search, see Moscato <ref type="bibr" target="#b20">[20]</ref>. Lacomme et al. <ref type="bibr">[8]</ref> proposed an MA for a mixed CARP with forbidden turns. In <ref type="bibr" target="#b9">[9]</ref>, this algorithm is extended to tackle turn penalties, parallel links, a range constraint and other objective functions like the duration of the longest trip. The average deviation to lower bounds is also improved by performing short restarts based on a partial replacement of the population. Both algorithms were evaluated on classical UCARP instances only.</p><p>The last version <ref type="bibr" target="#b9">[9]</ref>, which is now one of the most efficient solution methods for the CARP, is briefly recalled. A chromosome is an ordered list of the required links, in which each required edge may appear as one of its two directions. Implicit shortest paths are assumed between successive required links. The chromosome does not include trip delimiters and can be viewed as a giant tour for a vehicle with infinite capacity. The fitness (CARP objective) is evaluated with the Split procedure (Section 3.5), which optimally partitions the giant tour into feasible routes.</p><p>The initial population (n c chromosomes) comprises three good solutions computed by the basic versions of path-scanning, augment-merge and Ulusoy's heuristic, completed by random permutations. Clones (identical chromosomes) are forbidden. At each iteration, two parents are selected by binary tournament and reproduce according to a modified version of the classical order crossover (OX). One child is randomly selected, the other is discarded.</p><p>The mutation is replaced by a local search procedure, called with probability p m , which works on the individual routes instead of the giant tour. The moves include the removal of one or two consecutive required links from a route, with reinsertion at another position, the exchange of two required links, and 2-opt moves.</p><p>All moves may involve one or two routes and the two traversal directions of a required edge are tested in the reinsertions. Each iteration scans all these moves in O( <ref type="formula" target="#formula_1">2</ref>) to find the first improving move. The whole local search stops when no more improvement can be found. The trips are then concatenated into a chromosome (giant tour), which is re-evaluated by Split.</p><p>The resulting child replaces one of the n c /2 worst chromosomes, randomly chosen in the population and such that no clone is created. The MA stops after a given number of iterations n i , after a stabilization period of n s iterations without improving the best solution or when reaching a lower bound. When the lower bound is not reached, n r short restarts are performed with an intensified local search (rate p mr &gt; p m ). Each restart begins with a special procedure which replaces n cr chromosomes by new ones (n cr &lt; n c ), while preserving the best solution. It stops when the lower bound is achieved or after a given number of iterations n ir (n ir &lt; n i ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Adaptation for the extended MCARP</head><p>The standard versions of PS, AM and Ulusoy's heuristic that provide the initial population with three good solutions are replaced by better variants described in the previous subsections. The best variants are selected in the computational testing (Section 5). Multiple dumping sites and windy edges are easily added, they affect only the Split procedure and the local search. The MA of <ref type="bibr" target="#b9">[9]</ref> tests the 2-opt moves only for the trips equivalent to their inverses (e.g., no required arc), to keep a low complexity in O( <ref type="formula" target="#formula_1">2</ref>). The main modification in the new MA is to scan the 2-opt moves in all cases, while keeping the O( 2 ) complexity.</p><p>Fig. <ref type="figure" target="#fig_3">4</ref> gives an example for two trips S(i) and S(j ). Required links are in boldface. Arrows indicate required arcs. Thin lines represent shortest paths. The path between two required links u and v is denoted u → v. We call 2-opt move the replacement of two deadheading paths by two others, like the replacement of u → v and x → y by u → inv(x) and inv(v) → y in the figure. Note that two sections are inverted: the end of S(i), from v onward, and the beginning of S(j ), up to x included. This is possible because they have no required arc. In general, the inverted sections have different costs, due to the windy edges and multiple dumping sites accepted in the extended MCARP of Section 3.1.</p><p>For any trip and any required link u in , let rev( ) denote the inverted trip, arcsto( , u) the number of required arcs counted from the beginning of up to u included and arcsfrom( , u) the number of required arcs counted from u (included) up to the end of the trip. Similarly, let loadto( , u) denote the total demand up to u, loadfrom( , u) the cumulated demand from u onward, costto( , u) the cost of up to u, and costfrom( , u) the cost from u onward. The load and cost of u are included in the four last functions.</p><p>Using this notation, the move in Fig. <ref type="figure" target="#fig_3">4</ref> is possible if arcsfrom(S(i), v)=arcsto(S(j ), x)=0 (no required arc in the sections to be inverted) and if loadto(S(i), u) + loadto(S(j ), x) Q and loadfrom(S(i), v) + loadfrom(S(j ), y) Q (vehicle capacity is respected). In that case, the cost variation is d(u, inv(x))</p><formula xml:id="formula_16">+ d(inv(v), y) -d(u, v) -d(x, y) + costto(rev(S(i)), inv(v)) -costfrom(S(i), v) + costfrom(rev(S(j )), inv(x)) -costto(S(j ), x).</formula><p>Compared to the UCARP, these computations are much more involved. Nevertheless, it is still possible to search in O( <ref type="formula" target="#formula_1">2</ref>) an improving 2-opt move for the incumbent solution. Roughly speaking, our implementation scans all pairs of trips (S(i), S(j )), each required link u in S(i) and each required link x in S(j ), giving O( <ref type="formula" target="#formula_1">2</ref>) pairs (u, x) in total. At the beginning of the search, the values of arcsfrom, arcsto, loadto, loadfrom, costto and costfrom are initialized for each trip. The complexity of this pre-processing is O( ) only. During the search, when u (or v) is replaced by its successor in its trip, these values are incrementally updated, in O(1).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Computational evaluation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">General</head><p>The heuristics were programmed in the Pascal-like language Delphi 7. The lower bound was implemented in Visual C++ because it calls the linear programming library CPLEX. All algorithms were benchmarked on a 2 GHz Pentium IV PC with Windows 2000. Sections 5.2 and 5.3 propose two sets of instances for the basic MCARP, without any extension, to allow comparisons with the lower bound. Our goal is also to provide the other researchers with standard MCARP instances to benchmark their own solution methods. The two sets of instances can be downloaded from the Internet <ref type="bibr" target="#b21">[21]</ref> or requested by e-mail.</p><p>Sections 5.4-5.6 compare the different MCARP versions of PS, AM and Ulusoy's heuristic (described in Section 3) on the two sets of instances. The rankings are confirmed on three sets of classical UCARP instances, see <ref type="bibr" target="#b22">[22]</ref> to get the files: 23 gdb files from Golden et al. <ref type="bibr" target="#b4">[4]</ref>, 34 val files used by Belenguer and Benavent <ref type="bibr" target="#b12">[12]</ref>, and 24 egl instances derived by the same authors from data supplied by Eglese. The goal is to determine the best variants to provide the MA with three good initial solutions.</p><p>Section 5.7 describes the parameters used by the memetic algorithm and by the CPA for the two sets of MCARP instances. The solution costs and lower bound values are detailed for each instance, together with the associated running times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">The mval instances</head><p>These instances are derived from 34 CARP instances, called val files, designed by Benavent et al. <ref type="bibr" target="#b23">[23]</ref> and used for instance by Belenguer and Benavent <ref type="bibr" target="#b12">[12]</ref>, Hertz et al. <ref type="bibr" target="#b7">[7]</ref>, Beullens et al. <ref type="bibr" target="#b11">[11]</ref> and Lacomme et al. <ref type="bibr" target="#b9">[9]</ref>. The original networks contain 24-50 nodes and 34-97 edges, all required. Each of them was converted into an mval one ("m" like mixed), with the same total demand, as follows. Each edge was kept with probability 0.4, replaced by two opposite arcs (same cost, but demands halved) with probability 0.4, and replaced by one single arc (same cost and demand) with probability 0.2, while preserving the strong connectivity. The resulting instances contain 24-50 nodes and 43-138 links, all required. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">The lpr instances</head><p>These large, sparse and planar networks are intended to mimic the shape of real street networks met in municipal waste collection. The costs correspond to deadheading and collecting times. The random generation starts with a rectangular grid made of basic squares defined by a given side length side, see (a) in Fig. <ref type="figure" target="#fig_4">5</ref>. Four kinds of modifications are then applied with fixed probabilities pv, ph, pd1, pd2 to each square, see (b): split vertically (V), horizontally (H), along the first diagonal (D1) and along the second one (D2).</p><p>Note that V and H create two new nodes. A square can undergo up to four modifications. As from two, a central node is created to preserve planarity, like node 7 in the figure. This step gives a planar network of 2-way streets, see (c), which can be already encoded as a symmetric directed graph G * like in Section 3.2.</p><p>Since this graph is still too regular, each node is randomly moved in a small circle specified by a radius radius, see (d). Provisional lengths in meters can be computed from node coordinates. To simulate curved streets without drawing them, a second perturbation consists of applying a random growth factor growth to each length (between 0 and 10% for instance).</p><p>Each 2-way street is then converted with a given probability pone into a 1-way street, by deleting at random one of its two arcs while checking strong connectivity. For each remaining arc u, we compute a deadheading cost c(u) from the length and a given vehicle speed speed, we draw the status (required or not) with a probability preq and assign to each required arc a non-zero random demand r(u) drawn in a given interval [qmin, qmax]. Finally, for each 2-way street, we randomly decide with probability pedge if it must be considered as one edge (bilateral waste collection). If yes, the two arcs are linked with the inv pointer (see Section 3.2) and the edge demand is defined as the total demand of its two arcs. The service cost w(u) comprises the deadheading time and a duration resulting from bin manipulations. It is computed as c(u) + r(u)/binload × bintime. The constant binload defines the average amount of waste per bin, the quotient corresponds to the number of bins in the street, and the constant bintime is the average time spent by the crew to unload a bin into the truck. The random generation ends by drawing the vehicle capacity W, the depot-node s and a non-zero dumping time .</p><p>This dumping time (see Section 3.2) is the only extension to the basic MCARP accepted in the lpr files. The other extensions like forbidden turns, windy edges or parallel links are not included and the dumping site coincides with the depot. Let r tot denote the total demand. The dumping time is counted in the lower bound by computing the minimum number of vehicles required k * = r tot /Q and by adding</p><p>• k * to the value obtained by the cutting plane algorithm. Fifteen files were generated with the following parameters: side = 200 m, ph = pv = 0.2.0.7, pd1 = pd2=0.1.0.2, radius=20 m, growth=0.1, pone=0.0.85, speed =20 km/h, preq=0.6.0.9, qmin=10 kg, qmax =400 kg, pedge=0.1.0.30, binload =10 kg, bintime=10 s, W =10 tons and =300 s. The time per bin seems small: in fact, the two workers behind the truck need 20 s each, giving an apparent throughput of one bin per 10 s. The resulting graphs contain 28-401 nodes, 52-1056 links and 50-806 required links. Hence, they include large scale instances, much larger than the mval networks and classical UCARP instances.</p><p>The files are partitioned into three groups of five called a, b and c. In each group, the files are numbered in increasing order of size. The lpr-a files model modern towns with a majority of large 2-way streets and few edges: their graphs are rather directed and symmetric (pone=0.0.15, pedge 0.1). Lpr-b files correspond to old town centres, with narrow 1-way streets: their graphs are rather directed and anti-symmetric (pone 0.85, pedge 0.3). Low-traffic residential areas with a majority of streets with bilateral service (edges) are imitated by the lpr-c problems: their graphs are rather undirected (pone 0.25, pedge 0.85). The features of each instance are listed in the Appendix (Table <ref type="table">6</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.">Evaluation of path-scanning and its variants</head><p>Table <ref type="table" target="#tab_1">1</ref> compares the average deviations of PS and its variants PSRC and PSRL to good lower bounds. Recall (see Section 3.3) that PS builds 5 solutions (one per criterion), while PSRC and PSRL can generate any specified number of solutions. In each iteration, PSRC randomly selects the criterion while PSRL randomly takes a required link among the closest neighbours. PSRC and PSRL are tested with 20 and 50 solutions. The bounds are taken from <ref type="bibr" target="#b12">[12]</ref> for all UCARP instances. They are computed by the cutting plane algorithm and listed in Appendices 1 and 2 for the mval and lpr files. The Break-even columns indicate the average number of solutions that must be examined by these heuristics to outperform PS. The results show that randomised versions can easily do better than PS, provided they inspect enough solutions, and that the gain increases with the number of solutions. Of course, the price to pay is a longer running time, roughly proportional to the number of solutions computed. For the same number of solutions, PSRC outperforms PSRL, except on egl files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5.">Evaluation of augment-merge and its variants</head><p>Table <ref type="table" target="#tab_2">2</ref> indicates the average deviations of AM, M, AIM and IM (in %) to the lower bounds mentioned in Section 5.4 and reveals two surprising conclusions: (a) the Augment phase is in general useless (except for the val and mval files, where AM outperforms M) and (b) the improved version of merge without augment (IM) strongly improves M and gives by far the best results.</p><p>The augment phase is disastrous on the egl files, in which some edges are not required, contrary to the other UCARP benchmarks. As discussed in Section 3.4, this favours the creation of internal deadheads in the trips during the Augment phase. Moreover, the average demand per required edge in these files is large compared to vehicle capacity (around 1/7). Therefore, the total number of Augment or Merge operations is limited, and running the Augment phase lets very few feasible mergers to the Merge phase.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6.">Evaluation of Ulusoy's heuristic and its variants</head><p>Table <ref type="table">3</ref> compares UPS (5 giant tours) to URC and URL with 20 giant tours. Recall (see Section 2.5) that these heuristics apply the splitting procedure to giant tours obtained by calling PS, PSRC and PSRL with an infinite vehicle capacity. In Table <ref type="table" target="#tab_1">1</ref>, PSRC gives better solutions than PSRL, but here, surprisingly, split produces better results on the giant tours supplied by PSRL (heuristic URL).</p><p>The best version URL is improved further in the fifth column (IURL), by allowing the rotations of sub-sequences when building the auxiliary graph, as explained at the end of Section 3.5. Comparisons with Tables <ref type="table" target="#tab_1">1</ref> and<ref type="table" target="#tab_2">2</ref> indicate that IURL is the best heuristic on the gdb files. It is outperformed only by IM on the other benchmarks, and also by M on the egl and lpr instances.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.7.">The memetic algorithm and the lower bound</head><p>The heuristics PSRC <ref type="bibr" target="#b20">(20)</ref>, IM and IURL <ref type="bibr" target="#b20">(20)</ref> are called to include three good solutions in the MA initial population. The standard setting for the MA parameters of Section 4.1 is as follows: population size n c = 30, local search rate p m = 0.1, stop after n i = 20, 000 crossovers, n s = 6000 crossovers without improving the best solution, or when the lower bound is reached. If the bound is not achieved, the MA performs up to n r = 20 restarts with an augmented local search rate p mr = 0.2. Each restart begins by replacing n cr = 7 chromosomes in the population and ends after n ir = 2000 crossovers or when reaching the bound (in that case, the sequence of restarts is interrupted). A time limit of 1 h is imposed to the whole algorithm.</p><p>The lower bound is computed with the CPA described in Section 2.2. Nevertheless, the identification of DP inequalities is inhibited for the largest lpr instances (more than 500 required links) because it is very time-consuming and it has been observed that it improves the bound on a small number of instances only.</p><p>The detailed results are given in Appendices 1 (mval files) and 2 (lpr files). The first columns respectively indicate the file name, then the numbers of nodes, links, edges and arcs, then the numbers of required links, edges and arcs. The numbers of links, edges and arcs are suppressed in the mval table because all links are required. The next columns provide the cost and the running time for the lower bound LB, for the three heuristics PSRC <ref type="bibr" target="#b20">(20)</ref>, IM and IURL <ref type="bibr" target="#b20">(20)</ref>, and for the MA with the standard setting of parameters. The last column give the best result found for the MA during the testing, using various settings.</p><p>The simple heuristics are very fast in all cases. The Merge heuristic IM is by far the best one on average (9.93% on the mval and 1.62% on the lpr), but also the slowest one on the largest instances (nearly 9 s for lpr-c-05), simply because it is implemented in O( 3 ) instead of the better complexity O( 2 . log ) mentioned in Section 3.4. The average deviation to the lower bound is smaller for the lpr instances. This can be explained by the relatively small deadheading times, compared to the uncompressible collecting times.</p><p>The comparison between the MA and the lower bound LB proves their effectiveness in practice: using the standard setting of parameters, the average deviation is 0.72% for the mval files, with 19 proven optima (when the bound is reached), and 0.42% for the lpr files, with 6 proven optima. Using several settings (MA best column), it was possible to decrease the deviations down to 0.51% (with 23 optima) and 0.33% (with 6 optima), respectively.</p><p>All proven optima are found very quickly. When the bound is not reached, the execution times are reasonable on the mval files (5 min maximum) but still excessive on the biggest lpr (numbered 4 and 5), for which the MA reaches its maximum time limit. However, these networks are enormous compared to the largest graphs used in the arc routing literature (up to 1200 links instead of 190), and our implementations could be accelerated, using for instance neighbourhood reduction techniques like the lists of neighbours described in <ref type="bibr" target="#b11">[11]</ref>. Similar comments apply to the computation of LB with the cutting plane algorithm: execution times are negligible on the mval files but too large on the biggest lpr. In fact, the MA still provides excellent solution values for small time limits, as shown in Table <ref type="table" target="#tab_3">4</ref> for the standard setting of parameters. The best solution in the initial population is always one of the three heuristic solutions, never a random one. After 1 min, the average deviation to the lower bounds drops below 1% for the two sets of instances, and the MA has already discovered the six proven optima for the lpr files, and 16 out of 20 for the mval.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusion</head><p>This paper proposes a relaxed linear model for the Mixed CARP and a cutting plane algorithm to solve it. Several simple heuristics, derived from classical UCARP heuristics, and one memetic algorithm are also described. They are designed to tackle complications like windy edges or forbidden turns. Since it seems very difficult to include these complications in linear programming models, the lower bounds and upper bounds are compared on two sets of basic MCARP instances, i.e., without the complications.</p><p>The simple heuristics are very fast, even on the largest instances, but the average deviation to the lower bound may reach 23%. The study also validates the improvements suggested for path-scanning, augment-merge and Ulusoy's heuristic, even on standard UCARP instances. In particular, it reveals the bad influence of the Augment phase in augment-merge and suggests the use of the variants PSRC, M and IURL as the best heuristics to initialize the MA.</p><p>The MA reaches the CPA lower bound on two thirds of mval files and almost one half of lpr. The average deviation to the bound is at most 0.5% but the lpr instances with more than 500 links require 1 h of computation time. Nevertheless, 1 min is enough to obtain an average deviation below 1%. Moreover, the results obtained on the large instances (lpr files) are very encouraging to envisage practical applications. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Path-scanning iteration (with the first criterion).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Principle of split: (a) initial giant tour S = (a, b, c, d, e), (b) auxiliary graph and shortest path (labels in each node), (c) resulting trips.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>in H corresponds to trip (b, c, d) with a cost 80. Assume a distance of 5 from link d to link b. Starting the trip by c and scanning the same sublist of links circularly leads to a better trip</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Example of 2-opt move on two trips.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Random generation of lpr instances: (a) initial grid with basic squares, (b) random modifications of squares, (c) planar result with node numbers, (d) random distortions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>for F = F 1 .F 5 ) and returning the best one. By randomizing the computation of v, it is possible to construct more than five solutions and to improve solution costs on average. We suggest two variants PSRC (random criterion) and PSRL (random link) that are compared with PS in Section 5.4. PSRC randomly draws F in {F 1 , F 2 , F 3 , F 4 , F 5 } before computing v. PSRL ignores the criteria, it randomly draws v among the closest links (set Z), instead of choosing the link minimizing F on Z.</figDesc><table><row><cell>Trip S(i ) : link u</cell><cell cols="3">S(i ) absorbs S( j ) Concatenation of S(i ) and S( j )</cell></row><row><cell>u</cell><cell>u</cell><cell></cell><cell>v</cell></row><row><cell>v</cell><cell>s(i )</cell><cell>10</cell><cell>s( j)</cell></row><row><cell>Trip S( j):</cell><cell></cell><cell></cell><cell></cell></row><row><cell>link v</cell><cell></cell><cell>8 6</cell><cell></cell></row><row><cell cols="4">Fig. 2. Augment (left) and Merge (right) operations in augment-merge.</cell></row></table><note><p>1 , F 2 , F 3 , F 4 , F 5 }, a solution can be computed in O( 2 ), i.e., in O(n 2 ) for real street networks with m * ≈ 4n. The PS heuristic consists of constructing five solutions (</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1</head><label>1</label><figDesc>Average deviations of path-scanning and its variants to lower bounds in %</figDesc><table><row><cell>Files</cell><cell>PS</cell><cell>PSRC(20)</cell><cell>PSRC(50)</cell><cell>Break-even</cell><cell>PSRL(20)</cell><cell>PSRL(50)</cell><cell>Break-even</cell></row><row><cell>gdb</cell><cell>10.98</cell><cell>7.49</cell><cell>5.45</cell><cell>5 solns</cell><cell>8.77</cell><cell>7.23</cell><cell>7 solns</cell></row><row><cell>val</cell><cell>16.19</cell><cell>13.96</cell><cell>11.78</cell><cell>11 solns</cell><cell>14.65</cell><cell>12.60</cell><cell>10 solns</cell></row><row><cell>egl</cell><cell>26.02</cell><cell>22.85</cell><cell>21.66</cell><cell>4 solns</cell><cell>22.26</cell><cell>20.98</cell><cell>4 solns</cell></row><row><cell>mval</cell><cell>25.59</cell><cell>23.04</cell><cell>21.09</cell><cell>8 solns</cell><cell>25.29</cell><cell>22.17</cell><cell>16 solns</cell></row><row><cell>lpr</cell><cell>3.57</cell><cell>3.57</cell><cell>3.29</cell><cell>21 solns</cell><cell>3.77</cell><cell>3.48</cell><cell>42 solns</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 2</head><label>2</label><figDesc>Average deviations of augment-merge and its variants to lower bounds in %</figDesc><table><row><cell>Files</cell><cell>AM</cell><cell>M</cell><cell>AIM</cell><cell>IM</cell></row><row><cell>gdb</cell><cell>7.37</cell><cell>6.54</cell><cell>7.11</cell><cell>5.61</cell></row><row><cell>val</cell><cell>10.73</cell><cell>12.54</cell><cell>9.95</cell><cell>6.01</cell></row><row><cell>egl</cell><cell>23.11</cell><cell>6.77</cell><cell>23.03</cell><cell>5.89</cell></row><row><cell>mval</cell><cell>16.04</cell><cell>16.96</cell><cell>14.39</cell><cell>9.93</cell></row><row><cell>lpr</cell><cell>2.40</cell><cell>2.20</cell><cell>2.47</cell><cell>1.62</cell></row><row><cell>Table 3</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="3">Average deviations of splitting heuristics to lower bounds in %</cell><cell></cell><cell></cell></row><row><cell>Files</cell><cell>UPS</cell><cell>URC(20)</cell><cell>URL(20)</cell><cell>IURL(20)</cell></row><row><cell>gdb</cell><cell>8.36</cell><cell>5.28</cell><cell>4.56</cell><cell>3.99</cell></row><row><cell>val</cell><cell>14.53</cell><cell>11.56</cell><cell>11.39</cell><cell>9.60</cell></row><row><cell>egl</cell><cell>17.43</cell><cell>14.86</cell><cell>14.65</cell><cell>13.35</cell></row><row><cell>mval</cell><cell>21.27</cell><cell>17.73</cell><cell>17.34</cell><cell>14.30</cell></row><row><cell>lpr</cell><cell>3.14</cell><cell>2.79</cell><cell>2.77</cell><cell>2.46</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4</head><label>4</label><figDesc>Average deviations of the MA to lower bounds for different time limits in %</figDesc><table><row><cell>Files</cell><cell>Best initial soln</cell><cell></cell><cell>1 min</cell><cell></cell><cell>5 min</cell><cell></cell></row><row><cell></cell><cell>Deviation</cell><cell>Optima</cell><cell>Deviation</cell><cell>Optima</cell><cell>Deviation</cell><cell>Optima</cell></row><row><cell>mval</cell><cell>9.21</cell><cell>0</cell><cell>0.81</cell><cell>16</cell><cell>0.72</cell><cell>19 out of 34</cell></row><row><cell>lpr</cell><cell>1.43</cell><cell>0</cell><cell>0.85</cell><cell>6</cell><cell>0.66</cell><cell>6 out of 15</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 5</head><label>5</label><figDesc>Cost columns: average and worst deviations to LB in %. Time columns: seconds on a 2 GHz PC, Windows 2000. Asterisks denote proven optima. Notes: Cost columns: average and worst deviations to LB in %. Time columns: in seconds on a 2 GHz PC with Windows 2000. Asterisks denote proven optima.</figDesc><table><row><cell></cell><cell>MA MA</cell><cell>time best</cell><cell>0.10 230  *</cell><cell>0.27 261  *</cell><cell>34.08 315</cell><cell>0.20 324  *</cell><cell>0.31 395  *</cell><cell>31.57 526</cell><cell>0.45 115  *</cell><cell>53.36 142</cell><cell>6.65 166  *</cell><cell>17.82 580  *</cell><cell>2.23 650  *</cell><cell>147.30 630  *</cell><cell>134.25 770</cell><cell>19.40 597  *</cell><cell>141.14 613  *</cell><cell>81.07 697  *</cell><cell>113.30 739</cell><cell>11.65 326  *</cell><cell>15.95 317  *</cell><cell>58.18 371</cell><cell>0.75 364  *</cell><cell>7.47 412  *</cell><cell>113.40 426</cell><cell>76.78 581  *</cell><cell>6.02 531  *</cell><cell>77.84 638</cell><cell>24.00 458  *</cell><cell>17.95 453  *</cell><cell>246.28 429</cell><cell>253.22 520</cell><cell>128.60 634  *</cell><cell>313.70 661  *</cell></row><row><cell></cell><cell>MA</cell><cell>cost</cell><cell>230  *</cell><cell>261  *</cell><cell>315</cell><cell>324  *</cell><cell>395  *</cell><cell>526</cell><cell>115  *</cell><cell>142</cell><cell>166  *</cell><cell>580  *</cell><cell>650  *</cell><cell>631</cell><cell>776</cell><cell>597  *</cell><cell>615</cell><cell>697  *</cell><cell>757</cell><cell>326  *</cell><cell>317  *</cell><cell>375</cell><cell>364  *</cell><cell>412  *</cell><cell>428</cell><cell>581  *</cell><cell>531  *</cell><cell>638</cell><cell>458  *</cell><cell>453  *</cell><cell>434</cell><cell>520</cell><cell>634  *</cell><cell>662</cell></row><row><cell></cell><cell>IURL(20)</cell><cell>time</cell><cell>0.004</cell><cell>0.005</cell><cell>0.004</cell><cell>0.006</cell><cell>0.004</cell><cell>0.004</cell><cell>0.004</cell><cell>0.005</cell><cell>0.002</cell><cell>0.012</cell><cell>0.011</cell><cell>0.013</cell><cell>0.012</cell><cell>0.012</cell><cell>0.011</cell><cell>0.013</cell><cell>0.008</cell><cell>0.006</cell><cell>0.004</cell><cell>0.006</cell><cell>0.011</cell><cell>0.009</cell><cell>0.006</cell><cell>0.011</cell><cell>0.012</cell><cell>0.008</cell><cell>0.018</cell><cell>0.016</cell><cell>0.013</cell><cell>0.011</cell><cell>0.025</cell><cell>0.017</cell></row><row><cell></cell><cell>IM IURL(20)</cell><cell>time cost</cell><cell>0.004 231</cell><cell>0.003 292</cell><cell>0.004 357</cell><cell>0.002 374</cell><cell>0.003 434</cell><cell>0.003 601</cell><cell>0.003 128</cell><cell>0.003 150</cell><cell>0.002 192</cell><cell>0.018 684</cell><cell>0.020 737</cell><cell>0.020 740</cell><cell>0.022 905</cell><cell>0.017 683</cell><cell>0.017 677</cell><cell>0.017 811</cell><cell>0.016 855</cell><cell>0.007 367</cell><cell>0.007 354</cell><cell>0.007 444</cell><cell>0.015 390</cell><cell>0.015 491</cell><cell>0.015 504</cell><cell>0.017 651</cell><cell>0.016 611</cell><cell>0.013 762</cell><cell>0.043 514</cell><cell>0.037 502</cell><cell>0.040 498</cell><cell>0.044 622</cell><cell>0.047 705</cell><cell>0.043 714</cell></row><row><cell></cell><cell>IM</cell><cell>cost</cell><cell>243</cell><cell>276</cell><cell>352</cell><cell>360</cell><cell>407</cell><cell>560</cell><cell>119</cell><cell>163</cell><cell>174</cell><cell>653</cell><cell>693</cell><cell>702</cell><cell>810</cell><cell>686</cell><cell>677</cell><cell>743</cell><cell>821</cell><cell>370</cell><cell>346</cell><cell>402</cell><cell>381</cell><cell>470</cell><cell>451</cell><cell>639</cell><cell>568</cell><cell>718</cell><cell>500</cell><cell>534</cell><cell>479</cell><cell>575</cell><cell>710</cell><cell>717</cell></row><row><cell></cell><cell>PSRC(20)</cell><cell>time</cell><cell>0.016</cell><cell>0.013</cell><cell>0.015</cell><cell>0.012</cell><cell>0.014</cell><cell>0.013</cell><cell>0.013</cell><cell>0.012</cell><cell>0.011</cell><cell>0.031</cell><cell>0.033</cell><cell>0.034</cell><cell>0.033</cell><cell>0.031</cell><cell>0.030</cell><cell>0.031</cell><cell>0.030</cell><cell>0.020</cell><cell>0.019</cell><cell>0.020</cell><cell>0.027</cell><cell>0.029</cell><cell>0.028</cell><cell>0.031</cell><cell>0.030</cell><cell>0.026</cell><cell>0.049</cell><cell>0.044</cell><cell>0.046</cell><cell>0.048</cell><cell>0.052</cell><cell>0.050</cell></row><row><cell></cell><cell>LB PSRC(20)</cell><cell>time cost</cell><cell>0.11 243</cell><cell>0.11 314</cell><cell>0.11 427</cell><cell>0.44 409</cell><cell>0.05 471</cell><cell>0.11 644</cell><cell>0.33 133</cell><cell>0.16 162</cell><cell>0.17 191</cell><cell>0.87 699</cell><cell>0.27 775</cell><cell>4.12 828</cell><cell>0.82 1015</cell><cell>0.22 733</cell><cell>0.39 718</cell><cell>0.38 809</cell><cell>0.49 883</cell><cell>0.11 392</cell><cell>0.22 406</cell><cell>0.44 526</cell><cell>0.99 439</cell><cell>0.44 507</cell><cell>1.53 578</cell><cell>0.16 666</cell><cell>0.22 619</cell><cell>0.39 842</cell><cell>0.38 529</cell><cell>0.71 552</cell><cell>24.17 529</cell><cell>9.99 695</cell><cell>3.30 735</cell><cell>1.93 753</cell></row><row><cell></cell><cell>LB</cell><cell>cost</cell><cell>230</cell><cell>261</cell><cell>309</cell><cell>324</cell><cell>395</cell><cell>521</cell><cell>115</cell><cell>141</cell><cell>166</cell><cell>580</cell><cell>650</cell><cell>630</cell><cell>746</cell><cell>597</cell><cell>613</cell><cell>697</cell><cell>719</cell><cell>326</cell><cell>317</cell><cell>365</cell><cell>364</cell><cell>412</cell><cell>424</cell><cell>581</cell><cell>531</cell><cell>617</cell><cell>458</cell><cell>453</cell><cell>428</cell><cell>514</cell><cell>634</cell><cell>661</cell></row><row><cell>instances</cell><cell></cell><cell></cell><cell>35</cell><cell>38</cell><cell>36</cell><cell>28</cell><cell>40</cell><cell>35</cell><cell>33</cell><cell>29</cell><cell>25</cell><cell>69</cell><cell>83</cell><cell>82</cell><cell>83</cell><cell>74</cell><cell>56</cell><cell>81</cell><cell>63</cell><cell>47</cell><cell>44</cell><cell>45</cell><cell>50</cell><cell>66</cell><cell>62</cell><cell>76</cell><cell>64</cell><cell>55</cell><cell>100</cell><cell>76</cell><cell>83</cell><cell>93</cell><cell>106</cell><cell>101</cell></row><row><cell>Computational results for mval</cell><cell>File n m =</cell><cell></cell><cell>mval1a 24 55 20</cell><cell>mval1b 24 51 13</cell><cell>mval1c 24 53 17</cell><cell>mval2a 24 44 16</cell><cell>mval2b 24 52 12</cell><cell>mval2c 24 49 14</cell><cell>mval3a 24 48 15</cell><cell>mval3b 24 45 16</cell><cell>mval3c 24 43 18</cell><cell>mval4a 41 95 26</cell><cell>mval4b 41 102 19</cell><cell>mval4c 41 103 21</cell><cell>mval4d 41 104 21</cell><cell>mval5a 34 96 22</cell><cell>mval5b 34 91 35</cell><cell>mval5c 34 98 17</cell><cell>mval5d 34 92 29</cell><cell>mval6a 31 69 22</cell><cell>mval6b 31 66 22</cell><cell>mval6c 31 68 23</cell><cell>mval7a 40 86 36</cell><cell>mval7b 40 91 25</cell><cell>mval7c 40 90 28</cell><cell>mval8a 30 96 20</cell><cell>mval8b 30 91 27</cell><cell>mval8c 30 83 28</cell><cell>mval9a 50 132 32</cell><cell>mval9b 50 120 44</cell><cell>mval9c 50 125 42</cell><cell>mval9d 50 131 38</cell><cell>mval10a 50 138 32</cell><cell>mval10b 50 134 33</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The contribution by J.M. Belenguer has been partially supported by the Ministerio de Ciencia y Tecnologia of Spain through project HF2001-0071. The contribution by E. Benavent has been partially supported by the Ministerio de Ciencia y Tecnologia of Spain through projects HF2001-0071 and TIC2000-C06-01. P. Lacomme and C. Prins were partially funded by the France-Spain Integrated Action 04283QB from the Ministère des Affaires Etrangères of France.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix</head><p>Tables <ref type="table">5</ref> and<ref type="table">6</ref>.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Capacitated arc routing problems</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">L</forename><surname>Golden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">T</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Networks</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="305" to="315" />
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Arc routing methods and applications</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Assad</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">L</forename><surname>Golden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Handbooks in OR and MS</title>
		<editor>
			<persName><forename type="first">M</forename><forename type="middle">O</forename><surname>Ball</surname></persName>
		</editor>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName><surname>Amsterdam</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995">1995</date>
			<publisher>Elsevier</publisher>
			<biblScope unit="page" from="375" to="483" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Tour construction algorithm for the capacitated arc routing problem</title>
		<author>
			<persName><forename type="first">R</forename><surname>Hirabayashi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Saruwatari</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Nishida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Asia-Pacific Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="155" to="175" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Computational experiments with algorithms for a class of routing problems</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">L</forename><surname>Golden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Dearmon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">K</forename><surname>Baker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers and Operations Research</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="47" to="59" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The fleet size and mix problem for capacitated arc routing</title>
		<author>
			<persName><forename type="first">G</forename><surname>Ulusoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="329" to="337" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A tabu search based heuristic for arc routing with a capacity constraint and time deadline</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">W</forename><surname>Eglese</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lyo</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Metaheuristics: theory and applications</title>
		<editor>
			<persName><forename type="first">I</forename><forename type="middle">H</forename><surname>Osman</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">P</forename><surname>Kelly</surname></persName>
		</editor>
		<imprint>
			<publisher>Kluwer</publisher>
			<date type="published" when="1996">1996</date>
			<biblScope unit="page" from="633" to="650" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A tabu search heuristic for the Capacitated Arc Routing Problem</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hertz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Laporte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mittaz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operations Research</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="129" to="135" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A genetic algorithm for the capacitated arc routing problem and its extensions</title>
		<author>
			<persName><forename type="first">P</forename><surname>Lacomme</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Prins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Ramdane-Chérif</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Applications of evolutionary computing</title>
		<title level="s">Lecture notes in computer science</title>
		<editor>
			<persName><forename type="first">Ejw</forename><surname>Boers</surname></persName>
		</editor>
		<meeting><address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">2037</biblScope>
			<biblScope unit="page" from="473" to="483" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Competitive memetic algorithms for arc routing problems</title>
		<author>
			<persName><forename type="first">P</forename><surname>Lacomme</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Prins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Ramdane-Chérif</surname></persName>
		</author>
		<idno>LOSI-2001-01</idno>
	</analytic>
	<monogr>
		<title level="j">Annals of Operations Research</title>
		<imprint>
			<biblScope unit="volume">131</biblScope>
			<biblScope unit="page" from="159" to="185" />
			<date type="published" when="2001">2001. 2004</date>
			<pubPlace>France</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Technology of Troyes</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Research Report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A tabu scatter search metaheuristic for the arc routing problem</title>
		<author>
			<persName><forename type="first">P</forename><surname>Greistorfer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers and Industrial Engineering</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="page" from="249" to="266" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A guided local search heuristic for the capacitated arc routing problem</title>
		<author>
			<persName><forename type="first">P</forename><surname>Beullens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Muyldermans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Cattrysse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Van Oudheusden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">European Journal of Operational Research</title>
		<imprint>
			<biblScope unit="volume">147</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="629" to="643" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A cutting plane algorithm for the capacitated arc routing problem</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Belenguer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Benavent</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers and Operations Research</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="705" to="728" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">An optimal algorithm for the mixed Chinese postman problem</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Nobert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Picard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Networks</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="95" to="108" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The mixed general routing polyhedron</title>
		<author>
			<persName><forename type="first">A</forename><surname>Corberán</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Romero</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Sanchis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Programming</title>
		<imprint>
			<biblScope unit="volume">96</biblScope>
			<biblScope unit="page" from="103" to="137" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Flows in networks</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">R</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">R</forename><surname>Fulkerson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1962">1962</date>
			<publisher>Princeton University Press</publisher>
			<pubPlace>Princeton, NJ</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Linear programming based methods for solving arc routing problems</title>
		<author>
			<persName><forename type="first">E</forename><surname>Benavent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Corberán</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Sanchis</surname></persName>
		</author>
		<editor>Dror M</editor>
		<imprint>
			<date type="published" when="2000">2000</date>
			<publisher>Kluwer Academic Publishers</publisher>
			<biblScope unit="page" from="231" to="275" />
			<pubPlace>Boston</pubPlace>
		</imprint>
	</monogr>
	<note>Arc routing, theory, solutions and applications</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Odd minimum cut-sets and b-matchings</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W</forename><surname>Padberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Rao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematics of Operations Research</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="67" to="80" />
			<date type="published" when="1982">1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">The directed Rural Postman Problem with turn penalties</title>
		<author>
			<persName><forename type="first">E</forename><surname>Benavent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Soler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transportation Science</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="408" to="418" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H</forename><surname>Cormen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">E</forename><surname>Leiserson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Stein</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>The MIT Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
	<note>Introduction to algorithms. 2nd ed.</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Memetic algorithms: a short introduction</title>
		<author>
			<persName><forename type="first">P</forename><surname>Moscato</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">New ideas in optimization</title>
		<editor>
			<persName><forename type="first">D</forename><surname>Corne</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Dorigo</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">F</forename><surname>Glover</surname></persName>
		</editor>
		<imprint>
			<publisher>McGraw-Hill</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="219" to="234" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Belenguer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Benavent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Lacomme</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Prins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Ramdane-Chérif</surname></persName>
		</author>
		<ptr target="http://www.uv.es/∼belengue/mcarp/index.html" />
		<title level="m">Directory of MCARP instances</title>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Directory of UCARP instances</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Belenguer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Benavent</surname></persName>
		</author>
		<ptr target="http://www.uv.es/∼belengue/carp.html" />
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The Capacitated Arc Routing Problem: lower bounds</title>
		<author>
			<persName><forename type="first">E</forename><surname>Benavent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Campos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Corberán</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Mota</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Networks</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="669" to="690" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
