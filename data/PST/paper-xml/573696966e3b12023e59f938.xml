<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Neverlang: A framework for feature-oriented language development</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2015-02-20">20 February 2015</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Edoardo</forename><surname>Vacchi</surname></persName>
							<email>vacchi@di.unimi.it</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Università degli Studi di Milano</orgName>
								<address>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Walter</forename><surname>Cazzola</surname></persName>
							<email>cazzola@di.unimi.it</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Università degli Studi di Milano</orgName>
								<address>
									<country key="IT">Italy</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Neverlang: A framework for feature-oriented language development</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2015-02-20">20 February 2015</date>
						</imprint>
					</monogr>
					<idno type="MD5">740AB34ECB72FA01218789472B837B42</idno>
					<idno type="DOI">10.1016/j.cl.2015.02.001</idno>
					<note type="submission">Received 6 October 2014 Received in revised form 7 February 2015 Accepted 11 February 2015</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T10:30+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>Domain specific languages Language development Modularity</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Reuse in programming language development is an open research problem. Many authors have proposed frameworks for modular language development. These frameworks focus on maximizing code reuse, providing primitives for componentizing language implementations. There is also an open debate on combining feature-orientation with modular language development. Feature-oriented programming is a vision of computer programming in which features can be implemented separately, and then combined to build a variety of software products. However, even though feature-orientation and modular programming are strongly connected, modular language development frameworks are not usually meant primarily for feature-oriented language definition. In this paper we present a model of language development that puts feature implementation at the center, and describe its implementation in the Neverlang framework. The model has been evaluated through several languages implementations: in this paper, a state machine language is used as a means of comparison with other frameworks, and a JavaScript interpreter implementation is used to further illustrate the benefits that our model provides.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The problem of extending programming languages through new constructs has never lost interest in the industry and in the research community. Modern general purpose programming languages are multiparadigm, progressively converging towards a hybrid between object-orientation and functional programming. Languages from both the communities crosspollinate each other with features. Languages that were born with pure object-orientation in mind nowadays tend to include functional constructs. This tendency to contamination between different programming styles can be read as the symptom of a need for more flexibility.</p><p>Traditionally, the design and implementation of a programming language is more of a top-down activity, where most of the time is spent on the design of a consistent set of features; extensibility of the compiler, although desirable, is not a strict requirement. But when today people speak about language development, they often mean developing a new programming language with specific requirements in mind. We could even dare to say that problem-tailored programming language development is more of a bottom-up activity, because, in some sense, the language specification rises from the problem that the developers are trying to solve. Intuitively, a top-down design phase is still important, because it is important that the language consists of a coherent set of features; but in a domain-specific language (DSL <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref>), this phase can be often reduced to a minimum: even more so, if it were possible to implement new languages using off-the-shelf components.</p><p>A technique to implement languages is embedding; this technique is part of the idiom of many modern programming languages such as Scala, Ruby, and Groovy which, in some sense, are following the lead of veterans such as LISP, the "programmable programming language" <ref type="bibr" target="#b3">[4]</ref>, and Smalltalk. Embedded DSLs <ref type="bibr" target="#b4">[5]</ref> are really just a byproduct of choosing a particular API design style that Fowler and Evans dubbed a fluent interface <ref type="bibr" target="#b5">[6]</ref>. Fluent APIs are often used to embed query languages within the body of a general purpose programming language (cf. Spring Data's Query DSL <ref type="bibr" target="#b6">[7]</ref>) or to describe graphical user interfaces (cf. JavaFX's APIs <ref type="bibr" target="#b7">[8]</ref>). <ref type="foot" target="#foot_0">1</ref> This technique has clear benefits: first of all it is easy to implement; second, it guarantees a high-degree of code reuse, because an embedded language is just a library. The main limit is that the expressivity of the language is inevitably dictated by the host programming language. External DSLs, on the other hand, are instead usually developed using dedicated toolsets, and work as stand-alone programming languages. The traditional route to external DSL development is to implement the front-end through parser generators such as good old yacc, ANTLR <ref type="bibr" target="#b10">[11]</ref> or, more recently, parser combinators <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13]</ref>, and then implementing the semantics of the language. For this purpose, the variety of techniques ranges from attribute grammars <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b14">15]</ref> to simple syntax-directed translation <ref type="bibr" target="#b15">[16]</ref> to term-rewriting <ref type="bibr" target="#b16">[17]</ref>. The object of our research of the last few years has been geared towards realizing techniques and tools to implement componentized language implementations with the final "grand vision" of a world where general-purpose and domainspecific programming languages can be realized by composing together linguistic features the same way we combine together the pieces of a puzzle. And, just like each piece of a puzzle lives and exists on its own, each linguistic feature should be something that we can describe and implement in isolation and separately.</p><p>In fact, empiric evidence shows that many general-purpose languages share similar syntax and similar semantics for the same concepts: for instance, C-like programming languages such as C þ þ, Java, and C# etc. all share a similar syntax for for loops, if branches, variable declarations, etc. The ultimate goal is to maximize reuse of syntactic and semantic definitions across different language implementations to the point where end users may be even able to generate a language implementation by picking features from a curated list: programming languages à la carte.</p><p>Contribution: Most of our experience in feature-oriented definition of programming languages have been carried out using our own framework, called Neverlang. Our contribution with this work is 1. an abstract model for feature-oriented language implementation, 2. a description of our implementation of this model in Neverlang, <ref type="bibr" target="#b2">3</ref>. showing that the model can be supported by most of the existing tools for modular language implementation, 4. showing that the native implementation of this model strengthens the benefits of a modular language implementation. Organization: Section 2 gives a brief overview of the background information. Section 3 presents the abstract model. Section 4 introduces the Neverlang implementation of this model. Section 5 presents a full example (a state machine language). Section 6 is devoted to evaluate the model in a variety of contexts: the state machine language is re-implemented in other frameworks to show how the model can be reproduced; the benefits of using this model are then showed by describing the experience of extending Neverlang's JavaScript implementation neverlang.js; a DESK language implementation is briefly given to exemplify the expressive power of the Neverlang framework; finally, this section describes the experience of modeling variability in programming language family, by automatically mining data from a collection of preimplemented features. Finally, Section 7 briefly discusses related work and Section 8 draws the conclusions and describes the future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Background</head><p>A context-free grammar is a formal grammar where production rules are written as A-ω where A is a nonterminal, and ω is a word of terminals and nonterminal.s. The generated language L(G) of a grammar G is the set of all the words that can be derived from G. L(G) is empty if LðGÞ ¼ ∅ and, conversely, non-empty when it contains at least one word. In the following we will assume grammars that generate non-empty languages, and, although it is allowed in Neverlang, for simplicity, we will make the assumption that our grammars do not contain the empty word ε.</p><p>A syntax-directed definition <ref type="bibr" target="#b15">[16]</ref> (SDD) is a technique to implement the semantics of context-free languages, in terms of their grammar. Attribute grammars <ref type="bibr" target="#b13">[14]</ref> are a formalism introduced by Knuth to represent SDDs by associating information with a language construct by attaching attributes to the grammar symbols representing the construct. Attribute grammars specify the values of the attributes by associating semantic rules with the grammar productions. Syntax-directed translation schemes (SDTs) are sometimes described as complementary notation to attribute grammars. A syntax-directed translation scheme is a context-free grammar with program fragments embedded within production bodies, called semantic actions, with the purpose of translating an input program written in a given language into a target language; that is, SDTs are usually employed to implement compilers. Any SDT can be implemented by first building the parse tree that represents the input program, and then performing the actions in a left-to-right depth-first order, that is, during a preorder traversal <ref type="bibr" target="#b15">[16]</ref>.</p><p>Typically, SDTs are implemented during parsing, without building a parse tree. In this case, two important classes of grammars are <ref type="bibr" target="#b15">[16]</ref> L-Attributed Grammars, a class of attribute grammars that can be incorporated in top-down parsing. S-Attributed Grammars, a class of attribute grammars that can be incorporated in both top-down parsing and bottom-up parsing. Any S-attributed grammar is also an L-attributed grammar.</p><p>However, L-attributed and S-attributed grammars are rather limited classes, and many interesting although simple languages cannot be defined using this translation scheme. The main benefit of implementing L-attributed and S-attributed grammars is that the evaluation order of the semantic rules is known a priori, because they impose constraints on the way semantic rules are defined. In fact, in attribute grammars we distinguish between the set of synthesized attributes, expressed only in terms of the attributes of the children of a nonterminal symbol, and inherited attributes, expressed in terms of the attributes of their ancestors or siblings. The S in S-Attributed grammars stands for synthesized: this class allows only synthesized attributes to be defined. It is the class that traditional parser generators such as yacc support. In L-attributed grammars, the inherited attributes can be evaluated in one single left-to-right pass.</p><p>By relaxing the constraints on attribute evaluation, the attribute grammar formalism becomes more general but also it leaves space for computations that may not terminate. In order to give guarantees on the evaluation of the attributes, attribute grammar implementations compute different kinds of dependency graphs <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b14">15]</ref> between attributes and impose different sets of constraints; at the very least, each attribute should be well-defined: that is, for each node, an attribute should either be a constant expression or it should be defined in terms of other well-defined attributes on its parent or its siblings. Further constraints may be imposed to give more guarantees. For instance, one notable class is that of Absolutely Noncircular Grammars, which includes both L-Attributed and S-Attributed grammars and it has been shown to be powerful enough to represent many nontrivial programming languages <ref type="bibr" target="#b14">[15]</ref>. It is therefore advisable that an attribute grammar implementation supports at least absolutely noncircular grammars.</p><p>A strict implementation of an attribute grammar is usually pure: that is, attributes should be defined in terms of other attributes, and the evaluation of such attributes should not produce side-effects. This gives a greater deal of flexibility to attribute grammar implementations that may employ a number of techniques to optimize attribute evaluation such as memoization (cf. <ref type="bibr" target="#b17">[18]</ref>). However, many implementations allow side-effects with varying degrees of control. When arbitrary, possibly side-effectful computations are allowed to take place within semantic definitions, then we speak more broadly of semantic actions. In such cases, automatic caching and memoization of attributes may not be supported, but implementations may overcome this limitation by giving users more control on which attributes are evaluated at a time (as we will see in Section 4 this is the case for Neverlang).</p><p>Syntax-directed translation through attribute definition is not the only technique to implement languages, though; for instance, languages can also be described in terms of program transformations; the Stratego <ref type="bibr" target="#b18">[19]</ref> language implements this technique, rewriting terms that initially represent the parse tree up until the final representation of a compiled program is reached.</p><p>In order to stress the generality of the approach, Section 3 describes a conceptual model of feature-oriented language definition without making explicit references to a particular model of language processing. In this model, evaluation phases of the language are modularized in terms of language constructs, in order to represent a language implementation in terms of its constructs. In Section 4 we will then delve into the details of our own implementation of this model; in our case the processing model can be modeled after SDDs, as a modular rendition of the visitor pattern.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Feature-oriented language composition</head><p>Frameworks for modular language implementation (e.g., <ref type="bibr" target="#b18">[19]</ref><ref type="bibr" target="#b19">[20]</ref><ref type="bibr" target="#b20">[21]</ref><ref type="bibr" target="#b21">[22]</ref><ref type="bibr" target="#b22">[23]</ref>) make componentized development front and center, by providing facilities to simplify the implementation of a language in modules that can be shared and reused. But the modularization of a language is not merely a matter of convenience: modular software implementation has been known to be good from the dawn of computer science (e.g., <ref type="bibr" target="#b23">[24]</ref>) for a number of reasons; among the others, component isolation, which also enables work to be carried out in parallel by different teams of programmers; modular reasoning, which make it possible to concentrate on the implementation of the component of a system to be developed independently from the others. To a certain extent this is possible for language implementation as well, and it is very apparent in the development of DSLs, where it is easier to map features of the language onto concepts of the problem domain. Our final objective aims at representing a language as a collection of independent features that can be easily used in conjunction, but that should be possible to implement without knowledge of one another (cf. composable extensions in Van Wyk et al. <ref type="bibr" target="#b22">[23]</ref>). As seen in Section 2, the earliest literature already established that languages can be described in terms of their syntax. It has also been shown (e.g., <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b25">26]</ref>) that such definitions can be logically partitioned into distinct processing or evaluation phases. During each phase the input program is subsequently analyzed and transformed up to the final phase, when it is finally executed, in the case of an interpreter, or code is generated, in the case of a compiler. For instance, at the time of writing, Scala 2.11's compiler scalac performs 25 compilation phases on each input program. This section gives an overview of the concepts behind modular language development, in order to stress the generality of the approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Conceptual model</head><p>A syntax definition of a language may be broken down with respect to language constructs. For instance, a looping construct may be defined and reasoned upon independently from a conditional branch, even though they still depend on a notion of truth value. All of these parts of a language together form a complete language implementation; thus, the modularization of both syntax and semantics is pivotal in the componentization of a language implementation. There are at least two dimensions over which a language implementation can be broken down: the dimension of the processing phases, which, more broadly, includes the syntax analysis of the input program, and the dimension of the syntactic constructs (Fig. <ref type="figure" target="#fig_0">1</ref>), which logically partitions a language implementation with respect to the constructs that it contains. We call feature of a language an abstract concept or construct, with its semantics; in some sense, then, the features of a language are the points at the intersections between the two dimensions. The implementation of a feature is what we call a language component <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28]</ref>.</p><p>Language components: Modular language implementation approaches enforce separation between processing phases and concepts. The dimension of processing phases represents the separation between linguistic concerns <ref type="bibr" target="#b28">[29]</ref> that may crosscut or tangle, such as type-checking, code-generation, and so on. This kind of modularization suggests that componentization may be achieved by grouping together, as a self-contained bundle:</p><p>1. the syntax definition of a construct, such as the keywords that introduce it, and 2. the sections of the evaluation phases that relate to the syntax definition, implementing only the semantics that is relevant to that construct, in terms of properties of the feature. For instance, the concept of truth value may be seen as a property of the looping construct feature.</p><p>By creating a bundle of these smaller bricks, the syntax definition and the sequence of the relevant parts of the processing phases, we obtain a language component (Fig. <ref type="figure" target="#fig_0">1</ref>): a higher-level unit of composition that represents the implementation of a concrete feature of our language. These components can be shared across language implementations, and substituted to define variants of the same language: for instance, a different implementation of the semantics may be given for the same syntactic construct. For example, consider a simple imperative language with a Java-like while loop construct<ref type="foot" target="#foot_2">2</ref> :</p><p>Fig. <ref type="figure" target="#fig_0">1</ref>. A language implementation can be broken down over two dimensions: the dimension of syntactic constructs and the dimension of evaluation phases. Dependencies are represented as arrows from required to provided features. Dependencies may go beyond their phase and depend on other phases.</p><p>The placeholders in angle brackets represent parts of the syntax that are not defined locally, because they represent concepts that are logically distinct, albeit related.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 1.</head><p>A placeholder is a part of a syntax definition that is not defined in place.</p><p>A language is usually processed through several phases, such as type checking to verify the correctness of the construct and code generation to output compiled code. Initially, we assumed that it is possible to modularize phases by breaking them down with respect to the syntax definitions that pertain to a given language construct; thus, we can componentize these phases with respect to the given looping constructs:</p><p>The example contains some bold-face words; these represent properties of the language that are being evaluated during the evaluation phase. The type-checking phase evaluates a property named type Àof. This property is bound to a placeholder named 〈loop À condition〉. The code-gen phase compiles the input language to object code; thus it expects to evaluate a property named compiledÀ codeÀ for. The semantics of a phase can be given in terms of such properties. Definition 2. A property is a facet of a feature in an evaluation phase. Definition 3. An evaluation phase is a definition of a linguistic concern in terms of the properties of a feature.</p><p>A bundle of such phases together with the syntax definition of the while loop yields language component. A descriptor for one such component may be: Such a bundle can be shared across different language implementations with similar requirements in terms of features and processing phases, maximizing reuse of the feature, and minimizing code duplication. For instance, a different bundle, may reuse the same syntax, with variated semantics, to implement an alternate version of the same language. Different bundles may still share the implementation of some phases. New phases can be deployed by just extending or repackaging the bundle. For instance, the language component for the interpreter of the while loop may reuse the syntax and the type-checking phases, but it would trade the code-gen phase for an evaluation phase, where the program would be actually executed. The same semantics </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Linguistic feature</head><p>A concept or an abstract construct of the language Syntax definition Definition of the syntax for a language construct. A syntax definition may be defined in terms of other syntax definitions using placeholders Syntactic placeholder A part of a syntax definition that is not defined in place. It constitutes a reference to a class of syntax definitions Evaluation phase Definition of the semantics of the language with respect to a particular concern (e.g., type-checking and code-generation) in terms of properties of a feature Semantic property A facet of an evaluation phase that is bound to the implementation of a feature Language component A self-contained component that implements a feature of the language by putting in relation a syntax definition with the relevant parts of the evaluation phases. In this sense, we can say that a language component provides the implementation of a feature. The language component may also require other language features to work Dependency A feature that is required by a component, and that it is not defined within that same component. A dependency in a language is unsatisfied if there is a component that requires a feature that no components provide. A dependency may be syntactic if it is expressed within a syntax definition by placeholders, or semantic if it is expressed in an evaluation phase by properties Globally scoped component A component that implements a concern that should be available to any language component</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Language implementation</head><p>A collection of language components where every dependency is satisfied may also apply even if the introducing keywords were different. For instance, in a Pascal-like language they would be 5 while 〈loopÀcondition〉 do begin 〈loopÀbody〉 end5 .</p><p>Definition 4. A language component is a self-contained bundle that implements a feature of a language by putting in relation a syntax definition with the related parts of a series of evaluation phases. A language component may be shared across different language implementations. Syntax definitions and evaluation phases may be shared across different language components.</p><p>A language implementation can be therefore described by a set of language components, and the evaluation of a program written in this language corresponds to the ordered execution of the evaluation phases. This realizes a model of language implementation à la carte.</p><p>Dependencies between components: In the previous example, the while loop syntax definition includes placeholders, and processing phases includes properties. Placeholders represent in some sense features that the component requires, but it does not provide in itself. Similarly, properties represent facets of the feature that the language processor should be able to evaluate. The while component provides syntax and semantics for the looping construct, but it implicitly relies on the definition of some parts of the syntax to be available (presumably in other components). The semantic phases implicitly expected that some properties were defined with respect to a given feature. For instance, the type-checking phase was trying to query a type-of property that was expected to be defined on the feature represented by the 〈loop À condition〉 placeholder. This implicitly introduces a notion of required and provided feature in a language implementation. Definition 5. A component requires a feature if it contains a placeholder in its syntax definition, or it relies on the definition of a property that relates to a different feature A component provides the feature it implements.</p><p>In the previous example the while-loop component provided an implementation for a looping construct (the while loop), and required the concepts of loop condition and loop body. The type-checking phase required that the loop condition could be evaluated to a boolean type, and the code-gen phase required that the condition and the body were compilable down to machine code, so that the result of their compilation could be combined into the compilation of the loop construct itself. In a certain sense, the set of provided and required properties and placeholders define the interface (in a OOP-sense) of the language component. A complete language implementation should satisfy each requirement with the implementation of a feature. Definition 6. A language implementation is a collection of language components where all the dependencies are satisfied. Definition 7. The dependencies of a language component are satisfied in a language implementation, if, for all the required features of the component, there exists a component in the language implementation that provides that feature.</p><p>More than one component may satisfy the same requirement: if this does not introduce a contradiction, that is, two components provide a feature that is logically contradicting the other, then the two components represent an alternative choice in the language implementation. Therefore, imposing that a complete language implementation requires all of its requirements to be satisfied, does not prevent further language extensions. For the case of the while loop, a language implementation must include the language component that satisfies all the requirements that the while loop has on the loop condition and loop body (e.g., the property type-of and compiled-code-for that the component expects to be able to query). Of course, the loop body may be implemented by several kinds of statements (e.g., function invocation, variable assignment, and variable increment): each statement is not logically in conflict with the other, although they may appear in the same position in a program written using our language. On the other hand, different, alternative implementation for the loop condition may or may not be acceptable, depending on the language designer's choice; for instance, the C programming language expects the loop condition to be a numeric value, treating it as true if non-zero, and false otherwise. Another programming language (e.g., Java) may have similar syntax but enforce the existence of a boolean type.</p><p>Dependencies may occur within the same evaluation phase, or across different evaluation phases. In the first case, a language component depends on another because the implementation of an evaluation phase is distributed across different language components. In the second case, an evaluation phase depends on a value that is computed within a different evaluation phase: this is reflected in a dependency between components, because evaluation phases are distributed across them. Depending on the way phases are evaluated, dependencies across phases may also impose an ordering relation on the evaluation phases (cf. <ref type="bibr" target="#b24">[25]</ref> on attribute grammars), because a property in a phase may be only referred to within the same phase or a subsequent phase.</p><p>Globally scoped components: In a language implementation components may also need to invoke support functions (e.g., I/O, math or graphic libraries) and ancillary data-structures (e.g., symbol tables and function tables). These implement features of the language that do not have a direct representation in the syntax of the language; thus a modular language framework should include a form of component that encapsulates and provides support code to other language components. Similarly to the other language components, globally scoped components should be easy to swap with alternate implementations, provided that the substitute component implements the same functions and structures (in OOP-terms, it implements the same interface). For instance, a thread-based model of tasks execution could be swapped with a distributed execution model without changing the syntax of the language (cf. the Linda-Python language in <ref type="bibr" target="#b29">[30]</ref>), by swapping the component that implements the task execution model.</p><p>Composition model: Each component provides and (optionally) requires the implementation of a feature. Composition between components is therefore consequence of satisfying the constraints that are implied by such dependencies. Let us now see which forms of language composition apply to the model that we have described so far. In order to better discuss languages and language implementation frameworks, Erdweg et al. <ref type="bibr" target="#b8">[9]</ref> have isolated and described five forms of language composition. Language extension is the property of a framework to define reusable components that may extend a base language, independently from the choice of this base language.</p><p>Language restriction is the property of a framework to restrict a language implementation to a subset of its features. Language unification is the property of a framework to merge together the implementation of two languages by the (optional) help of glue code only.</p><p>Extension composition describes the ability of a framework to compose together extensions (which may only implement subsets of a language). Self-extension is the property of a programming language that make it possible to extend itself reflectively.</p><p>A language extension may be a new syntactic feature for a base programming language. For instance, Java 8 introduced lambda expressions; these were mapped onto the more general case of functional interfaces (single-member interfaces) <ref type="bibr" target="#b30">[31,</ref><ref type="bibr">Section 9.8]</ref>. Language extensions are often defined in terms of desugaring towards the base language. Language restriction may be useful in education: Erdwed et al. suggest to forbidding monads and type classes in a beginner's course on Haskell. In language unification, as opposed to restriction and extension, where a dominant language exists, the composed languages are composed in an "unbiased manner" <ref type="bibr" target="#b8">[9]</ref>, and the two languages can interact: one example of this kind of composition may be HTML and JavaScript. Finally, self-extensible programming languages are those where a language may be embedded within a host language, through support from the host language itself. Lisp may be regarded as one such language.</p><p>Our model supports the following forms of composition:</p><p>Language extension: In our model a language implementation corresponds to a collection of language components such that all their requirements are satisfied. An extension to one such language is a collection of language components that provides additional implementation that other components require (e.g., in the while example, additional implementations of the 〈loop À body〉 place-holder).</p><p>Language restriction: Erdweg et al. <ref type="bibr" target="#b8">[9]</ref> present language restriction as a useful functionality (e.g., in the education area) that can be easily simulated using language extension alone, by deploying an extension to the validation phase of the language that rejects any program using "restricted" constructs. Even though the model that we present may very well implement language restriction in the same way, by redefining phases of the existing components, our model supports "real" language restriction by unplugging components from the language: in fact, being a language a set of components, in our model a restriction is a subset of the original collection where the restricted feature is not present. Language unification: In general, because a language is a set of components, language unification would be the union of two sets of such components, plus, if needed, glue code, that is, code that "bridges" components that otherwise would not go well together. For instance, in our example, the while loop required a 〈loop À condition〉. Another language (e.g., an expression language) may provide a component for a 〈boolean À expression〉. The name of the placeholders does not match: glue code would be that code that adapts a 〈boolean À expression〉 to satisfy the requirements of a 〈loop À condition〉 in the while loop. These requirements may be purely syntactic, for instance the placeholders may have different names; but these requirements may be also semantic, for instance the semantic properties of 〈boolean À expression〉 may be different from those required by the while loop component. The language framework should provide ways to adapt language components to suit these situations. The glue code might be implemented as additional components, or as directives that developers would configure.</p><p>Extension composition: In our model, the unit of reuse is the language component, which may implement language extensions or parts of a base language, depending on the point of view. It follows that extensions may compose. Erdweg et al. themselves do notice that if a framework supports language unification, then it also supports extension composition, which is the case. Self-extension: This property does not apply here but only because this is a property of the programming language and not of the framework with which the language is being implemented. As noticed by Mernik in <ref type="bibr" target="#b21">[22]</ref>, the model itself does not prevent from implementing a self-extensible programming language Table <ref type="table" target="#tab_0">1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Neverlang</head><p>In a typical interpreter or compiler implementation, each construct of the language is mapped onto an abstract representation often called an abstract syntax tree (AST), over which different language processors or evaluators dispatch the execution of procedures that implement the semantics of that construct. During the visit of this tree, a language evaluator or language processor maps each of its nodes onto the semantics of the constructs that the node represents, depending on its type. In the case of an interpreter the input program will then be executed, while, in the case of a compiler, the input program will be translated into a target language. As we saw in the previous sections, the semantics of a construct may be implemented as several separate phases; multiple phases enable to better modularize the implementation of the semantics of each construct. Nevertheless, for better modularity, even the definition of each construct would better be isolated from the definition of other constructs.</p><p>However, the evolution of a language implementation involves both the dimension of constructs (that may be represented by distinct data types) and the dimension of evaluation phases (data type processor): neither functional nor object-oriented programming languages can fully address the problem. In functional programming it is easy to vary the set of phase evaluators that pattern match on the different cases of a data type (e.g., all the types of loops, or all the types of statement). On the other hand, it is harder to variate the number of cases in a data type definition. The situation is known as the expression problem, after the term coined by Philip Wadler <ref type="bibr" target="#b31">[32]</ref>.</p><p>It has been shown that a modular implementation of the visitor and interpreter patterns <ref type="bibr" target="#b32">[33]</ref><ref type="bibr" target="#b33">[34]</ref><ref type="bibr" target="#b34">[35]</ref> can be achieved using constructs such as traits <ref type="bibr" target="#b35">[36]</ref> to decouple the data type representation from the logic that implements the semantics of a construct, while still retaining all the good properties of object oriented programming, that is, the ability to extend the data type with new sub-types. Our rendition of the model in Section 3 can be seen as an implementation of a modular visitor pattern, which is the underlying execution model of the Neverlang framework. In Section 3, high-level descriptions for syntax definitions and evaluation phases were discussed. In Neverlang, the syntax of the language is given as a formal grammar, and the semantics of the language is given as a syntax-directed definition (Section 2), in terms of attributes attached to the nonterminals of this grammar. In Neverlang, an evaluation phase is called a role; a role implements the semantics of the language with respect to the syntax definition of the language constructs. Both roles and syntax definitions are declared inside modules. Language components (Section 3) are defined by a construct called slice, which relates syntax definitions to roles imported from modules; globally scoped components are called endemic slices; endemic slices may provide libraries or globally accessible data-structures such as symbol tables. A construct called language declares the collection of slices that composes a language and the order in which roles should be executed. The syntactic definitions generate a syntax tree, which is then visited. Each visit constitutes an evaluation phase. Contrary to a traditional visitor pattern implementation, though, Neverlang's visitor is extensible both on the dimension of processing phases and on the dimension of new language constructs. In fact, slices compose semantics from different modules, making it possible to define new roles (processing phases) for the same linguistic construct; but slices can be added, removed or replaced to a language implementation at any time: therefore, the language can evolve in any direction.</p><p>In the following paragraphs we will present modules, roles and slices using the Neverlang language syntax: a DSL that simplifies the implementation of these constructs in a convenient, uniform way. The Neverlang language is a DSL that compiles down Neverlang source files to Java and JVM-compatible source-code. The nlgc compiler is self-hosted and will be described in Section 4.1.1. The generated source code will be described in Section 4.3, where the framework and its APIs are described in detail. These APIs have been designed to be easy to use even using a general-purpose JVM-supported programming language. The Neverlang language is just one of the possible front-ends to this API. For completeness, Listing 1 is the full grammar of the Neverlang language (EBNF operators were used for conciseness). A module is a basic container unit that groups different roles together, defined in terms of a reference syntax declaration. A module may hold any number of roles, but each module must at least include a reference syntax declaration.</p><p>Reference syntax: The reference syntax section is the section of a module to define the syntax of a construct (Section 3). The reference syntax section either defines or refers to a set of production rules of a BNF grammar. When it defines production rules, it is a bracket-delimited block that contains a list of production rules; when it refers to another syntax, it is substituted by the clause from o modulename4 , where modulename is the name of the module that contains the list of productions that is being referred.</p><p>In a production, unquoted identifiers represent nonterminals and quoted identifiers represent terminals. The empty string "" denotes the empty word ε. Special syntax for patterns is also provided to represent classes of terminals such as identifiers or numbers. In this case, instead of quotes the traditional Perl-like syntax for regular expression literals is used. For instance the literal /[a-z] þ/ matches one or more alphabetic characters. Neverlang provides full support to Java's Pattern library.</p><p>The set of production rules in the reference syntax section represents the concrete syntax of a construct the semantic roles will be coded against. It is a reference syntax, though, because the roles that are defined in terms of this syntax are not required to be always bundled with this same syntax. The framework makes it possible to code against one reference syntax and then ship with a different concrete syntax, provided that a mapping between the two is possible. In Section 3 the while loop could have been defined with a Java-like syntax, using braced blocks (Listing 2), or using a Pascal-like syntax (Listing 3). Because one syntax definition is basically isomorphic to the other, modulo the terminal symbols, they can be easily swapped: coding against Java-like syntax really makes little difference compared to coding against Pascal-like syntax. In this sense, Neverlang's reference syntax can be seen as a sort of "abstract syntax with defaults". For instance, the production in Listing 2 can be thought of as representing a tree node WhileLoop(LoopCondition, LoopBody). We will see more on the mapping between syntax and semantics later, when we will describe slices.</p><p>The reference syntax section contains a list of production rules between braces (see Listing 2). Each production may be optionally introduced by a label that may be used in role definitions. Roles may also be defined in different modules, but new processing phases can be still described in terms of the same piece of syntax. In this case, the programmer should indicate that the roles in the module refer to a syntax definition that has been defined in a different model, using the reference syntax from clause. For instance, Listing 4 declares that the reference syntax definition is the one in module javalang.WhileLoop (Listing 2). Listing 4. An example code generation role, generating Java bytecode in Jasmin syntax. <ref type="foot" target="#foot_3">3</ref>Concerns about readability could be raised: using the reference syntax from clause, the syntactic definition may not be present locally to a module where semantics is given. Nonetheless, the same could be said for any OOP language, where subclasses do not show the members that they are inheriting, unless these are overridden. The solution to this problem may be better tooling; we are currently working on IDE technologies that may assist users by providing visual clues about the syntax definition that has been referenced.</p><p>Additionally, this section can be decorated with optional metadata about the intended meaning of the syntax, using tags. The provides and requires sections may be the first statements in a reference syntax. Each line of the section is constituted by a provided nonterminal (on the left-hand side of a production) or a required nonterminal (on the right-hand side of a production), followed by a list of tags. Listing 5 shows an example for the while loop. A use case for tags will be discussed in Section 6.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 5. provides and requires sections.</head><p>Roles: A role section defines the part of a processing phase that pertains to the reference syntax. A processing phase is implemented as a tree traversal of the syntax tree that represents the input program. Each role in a module is identified by a name. The name of the role is user-defined, and names do not have a special meaning. Obviously it is advisable to choose meaningful names and follow general conventions; type checking phases may be usually called type-checking; code generating phases might be called compilation, or code-gen; evaluation phases that actually execute the program shall be called evaluation, execution and so on. As seen for SDT (Section 2), the semantics is specified by semantic actions, a snippet of code that should be executed when a node of the syntax tree is being evaluated (visited). A role is therefore a collection of semantic actions pertaining to a given reference syntax. Thus, a visit of the tree is described by the collection of all the semantic actions of a role in all the slices that constitute a language.</p><p>A semantic action is represented by a code block enclosed within the delimiters .{ and }. and introduced by a number. The mapping between nodes of the tree and semantic actions is given through these numbers: each nonterminal can be referred from a role using its ordinal position inside the reference syntax section, starting from 0. Thus, action number 0 will be executed when the 0-th nonterminal of the reference syntax will be visited, action number 1 when the visit will move to the 1-st nonterminal, etc. For instance, in Listing 2 WhileLoop is 0, LoopCondition is 1, and LoopBody is 2; thus the action from role type-checking is being attached to the root node WhileStatement. <ref type="foot" target="#foot_5">4</ref> Because of the reference/concrete syntax duality, terminals are excluded for this count. First, because, being a leaf, it does not make sense to descend into a terminal node, second, this scheme makes it easier to remap semantic actions onto different syntactic definitions, because it is independent from the naming of the nonterminals.</p><p>Inside actions, it is possible to access any other nonterminal within the same rule<ref type="foot" target="#foot_6">5</ref> using the same numbering scheme; in this case nodes are referred through their identifying number preceded by a dollar sign; it is possible to read and attach attributes to nonterminals using a familiar dot notation (Listings 2 and 4). The type of the attribute is defined implicitly at each use-site. For instance, $0:foo ¼ "hello" defines foo as a String attribute with value "hello". Similarly, String foo ¼$0.foo; is pulling a String value from the foo attribute. Invalid attribute uses (e.g., mismatched types or undefined values) will cause the system to raise an exception.</p><p>The choice of implicit declaration is a convenience that is retained for compatibility with Neverlang's previous version. This is of course a double-edged sword, because users may mistype attribute names and obtain an exception at runtime. Work is being done to support explicit declaration of attribute names and their types.</p><p>Attributes that are attached to nonterminals are similar to instance fields of a class. Each nonterminal may hold as many attributes as desired, and each attribute may be of any JVM type. Attributes are implicitly defined after the first assignment and, once they have been defined, they can be referred from any semantic action associated to any of the nonterminals in the same production.</p><p>Actions are written using a JVM language. The default is Java (with some minor syntactic extensions), but programmers may opt-in to use a different JVM language using language annotations. Each section of a module that contains code may be annotated to switch to an alternative language; this can be done on a per-module, per-role, or even per-action basis (Listing 6). We will see more on how actions are compiled in Section 4.3.</p><p>Listing 6. Using multiple languages in a module.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Labels:</head><p>The reasons for the choice of a numbering scheme instead of a naming convention to indicate syntax definitions are mostly a matter of history. Neverlang's original implementation <ref type="bibr" target="#b37">[37,</ref><ref type="bibr" target="#b38">38]</ref> followed the same convention, which was inspired from venerable tools such as YACC. Since those days, Neverlang has undergone a major rewrite, but the basic principles and syntax remained faithful to the original implementation. The current incarnation of the Neverlang framework provides a way to label production rules in the reference syntax section.</p><p>Listing 2 shows that the rule could be defined for label While:, which would then be resolved by the Neverlang compiler nlgc (Section 4.1.1) as 0. Labels can also be used to refer to every nonterminal of a labeled production using the offset notation While[n], counting from 0. However, since syntax sections are supposed to pertain to one single construct, they usually should not contain more than 2-3 productions at a time; this is the reason why sometimes it might be still more convenient to use the legacy numbering scheme, rather than labels. Of course, labels support should not be seen as an invite to write longer syntax sections, but rather, as a convenience to enhance code readability. Our guidelines for syntax definitions are to keep them short and small, so that they can be shared more easily across language implementations. In fact, as a syntactic definition gets large, it may become more specific to a particular language implementation, hampering its reusability.</p><p>In any case, the planned work on IDE technologies should help in ruling out all the typical shortcomings of the numbering scheme (e.g., rule insertion and refactoring). Moreover, as we will see in Section 4.3.1, the Neverlang API is powerful enough that users may even define custom semantic action loading strategies for modules.</p><p>Driving the visit: Users may explicitly descend into child nodes of the tree using the eval $N statement -where N is the identifier of a child of the root node of the production that is currently being evaluated, or the root node itself. For instance, consider Listing 2, when the type-checking phase will be evaluated for the while loop, at some point, the visitor will descend into the node WhileLoop(LoopCondition, LoopBody): this will trigger the execution of action 0. The first statement of this action is eval $1, which triggers the visit of node 1 (LoopCondition). This will execute any action attached to the node of type LoopCondition to be executed. Once the visit terminates, control is returned to action 0, which then proceeds to test if the attribute type does not equal to Boolean.class, and so on. Similarly, action 0 in codegen role (Listing 4) first visits nodes LoopCondition ($1) and LoopBody ($2), and then it pulls the attributes $1:code and $2:code, which are then used to generate the attribute $0:code of the WhileLoop node, which represents the compiled bytecode (in Jasmin format) of the while loop. Because the pattern of descending into the child nodes and then evaluating the root node might be frequent -in compilers it is often the norm-Neverlang supports some syntactic sugar to shorten the code in such situations (Listing 7). It is possible to mark a rule with the @ modifier, which means "first descend, then execute", that is, it makes the visit effectively "post-order" <ref type="bibr" target="#b15">[16]</ref>. It is also possible to refer a nonterminal using the eval-and-get shorthand $1: attribute which is compiled to an eval $1 statement and an attribute access $1:attribute. It is also possible to mark an entire role as post-order in the language descriptor (see Listing 12 and Section 4.1.3). You may also have noticed (Listing 4) that Neverlang's Java code blocks provide a special extended syntax for multi-line strings, deliberately reminiscent of Xtend's template expressions <ref type="bibr" target="#b39">[39]</ref>.</p><p>Visits can also be terminated abruptly by raising errors or using a special Neverlang signal, useful to return from a procedure or break out of a loop: the command that terminates a visit abruptly is $terminate. To raise an error, a Java RuntimeException or an Error can be thrown as usual (e.g., see Listing 2). For more information on the implementation of the $terminate command see Section 4.3.2.</p><p>Finally, Neverlang has experimental support for suspending and resuming the execution phase. In this case the statement $suspend interrupts the execution of the current visit, proceeds to the following (possibly, up to the last), and then automatically, when all the remaining visits are terminated, ortypicallyprogrammatically, using the $resume; statement, it resumes execution from the suspended phase. The idea with the $suspend; and $resume; commands is to be able to untangle evaluation phases: for instance an interpreter may require type-related information that is only known at runtime. The type-checking phase could be partially executed statically, before evaluation and then suspended up to when this information is available at runtime (cf. Linda-Python in <ref type="bibr" target="#b29">[30]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2.">Mapping semantics onto syntax: slices</head><p>Listing 8. Slice implementing a bytecode-generating while loop feature for the Java language.</p><p>A slice contains the definition of a single, individually implemented component of the language. A component is defined in terms of the modules that contains the syntax definition that represents the language construct and the roles that implement its semantics. Each slice must import a reference syntax from a module, and may import as many roles as desired. Once used in a slice, the reference syntax is called a concrete syntax. For instance in Listing 8, the javalang. WhileLoopSlice is being defined. The reference syntax from the javalang.WhileLoop module (Listing 2) is used as the concrete syntax for the language component; the semantics that will be used are the type-checking role in javalang.WhileLoopTCheck (Listing 2) and the code-gen role in the javalang.WhileLoopCodeGen module (Listing 4). Nonetheless, the same roles could still apply to the reference syntax in module pascallang.WhileLoop (Listing 3), because the nonterminals for the C-like syntax are trivially mapped onto the nonterminals for the Pascal-like syntax.</p><p>Another interesting use case has been described in <ref type="bibr" target="#b19">[20]</ref>; the Recipe DSL is a language inspired by Microsoft's onfXg, <ref type="foot" target="#foot_7">6</ref> an application to control Android smartphones so that they can react to particular events with user-defined actions. These actions are developed through a JavaScript API, but pre-defined recipes can be shared, selected and deployed to the user's phone through the application website. Recipe brings the idea further: it is a DSL whose syntax resemble natural language, to define rules of the form "when X happens, then do Y". A different syntax definition may be used to translate the English keywords into other languages. For instance, the paper shows Italian. Using the remapping feature it would be even possible to support languages where the structure of the sentence is not subject-verb-object.</p><p>Listing 9. Remapping part of the while implementation onto the do-while syntax.</p><p>Listing 10. Usage of the remapping feature to reuse code within the same module. On the left, the full, explicit version; on the right, the repetition has been replaced by remapping the same semantic action.</p><p>Remapping: When the mapping between two slices is non-trivial, there is still the chance to reuse (part of) the code without changes, by using the mapping feature. In this case the module statement is qualified with the optional mapping clause and a mapping between the nonterminals of the reference syntax and the nonterminals of the concrete syntax is given; the mapping is between the ordinal numbers that correspond to the nonterminals, following the same scheme that has been described for modules (Listing 9). For instance, although the compiled code for a do-while loop slightly differs from the generated code for a while loop because the LoopBody shall be evaluated at least once, type-checking can be reused verbatim, by remapping nonterminal 1 of WhileLoop onto nonterminal 2 of DoWhileLoop, and nonterminal 2 of WhileLoop onto nonterminal 1 of DoWhileLoop. The mapping is local to the role, and does not 'stick' between roles, unless explicitly declared: this means that in role code-gen the order of the nodes for DoWhileLoop will be the one that has been originally declared in the concrete syntax. A new code-gen role must be still written, but the type-checking phase will be reused.</p><p>Although named -and effectively implemented, see Section 4.3-in a different way, this operation has in practice the same effect of rewriting the tree node DoWhileLoop(LoopBody, LoopCondition) to a node WhileLoop(Loop-Condition, LoopBody). Nonetheless, the rewrite operation is available in Neverlang as well, in the form of an experimental semantic action DSL; we will return on this later in Section 6.2.</p><p>The remapping feature is also useful to repeat an action over several productions, even within the same slice; for instance, consider the chain of expressions for C-like languages UnaryExpr PostfixExpr; CastExpr UnaryExpr; … (Listing 10): where many actions involve passing over values throughout the chain. Instead of rewriting the same semantic action assigning attributes along the chain over and over (on the left of Listing 10), you can use the mapping construct to do it for you (on the right).</p><p>In general, consider some module M with reference syntax: «A B; B C; C D;» And suppose you want to pass on the attribute value from D to C; then, in some role r of M you may write: roleðrÞ f0 Á :f$0 Á :value ¼ $1:value; g:g And, then, assuming A maps to 0, B maps to 1, the second B maps to 2, etc. the slice would read: «module M with role r mappingf2⇒0 Á ; 3⇒1; 4⇒0 Á ; 5⇒1g» which would mean to apply on rule B C action 0 Á , with B as A, and C as B; similarly, on rule C D the action 0 Á , will be executed with C instead of A and D in place of C.</p><p>On the one hand, the usage of this feature may hamper the reusability of a component, because it would depend on the way the syntactic module was originally written. Any change to that grammar production would cause any module that depend on the other to break. On the other hand, this may be true during the first phases of the development, when iterations on a definition may be frequent. But, in the case of a stable module, this should not occur often. In fact, it is good programming habit that a radical change in a code unit should correspond to releasing a new version of the code unit, so that backwards compatibility can be preserved. This is especially true for Neverlang, since components can be released even in their binary form. During the development phase, refactoring tools could limit the impact of this problem on user code.</p><p>Listing 11. Endemic slice providing a SymbolTable interface with an implementation.</p><p>Endemic slices: In Section 3 the concept of globally scoped components was introduced. Neverlang implements such components through endemic slice. The declare block of an endemic slice defines ancillary fields and methods that should be globally accessible from the code of any semantic action. Endemic slices are used to implement features in a language that do not have a direct syntactic counterpart. A typical example of this is the symbol table (see Listing 11 for an example). Although every compiler might manage its symbol table in its own particular way, this is a construct that is generally always present in some form. The information that we store in a symbol table must be consistent and accessible from all the components of the compiler. Therefore, in Neverlang, this component should be accessible from all slices that are used in the language, even if there is no syntactic construct inside the language to refer to it. An endemic slice declares the interface and the constructor of the implementation of a globally accessible object that implements this concern. An endemic slice only declares an interface and a constructor, so that the programmer is free to use his favorite programming language and tools to implement the globally accessible object. The endemic slice imports the implementation inside Neverlang, so that it is available to every component that may require it. The endemic slice can be substituted at will, by any compatible object that implements the same interface (for a use case, see Linda-Python <ref type="bibr" target="#b29">[30]</ref>, where a threaded execution model is substituted with a distributed, RMI-based execution model). Objects declared in an endemic slice are destroyed and recreated at each execution of the interpreter, that is, for each new input program, but its state, if any, "sticks" between evaluation phases. It is also possible to make an endemic slice "stick" across evaluations using the static modifier, before the name of the object in the declare section; in this case Neverlang will instantiate the object only once during the execution of the interpreter, so that the state may be preserved across the evaluation of different input programs. This may be useful in the creation of interactive interpreters using the nlgi tool (Section 4.3).</p><p>Listing 12. Extract of the language descriptor for a Java compiler.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3.">Combining slices together: generating a language</head><p>Neverlang's language descriptor lists all the slices that form the complete language implementation, including endemic slices. It also defines the sequence in which roles will be evaluated (Listing 12).</p><p>Role execution order: The order of execution is specified by the roles clause. The first role is always syntax, indicating that the first phase is parsing, followed by the sequence in which every role in the slices should be processed, separated by a delimiter. Fig. <ref type="figure" target="#fig_3">2</ref> shows an example with the while loop. In the picture we are using the notation node.role-name to indicate the order of execution. There are three kinds of pre-defined visiting strategies (all depth-first):</p><p>Semi-automated: Indicated by " oþ "; the visitor automatically descends from the root into the children until a semantic action is attached; then the control is left to the action, which might or might not opt-in to use the eval statement (or one of the shorthands described in the previous paragraphs) to proceed with the visit. The eval statement can be used to perform arbitrary visiting strategies, where nodes may be even re-evaluated more than once. When eval is used, the execution of the child nodes is nested; that is, once the execution of the action for the child nodes has terminated, control is given back to the parent, which may eventually use eval again.</p><p>Post-order: Indicated with " o", this strategy visits the tree depth-first, and executes the actions after the children have been evaluated (left-to-right). It is well-suited for L-attributed and S-attributed grammars (Section 2).</p><p>Juxtaposition: Indicated by ":", when two roles are juxtaposed, the execution of roles is interleaved; that is, instead of executing one role per tree visit, all the roles that are juxtaposed will be executed "at once": in other words, for each node all the actions of all the juxtaposed roles will be executed in sequence, as opposed to simple semi-automated and post-order, where each role corresponds to one visit of the tree. When two (or more) roles are juxtaposed, the execution strategy is the one indicated by the first left-hand non-juxtaposing role; e.g., with the roles clause: then the execution is post-order, and bar is juxtaposed to foo; with the roles clause: then the execution is semi-automated, and bar is juxtaposed to foo. Juxtaposition in combination with semi-automated at the time of writing is experimental.</p><p>For a use case of juxtaposition, see for instance the Log Language in <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b38">38]</ref>, a language for log rotating, similar to the UNIX logrotate utility. In this language, each line is a log management operation (e.g., rename and backup). The utility, besides the execution phase where the log management operations are performed on the file system, includes two more evaluation phases, logging and permissions. The logging phase produces itself a log of the operations that are being executed, the permissions phase checks the file permissions of the files that are being modified. The default is a post-order execution, which causes each phase to be executed in sequence: first it logs all the operations that are going to be executed, then, for all the commands the permissions are verified, then all the commands are executed at once; by switching to the interleaved execution strategy, for each command in the input file the operation is first logged, then permissions are evaluated, and finally the operation is executed.</p><p>Dependencies between slices: As we saw in Section 3, each language component has dependencies. These dependencies should be satisfied when the components are combined together (Section 3). In particular, we saw that the syntax definitions provide and require other syntactic definitions, by way of nonterminals (syntactic dependencies), and attribute definitions provide and require other attribute definitions (semantic dependencies). In order for a language implementation to be consistent, both syntactic and semantic dependencies shall be satisfied. In a slice, syntactic dependencies are implied by the concrete syntax, while semantic dependencies derive from the roles. For instance, in the case of the while loop (Listings 2 and 4):</p><p>the concrete syntax provides the WhileLoop nonterminal, and it requires at least one definition for the LoopBody and LoopCondition nonterminals. Because of the semantics of grammars, each nonterminal may admit more than one definition, but at least one is required. the type-checking role requires the Class o? 4 attribute type to be defined on nonterminal $1, which, in this case, resolves to LoopCondition the code-gen role requires the String attribute code to be defined on nonterminals LoopCondition and LoopBody, respectively, and provides a String attribute code on nonterminal $ , which in this case resolves to WhileLoop.</p><p>Section 3 also stated that these dependencies must be satisfied in a language implementation. Thus, the framework must enforce the resolution of such dependencies at composition time. In Neverlang, when one such dependency is left unsatisfied, the runtime throws an error. In <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28]</ref> we explored ways to track and resolve dependencies automatically, and present them to end users in a convenient way (see also Section 6.4 for further details): the objective is to enable end users to compose a working language implementation, where all the dependencies are satisfied, for any given set of slices, without writing code.</p><p>The starting symbol or axiom of the language, in Neverlang is always called Program by convention. In order to produce a meaningful language (that is, a non-empty language, see Section 2) at least one slice should provide the Program nonterminal. This can be done explicitly, by introducing a production of the form "Program …", or implicitly, by using the rename feature, that has also a number of other uses.</p><p>Rename: A language descriptor may optionally include a rename section. This section declares a list of nonterminals that should be consistently renamed to other nonterminals. For instance, in our example, we always used the Loop-Condition nonterminal to represent the condition of the while and do-while loops. This condition is usually represented by an Expression. Now, let us suppose that a slice javalang.Expression is available and that it provides the nonterminal Expression. We may introduce a slice with the production LoopCondition Expression, but this slice would serve no meaningful purposes beside satisfying the requirements of the slice javalang.WhileSlice There is a better mechanism to achieve the same result, which is providing a rename mapping. In Listing 12, the LoopCondition is renamed to Expression in every production in which it occurs, causing, for instance, the production While "while" "ð"LoopCondition"Þ" "f"LoopBody"g" in javalang.WhileSlice to become While "while" "ð"Expression"Þ" "f"LoopBody"g":</p><p>The same can be done with LoopBody, that could be renamed into StatementList, assuming that there exists a slice that provides such nonterminal. The rename feature can also be used to declare the starting symbol of the language, by renaming it to Program.</p><p>Listing 13. javalang.Lang using bundles.</p><p>Bundles: A bundle is a collection of slices that together implement a sort of macro-feature. For instance, one might bundle together all the slices that implement the looping constructs for a language and all the slices that implement the conditional branches. The role of the bundle construct is only one of convenience. A bundle is automatically expanded into the collection of slices that it contains; thus using a bundle in a language is completely equivalent to spell out its contents in the language descriptor. For instance (Listing 13), consider a bundle javalang.bundles.Loops containing the slices javalang.WhileLoopSlice and javalang.DoWhileLoopSlice, and suppose this bundle is added to a language javalang.Lang; this language is identical to the language that included directly the slices javalang.WhileLoopSlice and javalang.DoWhileLoopSlice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Tools and utilities</head><p>At the beginning of this section we recalled that the Neverlang language is only one of the ways developers can exploit the Neverlang APIs. The Neverlang compiler nlgc translates the Neverlang language into JVM-compatible source code, so that this API is exposed to a more concise interface. Other tools are also bundled with the Neverlang framework: the simple Neverlang launcher nlg and the interactive read-eval loop nlgi. A small library of utility functions and classes is also provided. The reason this library is small, is that users are free to use standard libraries from the Java ecosystem. Listing 14. Translator Plugin for Java.</p><p>The Neverlang Compiler nlgc: In Section 4.3 we will show that it is easy to map the Neverlang language onto the Neverlang API, but the framework comes with a compiler called nlgc which automates the process. In most cases, nlgc generates Java source files. The command nlgc generates all the source files in the src directory, then javac compiles the source code into class files in the bin directory. For instance, in Section 4.1, we described how to write a while loop in Neverlang, and we have shown how to write a module (Listing 2), a slice (Listing 8) and a language descriptor (Listing 12). By invoking nlgc over these files the result would be a collection of Java source files. An example of what the generated source code looks like can be seen in the next section, in Listing 15. The Neverlang language allows semantic actions to be written using a custom language as well, while still providing useful syntactic sugar to drive the visit and access the attributes (the eval keyword, the dot-notation for accessing attributes, etc.). This is provided by way of translator plugins. When multiple programming languages are used, nlgc generates source files for each given target language. Each file can be then compiled using the native platform tools. For instance, scala source files would be compiled using the scalac compiler.</p><p>A translator plugin hooks into the code-generation process of the Neverlang compiler to analyze and manipulate the input source of a semantic action, and desugar the Neverlang language shorthands into the regular API calls that we presented in this section. The developer can then hint at the system that semantic actions are being written in a different language. In Section 4.1.1, Listing 6 showed how to switch between language plugins in a module written using the Neverlang language.</p><p>Translator plugins in their simplest form describe how the occurrences of each shorthand should be rewritten into API calls, and in their extended form, they may parse and verify (e.g., type check) the entire code block. Listing 14 shows how the simple Java translator plugin is defined using Java itself to implement it. Code for the Scala plugin is similar. The plugin itself, again, can be written using any JVM-supported language.</p><p>Currently we have implemented simple support for Java and Scala, plus the template plugin, which is suitable for code generation. These plugins do not actually parse the code block, which is rather reproduced verbatim; desugaring occurs through simple source code transformations (pattern matching). Although this is a very simplistic approach, it is also very convenient, because translator plugins never become outdated: new language releases can be supported from the day one. Compare this to the alternative solution of fully parsing the entire block of code, and how, for instance, it made instantly obsolete all the tools that were written in the pre-generics age of Java. With this approach, the Neverlang language supports all the most recent Java features, including Java 7's lambdas. <ref type="foot" target="#foot_8">7</ref> Besides, type checking and other verifications will be executed at the time the generated source files will be compiled using the target language compiler (e.g., for java javac).</p><p>Nevertheless, extended plugins can be implemented as well; this is especially preferable when the code block hosts a custom DSL. In this case, the code block can be passed into a separate Neverlang instance, which will parse and possibly generate the source code in a target language.</p><p>Launching and interpreting interactively: Neverlang comes bundled with a convenient predefined launcher called nlg. The launcher instatiates a given language and invokes the Language.eval(String) API (Section 4.3) on each of the given file names.</p><p>The read-eval loop utility nlgi executes input programs interactively and it can be started by invoking it at a command line with the language name as a parameter. The nlgi tool provides commands to interact with the language; it is possible to dump the contents of the endemic slices, show the complete grammar, print the attributes of the tree, and dump the AST and the goto-graph of the parser to the screen using Graphviz <ref type="bibr" target="#b41">[41]</ref>. Fig. <ref type="figure" target="#fig_4">3</ref> shows neverlang.js launched as an interactive console, evaluating an interactively defined factorial function, as you can see, the input source code is also automatically colorized, depending on the grammar of the language.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Implementation</head><p>The Neverlang framework runs on the Java Virtual Machine. Core data structures, support and utility classes are written in Java, bearing as few dependencies as possible. In fact, Neverlang depends on no other library or technology besides pure JDK 1.6, which makes it even compile and run on Android's Dalvik VM (see also <ref type="bibr" target="#b19">[20]</ref>). The framework is designed so that its APIs are easy to use. The Neverlang language is only one of the possible front-ends to the Neverlang core. The Neverlang APIs can be used directly, exploiting the multi-language features of the JVM platform. For simplicity, the code examples in this section will always use Java, as it is the lingua franca of the JVM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1.">Architecture</head><p>In Neverlang modules, slices and the language descriptor are mapped onto regular Java classes. They are loaded by a Java ClassLoader through their canonical class name. The canonical class name reflects the dotted identifier that is conventionally used in module, slice, bundle and language declarations in the Neverlang language. For instance, the declaration "slice com.example.MySlice" would generate a class MySlice in package com.example. Class loading is internally used by all the APIs that load components by name, such as importSlice(). A language implementation in Neverlang is not an opaque executable, but a collection of components that JVM languages can interact with, by querying a rich API. This API does not only drive the execution of the language processor, but also it may be employed to retrieve information on the loaded components, making it even possible to substitute and unload components at runtime. Language: A language descriptor is a class that extends the Language class. A Language subclass must declare in its constructor (using the importSlice() method) which slices it imports, the order in which roles are executed, and the renames. The importSlice() directive expects the canonical name of an implementor of the Component interface to be given; both Slice and Module implement this interface, thus a language may import both slices and modules; if a module name is given, then the module also represents the slice that declares the syntax and the roles that it contains. For instance, if a module com.example.MyModule declares a reference syntax and some role (e.g., type-checking), then it also represents a slice with the same name that contains its reference syntax as a concrete syntax, and the corresponding implementation for role type-checking. This is a convenience that is generally used during the first stages of the development; as new roles will require to be introduced, slices may be a better fit (e.g., see <ref type="bibr" target="#b20">[21]</ref>). Incidentally, the Language class inherits from Bundle, since Language is a slice container as well (it follows that languages can be used as bundles).</p><p>Slices: Slices are subclasses of Slice and implement the Component interface; in their constructors they declare the modules from which they import their syntax and semantic roles, using the importSyntax(String moduleName) and importRole(String roleName) API. Endemic slices, do not extend the Slice class because they behave in a different way: they do not import roles or syntax from modules, but rather they declare a singleton object. Nonetheless, they extend the EndemicSlice class and invoke a different API to instantiate the globally accessible resource that they implement.</p><p>Listing 15. Components in Section 4 as represented using Neverlang's APIs.</p><p>Modules: A module is a complex component made of several classes: one class inherits from the Moduleclass, and it declares whether it is referencing a syntax definition from a different module, or if the syntax is being defined within the module itself; then it declares which roles are being defined, and which nonterminals will be hooked into, using the numbering scheme described in Section 4. Then: if the module comes with a syntax definition, another class, extending the Syntaxclass should be implemented; by convention this class shall be named o module Àname 4$role$syntax:</p><p>For instance, the syntax for module javalang.WhileLoopin Listing 2 would be named javalang.WhileLoop$role $syntax; for each role, and for each nonterminal being hooked into, a new class, extending the SemanticActioninterface should be defined. By convention, such classes would be named by convention this class shall be named</p><formula xml:id="formula_0">omodule À name4 $role$o roleÀ name4 $ oN 4</formula><p>where o N 4 is the number of the nonterminal that is being hooked and o roleÀ name4 is the role identifier; any "-" in the role identifier is replaced with "_" to make it a valid Java identifier (e.g., type-checkingbecomes type_checking). For instance, rule 0 for the type-checkingrole of javalang.WhileLoopwould be mapped onto javalang:WhileLoop$role$type_checking$ The reason for this complex decomposition is to allow each semantic action to be written using a different language of the JVM. When the method Module.getAction() will be invoked, at runtime, the required action is loaded from disk and returned. The class javalang.WhileLoop must invoke in its constructors the APIs to declare all its sub-components (the class defining the syntax, and the classes defining the semantic actions for each role). Fig. <ref type="figure">4</ref> shows a summary of all the classes that must be generated; Listing 15 shows a complete example of how the Neverlang language relates to the Neverlang API. Fig. <ref type="figure" target="#fig_5">5</ref> shows the relations between classes and interfaces.</p><p>Because each semantic action is compiled as a different class file, a different programming language can be used, provided that it can compile to a JVM class file. This fine-grained decomposition of the compiled modules makes it possible to achieve a finer-grained compilation model that (i) reduces compile times (ii) simplifies separate compilations (iii) enables to ship, distribute and share language components as pre-compiled binaries. In fact, a change in one module requires to recompile only that module from source (specifically, it would actually require recompilation only for those sections that have been modified). Compare this to conventional compiler generation techniques, that, being usually based on source generation, often require a large part (if not all) of the source code to be recompiled anew. This approach streamlines the compiler-generation process by making it possible to compile only those components that really need to be rebuilt. This is particularly useful as the language implementation becomes large and complex (see the experience we conducted with neverlang.js Section 6.2). Plus, pre-compiled Neverlang components can be bundled together in jars to distribute them conveniently, and they can also be shared and imported by different languages independently.</p><p>Finally, users are free to write alternative Module implementations, with different loading strategies for semantic actions. For instance, a scripting language would make it possible to define custom behavior even at runtime.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2.">Runtime and execution</head><p>The Neverlang runtime is made of two main parts: the DEXTER <ref type="bibr" target="#b42">[42,</ref><ref type="bibr" target="#b43">43]</ref> incremental parser generator and the component manager <ref type="bibr" target="#b19">[20]</ref>. The component manager is responsible for loading languages, slices and modules, and for dispatching the correct semantic action to the node of the syntax tree that is being visited in the correct phase (described in a role). Once all the components have been defined and compiled into class files using the regular platform tools (javac, scalac, etc.), and a Language subclass has been implemented, it is possible to execute the language processor, by invoking its Language. eval(String) method. This is when the component manager kicks in.</p><p>The component manager: The component manager is Neverlang's core. It implements the componentized visitor pattern and it loads and unloads the language components into memory. When the Language subclass is instantiated, the component manager loads the slices from disk, then it queries them for the modules they require. For each production in each syntax definition, an inverted index is populated to map each grammar production into the components that implement its semantics. For a given triplet ðp; r; iÞ, where p is a production, r is a role, and i A N is an integer number, there is at most one semantic action that may be executed at a time. In particular, for a language L with a grammar G, consider the mapping m: P Â R Â N-SA ? where P is the set of productions for a grammar G, R ¼ fR 0 ; R 1 ; :::R n g is the set of all the roles for language L, and N ¼ f0; 1; :::n; :::g is the set of natural numbers, and SA ? is the set of all the semantic actions, in all the roles of R, plus the undefined action ? . Let us also indicate with S r;i the action hooked to the i-th nonterminal in role r of the slice S. Then, for all p A P; r A R; i A N the mapping m is defined as</p><formula xml:id="formula_1">mðp; r; iÞ ¼ S r;i if S r;i exists ? otherwise<label>ð1Þ</label></formula><p>The reason why p is needed in the definition is that each slice contains (imports) a syntax definition, and the index i refers to a nonterminal in the syntax definition; then the triplet ðp; r; iÞ maps to at most one slice, which is the slice that contains production p, role r and the semantic action hooked at index i. Because the index is populated dynamically during the bootstrap phase, it is possible to grow it and shrink it at runtime, by removing, adding and updating its contents.</p><p>Action dispatching: When an input program must be processed, the eval() method in the Language class passes the input text to the parser. If the parsing process terminates unsuccessfully (the input program is syntactically incorrect), a ParsingException is raised. Otherwise, a syntax tree is generated. Each node of the tree is an instance of the ASTNode class. Each node is given a tag, which is the grammar production that it represents.</p><p>Once the parsing has terminated successfully, the component manager begins the visiting process, starting from the first semantic role. For instance, in the case of the example language javalang.Lang (Listing 12), the first role would be typechecking. For each node, the component manager reads the tag and it queries the inverted index m. Back to our example, Fig. <ref type="figure" target="#fig_6">6</ref> represents the tree for the production WhileLoop (Listing 2), during the execution of the type-checking role. Because nonterminal WhileLoop is number 0 in slice javalang.WhileLoop, then: mðp; typeÀ checking; 0Þ ¼ javalang:WhileLoop$role$type_checking$0 Á where p is rule WhileLoop "while""ð"LoopCondition"Þ""f"LoopBody"g". If the value mðp; r; iÞ a ?, then the semantic action S r;i is executed.</p><p>Action execution: Each semantic action implements the interface SemanticAction:</p><p>When the semantic action S r;i must execute, its apply(Context) method is invoked. Context is a data class that contains a reference to the node that is being visited, a reference to the current Language instance, a reference to the role that is being executed. Executing S r;i means invoking the SemanticAction.apply(Context) method of the corresponding class with a valid Context instance. In the case of Fig. <ref type="figure" target="#fig_6">6</ref>, the Context instance would contain node 0, role type-checking and a reference to the current javalang.Lang instance. The body of the action supposedly interacts with the Context instance:</p><p>it drives the visit of the tree (and the consequent evaluation of its children or siblings), using the eval(ASTNode) to descend into a given child node, and also evalAndReturn(ASTNode, String) to descend into a child node, and return the value of one of its attributes. It also provides the suspend() and resume() methods to suspend and resume the role that is currently executing. Invoking these methods correspond, in the Neverlang language, to the syntactic sugar: eval $N, $N:attribute, $suspend, $resume; it accesses nodes by nonterminal id using Context.node(int); e.g., ctx.node(0 Á ) returns the node for WhileLoop, ctx.node(1) returns the node for LoopCondition, ctx.node(2) returns the node for LoopBody, etc. In the Neverlang language these correspond to the short form $N; it reads and writes attributes using the idioms T value ¼ ctx:nodeðiÞ:getValueð"attrName"Þ where T is the expected type for $i.attrName and ctx:nodeðiÞ:setValueð"attrName"; valueÞ:</p><p>In the Neverlang language, they correspond to the attribute access $N.attribute.</p><p>it provides access endemic slices: ctx.singleton("EndemicName") corresponds to $EndemicName.</p><p>Listing 15 shows how the semantic action 0 for the type-checking phase in module javalang.WhileLoop (Listing 2) may be written in Java by only using Neverlang's native APIs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3.">DEXTER</head><p>In order to support componentization and runtime composability, we also developed DEXTER: the Dynamically EXTEnsible Recognizer <ref type="bibr" target="#b42">[42,</ref><ref type="bibr" target="#b43">43]</ref>. In the bootstrap phase, productions are read from the Syntax subclasses, and they are fed to the DEXTER parser generator. DEXTER implements an in-memory LR parser generator. The generated parsers can be incrementally extended (grown) or restricted (shrunk) by adding and removing grammar productions on-the-fly. In fact, the syntax role of a module is a straight translation from the Neverlang DSL to a series of Java API calls to the DEXTER component (compare Listing 2 to Listing 15). The DEXTER parser generator implements an algorithm that bears some resemblance to those described in <ref type="bibr" target="#b44">[44,</ref><ref type="bibr" target="#b45">45]</ref>. The algorithm updates the LR(0) DFA, which is the basis for many interesting parsers of the LR family, such as GLR and LALR. The DEXTER component includes an extensible regex-based lexer that allows to define lexemes at runtime. This subcomponent is called LEXTER. Lexemes are defined inline in a production both when they are constant keywords and when they are patterns. In the Neverlang language (Section 4.1), patterns are delimited by slashes, while keywords are delimited by quotes; in the Java API the distinction is made by using different classes. Further information on DEXTER and the underlying formal model that proves the correctness of the updated parsers can be found in <ref type="bibr" target="#b43">[43]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.4.">Conflicts and syntactic composition</head><p>LR parsers are known to be an efficient family of bottom-up parsers that is guaranteed to run in linear time for any deterministic context-free language. However, many notable subclasses of LR, such as LALR, in general are not closed under composition (see e.g., <ref type="bibr" target="#b46">[46]</ref>). However, this can be tackled in many ways; for instance, a known subset of LALR ( <ref type="formula" target="#formula_1">1</ref>) is closed under composition; it has been shown <ref type="bibr" target="#b46">[46,</ref><ref type="bibr" target="#b47">47]</ref> that targeting this subset is practical if context-aware scanning is employed: this is the subset that is accepted by the Copper parser generator <ref type="bibr" target="#b46">[46]</ref>. Currently DEXTER does not directly address the problem of composition, and therefore an error is raised if two language components introduce a syntactic conflict in the language. The language developer is then able to fix the problem by editing the grammar. Remapping can be used to reuse the code in most situations. Indeed, this is an area where further work may be useful. Nevertheless, the Neverlang framework is not in itself tightly coupled to DEXTER, and alternative parser generators may be employed in the future. A possibility that is being investigated is to support Copper's subset of LALR.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Case study: evolution of a DSL through composition</head><p>DSLs are computer languages designed to tackle problems that are tied to a particular problem-domain. Studies pointed out <ref type="bibr" target="#b48">[48]</ref> that up to 80% of a software system lifetime is spent on maintenance and evolution activities, and DSLs are no exception: continual evolution of DSL implementations is often difficult because it is generally unplanned and unanticipated. Componentized language development leads to language implementations that can be easily extended and evolved. This section shows a simple but complete usage example of Neverlang. The example is the same state machine DSL in <ref type="bibr" target="#b49">[49]</ref>. Just like in Tratt's paper, the DSL will be evolved through extension; but, in our case, we will show that the same kind of language extension can be achieved in Neverlang using language components. In Section 6.1 the same experience will be discussed, comparing other language frameworks. The source code listings may have been edited for readability, the full The state machine defined in the input program will be translated into compilable source code. The first version of the language only supports defining a list of states and a list of transitions between states. Each state is indicated through its Identifier; a transition is a triplet of Identifiers that represent, respectively, the name of the state from which the transitions leave, the name of the one where the transition goes, and a name for the transition itself. The first declared state is by convention also the initial state of the machine. Fig. <ref type="figure" target="#fig_2">7</ref> shows the state machine for a door, along with the code that describes it; this machine loops indefinitely.</p><p>Listing 16 shows the grammar of the language as broken down into the reference syntax section of 6 modules, each of which represents a syntactic feature of the DSL (the Neverlang syntax has been omitted for conciseness). Three evaluation phases, in Neverlang, roles (Section 4) have been defined: collect-states, validation, code-gen. Each role represents a different concern in the DSL. The collect-states role collects the list of states in a Java Set oState 4 ; the validation verifies that no undefined states were used in transitions that are put in their own TransitionTable: it may raise an error if an undefined state is encountered; the code-gen role generates compilable (Java) source code implementing the state machine. Listing 17 shows a few lines of code from the collect-states and validation phases for module sm.base.Program, which implements the semantics for the syntax defined in sm.Program. Notice that attributes are pulled from StateList and TransitionList using a Neverlang API (AttributeList.collectFrom()), which implements the bucket brigade operator <ref type="bibr" target="#b50">[50]</ref>. The usage of this API is the preferred way to deal with such cases. Notice that pulling up states and doing the analysis here is not idiomatic in attribute grammars, where you would rather pass the list of states down the tree so that each transition would perform the validation. Of course, this is possible in Neverlang as well.</p><p>The TransitionTable implementation may be provided to the language using an endemic slice. The Transition-Table may be defined as a map between states and a list of states between which a transition exists. For instance, in the door state machine (Fig. <ref type="figure" target="#fig_2">7</ref>) the opened state should return the set fclosedg. Obviously in a deterministic state machine only one transition should leave from each state; thus, the validation role may also check that, for each declared state, the size of its entry in the table is less or equal to 1. A Transition may be implemented as a custom Java data class that modules would import. Similarly, the TransitionTable and StateSet companion classes for the corresponding endemic slices should be written, as described in Section 4.1.2; we will omit the source code for these components, since they are trivial to write. A summary of the support classes is shown in Table <ref type="table">2</ref>.</p><p>The semantic action for the Program nonterminal in the code-gen phase produces compilable code for the state machine (Listing 18). The generated source code is a simple Java program with a while loop that switches over the possible states of the machine, setting the variable nextState when a transition exists.</p><p>Listing 18. Compiled code for the Door state machine.</p><p>The language descriptor (Section 4.1) sm.base.Lang lists all of the slices constituting the base language. The nlgc tool (Section 4.1.1) produces the source code that interfaces with the Neverlang API (Section 4.3. The code is compiled bt javac. <ref type="foot" target="#foot_9">8</ref> The language implementation may be executed using nlg or nlgi (Section 4.2), called from a regular JVM program (Section 4.3.2), and reused across different language implementations without any change. The input program in Fig. <ref type="figure" target="#fig_2">7</ref> produces the compilable source code in Listing 18 (support APIs are provided to automatically generate an output file on disk).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">A simple imperative language</head><p>Listing 19. Relevant parts of the grammar for the Action Language. Executable UML models include the specification of an action language <ref type="bibr" target="#b51">[51]</ref> that can be used for many purposes, such as expressing actions and guards in a state machine model. Suppose that we already have an implementation of a suitable language for this purpose that is a simple, imperative programming language with support for variables and expressions like the javalang.Lang language that we used as our running example in Section 4. It is easy to see that by combining the </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 2</head><p>Auxiliary classes for the state machine DSL.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Auxiliary classes</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Transition</head><p>A data class of three fields: to, from, and event</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>GuardedTransition</head><p>A subclass of Transition that supports guards and actions</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TransitionTable</head><p>Maps a state into the transitions that leaves that state syntax definitions in Listing 19 with the WhileLoop definition, we would have enough components to define a simple Turing-complete programming language. As you can guess from the grammar, al (Action Language) supports only two types: numbers (integers) and booleans. For simplicity, variables can be only assigned integer values, and undeclared variables are assigned the default value À1. Two roles are defined: validate and code-gen. The code-gen role generates Java source code, thus it is compatible with the code-gen role of the state machine DSL. Listing 20 shows the module for the Sum definition. The code-gen phase uses the template syntax (see Section 4.2). The validate role keeps track of the used variables, so that the code-gen role may declare them at the top of the listing. You may also be able to see that it would be easy to extend the language with a module VarDecl to declare variables: the validate role of the VarLookup module could then raise an error when users attempt to use an undeclared identifier. A VarTable keeps track of the defined variables, thus one should include an endemic slice for this purpose. The slices of al may be used to introduce guards and actions in our state machine DSL. Fig. <ref type="figure" target="#fig_10">8</ref> and Listing 21 show the state chart of a vending machine. The machine vends drinks and candies, depending on an initial choice, which is an integer value-that is, 1 for candies, 2 for drinks, and 0 for neither. Once a candy or a drink has been vended, the machine resets the choice to 0, and it goes back to the initial waiting state, unless both candies and drinks are unavailable, in which case the machine goes to the empty state. The example requires us to introduce the concepts of variable, guard and action to transitions: the guard is a boolean expression that causes a transition to fire only when it evaluates to true, an action is a sequence of statements of the action language that are executed when a transition fires, and a variable is an identifier that is associated with an integer value. All these concepts can be described in terms of components of the al language.</p><p>A guarded transition is almost the same as a simple Transition of the base implementation, but it is followed by a guard-a boolean expression between brackets-and/or by an action-a sequence of assignments. In a state machine with guards, a transition fires only when its guard evaluates to true; therefore, now multiple transitions may leave the same state. This extension can be realized (1) by adding a new component to the language that implements a transition with a guard and an action, alongside the original "simple" transition, and (2) modifying the code-gen phase so that multiple transitions leaving the same state can be accounted for.</p><p>The new module is called sm.ext.GuardedTransition. The syntactic definition would be similar to the one in Transition.nl (Listing 16, p. 37), but it is followed by a guard, an action or both. During the code-gen phase the new transition is added to the TransitionTable. This transition contains the generated code for the guard expression and the assignment statements in the action body: the code-gen role from the al.BoolExpr slice and the al.StatementList would pass on the generated code through the code attribute defined on their nonterminals.</p><p>The new slices can be introduced alongside the old ones; only one substitution is required: the code-gen phase in the sm.ext.Program slice must now be aware that more than one transition may leave a state, and that guards and actions should be printed out.</p><p>Listing 23. Slices included in the state machine language with guards and transitions.</p><p>Finally, Listing 23 shows all the slices that have been included in the complete language implementation: the sm.n package contains sm.StateList and sm.TransitionList, simple syntactic definitions where no additional semantics has been defined; the sm.base.n package denotes slices defined for the basic state machine language; the al.n package denotes slices defined by the imperative language that were used in the guard/action language; the sm.ext.n package denotes the slices that were explicitly (re) defined for the extended state machine language with guards and actions. This example showed how to implement a DSL as a collection of components, each representing a concept or feature of the language. The component-based model, however, shows that it is possible to improve code reuse of pre-defined features, possibly coming from different languages. The model makes it possible to reuse pre-packaged bundles of syntax and evaluation phases across different language implementations, using language components; moreover, it makes it possible to easily reuse syntax and evaluation phases in different language components, both making it easier to produce variants of the same DSL or to reuse the same components into language implementations that have different requirements. Each change does not require any editing on the existing source code, but rather consists in the creation of new modules and new slices. The original, pre-compiled implementations can be left untouched on disk.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Evaluation</head><p>The experiences that follow evaluate our model of language implementation. The state machine DSL of the previous section will be used to compare Neverlang to other modular language implementation frameworks, with the objective to show that the model is general enough to be reproducible using different tools. In the following the benefits of a native implementation of this model are shown: for instance, language extension is simplified by a feature-oriented language implementation; this experience has been carried out by first implementing an interpreter for a real-world programming language (JavaScript); language components can be compiled separately, they can be redistributed as pre-compiled artifacts, and they can be loaded dynamically; not only is it possible to reuse code, but extensions can be implemented in isolation and loaded on demand; making it possible to evolve a language implementation even at runtime. Finally the expressive power of Neverlang will be discussed by the help of an implementation of the DESK language <ref type="bibr" target="#b14">[15]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">Feature-oriented language implementation across tools</head><p>In this section we will not go into the details of implementing the state machine DSL itself, but we will use this language as a way to discuss the features of each framework and the way the model fits in their design. The experiments were conducted using LISA 2.2, Silver r1230 (hg), Spoofax 1.2.0.0-s41399, Xtext 2.5.3. Full source code of the examples can be found at http://neverlang.di.unimi.it/comlan14/examples.tgz.</p><p>A full comparison of the features of the tools is shown in Table <ref type="table">4</ref>.</p><p>Feature-oriented language composition can be achieved if the language framework of choice provides facilities to modularize the language implementation both on the dimension of language constructs and on the dimension of semantic concerns of the language implementation. This capability requires the framework to support non-trivial modularization capabilities. This rules out the Xtext framework <ref type="bibr" target="#b52">[52,</ref><ref type="bibr" target="#b53">53]</ref>, which is severely limited in the way language components can be defined: for instance, only single-inheritance is permitted in syntactic definitions.</p><p>The other surveyed tools are capable of achieving a feature-oriented componentization of a language, although they are generally focused on code-reuse rather than providing a mechanism to specifically implement languages in a featureoriented way. For instance, in all the tools, to a different extent, it is possible to separate the implementation of the semantics from the definition of the syntax. Every tool makes it possible to provide libraries of functions that can be shared among components. The degree of freedom in separating language concerns changes for each tool.</p><p>For instance, in LISA <ref type="bibr" target="#b54">[54]</ref>, syntax definitions can be separated from semantics using the inheritance mechanism. Multiple inheritance makes it possible to componentize parts of the language into language components. Silver's grammars <ref type="bibr" target="#b22">[23]</ref> are able to achieve the same kind of componentization. Silver also supports attribute forwarding: with this feature the attributes of a node may be defined in terms of the attributes of another node. This feature bears some similarity to Neverlang's remapping feature (Section 4.1.2), but it is in fact more powerful, because it supports rewriting the tree. <ref type="foot" target="#foot_10">9</ref> Neither in Silver or LISA there is a formal mechanism to separate between evaluation phases, but these can be nevertheless defined separately through design patterns (e.g., choosing a naming convention for the attributes, or modularize the implementation accordingly). Spoofax <ref type="bibr" target="#b55">[55]</ref> is designed to separate concerns to the extent that each of the major evaluation phases (name binding, code generation, etc.) can be implemented using a different DSL. These DSLs are provided by the framework, but users are free to define their own evaluation phases using the native Stratego programming language.</p><p>Considering the taxonomy in Erdweg et al. <ref type="bibr" target="#b8">[9]</ref>, we may say that all the surveyed modular tools are able to support both semantic and syntactic language extension, restriction, unification and extension composition. It is worth noticing that Neverlang is the only tool that supports by design real language restriction, through slice removal. But, again, this can be achieved in the other cases through extension or, if necessary, through refactoring. Language unification is also possible, because all of the tools are able to compose language specifications; in particular, even though according to <ref type="bibr" target="#b8">[9]</ref> Spoofax would not be able to perform semantics unification, we argue that the Stratego language's module system allows to define rules and strategies across different modules, <ref type="foot" target="#foot_11">10</ref> and therefore, such a kind of composition is indeed possible.</p><p>On the one hand, one might raise the concern that the finer-grained componentization described in this section, inspired by the Neverlang model, may not be idiomatic in each framework. But, on the other hand, even if this were true, it would not disprove that the surveyed tools are powerful enough to achieve these results. The obvious drawback of this technique is that, still, entire modules have to be substituted, even when only a small computation has to be changed. There is indeed a trade-off between module size and the ability to substitute small computations; as modules become smaller, module management becomes more and more complex. But this kind of complexity could be managed through specific tooling (cf. Section 6.4 for dependencies and variability management).</p><p>As we already mentioned in Section 3.1, Mernik <ref type="bibr" target="#b21">[22]</ref> have observed that self-extension is a property of a language, rather than a property of a language framework. For instance, SugarJ <ref type="bibr" target="#b56">[56]</ref> is an extension to the Java language on top of Java, SDF and Stratego which supports syntactic self-extensibility. A comparison of the examples in terms of code size is shown in Table <ref type="table">3</ref>, we used the usual metrics of lines-of-code (LOC) (as found e.g., in <ref type="bibr" target="#b57">[57]</ref>) and number of components. In terms of lines of code, size is comparable. The Neverlang implementation may appear bigger because of the way Neverlang language definition introduces module and slice declarations. With respect to number of productions, number of modules and roles, the size is comparable to the other implementations; moreover, it is worth recalling that Neverlang supports alternate JVM languages for the semantics, in which case line count might drop considerably (e.g., consider the boilerplate needed to iterate over a collection in Java 7 compared to Scala or Java 8: in this implementation we used <ref type="bibr">Java 7)</ref>.</p><p>The conclusion of this experience is that none of these tools really centers around the idea of feature-oriented language implementation, but most of them can be retargeted for this purpose through design patterns. This proves that the model (Section 3) is general enough to be supported by other tools. In the next section we will show the particular benefits that a native implementation of this model provides.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.">Extending a real-world language: neverlang.js</head><p>JavaScript is a dynamic, general-purpose programming language that has been recently gaining wider and wider consideration. In order to evaluate the capabilities of the Neverlang framework, we decided to realize a feature-oriented implementation for this language. In our JavaScript interpreter it is possible to plug and unplug features to realize multipurpose dialects of the original language. The main goal of this experience was not to compete with state-of-the-art JS interpreter implementations. We chose to implement JavaScript because it is a rather simple programming language, and, lately, there has been a lot of buzz around it. We believe that implementing the JavaScript programming language represents evidence that Neverlang is powerful enough to implement not only toy languages, but also real-world general purpose programming languages. According to the Sputnik test suite <ref type="foot" target="#foot_12">11</ref> our implementation covers about the 70% of the specification. This score may not result very high at a first glance; really, it is justified because a large part of the test cases cover the implementation of JavaScript's built-in libraries. Implementing these libraries is possible, but it constitutes a time-consuming activity, that we have planned to complete in a later phase. Unfortunately, the Sputnik test suite assumes that all of the builtin libraries are available, causing some tests to fail. Our implementation of the semantics of the language is however complete: the interesting parts of the language are supported (e.g., closures, higher-order functions and the prototype chain), to the point that many of the built-in libraries may be even implemented within the language; the subset of the built-in libraries that is currently available is able to run browser-unrelated benchmarks in the Google Octane suite <ref type="foot" target="#foot_13">12</ref> without modifications. <ref type="foot" target="#foot_14">13</ref>Performance-wise, preliminary tests have shown that we were able to make neverlang.js up to only one order of magnitude slower than the Rhino JavaScript implementation. <ref type="foot" target="#foot_15">14</ref> Considering that the implementation's main goal was modularity and not performance, this result is quite promising. Moreover, we are already trying to address this issue through specific efforts (see the paragraph at the end of this subsection on runtime evolution). A breakdown of the slices that constitute the neverlang.js implementation is presented in Table <ref type="table">5</ref>.</p><p>Extending JavaScript: A classroom experience: Our JavaScript implementation consists of 73 slices (Table <ref type="table">5</ref>) that correspond roughly to the same number of modules, for a total number of 3043 lines of code, plus around 64 Java classes of support code (mostly, related to the supported parts of the built-in objects). Because we intended the language to be used in a short course on modular language implementation, we intentionally kept it simple. For instance, only one role (evaluation) has been currently implemented. This short course consisted of only three 4-hours lessons. At the end of the short course, students were handed a full pre-compiled, pre-packaged implementation of the JavaScript interpreter, and were required to implement a different language extension. Each extension consisted of a new language construct, with varying levels of complexity. Each student would have provided the implementation of his/her extension as (i) a collection of Neverlang source files (ii) a pre-compiled jar with the extension as a bundle and (iii) a collection of test cases for the developed extension. A summary of the implemented extensions can be found in Table <ref type="table">6</ref>. Each extension has been developed in isolation from the others. Students were provided with a copy of the source code, exclusively for reference and documentation purposes. Students were not allowed to modify the source code of the reference implementation directly, but rather to realize new components. The objective was to see the effectiveness of Neverlang as a tool to develop separate language extensions. Grading consisted in first verifying that the provided source code was actually compiling. Then, an automated script loaded each student-provided jar file, introducing the new components in the base interpreter.</p><p>As seen in Section 4.3.1, in Neverlang a language implementation is a JVM object instance. The public method importSlice(sliceName) can be invoked at any time during the life-time of a language, making it possible to introduce and substitute slices at runtime. The students' extensions were tested using this Neverlang feature. In order to verify the correct execution, each language extension was first introduced independently from the other, and tested in isolation; then we proceeded to verify the interactions between the extensions by testing all the possible 2 14 combinations of such extensions. Because of the didactic nature of the experiment, only a few extensions actually conflicted (cf. Section 4.3.4): in particular the students that implemented tuples and pattern matching chose a similar syntax for the same feature, causing the parser generator to generate an error if such extensions were introduced at the same time.</p><p>The relevance of this experiment is to show that Neverlang's rendition of our feature-based model of language implementation emphasizes its good properties, when they are brought to their natural extreme: (i) language components can be developed separately, by different programmers, thereby allowing multiple teams to realize new features for a language implementation in parallel; (ii) features can be shipped as pre-compiled components; (iii) pre-compiled components can be composed onto the core language implementation at any time, possibly at runtime; (iv) independently developed features can be tested together without touching the core language implementation in an automated fashion.</p><p>Runtime evolution for dynamic optimization: In Neverlang slices and roles are pre-compiled components that can be deployed and undeployed at runtime. We are currently investigating how to exploit this feature to bring it one step further. Inspired by the Truffle <ref type="bibr" target="#b58">[58,</ref><ref type="bibr" target="#b59">59]</ref> runtime system, we saw an occasion to exploit this capability to perform modular runtimeoptimizations on our JavaScript interpreter. The Truffle JavaScript implementation, among other things, optimizes code paths by rewriting tree nodes using specialized versions. Guards are installed on the code bodies that implement the semantics of AST-based hand-written interpreters, and the rewriting occurs when a guard fires. It has been shown <ref type="bibr" target="#b59">[59]</ref> that a Trufflebased JavaScript interpreter implementation is close performance-wise to highly optimized interpreters such as Google's V8. The Truffle project uses Java and Java annotations to achieve this impressive results. We are currently trying to reproduce similar techniques in Neverlang by introducing tree rewriting capabilities and guards. In Section 4.3.2 we described how actions are resolved. The key idea is that the component manager may to return a set of semantic actions; then the runtime system may choose which rules should be executed, depending on the guards. Although the work is still in its infancy, the results are promising: in an initial implementation of this technique, we measured that avoiding boxing of primitive values through rewriting resulted in a (up to) 20 Â speedup. Further results on this matter will be reported in a separate work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.">The DESK language</head><p>DESK is a simple desk calculation language described in <ref type="bibr" target="#b14">[15]</ref> to show an example of an absolutely non-circular attribute grammar (Section 2). Obviously, we are aware that implementing the DESK language does not constitute proof that Neverlang is able to handle any non-circular attribute grammar; nonetheless, we believe that showing that Neverlang is able to implement DESK constitutes at least evidence that the framework is able to handle non-trivial cases (see Section 2). Full source code is available at http://neverlang.di.unimi.it/comlan14/examples.tgz</p><p>In DESK, programs are of the form</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PRINT 〈expression〉 WHERE 〈definitions〉</head><p>where 〈expression〉 is an arithmetic expressions and defined constants, and 〈definitions〉 is a sequence of constant definitions of the form 〈constantÀname〉 ¼ 〈number〉</p><p>Each constant occurring in 〈expression〉 must be defined in 〈definitions〉 and, for each constant, only one definition may be given. A valid DESK program may be</p><formula xml:id="formula_2">PRINT x þ y þ1 WHERE x ¼ 1; y ¼ 2</formula><p>The original DESK definition only includes addition as a valid expression; nevertheless, the DESK language includes many central features of a real programming language: declaration of named entities (constants) use of declared entities conditions on the declaration and use of such entities ○ an entity cannot be redeclared ○ only declared entities can be referenced by name In Paakki's work, DESK is compiled into an assembly code for a simple one-register machine. The execution of a valid DESK program evaluates the expression and prints its value.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 3</head><p>Summary of the sizes of the different implementations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table 4</head><p>Summary of the differences between the tools.</p><p>Listing 25. Neverlang descriptor for the DESK language.</p><p>Listing 26. Program in DESK.</p><p>The attribute grammar in <ref type="bibr" target="#b14">[15]</ref> has been converted into a Neverlang compiler. In Listing 24 we show the DESK grammar with respect to the way we have defined language components. In our implementation we chose to define 5 modules, plus the one for defining lexer tokens for constants, ConstName and numbers, Number; Paakki makes no distinction between evaluation phases; in Neverlang it is easier to reason in terms of roles. Our implementation (Listing 25) defines three roles: collect-constants, evaluation, code-gen. The first role has post-order semantics (Section 4) because it maps lexer tokens into their corresponding values (e.g., it maps into an intvalue the token for the token for Number): the relevant actions are attached to the leaves of the syntax tree, thus it makes sense to evaluate these first. The evaluationrole performs the majority of the work. In Listing 26 the Programmodule is shown. This module contains the starting symbol of the grammar, as defined in <ref type="bibr" target="#b14">[15]</ref>. The evaluationrole uses the semi-automated evaluation strategy (Section 4.1.3), thus, the developer is given full control on how and when the child nodes should be evaluated. In particular, in the DESK language, the visit should start from the ConstPartnonterminal, and then proceed to the Expression. Neverlang is able to do this, because it is possible to eval the second left-hand side nonterminal before the first left-hand side nonterminal, using the command eval command. In this case, the label Pwas assigned to the production in the reference syntax section. So, we can write eval $p½2 to proceed to evaluate the ConstPart nonterminal. Once control is returned to this semantic action (that is, the recursive visit of the ConstPart subtree has terminated), it is possible to proceed to the Expression subtree.</p><p>It is possible to pass down a value (a inherited attribute) by assigning it before eval is invoked. Then, we can proceed to evaluate Expression using eval $P½1 Finally, the code-gen role generates the assembly code using the attributes that were computed during the execution of the evaluation role, and the code attribute in Expression and its descendants, computed during the code-gen phase: code generation is a role that is, again, a good candidate for simple post-order visit.</p><p>The size of the full DESK implementation is less than 180 lines of code. The apparent verbosity is due to our choice of employing built-in Java data structures to keep the code base small, and without external dependencies. For instance, a java.util.Map is used here for the environment. But java.util.Map is a stateful data structure. Nevertheless, because of the way the language is defined (the environment is first filled, and then read), this does not introduce unintended sideeffects. Of course, it is always possible to rely on third-party libraries: for instance Google's Guava library <ref type="foot" target="#foot_16">15</ref> provides ImmutableMap. Another point that is worth mentioning is that our DESK implementation is a pedantic translation of Paakki's original, in a way that is non-idiomatic in Neverlang; if the DESK language in a way that is more Neverlang-friendly, the code base would result even tighter.</p><p>Observations: The implementation of the DESK language in Neverlang certainly does not represent a formal proof for Neverlang's expressive power, but we believe it constitutes strong evidence that Neverlang should be practical enough to implement non-trivial attribute grammars. If anything, it shows that Neverlang is more powerful than simpler tools such as Yacc and ANTLR, which are limited to L-attributed or S-attributed grammars <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b10">11]</ref>.</p><p>This power comes in some cases at the cost of being explicit about how the visit of the tree is conducted (using the eval command) and about the way attributes are partitioned into roles. Tools that implement proper attribute grammars do not require attribute evaluation to be triggered explicitly; in the most simplistic case, attribute evaluation is triggered at their usesite. For instance, the rule A.val¼B.val þ C.val for a production A-BC would cause the evaluation of attributes B.val, C. val which would, in turn, cause the evaluation of any other attribute they may be defined in term of. In fact, one strategy to implement an attribute grammar is to map attributes onto functions; attribute grammar frameworks may then employ caching and memoization techniques (Section 2) to avoid recomputing attributes more than once, when they produce the same results. However, memoization may be hindered if the language framework admits impure computations. This is sometimes unavoidable, for instance when I/O has to be performed. Neverlang's approach is more explicit, in that (unless the visit is post-order-Section 4) it requires users to explicitly signal where attributes are being evaluated.</p><p>On the one hand, being explicit may feel a little inconvenient, because it places the burden of choice on the end users. In Neverlang this is addressed by providing syntactic sugar (Section 4) to explicitly require attribute evaluation, while retaining conciseness. On the other hand, this gives users more control over what is being evaluated: attributes may be explicitly re-evaluated if the programmer knows that the value of an attribute should have changed; likewise, the programmer may choose not to do so when a pre-computed attribute retains a valid value. This may be a plus for developers that need this kind of finer-grained control. The biggest downside is that components coming from different sources may not play well together because they expect different evaluation orders. In fact, delegating the computation of the evaluation order to automatic machinery (as it usually happens with more traditional attribute grammar evaluation systems) would relieve the developers from needing to think of this aspect in the first place, and, in the end simplify the combination of components coming from different authors.</p><p>All in all, choosing one strategy over the other is a matter of trade-offs. Neverlang's choice was to trade a bit of convenience in favor of giving users control; in AG evaluation systems users are relieved from the burden of choice, but, on the other hand, they have less power over the way the language is evaluated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4.">Tracking dependencies through variability management</head><p>Each language component in itself represents a feature of a language (Section 3), which, by itself, does not constitute a self-contained language definition. This is why each component may have dependencies. Dependency-tracking is a concern that is not directly related to the composition model of a language framework, but it is nonetheless induced by the way the language framework conceives components. These dependencies are usually not tracked automatically: the framework may warn the user that a dependency has not been satisfied and raise a compile-time or run-time error. However, the framework usually does not provide users with suggestions about how these missing dependencies may be satisfied to complete the language implementation.</p><p>In <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28]</ref>, we have researched a way to mine data from pre-compiled language components that not only allowed to represent the relationships between components, but also could be employed to provide users with a readable representation of these dependencies, thereby allowing even end users to compose a language implementation from an arbitrary selection of pre-compiled language components. Language components could be grouped by language families: by collecting all the components that belong to a particular domain, users would be allowed to pick the features of a DSL, realizing a variant that is member of that family. For instance, it would be possible to represent a family of state machine languages in terms of the possible feature that a state machine language could include. End users may select the features they want from a variability model <ref type="bibr" target="#b60">[60]</ref><ref type="bibr" target="#b61">[61]</ref><ref type="bibr" target="#b62">[62]</ref> and generate the language implementation automatically. Mixing domains would also be allowed: for instance state machine features may be combined with an action language, as described in Section 5.</p><p>Part of the information is inferred directly from the dependency graphs that can be constructed from internal properties of the language components (Section 3). We have then tried to infer automatically a variability model by further mining information from our language components. For instance, language components may be tagged by language developers with keywords. The while loop implementation may be tagged with the keywords loop, statement; transition with guards may be tagged with the keywords transition, guard, action, etc. In the Neverlang case, these would be stored as fields of the objects that represent slices and modules (see Section 4). This metadata can be later extracted for further processing. In the Neverlang implementation this metadata can be extracted from the pre-compiled components through the framework's APIs (Section 4.3). Tags are then fed into a hierarchical clustering algorithm. By manipulating the dendogram resulting from the clustering procedure, we are then able to present the features and their relationships through a tree-like structure that is a snapshot of the given set of language components. End users are then able to pick features by selecting components of this tree (the variability model), and the engine automatically resolves the dependencies and combines the components into the language implementation.</p><p>The experiment has been carried out using different languages. One experiment mined data from a family of state machine languages, similar to the one described in Section 5. This language family included different kind of states, and extra transition types. Other experiments involved a simple imperative language. A similar experiment is now being conducted on neverlang.js (Section 6.2), where variants can be constructed using the slices of the full neverlang.js interpreter (e.g., a purely functional, stateless variant, and an imperative-only version).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Related work</head><p>Section 6 summarized which features of LISA, Silver, Spoofax were useful to implement a feature-oriented implementation of the state machine language. These frameworks provide further features to simplify language implementation.</p><p>AspectLISA <ref type="bibr" target="#b63">[63,</ref><ref type="bibr" target="#b64">64]</ref> supports AOP-like constructs to hook into productions through pattern-matching and inject attributes at multiple sites at once. The template construct makes it possible to perform a sort of macro-expansion of repetitive rules (e.g., the bucket brigade pattern, to collect lists of attributes, which Neverlang implements through library functions 4). However, in LISA it is harder to separate attribute definition from grammar definitions, and it is not possible to define an abstract syntax. LISA's main target language is a Java subset. Unfortunately, there is no support for separate compilations, nor does the tool support language extension to be performed from pre-compiled binaries; the language input files have to be provided as source code. LISA supports the most extensive number of techniques to parse and evaluate attribute grammars, with several choices on the kind of parser generator to use (e.g., LL, LR, and LALR) and the evaluation strategy for the attribute grammar (among the others, Lenic Tree Walk Evaluator, Katayama Evaluator, L-Attributed Evaluator, Visit Pattern Evaluator, etc.).</p><p>Silver <ref type="bibr" target="#b46">[46,</ref><ref type="bibr" target="#b65">65]</ref> supports the definition of abstract productions, verifiable composition of modules, raising errors if a language extension is not well-defined <ref type="bibr" target="#b65">[65]</ref> and aspect productions, (a different feature from LISA's). It also supports attribute forwarding, which can be described as a macro-like system to rewrite the semantics of a construct in terms of the semantics written for a different construct (e.g., by remapping attributes, and nonterminals; in Neverlang the simpler mechanisms of remapping and renaming are present). The generated parser uses a variant of LALR with context-aware scanning <ref type="bibr" target="#b47">[47]</ref>, and it implements an algorithm for verifiable composition of deterministic parsers <ref type="bibr" target="#b46">[46]</ref>. These features together make easier to compose LALR grammars and give strong guarantees on the generation of a deterministic parser. Silver source files are compiled down to Java and it is possible to reuse Java libraries, but while interfacing with Java/JVM code for Neverlang is a key point, the Silver system is meant to be self-contained; thus, although it is possible to interface with Java code, the endorsed way to define extra support code is to use Silver itself. Most notably, Silver is the only tool, among the surveyed, to support separate compilations, <ref type="foot" target="#foot_17">16</ref> Neverlang aside.</p><p>The Spoofax <ref type="bibr" target="#b55">[55]</ref> language workbench internally uses Stratego, a dynamically typed declarative DSL for term rewriting, with a unique syntax. The JVM implementation compiles the DSLs into Stratego source files and Stratego files into an internal high-level format interpreted by the Stratego/J execution engine <ref type="foot" target="#foot_18">17</ref> ; interoperability with Java code is possible, but it is not within the main objectives of the project. Separate compilations are unfortunately not supported yet <ref type="bibr" target="#b66">[66]</ref>.</p><p>The JastAdd <ref type="bibr" target="#b67">[67]</ref> is a Java-based attribute grammar system. JastAdd programmers define a grammar and the attributes and the system scaffolds pre-built AST Java classes. Aspects can be used to statically inject semantics into attributes. Attributes are implemented as Java methods that support parameters. JastAdd also supports reference attributes (similar to Silver's higher-order attributes). Aspects can be used to separate concerns such as evaluation phases. Aspects can be factorized in such a way that it is possible to define pre-compiled language components, but JastAdd is a code-generating tool, thus it is not possible to further extend components without editing the original source code.</p><p>It is also worth mentioning MontiCore <ref type="bibr" target="#b68">[68]</ref> a framework for language composition and extension that provides grammar inheritance and rewriting mechanisms additionally to modularization features. MontiCore uses a combined grammar format for concrete and abstract syntax and it supports grammar inheritance and rule inheritance. In the case of grammar inheritance, similarly to LISA, all the rules of a parent grammar are inherited; overriding of rules is also possible. Semantics is given through visitors.</p><p>Jetbrains' Meta-Programming System (MPS) <ref type="bibr" target="#b69">[69]</ref> for DSL implementation is a projectional editor, which means users are actually editing an AST through context menus, autocompletion and keyboard shortcuts instead of just typing in text. The main drawback with projectional editors is a steeper learning curve <ref type="bibr" target="#b70">[70]</ref>. The system supports language modularization and inheritance-based code reuse.</p><p>Lightweight Modular Staging (LMS) <ref type="bibr" target="#b71">[71]</ref> uses Scala's embedded DSL idiom to implement compilers. LMS provides the means to modularize the syntax of a program to generate code, and therefore it can be used to implement the work that we described. Moreover, syntactic composition in this case would be easier than in Silver because in LMS merging language components only consists in using APIs coming from different libraries instead of merging parse tables. The downside is that syntax of programs is limited to the constraints imposed by Scala's compiler.</p><p>As seen in Section 6, Xtext <ref type="bibr" target="#b52">[52]</ref> language workbench is severely limited because it only supports single inheritance. Xsemantics <ref type="bibr" target="#b53">[53]</ref> is a DSL that can be used in combination with Xtext to formally define and verify the semantics of compilation phases such as type-checking. We also want to cite EMFText <ref type="bibr" target="#b72">[72]</ref>, another EMF-based tool <ref type="bibr" target="#b73">[73]</ref> (like Xtext) that supports modular language implementation using syntax imports.</p><p>Neverlang's DEXTER is a modular LR parser generator. In the literature, authors have tried to address composability in LR parser, since LR is known not to be closed under composition (see Section 4.3.4); in particular, Silver targets a safe subset of LALR(1) using Copper <ref type="bibr" target="#b46">[46]</ref>, Bravenboer and Visser <ref type="bibr" target="#b74">[74]</ref> describe an algorithm to compose together different grammar portions and obtain an LR(0) goto-graph. <ref type="bibr" target="#b75">[75]</ref> describes an approach to componentized LR parsing. In <ref type="bibr" target="#b43">[43]</ref> we proved the existence of a relation between goto-graphs, and presented an algorithm to transform the goto-graph of a grammar into the goto-graph of an extended grammar. Finally, with respect to extensible parsers, recent work by Reis et al. <ref type="bibr" target="#b76">[76]</ref> has shown an extension to PEGs that may be employed to define extensible parsers, called Adaptable PEG.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Conclusions</head><p>Modular language implementation is the first step towards bringing language implementation to a wider audience. The model we presented can be easily implemented using many of the already existing tools and we showed that a native implementation of this model gives a greater range of possibilities. Separate compilations make it possible to redistribute pre-compiled components. In neverlang.js (Section 6.2) we showed that language extensions can be developed, and tested and integrated in parallel and in isolation. The variability management experience (Section 6.4) has shown that multiple language components can be mined to simplify the definition of language variants from pre-built artifacts.</p><p>The Neverlang framework has been successfully employed in real-world projects. TheMatrix <ref type="bibr" target="#b77">[77]</ref> is a Java framework to query and manipulate Italian's national healthcare databases to produce statistics on the prevalence of chronic diseases and estimate the standards of care across the country. The Tyl Language is an experimental business-oriented DSL for the development of ERP software. <ref type="foot" target="#foot_19">18</ref> The same implementation of Neverlang's compiler nlgc (Section 4.1.1) and of the interpreter for a complete, modern programming language (neverlang.js, Section 6.2) are a testament to the strengths of Neverlang and its underlying model. We are also completing the implementation of a modular Java language pre-processor, in the style of Polyglot <ref type="bibr" target="#b78">[78]</ref>, SugarJ <ref type="bibr" target="#b56">[56]</ref>, and ableJ <ref type="bibr" target="#b46">[46]</ref>. Other experiments involved experimenting with a simple implementation of the Logo programming language. Moreover, because the core API is entirely Java 6 compatible, we were able to successfully port the entire Neverlang implementation onto Android (an example use case would be the Recipe language described in <ref type="bibr" target="#b19">[20]</ref>), where its dynamic loading capabilities could be useful to separately distribute plugins for a core language implementation. Nevertheless, in Neverlang there is still much room for improvement. Future work will concentrate both on its expressive power and ease of use. Runtime evolution and a DSL for tree rewriting are already in development, and thanks to the architecture of the framework they should be available soon. The language plugin system makes it possible to support new programming languages for semantic actions, and the dynamic mapping between parse trees and semantic actions would simplify support to dynamic dispatching of alternative actions.</p><p>Composition between language components is also a matter of establishing a set of guidelines: Section 3 gave an overview of the principle of dependency between language components. Even though Neverlang provides renaming and remapping capabilities (Section 4), guidelines on naming and factorization of language components are still an open problem that affects any modular language implementation tool. Our plan is to explore this problem more through field studies and further experiences.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>4. 1 .</head><label>1</label><figDesc>The Neverlang framework Listing 1. Complete EBNF grammar of the Neverlang language.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>4. 1 . 1 .</head><label>11</label><figDesc>Defining syntax and semantics: modules Listing 2. reference syntax for the while statement and the type-checking. The name of the module and the lefthand nonterminal are generally not required to match. Listing 3. reference syntax for a Pascal-style while statement.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Listing 7 .</head><label>7</label><figDesc>Syntactic sugar to execute a post-order visit.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 2 .</head><label>2</label><figDesc>Fig.2. Role execution order: the grayed node does not have semantic actions attached. For the sake of the example, we assume that all roles are evaluated in the same way (semi-automated or post-order).</figDesc><graphic coords="18,93.62,56.54,360.82,146.53" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. nlgi executing a JavaScript program with neverlang.js (Section 6).</figDesc><graphic coords="20,111.97,56.57,324.00,261.22" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. a moduleFig. 5 .</head><label>5</label><figDesc>Fig. a module is down into several classes.</figDesc><graphic coords="23,94.64,571.82,354.78,106.51" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Method dispatching.</figDesc><graphic coords="24,103.34,62.96,351.20,121.93" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Listing 20 .</head><label>20</label><figDesc>Example code for Sum in the Action Language. Code generation uses the template syntax.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Door state machine.</figDesc><graphic coords="27,268.88,56.90,187.76,73.27" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>5. 3 .</head><label>3</label><figDesc>Guards and actions: composing the DSLs Listing 21. Code for the Vending Machine in Fig. 8. Code for drinks is omitted, since it mirrors the candies side. Listing 22. A detail from GuardedTransition.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Vending machine.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="4,105.98,56.54,336.06,224.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="10,47.18,303.92,382.88,257.53" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="12,47.18,70.22,382.88,314.29" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="14,47.18,295.22,382.88,290.11" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="15,43.16,338.06,382.88,378.07" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="16,47.18,282.26,382.88,199.63" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="21,43.16,140.30,382.88,404.41" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="25,43.16,100.46,382.88,138.91" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="25,43.16,331.04,382.88,347.11" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="35,43.16,209.42,382.88,301.33" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1</head><label>1</label><figDesc>Summary of the informal definitions in this section.</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Literature has also shown how to support true language embedding through library-based, possibly type-driven language preprocessing<ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>. E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_2"><p>The canonical syntax definition for a Java-like while loop would not include braces, and it would be in terms of a 〈statement〉 which might possibly be a block. For the sake of conciseness and clarity we chose to imagine that a while loop is always followed by a braced block.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_3"><p>http://jasmin.sourceforge.net E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="43" xml:id="foot_4"><p>(2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_5"><p>In this example we assume that identifiers are collected into a symbol table during the type-checking phase; in real language implementations, a separate phase may be introduced.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_6"><p>E.g., consider grammar A B; C D: rules 0, 1 may refer either 0, 1, but not 2; etc.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="6" xml:id="foot_7"><p>http://onx.ms E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="7" xml:id="foot_8"><p>Moreover, this allows to include even language variants such as @Java's extended annotations<ref type="bibr" target="#b40">[40]</ref>. E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="8" xml:id="foot_9"><p>Of course, as seen in Section 4, if any other language is used in the semantic actions, users will have to invoke the language-specific compiler. E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="9" xml:id="foot_10"><p>Neverlang is currently adding support to a tree-rewrite DSL, though (Section 6.2).</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="10" xml:id="foot_11"><p>http://releases.strategoxt.org/strategoxt-manual/unstable/manual/chunk-chapter/rules-and-strategies.html#id3317807.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="11" xml:id="foot_12"><p>http://test262.ecmascript.org/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="12" xml:id="foot_13"><p>https://developers.google.com/octane/benchmark</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="13" xml:id="foot_14"><p>In order to keep the grammar simple, semi-colon insertion was disregarded.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="14" xml:id="foot_15"><p>Preliminary tests, mainly conduced on Octane's crypto.js, showed a 30 s execution time for neverlang.js, while Rhino takes about 6 s. E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="15" xml:id="foot_16"><p>https://github.com/google/guava E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="16" xml:id="foot_17"><p>http://melt.cs.umn.edu/publications/silver/silver-reference.pdf</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="17" xml:id="foot_18"><p>https://strategoxt.org/Stratego/StrategoJ E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="18" xml:id="foot_19"><p>http://www.mate.it/index.php/en/tyl E. Vacchi, W. Cazzola / Computer Languages, Systems &amp; Structures 43 (2015) 1-40</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This work has been partially supported by the MIUR project CINA: Compositionality, Interaction, Negotiation, Autonomicity for the future ICT society.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Listing 24. DESK grammar. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">When and how to develop domain specific languages</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mernik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Heering</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Sloane</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Comput Surv</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="316" to="344" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Language workbenches: the killer-app for domain specific languages</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fowler</surname></persName>
		</author>
		<ptr target="〈http://www.martinfowler.com/articles/languageWorkbench.html〉" />
	</analytic>
	<monogr>
		<title level="m">Martin Fowler&apos;s Blog</title>
		<imprint>
			<date type="published" when="2005-05">May 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">DSLs in action</title>
		<author>
			<persName><forename type="first">D</forename><surname>Ghosh</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
			<publisher>Manning Publications Co</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">LISP: introduction</title>
		<author>
			<persName><forename type="first">J</forename><surname>Foderaro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun ACM</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page">27</biblScope>
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
	<note>special issue on Lisp</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Domain specific languages</title>
		<author>
			<persName><forename type="first">M</forename><surname>Fowler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Parsons</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010">2010</date>
			<publisher>Addison Wesley</publisher>
			<pubPlace>Reading, MA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Fowler</surname></persName>
		</author>
		<ptr target="〈http://martinfowler.com/bliki/FluentInterface.html〉" />
		<title level="m">Fluent interface. Martin Fowler&apos;s Blog</title>
		<imprint>
			<date type="published" when="2005-05">May 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">M</forename><surname>Pollack</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Gierke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Risberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Brisbin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Hunger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
			<pubPlace>O&apos;Reilly Media</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">C</forename><surname>Dea</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Heckler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Grunwald</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Pereda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Phillips</surname></persName>
		</author>
		<author>
			<persName><surname>Javafx</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
			<publisher>Apress</publisher>
			<biblScope unit="volume">8</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Language composition untangled</title>
		<author>
			<persName><forename type="first">S</forename><surname>Erdweg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">G</forename><surname>Giarrusso</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Rendel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of LDTA&apos;12</title>
		<meeting>LDTA&apos;12<address><addrLine>Tallinn, Estonia</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A type-safe embedding of SQL into Java using the extensible compiler framework</title>
		<author>
			<persName><forename type="first">V</forename><surname>Karakoidas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mitropoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Louridas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Spinellis</surname></persName>
		</author>
		<idno type="DOI">10.1016/j.cl.2015.01.001</idno>
		<ptr target="http://dx.doi.org/10.1016/j.cl.2015.01.001" />
	</analytic>
	<monogr>
		<title level="j">Comput Lang Syst Struct</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">ANTLR: a predicated-LL(k) parser generator</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">J</forename><surname>Parr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">W</forename><surname>Quong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Softw Pract Exp</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="789" to="810" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Combinator parsers: from toys to tools</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D</forename><surname>Swierstra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ENTCS</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="38" to="59" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Parser combinators in scala, CW-491</title>
		<author>
			<persName><forename type="first">A</forename><surname>Moors</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Piessens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Odersky</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-02">February 2008</date>
			<pubPlace>Belgium</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Katholieke Universiteit Leuven</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Semantics of context-free languages</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Knuth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math Syst Theory</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="127" to="145" />
			<date type="published" when="1968">1968</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Attribute grammar paradigms: a high-level methodology in language implementation</title>
		<author>
			<persName><forename type="first">J</forename><surname>Paakki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Comput Surv</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="196" to="255" />
			<date type="published" when="1995">1995</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Compilers: principles, techniques, and tools</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Aho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sethi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Ullman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986">1986</date>
			<publisher>Addision</publisher>
			<pubPlace>Reading, MA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A core language for rewriting</title>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z-E-A</forename><surname>Benaissa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ENTCS</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="422" to="441" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Functional incremental attribute evaluation</title>
		<author>
			<persName><forename type="first">J</forename><surname>Saraiva</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">D</forename><surname>Swierstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Kuiper</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CC&apos;00</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>CC&apos;00<address><addrLine>Berling, Germany</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="volume">1781</biblScope>
			<biblScope unit="page" from="279" to="294" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Stratego/XT 0.17. A language and toolset for program transformation</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bravenboer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">T</forename><surname>Kalleberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Vermaas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Sci Comput Program</title>
		<imprint>
			<biblScope unit="volume">72</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="52" to="70" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Neverlang 2: componentised language development for the JVM</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Vacchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SC&apos;13</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>SC&apos;13<address><addrLine>Budapest, Hungary</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">8088</biblScope>
			<biblScope unit="page" from="17" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Neverlang 2: a framework for modular language implementation</title>
		<author>
			<persName><forename type="first">E</forename><surname>Vacchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Olivares</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shaqiri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of modularity&apos;14</title>
		<meeting>modularity&apos;14<address><addrLine>Lugano, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="23" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">An object-oriented approach to language compositions for software language engineering</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mernik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Syst Softw</title>
		<imprint>
			<biblScope unit="volume">86</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="2451" to="2464" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Silver: an extensible attribute grammar system</title>
		<author>
			<persName><forename type="first">E</forename><surname>Van Wyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Bodin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Krishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sci Comput Program</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="39" to="54" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">On the criteria to be used in decomposing systems into modules</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename><surname>Parnas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun ACM</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1053" to="1058" />
			<date type="published" when="1972">1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Modular grammars for programming language prototyping</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">R</forename><surname>Adams</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991">1991</date>
			<pubPlace>UK</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Southampton</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Composable attribute grammars: support for modularity in translator design and implementation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Farrow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">J</forename><surname>Marlowe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Yellin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of POPL&apos;92</title>
		<meeting>POPL&apos;92<address><addrLine>USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1992">1992</date>
			<biblScope unit="page" from="223" to="234" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Variability support in domain-specific language development</title>
		<author>
			<persName><forename type="first">E</forename><surname>Vacchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Pillay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Combemale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SLE&apos;13</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>SLE&apos;13<address><addrLine>Indianapolis, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">8225</biblScope>
			<biblScope unit="page" from="76" to="95" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Automating variability model inference for component-based language implementations</title>
		<author>
			<persName><forename type="first">E</forename><surname>Vacchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Combemale</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Acher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SPLC&apos;14</title>
		<meeting>SPLC&apos;14<address><addrLine>Firenze, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="167" to="176" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Separation of concerns in language definition</title>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Companion proceedings of modularity&apos;14</title>
		<meeting><address><addrLine>Lugano, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="1" to="2" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Domain-specific languages in few steps: the Neverlang approach</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SC&apos;12. Lecture notes in computer science</title>
		<meeting>SC&apos;12. Lecture notes in computer science<address><addrLine>Prague, Czech Republic</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="volume">7306</biblScope>
			<biblScope unit="page" from="162" to="177" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">The Java language specification</title>
		<author>
			<persName><forename type="first">J</forename><surname>Gosling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Joy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Steele</forename><surname>Gl</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Bracha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Buckley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Java SE</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">The expression problem</title>
		<author>
			<persName><forename type="first">P</forename><surname>Wadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Java Genericity Mailing List</title>
		<imprint>
			<date type="published" when="1998-11">November 1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Feature-oriented programming with object algebras</title>
		<author>
			<persName><forename type="first">Bcds</forename><surname>Oliveira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Van Der Storm</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Loh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">R</forename><surname>Cook</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ECOOP&apos;13</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>ECOOP&apos;13<address><addrLine>Montpellier, France</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">7920</biblScope>
			<biblScope unit="page" from="27" to="51" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Modular visitor components: a practical solution to the expression families problem</title>
		<author>
			<persName><forename type="first">Bcds</forename><surname>Oliveira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ECOOP&apos;09</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>ECOOP&apos;09<address><addrLine>Genoa, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">5653</biblScope>
			<biblScope unit="page" from="269" to="293" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Independently extensible solutions to the expression problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Zenger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Odersky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of FOOL&apos;12</title>
		<meeting>FOOL&apos;12<address><addrLine>Long Beach, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Traits -composing classes from behavioral building blocks</title>
		<author>
			<persName><forename type="first">N</forename><surname>Schärli</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Switzerland</forename><surname>Bern</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005-02">February 2005</date>
		</imprint>
		<respStmt>
			<orgName>Universität Bern</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Sectional domain specific languages</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Speziale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of DSAL&apos;09</title>
		<meeting>DSAL&apos;09<address><addrLine>Charlottesville, Virginia, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="11" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">DSL evolution through composition</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Poletti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of RAM-SE&apos;10</title>
		<meeting>RAM-SE&apos;10<address><addrLine>Maribor, Slovenia</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Implementing domain-specific languages with Xtext and Xtend</title>
		<author>
			<persName><forename type="first">L</forename><surname>Bettini</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
			<publisher>PACKT Publishing Ltd</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">bringing a richer annotation model to Java</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">@</forename><surname>Vacchi</surname></persName>
		</author>
		<author>
			<persName><surname>Java</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput Lang Syst Struct</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="2" to="18" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Graphviz-open source graph drawing tools</title>
		<author>
			<persName><forename type="first">J</forename><surname>Ellson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Gansner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Koutsofios</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Woodhull</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GD&apos;01</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>GD&apos;01<address><addrLine>Vienna, Austria</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">2265</biblScope>
			<biblScope unit="page" from="483" to="484" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Neverlang: a union towards dynamicity</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Vacchi</surname></persName>
		</author>
		<author>
			<persName><surname>Dexter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICOOOLPS&apos;12</title>
		<meeting>ICOOOLPS&apos;12<address><addrLine>Beijing, China</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">On the incremental growth and shrinkage of LR goto-graphs</title>
		<author>
			<persName><forename type="first">W</forename><surname>Cazzola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Vacchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACTA Inform</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="419" to="447" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Incremental generation of LR parsers</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">N</forename><surname>Horspool</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Comput Lang</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="205" to="223" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Incremental generation of parsers</title>
		<author>
			<persName><forename type="first">J</forename><surname>Heering</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Klint</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rekers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans Softw Eng</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1344" to="1351" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Verifiable parse table composition for deterministic parsing</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename><surname>Schwerdfeger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Van Wyk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings SLE&apos;09</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>SLE&apos;09<address><addrLine>Dublin, Ireland</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">5969</biblScope>
			<biblScope unit="page" from="184" to="203" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Context-aware scanning for parsing extensible languages</title>
		<author>
			<persName><forename type="first">E</forename><surname>Van Wyk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Schwerdfeger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GPCE&apos;07</title>
		<meeting>GPCE&apos;07<address><addrLine>Salzburg, Austria</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="63" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Separation of concerns for software evolution</title>
		<author>
			<persName><forename type="first">T</forename><surname>Mens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Wermelinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Maint Evol</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="311" to="315" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Evolving a DSL implementation</title>
		<author>
			<persName><forename type="first">L</forename><surname>Tratt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GTTSE&apos;07</title>
		<title level="s">Lecture notes in compute science</title>
		<meeting>GTTSE&apos;07<address><addrLine>Braga, Portugal</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">5235</biblScope>
			<biblScope unit="page" from="425" to="441" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Regular right-part attribute grammars</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">K</forename><surname>Jullig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>De Remer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings CC&apos;84</title>
		<meeting>CC&apos;84<address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1984">1984</date>
			<biblScope unit="page" from="171" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">An action language for UML: proposal for a precise execution semantics</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Mellor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Tockey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Arthaud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Leblanc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of &quot;UML&quot; &apos;98</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>&quot;UML&quot; &apos;98<address><addrLine>Mulhouse, France</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1998">1998</date>
			<biblScope unit="volume">1618</biblScope>
			<biblScope unit="page" from="307" to="318" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">oAW xText: a framework for textual DSLs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Efftinge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Völter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ESE&apos;06</title>
		<meeting>ESE&apos;06<address><addrLine>Esslingen, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="volume">32</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Implementing Java-like languages in Xtext with Xsemantics</title>
		<author>
			<persName><forename type="first">L</forename><surname>Bettini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SAC&apos;13</title>
		<meeting>SAC&apos;13<address><addrLine>Coimbra, Portugal</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1559" to="1564" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">LISA: an interactive environment for programming language development</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mernik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lenič</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Avdičaušević</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Žumer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CC&apos;02</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>CC&apos;02<address><addrLine>Grenoble, France</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">2304</biblScope>
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">The Spoofax language workbench: rules for declarative specification of languages and IDEs</title>
		<author>
			<persName><forename type="first">Lcl</forename><surname>Kats</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of OOPSLA&apos;10</title>
		<meeting>OOPSLA&apos;10<address><addrLine>Reno, Nevada, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="444" to="463" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">SugarJ: library-based syntactic language extensibility</title>
		<author>
			<persName><forename type="first">S</forename><surname>Erdweg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Rendel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Kästner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ostermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings OOPSLA&apos;11</title>
		<meeting>OOPSLA&apos;11<address><addrLine>Portland, Oregon, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="391" to="406" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Feature-oriented language families: a case study</title>
		<author>
			<persName><forename type="first">J</forename><surname>Liebig</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Apel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of VaMoS&apos;13</title>
		<meeting>VaMoS&apos;13<address><addrLine>Pisa, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">One VM to rule them all</title>
		<author>
			<persName><forename type="first">T</forename><surname>Würthinger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wimmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Woß</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Stadler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Duboscq</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Humer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Onward!&apos;13</title>
		<meeting>Onward!&apos;13<address><addrLine>Indianapolis, IN, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="187" to="204" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">A domain-specific language for building self-optimizing AST interpreters</title>
		<author>
			<persName><forename type="first">C</forename><surname>Humer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wimmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wirth</surname></persName>
		</author>
		<author>
			<persName><surname>Wößa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Würthinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GPCE&apos;14</title>
		<meeting>GPCE&apos;14<address><addrLine>Västerås, Sweden</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="123" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Variability management in software product line engineering</title>
		<author>
			<persName><forename type="first">K</forename><surname>Pohl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Metzger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICSE&apos;06</title>
		<meeting>ICSE&apos;06<address><addrLine>Shanghai, China</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="1049" to="1050" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">A preliminary review on the application of feature diagrams in practice</title>
		<author>
			<persName><forename type="first">A</forename><surname>Hubaux</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Classen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mendonça</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Heymans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of VaMoS&apos;10</title>
		<meeting>VaMoS&apos;10<address><addrLine>Linz, Austria</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="53" to="59" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">A systematic review of evaluation of variability management approaches in software product lines</title>
		<author>
			<persName><forename type="first">L</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">A</forename><surname>Babar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J Inf Softw Technol</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="344" to="362" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Automatic generation of language-based tools using the LISA system</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">R</forename><surname>Henriques</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Varanda</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Mernik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lenič</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEE Proc -Softw</title>
		<imprint>
			<biblScope unit="volume">152</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="54" to="69" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Domain-specific aspect languages for modularising crosscutting concerns in grammars</title>
		<author>
			<persName><forename type="first">D</forename><surname>Rebernak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mernik</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">G</forename><surname>Gray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IET Softw</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="184" to="200" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Creating and using domain-specific language features</title>
		<author>
			<persName><forename type="first">T</forename><surname>Kaminski</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Van Wyk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GlobalDSL&apos;13</title>
		<meeting>GlobalDSL&apos;13<address><addrLine>Montpellier, France</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="18" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">A framework for extensible languages</title>
		<author>
			<persName><forename type="first">S</forename><surname>Erdweg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Rieger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GPCE&apos;13</title>
		<meeting>GPCE&apos;13<address><addrLine>Indianapolis, IN, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="3" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">JastAdd -an aspect-oriented compiler construction system</title>
		<author>
			<persName><forename type="first">G</forename><surname>Hedin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Magnusson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sci Comput Program</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="37" to="58" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">MontiCore: a framework for compositional development of domain specific languages</title>
		<author>
			<persName><forename type="first">H</forename><surname>Krahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Rumpe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Völkel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int J Softw Tools Technol Transf</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="353" to="372" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Language modularity with the MPS language workbench</title>
		<author>
			<persName><forename type="first">M</forename><surname>Völter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Pech</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICSE&apos;12</title>
		<meeting>ICSE&apos;12<address><addrLine>Zürich, Switzerland</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="1449" to="1450" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Towards user-friendly projectional editors</title>
		<author>
			<persName><forename type="first">M</forename><surname>Völter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Siegmund</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Kolb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SLE&apos;14</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>SLE&apos;14<address><addrLine>Västerøas, Sweden</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="volume">8706</biblScope>
			<biblScope unit="page" from="41" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Lightweight modular staging: a pragmatic approach to runtime code generation and compiled DSLs</title>
		<author>
			<persName><forename type="first">T</forename><surname>Rompf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Odersky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GPCE&apos;10</title>
		<meeting>GPCE&apos;10<address><addrLine>Eindhoven, The Netherlands</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="127" to="136" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">Model-based language engineering with EMFText</title>
		<author>
			<persName><forename type="first">F</forename><surname>Heidenreich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Johannes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Karol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Seifert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Wende</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GTTSE&apos;11</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>GTTSE&apos;11<address><addrLine>Braga, Portugal. Springer</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">7680</biblScope>
			<biblScope unit="page" from="322" to="345" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<monogr>
		<title level="m" type="main">EMF: eclipse modeling framework</title>
		<author>
			<persName><forename type="first">D</forename><surname>Steinberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Budinsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Paternostro</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Merks</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">Parse table composition: separate compilation and binary extensibility of grammars</title>
		<author>
			<persName><forename type="first">M</forename><surname>Bravenboer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software language engineering</title>
		<title level="s">Lecture notes in computer science</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="volume">5452</biblScope>
			<biblScope unit="page" from="74" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Component-based LR parsing</title>
		<author>
			<persName><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">R</forename><surname>Bryant</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mernik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput Lang Syst Struct</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="16" to="33" />
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">An on-the-fly grammar modification mechanism for composing and defining extensible languages</title>
		<author>
			<persName><forename type="first">Lvs</forename><surname>Reis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Di</forename><surname>Iorio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">O</forename><surname>Bigonha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">S</forename></persName>
		</author>
		<idno type="DOI">10.1016/j.cl.2015.01.002</idno>
		<ptr target="http://dx.doi.org/10.1016/j.cl.2015.01.002" />
	</analytic>
	<monogr>
		<title level="j">Comput Lang Syst Struct</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">Frameworks for data extraction and management from electronic healthcare databases for multi-center epidemiologic studies: a comparison among EU-ADR, MATRICE, and OMOP strategies</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Coppola</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">B</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Righetti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Peri</forename><forename type="middle">I</forename><surname>Berni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of MIE&apos;12</title>
		<meeting>MIE&apos;12<address><addrLine>Pisa, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Polyglot: an extensible compiler framework for Java</title>
		<author>
			<persName><forename type="first">N</forename><surname>Nystrom</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Clarkson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CC&apos;03</title>
		<title level="s">Lecture notes in computer science</title>
		<meeting>CC&apos;03<address><addrLine>Warsaw, Poland</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="volume">2622</biblScope>
			<biblScope unit="page" from="138" to="152" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
