<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">pSAV : A Practical and Decentralized Inter-AS Source Address Validation Service Framework</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Jiamin</forename><surname>Cao</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institute for Network Sciences and Cyberspace</orgName>
								<orgName type="institution">Tsinghua University † Beijing National Research Center for Information Science and Technology (BNRist) ‡ Huawei Technologies</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ying</forename><surname>Liu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institute for Network Sciences and Cyberspace</orgName>
								<orgName type="institution">Tsinghua University † Beijing National Research Center for Information Science and Technology (BNRist) ‡ Huawei Technologies</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Mingxing</forename><surname>Liu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institute for Network Sciences and Cyberspace</orgName>
								<orgName type="institution">Tsinghua University † Beijing National Research Center for Information Science and Technology (BNRist) ‡ Huawei Technologies</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Lin</forename><surname>He</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institute for Network Sciences and Cyberspace</orgName>
								<orgName type="institution">Tsinghua University † Beijing National Research Center for Information Science and Technology (BNRist) ‡ Huawei Technologies</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yihao</forename><surname>Jia</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institute for Network Sciences and Cyberspace</orgName>
								<orgName type="institution">Tsinghua University † Beijing National Research Center for Information Science and Technology (BNRist) ‡ Huawei Technologies</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Fei</forename><surname>Yang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Institute for Network Sciences and Cyberspace</orgName>
								<orgName type="institution">Tsinghua University † Beijing National Research Center for Information Science and Technology (BNRist) ‡ Huawei Technologies</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">pSAV : A Practical and Decentralized Inter-AS Source Address Validation Service Framework</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/IWQOS52092.2021.9521336</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-01-01T13:29+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Source address validation</term>
					<term>Blockchain</term>
					<term>Decentralization</term>
					<term>IP spoofing</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Source IP address spoofing has been a major vulnerability of the Internet for many years. Although much work has been done to study the problem extensively, spoofing continues to occur frequently and has led to many serious network attacks. Inter-AS source address validation (SAV) is considered an important defense method for AS to filter spoofed packets. However, existing work has been unable to drive inter-AS SAV deployment into practice due to the lack of deployment incentives and trust foundation.</p><p>In this paper, we propose a practical and decentralized inter-AS SAV service framework, pSAV , to promote inter-AS SAV deployment. pSAV increases deployment incentives by treating SAV as a payable service and dividing the participant ASes into service subscribers, providers, and auditors. On the control plane, pSAV leverages blockchain as a trust foundation to provide service subscriptions and audits with automatic incentive allocation. On the data plane, pSAV leverages P4-programmable switches to provide flexible and high-performance SAV services. We prototype the pSAV control plane based on Hyperledger Fabric and implement various SAV techniques on Barefoot Tofino switches. The evaluation results show that (1) on the control plane, pSAV blockchain can provide high-performance service transactions (hundreds of transactions per second with second latency), and (2) on the data plane, pSAV can provide various high-throughput (hundreds of Gbps) SAV services using only one programmable switch.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Source IP address spoofing is a severe security concern that has plagued the current Internet for years <ref type="bibr" target="#b0">[1]</ref>- <ref type="bibr" target="#b2">[3]</ref>. By forging IP source addresses, attackers can hide their true identities while launching attacks. To solve the IP spoofing problem, <ref type="bibr" target="#b3">[4]</ref> proposes Source Address Validation Architecture (SAVA), which divides the source address validation (SAV) system into three levels from bottom to top: access network, intra-autonomous system (AS), and inter-AS. Access network SAV technologies <ref type="bibr" target="#b4">[5]</ref> prevent hosts from forging other hosts in the same subnet, while intra-AS SAV technologies <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b6">[7]</ref> constrain their users from sending spoofed packets to other ASes. Both levels of SAV can benefit the entire Internet, but except for the deployers themselves <ref type="bibr" target="#b7">[8]</ref>. Instead, inter-AS SAV <ref type="bibr" target="#b8">[9]</ref>- <ref type="bibr" target="#b12">[13]</ref> is what protects deployer ASes from IP spoofing. By identifying and filtering spoofed packets sent to or flowing through themselves, they can defend against IP spoofing attacks from outside.</p><p>The highly fragmented ownership of network infrastructure makes the actual deployment of inter-AS SAV particularly difficult <ref type="bibr" target="#b13">[14]</ref>. In general, inter-AS SAV deployment faces two main challenges. The first challenge is the lack of deployment incentives. Some SAV technologies are based on cooperation among various deployers. However, the effort (filtering packets) and the reward (benefits of deployment) may vary among ASes. Some deployers benefit less but pay more than others. For example, SPM <ref type="bibr" target="#b8">[9]</ref> creates a security alliance. All ASes are expected to inspect packets from outside the alliance, while trusting packets from ASes inside the alliance. Therefore, ASes at the alliance boundary naturally have to bear more of the burden of inspecting packets. Then ASes at the boundary have less incentive to deploy SPM.</p><p>The second challenge is the lack of a trust foundation. Existing inter-AS SAV technologies usually guarantee the authenticity of control information under the premise of specification and trust. When the number of deployed nodes is small, the trust foundation among ASes is relatively reliable. However, as the number of deployed nodes increases, such a trust foundation is no longer reliable. For example, when a deployer AS maliciously declares the ownership of other ASes' IP addresses, legitimate packets sent by other ASes will be incorrectly filtered. Similarly, an AS never knows whether other ASes in the same alliance are complying with SAV regulations or breaking promises. All of the above hinders the widespread deployment of SAV technologies.</p><p>apf <ref type="bibr" target="#b14">[15]</ref> proposes inter-AS SAV as a payable address (authenticity) protection service to solve the deployment challenge. A service subscriber AS requests services from a service provider AS by paying money, and the service provider is rewarded by filtering spoofed packets for the service subscriber. To some extent, apf increases deployment incentives by redistributing incentives, but it also creates two new problems. First, apf assumes that service providers will deliver SAV services as promised. However, in a real-world distributed inter-AS environment, providers are not necessarily trustworthy and the effectiveness of SAV services is difficult to verify. Second, service providers need to be flexible in providing various SAV services according to the real-time needs of subscribers, which means that the packet processing process has to be constantly changing. However, SAV technology can be very complex. Using software is flexible, but can bring considerable performance degradation, while hardware is high-performance, but requires frequent updates. That said, service providers may find it difficult to adapt to many different SAV technologies.</p><p>In this paper, we propose a practical and decentralized framework for inter-AS SAV service, pSAV . We draw on apf's concept of payable SAV services. On the control plane, we build an inter-AS SAV service subscription and auditing platform with automatic incentive allocation using blockchain as the trust foundation. First, pSAV introduces third-party ASes as service auditors to proactively verify the service quality of providers. Second, by leveraging smart contracts, pSAV ensures that auditors and providers are automatically rewarded when acknowledged by subscribers. Finally, since all transactions are recorded on the blockchain, pSAV holds providers accountable for their services. Also, pSAV 's blockchain provides an authoritative reference and guides other ASes to better subscribe to higher quality services. On the data plane, we leverage P4-programmable switches <ref type="bibr" target="#b15">[16]</ref>, <ref type="bibr" target="#b16">[17]</ref> to flexibly support various SAV technologies. Compared to expensive dedicated hardware and low-performance software, programmable switches can provide high performance, including high throughput and low latency, at a low cost. The challenge is to implement complex SAV technologies on programmable switches, especially labeling-based SAV technologies, which rely on complex cryptographic algorithms. Naive reproduction of these algorithms on programmable switches takes up many hardware stages, which requires recirculation and reduces throughput. Instead, we use a combination of exact match tables to reduce hardware stages with a relatively large memory overhead.</p><p>In this paper, we make four three contributions.</p><p>• We propose pSAV , a practical inter-AS SAV service subscription and audit platform that drives SAV deployment. • We present the pSAV design. On the control plane, pSAV leverages blockchain as a trust foundation to provide distributed service subscription and auditing. On the data plane, pSAV leverages P4-programmable switches to provide flexible and high-performance SAV services. • We prototype pSAV control plane based on Hyperledger Fabric <ref type="bibr" target="#b17">[18]</ref> and build an inter-AS test-bed with Tofino switches and servers. The evaluation shows that (1) pSAV control plane can support high-performance service transactions (hundreds of transactions per second with second latency). ( <ref type="formula">2</ref>) pSAV data plane can support various SAV technologies with high throughput (hundreds of Gbps) with only one programmable switch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. pSAV OVERVIEW</head><p>pSAV aims to provide a practical inter-AS SAV service framework to increase deployment incentives. Figure <ref type="figure" target="#fig_1">1</ref> shows the architecture and workflow of pSAV . Architecture. On the control plane, pSAV includes a blockchain-based platform that provides SAV service subscription and auditing among different ASes. Each AS can register as a service subscriber, provider, or auditor according to its own requirements and capabilities. Subscribers can subscribe to SAV services from any provider, i.e., asking the provider  to deploy a specified SAV mechanism by paying money.</p><p>All subscription transactions are public on the blockchain. Auditors verify the effectiveness of subscribed SAV services by actively spoofing IP addresses. After detecting a substandard SAV service, they publish the results on the blockchain. Once subscribers acknowledge their reports, they are paid, giving them an automatic incentive. Subscribers can then learn authoritative reviews of the effectiveness of various providers' services, which can further guide their future service subscriptions. Based on the service transactions on the control plane, providers issue specified SAV rules on their border routers on the data plane.</p><p>Workflow.</p><p>(1) Each AS can be registered as a subscriber, provider, or auditor. In addition to the AS number (ASN) as the identity of each AS, subscribers shall provide their IP address prefixes, and providers shall provide their lists of available SAV services. (2) Subscribers obtain the service lists and choose to request services from the provider. (3) The corresponding provider may accept or refuse to provide the service. (4) Voluntary auditors obtain services from the blockchain, verify the effect of ongoing services, and submit the audit result to the blockchain. (5) If the subscriber acknowledges the validity of the audit results, the reward that should have been assigned to the provider is automatically redistributed to the auditor. All the above five steps are implemented as separate blockchain transactions on pSAV control plane.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. pSAV CONTROL PLANE</head><p>This section describes how pSAV leverages blockchain as the trust foundation for inter-AS SAV services. Subscribers request SAV services from providers, while scattered auditors verify the effectiveness of SAV services. These processes, i.e., registration, service subscription, and auditing, are recorded as transactions on the blockchain. Besides, a set of nodes acts as endorsers to authenticate the validity of transactions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. AS Registration: Verify Authenticity</head><p>All ASes must be registered before they join the blockchain. Various ASes can register as service subscribers, providers, 2021 IEEE/ACM 29th International Symposium on Quality of Service (IWQOS)</p><p>and auditors with public keys to identify themselves. The key of registration is to ensure the authenticity of the information provided by different ASes. Service subscriber. Subscribers are often small ASes that do not have the technical ability to deploy a particular SAV technology or cannot do the job independently. Therefore, they can declare their packets' characteristics, e.g., IP address, and request other ASes for SAV services by offering rewards. However, to avoid incorrectly filtering traffic belonging to other ASes, the declared IP address prefixes must be verified. To achieve this, we refer to <ref type="bibr" target="#b18">[19]</ref> and implement blockchainbased IP address allocation and delegation to verify the IP prefixes declared by subscribers. Service provider. Providers benefit from providing SAV services, i.e., filtering spoofed traffic for other ASes. At registration, service providers need to declare the services they support and their prices. Besides, they are encouraged to provide their location or routing information for reference purposes. The services can be verified by auditors later, and providers offering substandard services will be penalized. Service auditor. Each participating AS can be an auditor. Auditors gain benefits by verifying services provided by providers. By spoofing packets that should be discarded but get through to the provider, an auditor can prove that the SAV service is invalid. They can then submit the audit reports to the blockchain. After subscribers approve these reports, the rewards that should have been paid to the provider are redistributed to the auditor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Service Subscription: Balance Auditability and Privacy</head><p>The service subscription process includes subscriber requests and provider response. Endorsers verify the validity and authenticity of the request and response transactions. First, the subscriber invokes a smart contract to pull provider information and select a service to subscribe to. Then, the subscriber constructs a subscription proposal that consists of the subscriber identity, protected IP address prefixes, the provider identity, the requested SAV service, the service start and end times, and other optional parameters. Upon receipt of the subscription proposal, endorsers verify the validity and authenticity of the transactions, i.e., whether the proposal conforms to the endorsement rules. For example, the provider should support the subscribed service, and the IP addresses should belong to the subscriber. After a sufficient number of signatures are collected, the legitimate proposal as a transaction is packaged by the orderer node and stored on the blockchain. After the subscription transaction is confirmed, the provider can accept or reject the of the requested service and invoke a smart contract to construct a response proposal. If accepting, providers need to update their packet processing rules on the data plane ( §IV).</p><p>During the above service subscription process, the request and response transactions should be recorded in plain text on the blockchain to allow auditing of the service. However, some privacy information about specific filtering rules should not be disclosed in order to prevent attackers from using this information to steer by the SAV service. For example, packets carrying labels can be made public, while the method of label generation should not. For this purpose, we divide the proposal information into two parts. One part is plain text, while the other should be encrypted first with the public key of the other end. In this way, we can achieve both auditability and privacy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Service Audit: Provide Incentives</head><p>All ASes can act as auditors and send spoofed packets, which providers should filter. Naturally, only auditors who give valid audit results will be rewarded. The key is who and how to confirm the audit result. First, the spoofed packets that should be filtered are either sent to the subscriber or indirectly cause response packets to be sent to the subscriber. Second, subscribers pay for SAV services and naturally expect the service to be trustworthy, i.e., they will not collide with auditors and trap providers. Therefore, the subscriber is the most suitable place to check audit results. Besides, to prevent other malicious auditors from plagiarizing the audit results, only the first approved auditor will be rewarded.</p><p>The auditing process consists of three steps. (1) Volunteer ASes pull the lists of subscribed SAV services from the blockchain. (2) They select some on-going services for auditing. The basic principle of the audit is to spoof packets that providers should filter, and the subscriber should know whether the provider filters the packets. Depending on the audited SAV service, the specific auditing method will be different. Auditors can communicate with the subscriber directly by spoofing the IP addresses of another AS. Theoretically, the communication will fail because providers should filter the spoofed packets. Notice that the path from the auditor to the subscriber should be through the provider to ensure the validity of spoofing. Auditors can also spoof the subscribers' IP addresses and send packets to other ASes. If the subscriber receives response packets, the SAV service is invalid.</p><p>After discovering the vulnerability of the SAV services, auditors can submit their reports to the blockchain. (4) The corresponding subscriber checks whether the audit is valid. Once the subscriber confirms that the audit result is valid, the smart contract will automatically redistribute the incentive INC that should have been paid to the provider. Subsequent audits by other auditors are no longer valid, since only the first acknowledged auditor receives rewards. Given an audit payoff ratio λ between 0 and 1, the auditor receives a portion of the incentive λINC, while the rest is returned to the subscriber. The rate defaults to 1 and can be predefined by the subscriber in the service subscription transaction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. pSAV DATA PLANE</head><p>This section introduces how pSAV implements various SAV services on the data plane using a P4-programmable switch as the border router. Figure <ref type="figure">2</ref> shows the placement of match-action tables. In the first stage, PacketClassification SAV service should be provided for received packets. For the former, each type ID is associated with some necessary control information for filtering, e.g., the theoretical ingress port. For the latter, we define a separate 1-bit metadata field for each SAV service. If an SAV service is provided, the corresponding metadata should be set to 1. In general, the SAV service is AS-level, so the match field should include the IP prefix. Other packet fields can also be included when the service subscribers have more filtering requirements. Then the following stages implement specific SAV services, which will be explained later. On switch CPU, SAV agents interact with the blockchain clients in §III and update the ASIC in real time to provide or cancel specific SAV services. Existing SAV technologies can be generally classified into two methodologies, i.e., routing-based and labeling-based. Next, we will detail how to implement them on programmable ASICs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Routing-based SAV</head><p>The key idea of routing-based SAV is that while attackers may forge IP addresses, they have no control of the forwarding path of packets. Therefore, the border router can verify the authenticity according to the incoming direction of packets, i.e., the ingress port. The legitimate routes decide the theoretical ingress port, either by learning directly from BGP updates <ref type="bibr" target="#b19">[20]</ref> or by actively detecting the true inter-AS routes <ref type="bibr" target="#b20">[21]</ref>.</p><p>Traditionally, packet filtering and legitimate route learning are implemented in router hardware and software, respectively. The implementation is similar on programmable switches, as shown in Figure <ref type="figure">2</ref>. To provide SAV services to various subscribers, IngressFiltering Table matches the type ID and ingress port exactly and decides whether to drop the packets. Considering multiple paths, each type ID may correspond to multiple theoretical ingress ports. Only packets hitting the table, i.e., arriving from the correct port, are not dropped. The table entries are updated in real time by SAV agents on switch CPU. SAV agents obtain type ID-ingress port pairs directly from service subscribers or by performing specified learning algorithms. Since the implementation of SAV agents is similar to existing work, it is not discussed in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Labeling-based SAV</head><p>Labeling-based SAV verifies IP addresses based on mutually agreed tags. A legitimate packet with a real IP address should carry an exclusive label that can be verified. Labelingbased SAV implementation on programmable switches is quite intuitive, as shown in Figure <ref type="figure">2</ref>. In general, we obtain the theoretical label that the packet should carry and then compare the calculated label with the actual label in the packet. If they are not equal, the packet should be discarded. Label generation methods are generally divided into two categories. The first category is static labeling. Packets with the same type ID should share the same label. For example, an AS can correspond to a single label, i.e., all packets from/to the same AS carry the same label. Therefore, we can pre-store the labels of each type ID in LabelAssignment Table <ref type="table">.</ref> To improve safety, the SAV agent may update the static labels periodically. The second type is dynamic labeling. Different packets have different labels. Labels are often generated by cryptographic computation and are related to packet fields, such as IP addresses, origin or destination AS, packet content. Since it is impossible to store a separate label for each packet, the label should be calculated in real time on the ASIC.</p><p>The challenge lies in the gap between the limited programmability of programmable ASICs and the complexity of cryptography algorithms. On the one hand, some common cryptography algorithms, e.g., AES, are composed of many sequential operations with dependencies between them. On the other hand, programmable ASICs only support basic arithmetic operations, e.g., shift and xor. In other words, many hardware stages are required to piece together those basic arithmetic operations to implement cryptography algorithms. However, the number of stages on the ASIC is limited. Although we can use recirculation to make a packet traverse the pipeline more than once, recirculation has the drawbacks of increasing packet delay and reducing bandwidth.</p><p>Given the above, next, we will describe how to support cryptography algorithms on the ASIC with as few pipeline stages as possible. Common encryption algorithms, e.g., AES and 3DES, perform several transformation rounds to generate the final output, which is the label, based on some input fields. Each round consists of several processing steps. Although there are various types of symmetric encryption algorithms, they can be decomposed into four types of building blocks. Substitution (S). The input block is divided into several multibit pieces. A substitution box (S-box) replaces the input piece with an output piece according to a non-linear transformation. The S-box can be implemented directly with an exact match table on programmable ASIC, as shown in Figure <ref type="figure" target="#fig_2">3(a)</ref>. Substitution takes up only one hardware stage, but the memory overhead incurred is relatively more substantial. Each input piece value corresponds to an exact match entry. Permutation (P). The output units (e.g., a bit) are rearranged based on input units according to a permutation box (P-box), as shown in Figure <ref type="figure" target="#fig_2">3</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>(b). A naive permutation implementation requires only one stage with many concurrent modification</head><formula xml:id="formula_0">b i [ j] = a x [y] b 0 = a 0 &amp; 0b10 &lt;&lt; 2 + a 0 &amp; 0b01 &lt;&lt; 2 + a 0 &amp; 0b01 &lt;&lt; 1 + a 1 &amp; 0b10 &gt;&gt; 1 b 1 = a 1 &amp; 0b01 &lt;&lt; 3 + a 1 &amp; 0b01 &lt;&lt; 2 + a 0 &amp; 0b10 + a 1 &amp; 0b10 &gt;&gt; 1 a 0 [0] a 0 [1] a 1 [0] a 1 [1] b 0 [0] b 0 [1] b 0 [2] b 0 [3] b 1 [0] b 1 [1] b 1 [2] b 1 [3] b i [ j] = a x [y] 2-bit a 0 2-bit a 1 4-bit b 0 4-bit b 1 p i [ j] = [x,y] b 0 = S_Box[a 0 ] b 1 = S_Box[a 1 ]</formula><note type="other">Input Output tution S_Box Match Action Match Action</note><p>(a) Substitution. operations. However, considering permutation as a step of the whole encryption algorithm, one stage is insufficient. For example, if a bit is used as the basic unit of operation, we should first fetch each bit from the input pieces. For each output piece, first, we replace each bit value with the corresponding input bit. Then, we shift this bit according to the offset between this bit's position in the input and output piece. Finally, we sum all shifted values to get each output piece. The number of hardware stages required grows linearly with the width of the output piece and will increase with the number of transformation rounds. In contrast to this, we use exact match tables to implement permutation to reduce the stage overhead. A naive design uses one large exact match table that matches the input piece (a-bit) and gives the output piece (b-bit). Then we need 2 a table entries, each containing a + b bits. To save memory, we can use more exact tables to match each part of the input piece separately and give the corresponding outputs. The final output should be the OR of all outputs. Assuming that each table matches c input bits, we need a/c tables. Each table contains 2 c entries, and each entry contains c + b bits. The final result should be OR of c outputs, which requires log 2 c stages. MixColumn (M). Each input piece (column) is treated as a polynomial over a finite field and then multiplied with a fixed polynomial. Polynomial multiplication can be translated into entry multiplication and addition operations. Addition is XOR, while multiplication can be treated as a combination of XOR and shift. However, this implementation requires many hardware stages. According to matrix multiplication, each position in the output column is determined by only one input column. Therefore, we can use multiple exact match tables to implement MixColumn instead. Each input column corresponds to one exact match table, which modifies the value of affected output positions. Similar to the permutation operation, the final result should be the OR of all outputs. KeyMixing (K). The input block is combined with a subkey using bitwise XOR. The subkeys are derived from a main key using a key schedule, which is an algorithm to generate subkeys. In pSAV , key schedule is implemented in each SAV agent on switch CPU and updates the subkeys in the form of table entries. Therefore, two stages are needed -one for subkey assignment and the other for XOR operations.</p><formula xml:id="formula_1">mentation a 0 [0] a 0 [1] a 1 [0] a 1 [1] 24 b 0 [0] b 0 [1] b 0 [2] b 0 [3] b 1 [0] b 1 [1] b 1 [2] b 1 [3] p 0 [0] p 0 [1] p 0 [2] p 0 [3] p 1 [0] p 1 [1] p 1 [2] p 1 [3] b i [ j] = a x [y] 2-bit a 0 2-bit a 1 4-bit b 0 4-bit b 1 p i [ j] = [x,y] b 0 = a 0 &amp; 0b10 &lt;&lt; 2 + a 0 &amp; 0b01 &lt;&lt; 2 + a 0 &amp; 0b01 &lt;&lt; 1 + a 1 &amp; 0b10 &gt;&gt; 1 b 1 = a 1 &amp; 0b01 &lt;&lt; 3 + a 1 &amp; 0b01 &lt;&lt; 2 + a 0 &amp; 0b10 + a 1 &amp; 0b10 &gt;&gt; 1 Input Output tation a 0 [0] a 0 [1] a 1 [0] a 1 [1] b 0 [0] b 0 [1] b 0 [2] b 0 [3] b 1 [0] b 1 [1] b 1 [2] b 1 [3] b i [ j] = a x [y]</formula><p>Common encryption algorithms such as DES, AES, and 3DES can be implemented by a combination of the above processing steps. Limited by the hardware stages in a pipeline, recirculation is needed to complete an encryption algorithm consisting of multiple encryption rounds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. EXPERIMENTAL EVALUATION</head><p>We evaluate pSAV using 2 Barefoot Tofino switches and four servers, as shown in Figure <ref type="figure">4</ref>. On the data plane, four ASes are the subscriber, provider, auditor, and attacker, respectively. AS2 acts as a service provider and provides SAV services on its border router s2, which is a Tofino switch. We emulate three border routers (s1, s3, s4) with one Tofino switch by allocating individual ports to each emulated router. Further details about this switch emulation can be found in <ref type="bibr" target="#b21">[22]</ref>. All links are 10 Gbps. On the control plane, to facilitate the access control for participating ASes, we use Hyperledger Fabric to build our test blockchain. We implement SAV contracts with 650 lines of GO language to simulate service subscription and audit. We run four virtual machines within a single physical server and run a pSAV blockchain node in each of them. All virtual machine nodes are running on Ubuntu 18.04. One node acts as the orderer and offers Fabric CA functionality, and the other three nodes correspond to three participant ASes (AS1, AS2, AS3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Blockchain Performance on Control Plane</head><p>In this part, we test the blockchain performance, including the transaction throughput and latency on the control plane. All transactions can be generally classified into two types, i.e., writes and reads. Read operations differ from write operations because the blockchain state does not change. Write-related Authorized licensed use limited to: Tsinghua University. Downloaded on December 31,2022 at 08:29:55 UTC from IEEE Xplore. Restrictions apply. transactions include registration, service request from the subscriber, response from the provider, audit result submission from the auditor, and confirmation from the subscriber. Below we compare the performance of read and write operations.</p><p>Figure <ref type="figure">5</ref>(a) shows the transaction throughput for different transaction sending rates. We can see that the read throughput is slightly larger than write throughput. When the transaction sending rate is small, both the read throughput and write throughput increase with the sending rate, and most transactions can be finished in time. However, when the sending rate exceeds 1100 transactions per second (TPS), the throughput no longer increases. Figure <ref type="figure">5</ref>(a) shows the minimum, maximum, and mean transaction latency for different transaction sending</p><p>We can see that when the transaction is not frequent, e.g., smaller than 900 TPS, both the read and write latency is smaller than one second. The latency increases sharply when the transaction rate exceeds 900 TPS and can be tens of seconds. Based on the above, we can conclude that currently, pSAV can easily support hundreds of transactions per second with no more than one-second latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. SAV Performance and Overhead on Data Plane</head><p>In this part, we evaluate the performance and overhead of SAV implementation on the data plane. We mainly consider the labeling-based SAV implementation, which relies on cryptographic computation, since other situations, such as static labels and routing-based SAV, are quite simple.</p><p>1) Memory and Stage Overhead: Recall that we break down cryptographic algorithms into different blocks and use exact match tables to reduce the stage overhead in the cost of increased memory usage IV-B. Figure <ref type="figure" target="#fig_4">6</ref> shows the memory and stage overhead of each block by assuming that the input and output data are of the same width, i.e., 64, 128, and 256 bits. We can see that for permutation and mixcolumn operations, with the match unit width increasing, they require more SRAM and fewer stages. However, for substitution, the stage number is always one. When we take an 8-bit match unit, even 128-bit permutation and mixcolumn operation require five stages and less than 0.1 MB SRAM, which is far smaller than the current available SRAM in programmable switches.</p><p>2) Throughput: We implement the label generation with various cryptography algorithms on the Tofino switch. Based on the total stage number in one pipeline and the required stage number for label generation, we can obtain the recirculation number. Recall that the Tofino switch has two reserved 100 Gbps loopback ports, while all other physical ports can also be  configured as loopback mode. Therefore, the theoretical maximum throughput is equal to the total port bandwidth (3.4 Tbps for a 2-pipe switch or 6.6 Tbps for a 4-pipe switch) divided by the required recirculation number. Figure <ref type="figure" target="#fig_6">7</ref>(a) shows the maximum throughput (Gbps) using cryptographic algorithms including DES (9 recirculations), AES-128 (4 recirculations), AES-192 (5 recirculations), AES-256 (6 recirculations). We can see that DES achieves smaller throughput (320Gbps) than AES since DES has the most encryption rounds <ref type="bibr" target="#b15">(16)</ref>. The throughput of AES decreases as the encryption round increases, and AES-256 has the smallest throughput (457 Gbps). By comparison, the software cryptography implementation by DPDK achieves no more 30 Gbps throughput, and the Intel Cryptodev QAT (Intel QuickAssist Technology) achieves &lt; 100 Gbps throughput with hardware acceleration <ref type="bibr" target="#b22">[23]</ref>. Figure <ref type="figure" target="#fig_6">7</ref>(a) further considers packet sizes and shows the Mpps (M packet per second) results considering that programmable switches can process various packet sizes at line rate. From the above, we can conclude that the programmable switch can achieve larger throughput than existing software (DPDK SW) and hardware (Intel QAT) cryptographic implementation, benefiting from the large total bandwidth of programmable switches. Larger throughput means larger service capacity and also more revenues from the perspective of service providers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. RELATED WORK</head><p>Inter-AS SAV technologies. Routing-based SAV technologies <ref type="bibr" target="#b19">[20]</ref>, <ref type="bibr" target="#b23">[24]</ref> verify the authenticity of source IP addresses according to the incoming direction of packets, i.e., the ingress port. Labeling-based SAV technologies <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b24">[25]</ref>- <ref type="bibr" target="#b26">[27]</ref> assume that legitimate packets with authentic source IP addresses should carry an exclusive cryptographic label and verifies source IP addresses based on cryptography. This work focus on specific SAV technologies. apf <ref type="bibr" target="#b14">[15]</ref> is closest to our work. We both take inter-AS SAV as a service to promote deployment. Compared with apf, we solve the trust foundation issue fundamentally by leveraging blockchain to provide automotive incentive allocation. Besides, we further promote deployment by introducing the programmable switches to implement SAV techniques. P4-programmable switch. Programmable switches offer excellent performance such as high throughput and low latency <ref type="bibr" target="#b15">[16]</ref>, <ref type="bibr" target="#b16">[17]</ref>, and sufficient programmability via allowing users to flexibly define the operation for each packet, including the parser, the pipeline, and the deparser. Such flexibility has motivated much research work to enhance network functions and applications with programmable switches. <ref type="bibr" target="#b27">[28]</ref>- <ref type="bibr" target="#b29">[30]</ref> offload network functions such as load balancing, heavyhitter detection, and monitoring to programmable ASICs, while <ref type="bibr" target="#b30">[31]</ref>- <ref type="bibr" target="#b33">[34]</ref> explore accelerating Internet applications and securing networks. Blockchain-based auditing. The distributed trust model motivates much research work to utilize blockchain to implement auditing schemes. <ref type="bibr" target="#b34">[35]</ref> proposes a blockchain-based incentivizing and auditing framework for decentralized storage. <ref type="bibr" target="#b35">[36]</ref> proposes a deduplicatable data auditing mechanism using blockchain. <ref type="bibr" target="#b36">[37]</ref> proposes a blockchain-based public and efficient certificate audit scheme for TLS connections, <ref type="bibr" target="#b37">[38]</ref>, <ref type="bibr" target="#b38">[39]</ref> utilizes blockchain to audit released IoT systems. In this paper, we build a blockchain-based SAV platform to provide decentralized and auditable SAV services with automotive incentives,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. CONCLUSION</head><p>In this paper, we propose pSAV , a practical and decentralized inter-AS SAV service framework to promote inter-AS SAV deployment. pSAV takes SAV as a payable service and divides participant ASes into service subscribers, providers, and auditors. Leveraging blockchain as the trust foundation, pSAV enables service providers accountable for their offered services. Meanwhile, pSAV allocates incentives to auditors for detecting unqualified services. Besides, pSAV proposes a flexible, high-performance, and low-cost SAV service implementation mechanism for providers.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>This work was supported by the National Natural Science Foundation of China (Grant No. 61772307) and National Key Research and Development Program of China (Grant No. 2018YFB1800405). Lin He and Ying Liu are the corresponding authors.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Architecture and workflow of pSAV .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .</head><label>3</label><figDesc>Illustration of encryption steps.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .Fig. 5 .</head><label>45</label><figDesc>Fig. 4. Evaluation test-bed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 6 .</head><label>6</label><figDesc>Memory and stage overhead of various operations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Gbps under all packet sizes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>7 .</head><label>7</label><figDesc>Mpps under different packet sizes. Fig. Maximum throughput of labeling-based SAV with various cryptographic algorithms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Attacker Provider Data Plane Subscriber Audit Coordinator Filter!</head><label></label><figDesc></figDesc><table><row><cell>Control Plane</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Block i-2</cell><cell>Block i-1</cell><cell>Block i</cell><cell>Block i+1</cell><cell>Block i+2</cell></row><row><cell></cell><cell cols="3">pSAV Smart Contracts</cell><cell></cell></row><row><cell cols="2">1. Register 2. Request 5. Acknowledge</cell><cell>1. Register 3. Response</cell><cell cols="2">1. Register Service Subscription AS Registration 4. Publish Service Audit</cell></row><row><cell></cell><cell cols="2">Normal Traffic</cell><cell cols="2">Spoofed Traffic (For Audit)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Table classifies packets with a type ID and decides which Match-action table placement on programmable switches to accommodate various SAV technologies.</figDesc><table><row><cell cols="5">Programmable Switch (Border Router)</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Switch CPU</cell></row><row><cell>Routing Agent</cell><cell>SAV1</cell><cell>SAV2</cell><cell>SAV Agent SAV3</cell><cell>SAV4</cell><cell>…</cell></row><row><cell></cell><cell>Update</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>Switch ASIC</cell></row><row><cell>Stage 1</cell><cell cols="3">Routing-Based SAV</cell><cell></cell><cell>Stage 2~n</cell></row><row><cell>Routing Table</cell><cell cols="3">IngressFiltering Table</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="3">Labeling-Based SAV</cell><cell></cell></row><row><cell>PacketClassification Table</cell><cell cols="3">Real-Time Label Generation AES256 UMAC … 3DES Static Label Assignment</cell><cell cols="2">LabelComparison Table</cell></row><row><cell></cell><cell cols="3">LabelAssignment Table</cell><cell></cell><cell></cell></row><row><cell>Fig. 2.</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0">Authorized licensed use limited to: Tsinghua University. Downloaded on December 31,2022 at 08:29:55 UTC from IEEE Xplore. Restrictions apply.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">On the state of ip spoofing defense</title>
		<author>
			<persName><forename type="first">Toby</forename><surname>Ehrenkranz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jun</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Internet Technology (TOIT)</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1" to="29" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<author>
			<persName><forename type="first">Sam</forename><surname>Kottler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">February 28th ddos incident report</title>
				<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">you have a problem: On the feasibility of large-scale web vulnerability notification</title>
		<author>
			<persName><forename type="first">Ben</forename><surname>Stock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Giancarlo</forename><surname>Pellegrino</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX Security</title>
				<meeting>USENIX Security</meeting>
		<imprint>
			<date type="published" when="2016">2016. 2016</date>
			<biblScope unit="page" from="1015" to="1032" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">A source address validation architecture (sava) testbed and deployment experience</title>
		<author>
			<persName><forename type="first">Jianping</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jun</forename><surname>Bi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="volume">5210</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Source address validation improvement (savi) framework. RFC7039</title>
		<author>
			<persName><forename type="first">Jianping</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><surname>Bi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Defeating denial of service attacks which employ ip source address spoofing. RFC 2827</title>
		<author>
			<persName><surname>Ferguson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Ingress filtering for multihomed networks</title>
		<author>
			<persName><forename type="first">Fred</forename><surname>Baker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Pekka</forename><surname>Savola</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BCP</title>
		<imprint>
			<biblScope unit="volume">84</biblScope>
			<date type="published" when="2004-03">March, 2004</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
	<note>RFC</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Understanding the efficacy of deployed internet source address validation filtering</title>
		<author>
			<persName><forename type="first">Robert</forename><surname>Beverly</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Arthur</forename><surname>Berger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th ACM SIGCOMM conference on Internet measurement</title>
				<meeting>the 9th ACM SIGCOMM conference on Internet measurement</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="356" to="369" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Spoofing prevention method</title>
		<author>
			<persName><forename type="first">Anat</forename><surname>Bremler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">-</forename><surname>Barr</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hanoch</forename><surname>Levy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings IEEE 24th Annual Joint Conference of the IEEE Computer and Communications Societies</title>
				<meeting>IEEE 24th Annual Joint Conference of the IEEE Computer and Communications Societies</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="536" to="547" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Passport: Secure and adoptable source authentication</title>
		<author>
			<persName><forename type="first">Xin</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ang</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaowei</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Wetherall</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">On the effectiveness of route-based packet filtering for distributed dos attack prevention in power-law internets</title>
		<author>
			<persName><forename type="first">Kihong</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heejo</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM computer communication review</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="15" to="26" />
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">On powerlaw relationships of the internet topology</title>
		<author>
			<persName><forename type="first">Michalis</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Petros</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christos</forename><surname>Faloutsos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM computer communication review</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="251" to="262" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Controlling ip spoofing through interdomain packet filters</title>
		<author>
			<persName><forename type="first">Xin</forename><surname>Zhenhai Duan</surname></persName>
		</author>
		<author>
			<persName><surname>Yuan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE transactions on Dependable and Secure computing</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="22" to="36" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Network hygiene, incentives, and regulation: deployment of source address validation in the internet</title>
		<author>
			<persName><forename type="first">Matthew</forename><surname>Luckie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Beverly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security</title>
				<meeting>the 2019 ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="465" to="480" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Address protection-as-a-service an inter-as framework for ip spoofing resilience</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Ren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2019 IEEE Global Communications Conference (GLOBECOM)</title>
				<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">The P4 Language Consortium. The p4 language specificatio</title>
		<ptr target="https://goo.gl/Sq3TRK" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Barefoot</forename><surname>Networks</surname></persName>
		</author>
		<author>
			<persName><surname>Tofino</surname></persName>
		</author>
		<author>
			<persName><surname>Website</surname></persName>
		</author>
		<ptr target="https://www.barefootnetworks.com/products/brief-tofino/" />
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Hyperledger fabric: a distributed operating system for permissioned blockchains</title>
		<author>
			<persName><forename type="first">Elli</forename><surname>Androulaki</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Artem</forename><surname>Barger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the thirteenth EuroSys conference</title>
				<meeting>the thirteenth EuroSys conference</meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="1" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Ipchain: Securing ip prefix allocation and delegation with blockchain</title>
		<author>
			<persName><forename type="first">Jordi</forename><surname>Paillisse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Miquel</forename><surname>Ferriol</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="1236" to="1243" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Constructing inter-domain packet filters to control ip spoofing based on bgp updates</title>
		<author>
			<persName><forename type="first">Xin</forename><surname>Zhenhai Duan</surname></persName>
		</author>
		<author>
			<persName><surname>Yuan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INFOCOM</title>
				<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Learning the valid incoming direction of ip packets</title>
		<author>
			<persName><forename type="first">Jun</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jelena</forename><surname>Mirkovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="399" to="417" />
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Turbonet: Faithfully emulating networks with programmable switches</title>
		<author>
			<persName><forename type="first">Jiamin</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yu</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2020 IEEE 28th International Conference on Network Protocols (ICNP)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Dpdk intel cryptodev performance report</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">rfc2827: network ingress filtering: defeating denial of service attacks which employ ip source address spoofing</title>
		<author>
			<persName><forename type="first">Paul</forename><surname>Ferguson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Daniel</forename><surname>Senie</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Ip authentication header</title>
		<author>
			<persName><forename type="first">Stephen</forename><surname>Kent</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Randall</forename><surname>Atkinson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Pavi: Bootstrapping accountability and privacy to ipv6 internet</title>
		<author>
			<persName><forename type="first">Lin</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gang</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ying</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jiahai</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Networking</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="695" to="708" />
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Revisiting inter-as ip spoofing let the protection drive source address validation</title>
		<author>
			<persName><forename type="first">Yihao</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ying</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gang</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lin</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE 36th International Performance Computing and Communications Conference (IPCCC)</title>
				<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Scalable load balancing using programmable data planes</title>
		<author>
			<persName><forename type="first">Naga</forename><surname>Katta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mukesh</forename><surname>Hira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SOSR</title>
				<meeting>SOSR</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Packet subscriptions for programmable asics</title>
		<author>
			<persName><forename type="first">Theo</forename><surname>Jepsen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Masoud</forename><surname>Moshref</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of HotNets</title>
				<meeting>HotNets</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Keysight: Troubleshooting programmable switches via scalable high-coverage behavior tracking</title>
		<author>
			<persName><forename type="first">Yu</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jun</forename><surname>Bi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tong</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kai</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cheng</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICNP. IEEE</title>
				<meeting>ICNP. IEEE</meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Netcache: Balancing key-value stores with fast in-network caching</title>
		<author>
			<persName><forename type="first">Xin</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaozhou</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SOSR</title>
				<meeting>SOSR</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Netchain: Scale-free sub-rtt coordination</title>
		<author>
			<persName><forename type="first">Xin</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaozhou</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of NSDI. USENIX</title>
				<meeting>NSDI. USENIX</meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">High-performance network testing driven by programmable switches</title>
		<author>
			<persName><forename type="first">Yu</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zhaowei</forename><surname>Xi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CoNEXT</title>
				<meeting>CoNEXT</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">P4dad: Securing duplicate address detection using p4</title>
		<author>
			<persName><forename type="first">Peng</forename><surname>Kuang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ying</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lin</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE ICC</title>
				<meeting>IEEE ICC</meeting>
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<author>
			<persName><forename type="first">Yuefeng</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Huayi</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anxin</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cong</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Man</forename><forename type="middle">Ho</forename><surname>Au</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qian</forename><surname>Wang</surname></persName>
		</author>
		<idno type="arXiv">arXiv:2005.05531</idno>
		<title level="m">Towards privacy-assured and lightweight on-chain auditing of decentralized storage</title>
				<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">A blockchain-enabled deduplicatable data auditing mechanism for network storage services</title>
		<author>
			<persName><forename type="first">Yang</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cheng</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guojun</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zheng</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quanrun</forename><surname>Zeng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Emerging Topics in Computing</title>
		<imprint>
			<biblScope unit="page" from="1" to="1" />
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Certchain: Public and efficient certificate audit based on blockchain for tls connections</title>
		<author>
			<persName><forename type="first">Jing</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shixiong</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quan</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kun</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Shouling</forename><surname>Ji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ruiying</forename><surname>Du</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE INFOCOM</title>
				<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Smartcrowd: Decentralized and automated incentives for distributed iot system detection</title>
		<author>
			<persName><forename type="first">Bo</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ke</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">39th IEEE International Conference on Distributed Computing Systems, ICDCS 2019</title>
				<meeting><address><addrLine>Dallas, TX, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019">July 7-10, 2019. 2019</date>
			<biblScope unit="page" from="1106" to="1116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Smartretro: Blockchain-based incentives for distributed iot retrospective detection</title>
		<author>
			<persName><forename type="first">Bo</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Qi</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">15th IEEE International Conference on Mobile Ad Hoc and Sensor Systems, MASS 2018</title>
				<meeting><address><addrLine>Chengdu, China</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2018">October 9-12. 2018. 2018</date>
			<biblScope unit="page" from="308" to="316" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
