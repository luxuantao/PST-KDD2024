<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A PPM-like, tag-based branch predictor</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Pierre</forename><surname>Michaud</surname></persName>
							<email>pmichaud@irisa.fr</email>
							<affiliation key="aff0">
								<orgName type="institution">IRISA/INRIA Campus de Beaulieu</orgName>
								<address>
									<postCode>35000</postCode>
									<settlement>Rennes</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A PPM-like, tag-based branch predictor</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note type="submission">Submitted 1/05;</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-01-01T13:26+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper describes cbp1.5, the tag-based, global-history predictor derived from PPM that was rank five at the first Championship Branch Prediction competition. This predictor is a particular instance of a family of predictors which we call GPPM. We introduce GPPMideal, an ideal GPPM predictor. It is possible to derive cbp1.5 from GPPM-ideal by introducing a series of degradations corresponding to real-life constraints. We characterize cbp1.5 by quantifying the impact of each degradation on the distributed CBP traces.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>This paper describes the predictor whose final ranking was five at the first Championship Branch Prediction competition. In the remainder of this paper, we refer to this predictor as cbp1.5. Predictor cbp1.5 is a particular instance of a family of predictors which we call GPPM, for global-history PPM-like predictors. GPPM predictors feature two tables, a bimodal table and a global table. The bimodal table is indexed with the branch PC, and each bimodal entry contains a prediction associated with the branch. The global table consists of several banks. Each bank is indexed with a different global-history length. Each global entry contains a tag for identifying the global-history value owning the entry, and a prediction associated with this global history value. The prediction is given by the longest matching global-history value, or by the bimodal table if there is a tag miss in all the global banks. Predictor cbp1.5 can be viewed as a degraded version of an ideal GPPM predictor which we call GPPM-ideal. One can go from GPPM-ideal to cbp1.5 by introducing successive "degradations" corresponding to real-life constraints. We call degradation a modification that increases the number of mispredictions. By quantifying each degradation, one can get insight on the behavior of the application and on potential ways to improve the predictor.</p><p>The paper is organized as follows. Section 2 describes predictor cbp1.5. Section 3 describes GPPM-ideal. Section 4 studies a degradation path from GPPM-ideal to cbp1.5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Description of predictor cbp1.5 2.1 Overview</head><p>Predictor cbp1.5 is a global-history based predictor derived from PPM. PPM was originally introduced for text compression <ref type="bibr" target="#b0">[1]</ref>, and it was used in <ref type="bibr" target="#b1">[2]</ref> for branch prediction. Figure <ref type="figure" target="#fig_0">1</ref> shows a synopsis of cbp1.5, which features 5 banks. It can be viewed as a 4 th order approximation to PPM <ref type="bibr" target="#b2">[3]</ref>, while YAGS <ref type="bibr" target="#b3">[4]</ref>, which is a GPPM predictor too, can be viewed as a 1 st order approximation. The leftmost bank on Figure <ref type="figure" target="#fig_0">1</ref> is a bimodal predictor <ref type="bibr" target="#b4">[5]</ref>. We refer to this bank as bank 0. It has 4k entries, and is indexed with the 12 least significant The 4 other banks are indexed both with the branch PC and some global history bits : banks 1,2,3 and 4 are indexed respectively with the 10,20,40 and 80 most recent bits in the 80-bit global history, as indicated on Figure <ref type="figure" target="#fig_0">1</ref>. When the number of global history bits exceeds the number of index bits, the global history is "folded" by a bit-wise XOR of groups of consecutive history bits, then it is XORed with the branch PC as in a gshare predictor <ref type="bibr" target="#b4">[5]</ref>. For example, bank 3 is indexed with 40 history bits, and the index may be implemented as pc[0 : 9] ⊕ h[0 : 9] ⊕ h[10 : 19] ⊕ h[20 : 29] ⊕ h[30 : 39] where ⊕ denotes the bit-wise XOR. Section 2.4 describes precisely the index functions that are used in cbp1.5. Each of the banks 1 to 4 has 1k entries. Each entry contains an 8-bit tag, a 3-bit up-down saturating counter, and a u bit (u stands for "useful entry", its function is described in Section 2.3), for a total of 12 bits per entry. So each of the banks 1 to 4 uses 1k × (3 + 8 + 1) = 12 Kbits. The total storage used by the predictor is 16k + 4 × 12k = 64 Kbits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Obtaining a prediction</head><p>At prediction time, the 5 banks are accessed simultaneously. While accessing the banks, an 8-bit tag is computed for each bank 1 to 4. The hash function used to compute the 8-bit tag is different from the one used to index the bank, but it takes as input the same PC and global history bits.</p><p>Once the access is done, we obtain four 8-bit tags from banks 1 to 4, and 5 prediction bits from banks 0 to 4 (the prediction bit is the most significant bit of the 3-bit counter). We obtain a total of 4 × 8 + 5 = 37 bits. These 37 bits are then reduced to a 0/1 final prediction. The final prediction is the most significant bit of the 3-bit counter associated with the longest matching history. That is, if the computed tag on bank 4 matches the stored tag, we take the prediction from bank 4 as the final prediction. Otherwise, if the computed tag on bank 3 matches the stored tag, we take the prediction from bank 3. And so on. Eventually, if there is a tag mismatch on each bank 4 to 1, the final prediction is given by bank 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Predictor update</head><p>At update time (for instance at instruction retirement), we know the prediction, from which bank X ∈ [0, 4] it was obtained, and whether the prediction was correct or not.</p><p>Update 3-bit counter. We update the 3-bit counter on bank X, the one that provided the final prediction, and only that counter. This is the classical method <ref type="bibr" target="#b5">[6]</ref> : the counter is incremented if the branch is taken, decremented otherwise, and it saturates at values 7 and 0. In general, people prefer to use 2-bit counters instead of 3-bit counters. However, in cbp1.5, 3-bit counters generate less mispredictions.</p><p>Allocate new entries. If X ≤ 3, and if the prediction was wrong, we allocate one or several entries in banks n &gt; X (there is no need to allocate new entries if the prediction was correct). Actually, there was a tag miss on each bank n &gt; X at prediction time. The allocation consists of "stealing" the corresponding entries by writing the computed tag for the current branch. This is done as follows. We read the 4 − X u bits from banks X + 1 to 4. If all u bits are set, we chose a random Y ∈ [X + 1, 4] and "steal" the entry only on bank Y . Otherwise, if at least one among the 4 − X u bits is reset, we "steal" only the entries which have their u bit reset.</p><p>As said previously, a "stolen" entry is reinitialized with the computed tag of the current branch. Moreover, the associated u bit is reset. Finally, the associated 3-bit counter is reinitialized either with value 3 (weakly not-taken) or 4 (weakly taken). This is done as follows. We read the m bit from bank 0. If m is set, we reinitialize the 3-bit counter according to the branch outcome, i.e., value 4 if the branch is taken, value 3 if the branch is not taken. Otherwise, if m is reset, we reinitialize the 3-bit counter according to the bimodal prediction from bank 0, i.e., value 3 if the bimodal prediction is not-taken, value 4 if the bimodal prediction is taken.</p><p>Updating bits u and m. If the final prediction was different from the bimodal prediction (which implies X &gt; 0), we update the u bit in bank X and the m bit in bank 0 as follows. If the final prediction was correct, bits m and u are both set, otherwise they are both reset. The rationale is as follows. If the final prediction differs from the bimodal prediction, there are two situations :</p><p>• Bimodal is wrong. It means that the entry in bank X is a useful entry. By setting the u bit, we indicate that we would like to prevent this entry from being stolen by another branch. By setting the m bit, we indicate that the branch outcome exhibits</p><formula xml:id="formula_0">+ + h[20] h[0]</formula><p>20−bit history folded onto 8 bits</p><formula xml:id="formula_1">+ h[0] h[80]</formula><p>80−bit history folded onto 10 bits correlation with the global history value, so new entries for that branch should be allocated by reinitializing the 3-bit counter according to the actual branch outcome.</p><p>• Bimodal is correct. Prediction from bank X was wrong. This happens when a branch exhibits randomness in its behavior, and its outcome is not correlated with the global history value (or the global history is not long enough). In that case, we are allocating many useless entries. Moreover, because allocation is done only upon mispredictions, it is safer to initialize 3-bit counters with the bimodal prediction, which represents the most likely branch outcome. So we reset the m bit to mean this. Moreover, we reset the u bit to indicate that the entry has not been proven useful, so it can be stolen if another branch claims the entry.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Folded global history</head><p>A possible way to implement history folding would be to use a tree of XORs. For example, for the 40-bit history, h[0 : 9] ⊕ h[10 : 19] ⊕ h[20 : 29] ⊕ h[30 : 39] requires a depth-2 tree (assuming 2-input XORs). For the 80-bit history, this requires a depth-3 tree. In practice, history folding can be implemented by taking advantage of the fact that we are not folding a random value, but a global history value derived from the previous history value <ref type="bibr" target="#b2">[3]</ref>. Figure <ref type="figure" target="#fig_1">2</ref> shows two examples of how global history folding can be implemented with a circular shift register (CSR) and a couple of XORs. In cbp1.5, there is a 10-bit CSR in front of each bank 2 to 4 to compute the index. The index is then obtained by a bitwise XOR of the CSR bits with pc The tag is computed as pc[7 : 0] ⊕ CSR1 ⊕ (CSR2 &lt;&lt; 1). We used two CSRs because a single CSR is sensitive to periodic patterns in the global history, which is a frequent case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Description of GPPM-ideal</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Definitions</head><p>Our definition of GPPM-ideal is based on the notion of sequence frequency. We define the program control flow (PCF) as a finite sequence (B i ) of dynamic basic blocks B i ∈ B where B is the set of all static basic blocks constituting the program text. We denote S(n) the set of all possible sequences of n consecutive blocks. In particular, S(1) = B. We denote S(m, n) = k∈[m,n] S(k) the set of sequences whose length is between m and n. Given m &lt; n and two sequences u ∈ S(m) and s ∈ S(n), we will say that u is a suffix of s, and denote it u ≺ s, if sequence u matches the last m blocks of s.</p><p>For each sequence s, we define its frequency f (s) as the number of occurrences of s in the PCF. We assume that each block B ∈ B, hence each sequence, has only two possible successor blocks in the PCF, which is true for blocks ending on a conditional branch. We denote 1 s and 0 s the most frequent and least frequent successor block of sequence s in the PCF, respectively. By definition, ∀s ∈ S(n), we have f (s.1 s ) ≥ f (s.0 s ), where we denote s.1 s (resp. s.0 s ) the sequence from S(n + 1) formed by appending block 1 s (resp. 0 s ) to sequence s. The following example illustrates the definitions. Consider the short PCF below : aababcdaaabcd The set of blocks is B = S(1) = {a, b, c, d}. The set of two-block sequences is S(2) = {aa, ab, ba, bc, cd, da}. The frequency of sequence s = aa is f (s) = 3, and we have 1 s = b, <ref type="formula">3</ref>) is a suffix of sequence babcd ∈ S(5), that is bcd ≺ babcd.</p><formula xml:id="formula_2">0 s = a,f (s.1 s ) = f (aab) = 2,f (s.0 s ) = f (aaa) = 1. Sequence bcd ∈ S(</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">GPPM-ideal</head><p>The GPPM-ideal predictor consists of a set T of sequences. The number of sequences in T is denoted |T |. Sequences in T have various lengths, which we assume are always strictly greater than one. We also assume that the content of T is fixed for the whole PCF. For each B j in the PCF, we search for the longest sequence</p><formula xml:id="formula_3">s = B j−n+1 • • • B j in T , with n ≥ 2.</formula><p>If we do not find such a sequence, the default sequence is s = B j . Then the prediction from GPPM-ideal is 1 s . If B j+1 = 1 s , this is a correct prediction; otherwise if B j+1 = 0 s we count a misprediction. The total number of mispredictions is</p><formula xml:id="formula_4">m(T ) = s∈S(1) f (s.0 s ) − s∈T (f (s.0 u ) − f (s.0 s )) (<label>1</label></formula><formula xml:id="formula_5">)</formula><p>where u is the longest suffix of s in B ∪ T . Expression (1) can be understood as follows. All the potential mispredictions are counted in the sum s∈S(1) f (s.0 s ) + s∈T f (s.0 s ). We must remove from this sum the "false" mispredictions on sequences u for which there exists a longer matching sequence in T , i.e., s∈T f (s.0 u ). More explanations can be found in <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">A heuristic for set T</head><p>We assume |T | is fixed. Our goal is to find a T that minimizes m(T ). We define S as the set of all sequences that are allowed to be in T . For example, if we allow all sequences whose length does not exceed N , we have S = S(2, N ). We define S * ⊆ S as the useful sequences remaining after removing from S the sequences s such that 0 s = 0 u , where u is the longest suffix of s in B ∪ S. It can be verified that S * is the smallest subset of S such that m(S) = m(S * ) = m(∅) − s∈S * (f (s.1 s ) − f (s.0 s )). We order the sequences in S * according to the following procedure. Each sequence s ∈ S * has a potential which we define as</p><formula xml:id="formula_6">f (s.1 s ) − f (s.0 s ) + u∈S * ,s≺u (f (u.1 u ) − f (u.0 u ))</formula><p>We sort sequences in S * in decreasing potentials, and we put in T the first |T | sequences with the highest potentials. This heuristic does not necessarily give an optimal set T . However in practice, it gives a curve m(T ) as a function of |T | that is approximately convex, which ensures that we are close to an optimal T .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">From GPPM-ideal to cbp1.5</head><p>All the results presented in this study are obtained with the CBP traces. To build GPPMideal, we first define a maximum sequence length N = 200, and we assume S ⊆ S(2, N ). Each sequence from S that occurs in the PCF and that ends with a conditional branch is recorded in a table. For each sequence recorded, we maintain a count of the number of occurrences of the sequence in the PCF, and how many times the branch ending the sequence was taken. At the end of the PCF, we build S * and sort sequences in decreasing potentials. Then we compute m(T ) from <ref type="bibr" target="#b0">(1)</ref>. Because of memory limitations on our machines, when |S| exceeded a certain size, we decreased N . However, as the longest global history length in cbp1.5 is 80 branch direction bits, we did not want N to be smaller than 81. So we shortened a few traces, namely INT-2, INT-3, MM-1, MM-2 and MM-5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Base results</head><p>Table <ref type="table" target="#tab_0">1</ref> gives the PCF length for each trace. We count in the PCF only the blocks ending on conditional branches, so the PCF length is in fact the number of dynamic conditional branches. The maximum sequence length N is indicated in Table <ref type="table" target="#tab_0">1</ref> for each trace. |S(1)| is the number of unique static conditional branches encountered in the PCF. The set of allowed sequences is S = S(2, N ). |S * | is the number of useful sequences in S. A large value of |S * | means that GPPM predictors need a large global table. The number of mispredictions for GPPM-ideal for the given value of N , and with no size limitation, is m(S * ). Table <ref type="table" target="#tab_0">1</ref> also gives the value of m(T ) when we constrain the global table size to not exceed |T | = 4096 sequences, where the content of T is determined as described in Section 3.3. Note that 4096 is also the number of global entries in cbp1.5. Finally, Table <ref type="table" target="#tab_0">1</ref> shows the number of mispredictions for cbp1. 4k-entry direct-mapped bimodal Table <ref type="table">2</ref>: Degradation path from GPPM-ideal to cbp1.5.</p><p>4.2 A degradation path from GPPM-ideal to cbp1.5 Table <ref type="table">2</ref> gives an example of a degradation path from GPPM-ideal with |T | = 4096 to cbp1.5. We arbitrarily divided the degradation path into 9 steps, each step including the previous ones. Figure <ref type="figure">3</ref> shows the number of mispredictions after each step.</p><p>Step 0 corresponds to GPPM-ideal, with S = S(2, N ). GPPM-ideal is a path-based predictor, meaning that each sequence is identified with the PC of the conditional branch ending the sequence and with the PC of all the blocks constituting the sequence. However, cbp1.5 uses a global history of branch directions, which contains less information.</p><p>Step 1 corresponds to the use of branch direction bits in the global history. As can be seen on Figure <ref type="figure">3</ref> Step 5 is the biggest qualitative step. Starting at this step, the content of T is allowed to change dynamically. We can no longer use formula <ref type="bibr" target="#b0">(1)</ref>, and so now we generate results by performing a second pass on the traces. We use the 4 global banks of cbp1.5, and the same allocation policy as cbp1.5 i.e., the one based on the u bit. Moreover, we use 30-bit tags. However, the prediction for the longest matching sequence s is still given by 1 s , as in GPPM-ideal. As expected, the magnitude of the degradation is strongly correlated with |S * |. Step 6 corresponds to the introduction of 3-bit counters. Although predictions are now given by 3-bit counters, the counter associated with sequence s is initialized with 1 s when we steal an entry for s. Except for a few cases (INT2, INT4, MM4), it increases the number of mispredictions. As expected, traces with a large |S(1)|, e.g. the SERV traces, experience a more pronounced degradation, corresponding to cold-start bimodal mispredictions. Step 7 corresponds to using 8-bit instead of 30-bit tags. This is a significant degradation on Table <ref type="table">3</ref>: Impact of the degradations listed on Table <ref type="table">2</ref> on the number of mispredictions.</p><p>Step 0 is GPPM-ideal, and step 9 is cbp1.5.</p><p>the INT and SERV traces.</p><p>Step 8 corresponds to initializing 3-bit counters as in cbp1.5, that is, using information from the m bit instead of 1 s . Except for MM3, this increases the number of mispredictions, and significantly for a majority of cases. Finally, the last step corresponds to limiting the bimodal table size. This is an important degradation for traces with a large |S(1)|, in particular the SERV traces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusion</head><p>The difference between GPPM-ideal and cbp1.5 cannot be attributed to a single cause. If we want to improve cbp1.5, we must work in several places. Steps 1 to 4 on Table <ref type="table">2</ref> concern the choice of history lengths and the number and size of global banks. There is a potential for removing a significant number of mispredictions here, especially on the FP and INT traces.</p><p>Step 5 is one of the biggest single contributors to the discrepancy between GPPM-ideal and cbp1.5. In cbp1.5, we steal an entry on each misprediction. A paradox of this method is that the more mispredictions we have, the more useful entries are replaced with useless ones. This is harmful positive feedback. We should find a better method than the u bit to decide which entry should be stolen and which should not, so we can eliminate this positive feedback. We should also find a better method than the m bit to initialize counters, since this method is the source of a significant number of extra mispredictions (step 8). Finally, the SERV traces require a large bimodal table. We should try to enlarge the bimodal table, or find a way to dynamically adjust the fraction of the overall predictor storage holding bimodal entries. Some of the CBP-1 predictors (e.g., <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b8">9]</ref>) dynamically adjust the history lengths according to the application. This would be another way to achieve a similar goal.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Predictor cbp1.5 features 5 banks. The "bimodal" bank on the left has 4k entries, with 4 bits per entry. Each of the 4 other banks has 1k entries, with 12 bits per entry. The rightmost bank is the one using the most global history bits (80 bits).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Global history folding can be implemented with a circular shift register (CSR) and a couple of XORs (symbol ⊕).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>[9 : 0] ⊕ pc[19 : 10]. In front of bank 1, the index is simply pc[9 : 0] ⊕ pc[19 : 10] ⊕ h[9 : 0]. History folding is also used for the tags. For each bank 1 to 4, we use a set of two CSRs, CSR1 and CSR2, which are respectively 8 bits and 7 bits.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Basic results for each trace. Traces INT-2,3 and MM-1,2,5 were shortened due to memory limitations, to keep N greater than 80.</figDesc><table><row><cell>5.</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The author wishes to thank Jared Stark for helping improve the english</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Data compression using adaptive coding and partial string matching</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cleary</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Witten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Communications</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="396" to="402" />
			<date type="published" when="1984-04">Apr. 1984</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Analysis of branch prediction via data compression</title>
		<author>
			<persName><forename type="first">I.-C</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Coffey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mudge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th International Conference on Architectural Support for Programming Languages and Operating Systems</title>
				<meeting>the 7th International Conference on Architectural Support for Programming Languages and Operating Systems</meeting>
		<imprint>
			<date type="published" when="1996-10">Oct. 1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A comprehensive study of dynamic global-history branch prediction</title>
		<author>
			<persName><forename type="first">P</forename><surname>Michaud</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Seznec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IRISA</title>
		<imprint>
			<date type="published" when="2001-06">June 2001</date>
		</imprint>
	</monogr>
	<note type="report_type">Research report PI-1406</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The YAGS branch prediction scheme</title>
		<author>
			<persName><forename type="first">A</forename><surname>Eden</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Mudge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 31st Annual International Symposium on Microarchitecture</title>
				<meeting>the 31st Annual International Symposium on Microarchitecture</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Combining branch predictors</title>
		<author>
			<persName><forename type="first">S</forename><surname>Mcfarling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">TN</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<date type="published" when="1993-06">June 1993</date>
			<publisher>DEC WRL</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A study of branch prediction strategies</title>
		<author>
			<persName><forename type="first">J</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th Annual International Symposium on Computer Architecture</title>
				<meeting>the 8th Annual International Symposium on Computer Architecture</meeting>
		<imprint>
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Analysis of a tag-based branch predictor</title>
		<author>
			<persName><forename type="first">P</forename><surname>Michaud</surname></persName>
		</author>
		<idno>PI-1660</idno>
	</analytic>
	<monogr>
		<title level="j">IRISA</title>
		<imprint>
			<date type="published" when="2004-11">Nov. 2004</date>
		</imprint>
	</monogr>
	<note type="report_type">Research report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">The O-GEHL branch predictor</title>
		<author>
			<persName><forename type="first">A</forename><surname>Seznec</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004-12">Dec. 2004</date>
		</imprint>
	</monogr>
	<note>1st CBP</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Idealized piecewise linear branch prediction</title>
		<author>
			<persName><forename type="first">D</forename><surname>Jiménez</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004-12">Dec. 2004</date>
		</imprint>
	</monogr>
	<note>1st CBP</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
