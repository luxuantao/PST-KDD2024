<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">INFORM: a dynamic INterest FORwarding Mechanism for Information Centric Networking</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Raffaele</forename><surname>Chiocchetti</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Alcatel Lucent Bell Labs</orgName>
								<address>
									<settlement>Nozay</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Diego</forename><surname>Perino</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Alcatel Lucent Bell Labs</orgName>
								<address>
									<settlement>Nozay</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Giovanna</forename><surname>Carofiglio</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Alcatel Lucent Bell Labs</orgName>
								<address>
									<settlement>Nozay</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Dario</forename><surname>Rossi</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Telecom ParisTech</orgName>
								<address>
									<settlement>Paris</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Giuseppe</forename><surname>Rossini</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Telecom ParisTech</orgName>
								<address>
									<settlement>Paris</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">INFORM: a dynamic INterest FORwarding Mechanism for Information Centric Networking</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">32DC2BAC28C4A8D6B8E55FAEED73A2CD</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T11:19+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C.2.1 [Network Architecture and Design]: Network communications</term>
					<term>Packet-switching networks Algorithms</term>
					<term>Design</term>
					<term>Performance Information Centric Networking</term>
					<term>Caching</term>
					<term>Forwarding</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Information Centric Networking is a new communication paradigm where network primitives are based on nameddata rather than host identifiers. In ICN, data retrieval is triggered by user requests which are forwarded towards a copy of the desired content item. Data can be retrieved either from a server that permanently provides a content item, or from a temporary item copy opportunistically cached by an in-network node. As the availability of cached items dynamically varies over time, the request forwarding scheme should be adapted accordingly. In this paper we focus on dynamic request forwarding in ICN, and develop an approach, inspired by Q-routing framework, that we show to outperform algorithms currently available in the state of the art.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Recognizing that end users are often more interested in obtaining content, rather than merely being provided with connectivity among two addressable entities, a number of Information Centric Network (ICN) architectures (overviewed in <ref type="bibr" target="#b1">[2]</ref>) have been proposed. While these proposals differ in a number of aspects (e.g., the way content is named, content resolution is addressed, etc.), they all provide name-based network layer primitives. In addition to current Internet functionalities, as packet forwarding or routing, name-based identifiers enable enhanced features which are natively supported by all proposals, as distributed in-network caching.</p><p>In ICN the data delivery process is typically pull-based, i.e. triggered by user requests which are forwarded towards a copy of the requested item. Request forwarding is driven by forwarding engines (e.g. FIBs) that are populated with reachability information about different content items. In presence of such a highly distributed caching infrastructure, item availability and location can vary over time because of temporary replicas spread across the network. Replica distribution is determined by several factors, as content popularity or caching policy, and the request forwarding scheme should be adapted accordingly.</p><p>As also reflected in the ICN literature <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">[8]</ref><ref type="bibr" target="#b8">[9]</ref><ref type="bibr" target="#b9">[10]</ref><ref type="bibr" target="#b10">[11]</ref>, two coexisting approaches can be exploited to adapt request forwarding: (i) on a long term, control plane protocols <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref> distribute item availability information across the network to reach permanent or long term item replicas; (ii) on a short term, data plane forwarding schemes <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b10">11]</ref> based on local information available at every node allows to quickly react to dynamic item availability.</p><p>This work adheres to the second family of approaches <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b10">11]</ref>, proposing to complement NDN with a dynamic INterest FORwarding Mechanism. INFORM is an adaptive hop-by-hop forwarding algorithm that discovers routes towards temporary item replicas through exploration in the data plane, that can be exploited later on for subsequent requests for the same objects. This work yields several contributions beyond <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b10">11]</ref>, notably: (i) we propose a distributed on-line request forwarding algorithm based on Q-routing, whereas <ref type="bibr" target="#b3">[4]</ref> limitedly addressed simple heuristics; (ii) our solution is compared min-delay path forwarding <ref type="bibr">[6]</ref> and the strategy layer proposed by the NDN project <ref type="bibr" target="#b10">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">ICN BACKGROUND</head><p>As above introduced, previous research on ICN request forwarding progresses along two directions.</p><p>On the one hand, the definition of routing protocols in the control plane <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>, for the dissemination of FIB information addressing permanent and possibly temporary copies, when stable over time. Concerning permanent copies, some work focuses on the design of routing protocols supporting advertisement of name prefixes rather than IP address ranges. Yet, work in this area is still at preliminary stage and mostly limited to AS-level domain (e.g., OSPFn <ref type="bibr" target="#b8">[9]</ref>), while the corresponding name-oriented protocol for inter-domain routing (e.g., BGPn) is still to appear. The addressing of temporary replicas is realized in <ref type="bibr" target="#b9">[10]</ref> through the encoding of cache content in compact bloom filters, periodically exchanged among neighboring caches. However, the scalability of such approach has not been assessed.</p><p>On the other hand, we have work focusing on data plane forwarding strategies <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b10">11]</ref> for the retrieval of more volatile temporary copies according to a predefined metric (e.g. the closest). The benefits in this case are the possibility to (i) efficiently locate temporary replicas without incurring the overhead of explicitly signaling (ii) tune the forwarding according to the instantaneous network state, which is simply impossible in case of proactive routing approaches.</p><p>Our preliminary work <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">8]</ref> explored two cases where we either (i) assume FIB knowledge about multiple paths in the network leading toward permanent copies that can be directly exploited by the forwarding strategy <ref type="bibr" target="#b7">[8]</ref>; or (ii) avoid to require any FIB knowledge (but can use if available) and rather perform a limited exploration of the network <ref type="bibr" target="#b3">[4]</ref>. In particular <ref type="bibr" target="#b3">[4]</ref> testified the potential of using the first few chunks of an object to explore the network in search for local temporary copies. Lastly, <ref type="bibr" target="#b10">[11]</ref> introduces a dynamic approach in the NDN framework. Specifically, interfaces are periodically probed, gathering statistics for each of them: if, for a given content, an interface is estimated to be "better" than the currently exploited one, the forwarding plane switches to that interface.</p><p>While our proposal can be exploited by possibly several ICN architectures, we focus on the CCN/NDN approach initially proposed in <ref type="bibr">[6]</ref>. Let us briefly introduce it here, using the CCN terminology, since a conceptual unifying framework is currently missing.</p><p>CCN clients request Data in a pull-based fashion sending Interests for named contents. Request are forwarded hopby-hop toward a permanent copy of the requested Data: for each Interest, CCN nodes perform lookup for content names in a Forwarding Information Base (FIB), that stores the set of interfaces through which any given content can be reached. As multiple paths are possibly stored for any given name, a Strategy Layer is responsible for the selection of one (or more) next hop interfaces among the set of possible ones. CCN nodes along this path may possess cached copies of the content of interest within their own Content Store: in this case, Interests do not need to reach the permanent copy stored at the repository, and the temporary copy in cache is directly sent back to the client along the reverse path. Indeed, Data travels back toward the requester following a trail of bread-crumbs, that are stored in a Pending Interest Table (PIT) at every network node.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">HOP-BY-HOP DYNAMIC REQUEST FOR-WARDING</head><p>In this section, we describe the design of INFORM, our proposal for hop-by-hop dynamic request forwarding on the data plane. The goal of INFORM is twofold: (i) to discover paths to temporary copies of a content item, not addressed in routing tables and (ii) to forward requests for such content item towards the 'best' performing interface (according to a specified metric), while guaranteeing continuous Data delivery and limiting the network overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">A Reinforcement Learning framework</head><p>Our proposal for on-line dynamic request forwarding leverages previous work on reinforcement learning approaches to routing and extend them to the case of a cache network operating under CCN. Specifically, INFORM is inspired by the Q-routing algorithm <ref type="bibr" target="#b2">[3]</ref>, implementing a distributed version of Q-learning (cfr. <ref type="bibr" target="#b6">[7]</ref> for a survey).</p><p>In the Q-routing algorithm each node builds its routing table learning the delivery times towards other nodes. This is achieved by means of a set of Q values stored by every node i for all possible destinations d, Qi(d, v)∀v ∈ neighbours(i), d ∈ destinations, where Qi(d, v) represents the delivery time of a packet from node i to node d if the packet is forwarded via node v.</p><p>The forwarding action taken by node i consists in selecting the interface to the neighboring node v towards a given destination d with the smallest Q value, Qi(d, v) (i.e. smallest delivery time). For every Data packet forwarded back through the neighboring node v, node i receives in response the best delivery time estimate of v, i.e. min k∈neigbours(v) Qv(d, k). The associated Q value at i is then updated as follows,</p><formula xml:id="formula_0">Qi(d, v) = (1 -η)Qi(d, v) + η(min k∈neigbours(v) Qv(f, k) + rtti,v)</formula><p>, where rtti,v denotes the round trip delay between nodes i and v.</p><p>The Q-routing approach has been shown effective to improve performance with respect to basic shortest path forwarding <ref type="bibr" target="#b2">[3]</ref> in presence of dynamic network conditions, and several improvements have been proposed to the original design in order to apply it to various network contexts. IN-FORM realizes distributed reinforcement learning at each network node with reward information exchange via Data piggyback.</p><p>INFORM is independently run by each node in the network, and works at content item granularity, i.e. at the granularity of a file. For a given file f ∈ F a node i maintains a set of Qi(f, v)∀v ∈ I(i) values, where I(i) denotes the set of interfaces of node i<ref type="foot" target="#foot_0">1</ref> . Those values are computed and updated during an exploration phase, where a node probes the interfaces in order to learn the cost (reward) in terms of residual delay to the first hitting cache for file f associated with each of them. As explained before, the Q values update exploits the knowledge of the smallest Q value of the neighbors chosen for forwarding a given Interest, which is piggy-backed in the returning Data packet. Q values are then used during an exploitation phase to identify the best available interface where to forward Interest packets.</p><p>In the following, we detail the different phases of our algorithm as well as the operations performed upon reception of Interest and Data packets. A first exploration phase then starts. The goal of such initial exploration phase is to compute Q values for the different interfaces, while guaranteeing the delivery of the requested  Data packets. To this end, a node randomly selects an interface to forward an incoming Interest, and, at the same time, it forwards the Interest over the shortest path (in terms of delay) towards a permanent copy of the file.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Exploration and exploitation phases</head><p>Observation. Interest forwarding over shortest path is required as random interface selection alone does not guarantee that the requested Data packet is delivered. Indeed, we assume that an Interest contains a TTL value that is decremented at every hop, and the Interest random walk in the network may end without encountering any matching Data. Only one random interface per Interest is chosen in order to limit the overhead of this probing phase.</p><p>The exploration phase lasts Nr chunks, after which the interface k providing the minimum delay is identified, i.e. k : Q(f, k) = min v∈I(i) Q(f, v), and its Q value is stored, i.e. Qmin(f ) = Q(f, k).</p><p>After the exploration phase, the exploitation phase starts. The goal of this phase is to exploit the information about rewards associated with each interface collected during the exploration phase. Thus, an Interest is forwarded over the best interface k only; remark that the corresponding Q(f, k) is the only one being updated during this phase. The algorithm remains in exploitation phase until</p><formula xml:id="formula_1">|Q min (f )-Q(f,k)| Q min (f )</formula><p>&gt; δ or for Nt chunks at most. The first condition indicates that system state has changed and Q values have then to be updated. The second condition is also required as, despite the Q value of the best interface is not significantly changed, the state of the other interfaces may have changed.</p><p>After the exploitation phase, the algorithm returns in exploration. As previously mentioned this is required to deal with dynamic item availability, and to update Q values accordingly. Differently form the first exploration phase, during all the subsequent explorations an Interest is forwarded towards a randomly selected interface, and, at the same time, towards the previously determined best interface k rather than shortest path interface. At the end of this exploration phase, the new interface k ′ providing the minimum delay is identified, i.e.</p><formula xml:id="formula_2">k ′ : Q(f, k ′ ) = min v∈I(i) Q(f, v), the minimum Q value is updated, i.e. Qmin(f ) = Q(f, k ′ )</formula><p>, and the algorithm returns in exploitation phase.</p><p>Finally, Q values associated with a given file are deleted when they are not updated for Te time units, i.e. no interests for file f is forwarded by the node for Te time units. </p><formula xml:id="formula_3">if</formula><formula xml:id="formula_4">: Q(f, k) = min v∈I(i) Q(f, v); end forward Interest through i, k; else k=select best interface k : Q(f, k) = min v∈I(i) Q(f, v); forward Interest through k; end end end</formula><p>Algorithm 1: Operations upon the reception of an Interest packet from interface j.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Interest and Data packet</head><p>Algorithm 1 details the operations performed by our algorithm upon reception of an Interest packet. If the requested Data packet is present in cache, then it is send over the interface that requested it. The minimum value Qmin(f ) is also added to the Data packet, as it will be used by downstream nodes to update their Q values. Otherwise if the request is not present in the PIT and the algorithm is in exploration phase, the Interest is forwarded over a random interface, and over the best interface (or over the interface towards the shortest path in terms of delay in case of first exploration). Finally, if the algorithm is in exploitation phase, the Interest packet is forwarded towards the best interface k only.</p><p>Algorithm 2 details the operations performed by our algorithm upon reception of a Data packet. After storing the Data packet in the cache, the Q value associated with the incoming interface of the considered file are updated. Finally, the list of requesting interfaces is looked up from the PIT, the Data packet is forwarded towards the interested interfaces and the PIT entry is removed.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Toy case example</head><p>For a better understanding of our algorithm we now present a toy case scenario. We consider the simple network topology reported in Fig. <ref type="figure" target="#fig_2">2</ref>(a), and we assume there is only one client connected to node 1, and one server connected to node 0 . We consider a single content item composed of 100 Data packets that is repeatedly requested by the client and permanently stored by the server. We assume there are no caches in the network, and we dynamically place the content item across different nodes. The dynamic placement pattern is showed in Figg. 2(b)-2(c), where we report node 1 Q values and the Data packet delivery time evolution over time respectively.</p><p>First, we observe our algorithm is able to detect and react to dynamic item availability. Indeed, when content placement is modified, Q values associated with different interfaces are updated and the download time evolves consequently. Second, we notice the correctness of computed Q values after convergence. Indeed, converged Q values are equal to the minimum delays between node 1 and the closest item replica in terms of delay via a given interface. Third, the interface over which Interest packets are forwarded during the exploration phase, always corresponds to the optimal one under the given content item placement and network delay. As the choice of the parameters is critical for the performance of INFORM, we consider this issue in the next Section.</p><p>Finally, Fig. <ref type="figure" target="#fig_3">2(c</ref>) shows INFORM outperforms min-delay path forwarding as it can discover off-path temporary content replicas when available, i.e. between 100 and 300s and 400 and 600s. NDN forwarding schemes <ref type="bibr" target="#b10">[11]</ref> can also discover the temporary replica available at node 8 between 100 and 300s with a slightly longer convergence time than IN-FORM. Differently, the temporary replica at node 2 available between 400 and 600s is discovered but is not exploited to download all chunks, i.e. some packets are downloaded from node 2 while other from the server. In Sec. 4 we deeply compare the performance of the three algorithms under different simulation settings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">EVALUATION</head><p>We evaluate the performance of INFORM by means of packet-level simulations. For our analysis we extend the ccnSim simulator [1] to support INFORM, and the dynamic forwarding policy proposed by the NDN project <ref type="bibr" target="#b10">[11]</ref>.</p><p>We model the network topology as an Erdos-Renyi graph G(n, ρ), where n is the number of nodes and ρ is the probability that a link connecting two nodes does exist. We assume b among the n nodes are border routers where users are connected to, and s ≤ n content servers are connected to distinct nodes of the network. We further assume every node is equipped with a cache of size c% of the content catalog and implements the Least Recently Used (LRU) replacement policy. Unless otherwise specified we assume n = 22, b = 8, s = 1, ρ = 0.3 , and c = 15%.</p><p>The placement of border routers and servers are randomly generated, results are averaged over multiple simulation runs, and we do not consider the cache warm up period. Users generate content requests according to a Poisson process of intensity λ = 1 req/s per border router. The motivation behind the Poisson assumption comes from the observation that Internet traffic is well modeled at session level by a Poisson process <ref type="bibr" target="#b4">[5]</ref>.We consider a catalog of 10 5 content items whose popularity is Zipf distributed with α = 1. We assume each content item is composed of 100 independent Data packets that are permanently stored at servers s. Finally, we populate nodes' FIB with next hop information for the min-delay path towards one of the permanent content item copy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Parameter tuning</head><p>In this section, we investigate the impact of INFORM parameters on its performance. We expect convergence time and stability to be primarily affected by the learning rate η, which determines the speed at which INFORM adjusts the forwarding policy to dynamic item availability. Similarly, accuracy of the best interface estimation is primarily affected by the duration of the exploration phase Nr. Results in the following are averaged over multiple nodes and simulation runs.</p><p>Fig. <ref type="figure" target="#fig_4">3</ref>(a) shows the convergence time of INFORM Q values as a function of the learning rate for three objects having different popularity. On the one hand, we observe that convergence time decreases as the learning rate increases and is independent from file popularity. This stems from the fact that the weight of the last delay estimation increases with the learning rate, resulting in a faster adaptation of the forwarding policy to item availability.</p><p>On the other hand, a high learning rate leads also to undesirable oscillations in delay estimations. Fig. <ref type="figure" target="#fig_4">3</ref>  with the learning rate and is independent from file popularity. As standard deviation captures the stability of delay estimations, we observe INFORM stability decreases as the learning rate increases. Nevertheless, the maximum standard deviation is 2%, that we argue to have a limited effect on the interface selection process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Performance comparison</head><p>We now evaluate the performance of INFORM and compare it with simple min-delay path forwarding and the dynamic forwarding scheme proposed by the NDN project <ref type="bibr" target="#b10">[11]</ref>. We consider three main metrics: i) the Data packet delivery time, which represents the time elapsing between a client expression of a Interest for a given packet, and the reception of the corresponding Data packet; ii) the Data load, defined as the average number of Data packets flowing through the network in one time unit; iii) the Interest load, defined as the average number of Interest packets flowing through the network in one time unit. The first metric allows us to quantify the performance as perceived by the end-users, while the second and third metrics quantify the network traffic cost.</p><p>We set the learning rate to η = 0.7, the duration of the exploration phase to Nr = 50 chunks, and the duration of the exploitation phase to Nr = 100 chunks. For the NDN forwarding algorithm parameters, we performed several simulations with different settings, and we present the best obtained results.</p><p>Fig. <ref type="figure" target="#fig_6">4</ref>(a) reports the average Data packet delivery time as a function of the network connectivity (i.e., probability ρ that any two nodes are connected), which determines the number of available paths between clients and servers. Clearly, delivery time decreases as the network connectivity increases: as the number of links in the network increases, the distance between clients and servers is reduced, with a consequence decrease in the delivery time.</p><p>We also observe INFORM provides the smallest delivery time among the three algorithms for all connectivity values. Specifically, it provides a performance improvement between 18-33% with respect to simple min-delay path forwarding,  and between 10-33% with respect to the NDN forwarding strategy. The performance gap increases with the connectivity, testifying that INFORM can better exploit an increasing number of paths.</p><p>Fig. <ref type="figure" target="#fig_6">4</ref>(b) shows the average Data packet delivery time as function of the cache size. We observe the delivery time sharply decreases as the cache size increases until additional storage does not provide any additional benefits. We also observe INFORM outperforms other algorithms for all cache sizes providing an improvement of 22-25% with respect to the NDN forwarding strategy and 5-26% with respect to min-delay path forwarding.</p><p>Figg. 5(a)-(b) report the Data load as a function of the network connectivity and cache size respectively. INFORM generates less Data packets than the NDN forwarding scheme, but clearly more than min-delay path forwarding.   As the network connectivity or cache size increases the Data load decreases for min-delay path forwarding. Differently, for INFORM and NDN, the Data load first increases and then decreases as the connectivity and cache size increase. Additional links in the network or storage capacity increase the availability of temporary item replicas that are discovered by such algorithms: it follows requests are forwarded through longer paths to reach those replicas resulting in a higher Data Load. After a certain threshold, the load decreases as more links or additional storage capacity do not increase item availability but only shorten the distance between clients and item copies thus reducing the load on the network.</p><p>We observe a similar trend in Figg. 6(a)-(b,) where the Interest load as a function of the network connectivity and cache size is reported. The Interest Load has a less significant impact on the global network traffic than Data Load, as Interest packets are much smaller in size than Data packets. Nevertheless, the amount of Interest packet may have a significant impact on processing and memory cost at network routers. Indeed, Interests require routers to perform lookup operations and generate additional state to be stored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">CONCLUSION</head><p>In this paper, we have presented INFORM a dynamic INterest FORwarding Mechanism for ICN. INFORM is designed to discover temporary copies of content items not addressed in routing tables and to forward requests over best' performing interface at every hop. We have shown INFORM is able to detect and react to dynamic item availability, and to forward requests towards the best' available copy. By means of simulations we have shown INFORM outperforms simple min-delay forwarding, and state of the art NDN dynamic forwarding scheme. Our current and future work include an analytical modeling of INFORM, and a practical system design to enable Interest forwarding with INFORM at high speed.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1</head><label>1</label><figDesc>Figure 1 summarizes the transition among different phases and the behavior of our algorithm in each phase. The algorithm starts by initializing the set of Qi(f, v), ∀v ∈ I(i) values, when an Interest for a given Data packet of file f is received and corresponding Q values are not available.A first exploration phase then starts. The goal of such initial exploration phase is to compute Q values for the different interfaces, while guaranteeing the delivery of the requested</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Transition between phases</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Algorithm 2 :</head><label>2</label><figDesc>cache.store(data); Qi(d, f ).update( (1 -η)Qi(d, f ) + η(min k∈I(y) Qy(f, k) + rtti,y)); foreach interface ∈ PIT.entry[data] do data.insert (Qmin(f )); //Q-value piggybacking; data.forward(interface); end erase (PIT.entry); Operations upon the reception of a Data packet on interface j from neighbor y.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Toy case scenario: (a) Network topology with link delays [ms]. (b) Q1(•, •)-values evolution over the time.(b) Data packet download time evolution over time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Parameter tuning. Convergence time as a function of the learning rate (a); Q value standard deviation as a function of the learning rate (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Cache size 15% of the catalog.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Mean Download time as a function of the network connectivity (a) and cache size (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>Cache size 15% of the catalog.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>3 Figure 5 :</head><label>35</label><figDesc>Figure 5: Data load as function of the network connectivity (a) and cache size (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Interest load as function of the network connectivity (a) and cache size (b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>requested Data is present in the cache then forward Data packet through j with Qmin(f ); else if request is present in the PIT then add interface j to list of requesting interfaces;</figDesc><table><row><cell>else</cell></row><row><cell>create a new entry in the PIT;</cell></row><row><cell>if Exploration phase then</cell></row><row><cell>i=select random interface;</cell></row><row><cell>if First exploration then</cell></row><row><cell>k=select shortest path interface;</cell></row><row><cell>else</cell></row><row><cell>k=select best interface</cell></row><row><cell>k</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>(b)  shows the standard deviation of Q values after convergence increases</figDesc><table><row><cell>Convergence time-</cell><cell>[chunks]</cell><cell cols="2">30 40 50 60 70 80 90 100</cell><cell></cell><cell></cell><cell></cell><cell cols="4">Most popular objects Average popular objects Least popular objects</cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell>0.1</cell><cell>0.2</cell><cell>0.3</cell><cell>0.4</cell><cell>0.5</cell><cell>0.6</cell><cell>0.7</cell><cell>0.8</cell><cell>0.9</cell><cell>1</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">Learning rate -η</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>(a)</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>Std. deviation -σ(Q)</cell><cell></cell><cell>0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2</cell><cell>0.1 x10 -2</cell><cell>0.2</cell><cell>0.3</cell><cell>0.4</cell><cell>0.5</cell><cell>0.6</cell><cell>0.7</cell><cell>0.8</cell><cell>0.9</cell><cell>1</cell></row><row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell cols="3">Learning rate -η</cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>Remark that Q values are associated to a given content item but not to a single content download. Specifically, they associated to Interest/Data packets belonging to multiple (parallel or subsequent) downloads of the same content item.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work presented in this paper has been carried out at LINCS (http://www.lincs.fr), and partially funded by the French national research agency (ANR), CONNECT project, under grant number ANR-10-VERS-001.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A survey of information-centric networking</title>
		<author>
			<persName><forename type="first">B</forename><surname>Ahlgren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dannewitz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Imbrenda</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Kutscher</surname></persName>
		</author>
		<author>
			<persName><surname>Ohlman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Magazine</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="26" to="36" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Packet routing in dynamically changing networks: A reinforcement learning approach</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">A</forename><surname>Boyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Littman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="1994">1994</date>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="671" to="678" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Exploit the known or explore the unknown?: hamlet-like doubts in icn</title>
		<author>
			<persName><forename type="first">R</forename><surname>Chiocchetti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Rossi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Rossini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Carofiglio</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Perino</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM ICN</title>
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Nonstationary poisson modeling of web browsing session arrivals</title>
		<author>
			<persName><forename type="first">Edward</forename><surname>Chlebus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jordy</forename><surname>Brazier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information Processing Letters</title>
		<imprint>
			<biblScope unit="volume">102</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="187" to="190" />
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Networking named content</title>
		<author>
			<persName><forename type="first">V</forename><surname>Jacobson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Smetters</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Thornton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">F</forename><surname>Plass</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Briggs</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Braynard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
			<publisher>ACM CoNEXT</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Reinforcement learning: a survey</title>
		<author>
			<persName><forename type="first">M</forename><surname>Littman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Pack Kaelbling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Artificial Intelligence Research</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="237" to="285" />
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Evaluating ccn multi-path interest forwarding strategies</title>
		<author>
			<persName><forename type="first">G</forename><surname>Rossini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Rossi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Communications</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">OSPFN: An OSPF based routing protocol for named data networking</title>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K M</forename><surname>Hoque</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cheng</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Alyyan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012-03">March 2012</date>
		</imprint>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Advertising cached contents in the control plane: Necessity and feasibility</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<publisher>NOMEN Workshop</publisher>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A case for stateful forwarding plane</title>
		<author>
			<persName><forename type="first">C</forename><surname>Yi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Afanasyev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Moiseenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Communications</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
