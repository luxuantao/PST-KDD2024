<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Cooperative Responses from a Portable Natural Language Query System*</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">S</forename><forename type="middle">Jerrold</forename><surname>Kaplan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
									<country key="US">U.S.A</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Cooperative Responses from a Portable Natural Language Query System*</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">F0BA400A7DBFB90064F14C9C30F67E16</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T14:25+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>1For example</term>
					<term>LUNAR [23]</term>
					<term>ROBOT [9]</term>
					<term>RENDEZVOUS [5]</term>
					<term>LADDER [18]</term>
					<term>REL [19]</term>
					<term>PLANES [20]</term>
					<term>and PHILQA [15]</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper describes the design and implementation of CO-OP, a natural language database query system that provides conversationally cooperative responses to natural language requests for data retrieval and operates with a typical CODASYL database management system. A conversationally cooperative response to a question is one which addresses the goals and intentions of the questioner while observing the conventions normally associated with discourse, to demonstrate that the chosen approach captures some fundamental properties of conversational cooperation, CO-OP was designed to be portable to new database domains with a minimum of effort--the lexicon and database itself are the only sources of domain specific knowledge. A limited theory of cooperative behavior in questionanswering is informally presented, and a practical technique for applying this theory in a natural language query system is described. Sample transcripts of the system that illustrate cooperative responses in two contrasting applications are given.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>For a natural language database query system to be truly natural it must not only accept input in the language of the questioner, but must also produce responses that approximate those of human speakers. While much research has focussed to date on the interpretation of natural language queries, 1 relatively little work has been done on the formulation of appropriate responses. Typically, the response to a natural language query consists of the response an underlying database management system gives to a 'corresponding' formal query. Although such responses may be literally correct, they can nonetheless be inappropriate or uncooperative.</p><p>Consider the following hypothetical exchange with a natural language database query system (commentary is in brackets '[ ]'):</p><p>[The questioner wishes to get a feel for how strict the grading was in the course CS200 in the spring semester, 1979.] QI: Which students got a grade of F in CS200 in spring, '79? R: NIL. [the empty set] [Having failed to retrieve any interesting data, the questioner poses a more general question.] Q2: Did anyone fail CS200 in Spring, "79?</p><formula xml:id="formula_0">R: No.</formula><p>]Getting nowhere, the user attacks the problem from a different perspective.] Q3: How many people passed CS200 in spring, '79? R: Zero.</p><p>[The questioner finds this odd. No one failed the course, but no one passed the course, either. Finally, the questioner catches on.] Q4: Was CS200 given in spring, '79'?</p><formula xml:id="formula_1">R: No.</formula><p>While each response is a literally correct, direct answer to the corresponding question, the overall effect of the dialog is nonetheless uncooperative. (This type of behavior is called "stonewalling'.) If Q1 were posed in a cooperative conversation to a human conversant, s/he would immediately realize that the questioner mistakenly believed that CS200 was given in spring, '79, and might appropriately respond by correcting this misimpression. A cooperative natural language system should similarly be able to detect this problem, and select an appropriately informative indirect response. Providing cooperative responses in a computational setting requires a systematic approach to pragmatic issues-those aspects of the meaning of utterances that arise from the fact or context of use.</p><p>This paper describes the design and implementation of CO-OP, a natural language database query system that provides cooperative responses to natural language requests for data retrieval and operates with a CODASYL <ref type="bibr" target="#b3">[4]</ref> database management system. To demonstrate that the chosen approach captures something fundamental about conversational cooperation, CO-OP was designed to be portable to new database domains with a minimum of effort. (The lexicon and database itself are the only sources of domain specific knowledge.) A limited theory of cooperative behavior in question-answering is informally presented, and a practical technique for applying this theory in a natural language query system is described. Sample transcripts of the system that illustrate cooperative responses in two contrasting applications are given.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">A Limited Theory of Cooperation</head><p>Natural language questions often provide significant cues as to the beliefs and goals of the questioner in addition to making a literal request for information. These cues are communicated via a convention of conversational cooperation:</p><p>A questioner should leave a respondent a choice of direct answers.</p><p>That is, from the questioner's viewpoint upon asking a question, more than one direct answer must be possible. It follows from this principle that a respondent can infer not only that the questioner does not know the answer to the question, but that s/he also does not believe any proposition that would entail an answer to the question, or entail that no direct answer to the question could be correct. These last two inferences can reveal a great deal about the state of mind of the questioner.</p><p>Each of the questions below, when used in a cooperative conversation and intended literally, allow a respondent to draw the following conclusions about the questioner's belief.</p><p>(la) Who was the 39th US president? (lb) There is a 39th US president.</p><p>(2a) What day does Mary take her weekly voice lessons? (2b) Mary takes weekly voice lessons.</p><p>(3a) How many times did the San Francisco Athletics win pennants? (3b) The Athletics are based in San Francisco.</p><p>(lb) must be true for any direct answer to la to be correct--if there was no 39th US president, then no name given in response to the question can be correct. Therefore, in order for a questioner to appropriately ask (la), s/he must find (lb) assumable (i.e. not believe it to be false), since to do otherwise would violate the conversational convention (no direct answer could be correct). Since (lb) is a precondition for the correctness of any direct answer to (la), it is said to be a presupposition of (la) <ref type="bibr" target="#b9">[10]</ref>. Similarly, (2a) presupposes (2b), in that if Mary does not take weekly voice lessons, no direct answer (a day of the week) can be correct. If there is no team called 'Athletics' in San Francisco, it is likewise impossible to answer (3a) correctly.</p><p>As has been noted in the linguistics literature <ref type="bibr" target="#b5">[6]</ref>, questions with false presuppositions are inappropriate (in the terms of <ref type="bibr" target="#b13">[14]</ref>, the logical presuppositions are pragmatically presupposed). This is in part explained by the cooperative principle given above, since false presuppositions do not leave the respondent a choice of direct answers.</p><p>Surprisingly, a generalization of the notion of presupposition retains the property of having to be assumable by a questioner as a precondition for the s.J. KAPLAN appropriateness of a question. While presupposition failures preclude the possibility of any correct direct response to the question, an interesting class of propositions have the property that their falsehood entails that at most one direct answer to the question is potentially correct. Such propositions will be called presumptions.</p><p>(4a) Did Mahler complete an 1 lth symphony? (4b) Mahler began an 1 lth symphony.</p><p>(5a) Which Soviet destroyers in the Mediterranean carry torpedos with a range of 5(I miles or more?</p><p>(5b) Some torpedos have a range of 50 miles or more.</p><p>(6a) How many female employees in division 3 are managers? (6b) There are female employees in division 3.</p><p>(4a) presumes (4b), although it does not presuppose it: If (4b) is false (i.e. Mahler never started an llth symphony) there is still a single possibly correct, direct answer to (4a), specifically, "No." However, the falsehood of (4b) leaves at most one correct, direct response, and so it is a presumption of (4a). If the maximum range of a torpedo is 25 miles, the only potential answer to (5a) is "None." Similarly, if there are no female employees in division 3 (6b), then the number who are managers must be zero.</p><p>According to the cooperative convention, a questioner must find all presumptions of a question assumable in order to appropriately pose the question--otherwise the respondent is not left with a choice of direct responses. (Note that presuppositions are special cases of presumptions, as defined here.)</p><p>Examining this situation from a respondents' standpoint, there is a corresponding convention of cooperation:</p><p>A respondent should correct any presumptions s/he believes to be false (responding indirectly to the question), rather than give a direct, correct answer, even if one exists.</p><p>Thus, a cooperative respondent might respond indirectly to (4a) with "Mahler never began an 1 lth symphony.", rather than simply giving the direct, correct answer "No." (5a) might receive the indirect response "No torpedos have a range of 50 miles or more.", while "There are no female employees in division 3." may be appropriate in response to (6a), (Note that such responses will always entail the direct, correct answer, if one exists.) This technique works equally well for presumptions that are presuppositions. (3a) might be cooperatively responded to by "The Athletics are not based in San Fransicso." Such responses can be called corrective indirect responses, since they correct the questioner's misimpressions about the domain, and respond indirectly to the question.</p><p>If a natural language query system is capable only of direct answers to questions, it will necessarily give incorrect or undefined responses when presuppositions fail, and will stonewall when other presumptions fail. The problem addressed by this analysis is actually a special case of a more general phonomenon in natural language question answering. Natural language is particularly well adapted as a means of communication between two intelligent information processors (humans), where any participant may initiate constructive contributions. This constrasts with most formal languages, where statements are intended to proscribe a particular, well-defined set of actions to be performed. Consequently, natural language questions both admit a wider range of appropriate responses than formal queries do, and provide conversational cues for selecting among those responses, that are generally absent from the pragmatic setting of formal languages. (For a detailed discussion of this point, see <ref type="bibr" target="#b12">[13]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">CO-OP: A Cooperative Query System</head><p>CO-OP is a natural language query system that provides cooperative responses to simple natural language questions requesting data retrieval and operates with a CODASYL database management system (SEED <ref type="bibr" target="#b6">[7]</ref>). In addition to producing direct answers, CO-OP is capable of producing a variety of indirect responses, including corrective indirect responses. The design of the system is based on two hypotheses.</p><p>(1) To a large extent, the inferencing required to detect the need for an indirect response and to select the appropriate one can be driven directly from the lexical and syntactic structure of the input question.</p><p>(2) The domain specific knowledge required to process a significant class of natural language database queries is already present in standard ways in database systems, if it is augmented by a suitably encoded lexicon.</p><p>Consequently, the inferencing mechanisms required to produce the cooperative responses are domain transparent in the sense that they will produce appropriate behavior without modification from any suitable database. These mechanisms can therefore be transported to new databases unchanged.</p><p>To illustrate this claim, a high level description of the method by which corrective indirect responses are produced follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">The Meta Query Language</head><p>Most database queries can be viewed as requesting the selection of a subset (the response set) from a presented set of entities (this analysis follows <ref type="bibr">[2]</ref>). Normally, the presented set is put through a series of restrictions, each of which produces a subset, until the response set is found. This view is formalized in CO-OP in the procedures that manipulate an intermediate representation of the query, called the Meta Query Language (MQL).</p><p>The MQL is a graph structure, where the nodes represent sets (in the mathematical, not the database sense) 'presented' by the questioner, and the edges represent binary relations defined on those sets, derived from the lexical and syntactic structure of the input query.</p><p>Conceptually, the direct response to a query is an N-place relation realized by obtaining the referents of the sets in the database, and composing them according to the binary relations. Each composition will have the effect of selecting a subset of the current sets. The subsets will contain the elements that survive (participate) in the relation. (Actually, the responses are realized in a much more efficient fashion--this is simply a convenient view.)</p><p>As an example, consider the query "Which students got Fs in linguistics courses?" as diagrammed in Fig. <ref type="figure">I</ref>. This query would be parsed as presenting 4 sets: 'students', 'Fs', 'linguistics', and 'courses'. (The sets 'linguistics' and 'Fs' may appear counterintuitive, but should be viewed as singleton entities assumed by the questioner to exist somewhere in the database.) The direct answer to the query would be a 4 place relation consisting of a column of students, grades (all Fs), departments (all linguistics), and courses. For convenience, the columns containing singleton sets (grades and departments) would be removed, and the remaining list of students and associated courses presented to the questioner. Executing the query consists of passing the MQL representation of the query to an interpretive component that produces a query suitable for execution on a CODASYL database using information associated for this purpose with the lexical items in the MQL. (The domain specific knowledge required to perform this translation is encoded purely at the lexical level: the only additional domain dependent knowledge required is access to the database schema.)</p><p>While the MQL, as implemented in CO-OP, has its advantages and disadvantages (for example, it is difficult to represent predicates of more than two arguments), it has several characteristics that ought to be present in any representation used for similar purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>) IN</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FIG. 1. Meta Query Language representation of "Which students got Fs in linguistics courses?"</head><p>First, it reflects closely the surface structure of the input (indeed, it is little more than a modified parse tree), and so facilitates the capturing of surface syntactic features. For example, the representation of corresponding passives and actives is not the same. This has an important bearing on the organization of the responses.</p><p>Second, it provides a level of description useful for formulating explanations that a questioner is certain to understand. This occurs mainly because each part of an MQL expression is labelled with a lexical item or phrase that the questioner just used (with minor exceptions). Failures at lower levels of the system can always be localized to the processing of some subset of the MQL, and the offending subset can be explained to the questioner in his or her own terms.</p><p>Third, the MQL representation of a query is invariant under differing organizations of the underlying database. Many of the organizational options available to a database designer have no bearing on either the range of questions that can be appropriately posed to the database or on the content of the responses--they affect only the efficiency of retrieval. Consequently, the options chosen by the database designer ought to be transparent to the questioner. In CO-OP, the organization of the response is a function solely of the MQL, and so is not affected by variations in the organization of the database.</p><p>MQL incorporates limited mechanisms for handling negation, quantification, and disjunction, though these details are not included here. A more complete description can be found in <ref type="bibr" target="#b10">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Computing corrective indirect responses</head><p>The crucial observation required to produce a reasonable set of corrective indirect responses is that the MQL query presumes the non-emptiness of its connected subgraphs. If the referent (in the database) of a subgraph is an empty set, then the response to the entire query must also be an empty set. The emptiness of a subgraph therefore implies that at most one direct response can be correct (specifically, the empty set), and so each connected subgraph corresponds to a presumption the questioner has made about the domain of discourse.</p><p>Consequently, should the initial query return a null response, the CO-OP control structure can check the questioner's presumptions by passing each connected subgraph to an interpretive component to check its non-emptiness. (Since each subgraph itself constitutes a well-formed query in the MQL representation, this interpretive component is the same one used to execute the original query.) Should a presumption prove false (i.e. a null response is returned from the database system), an appropriate indirect response can be generated, rather than a meaningless or misleading direct response, such as "None." For example, in the query of Fig. <ref type="figure">1</ref>, the subgraphs and their corresponding corrective indirect responses are given in Fig. <ref type="figure" target="#fig_0">2</ref>. Suppose that there are no linguistics courses in the database. Rather than presenting the direct, correct answer of "None.", the control structure will pass each connected subgraph in turn to be executed against the database. When subgraph 7 is checked, it might reveal that no linguistics courses exist in the database, and so a response of "I don't know of any linguistics courses." could be generated. This corrective indirect response (and all responses generated through this method) will entail the direct answer, if any, since they will entail the emptiness of the direct response set.</p><p>Several aspects of this procedure are worthy of note. Firstly, although the selection of the response is dependent on knowledge of the domain (as represented in the database), the computation of the presumptions is totally independent of domain specific knowledge. Because these inferences are driven solely by the parser output (MQL representation), the procedures that determine the presumptions (by computing subgraphs) require no knowledge of the domain. Consequently, producing corrective indirect responses from another database, or even another database system, requires no changes to the inferencing procedures.</p><p>Secondly, the mechanism for selecting an indirect response is identical to the procedure for executing a query--each subgraph is itself a well-formed query No additional computational machinery need be invoked to select the appropriate indirect response.</p><p>Thirdly, the computational overhead involved in checking and correcting the questioner's presumptions is not incurred unless it has been determined that an indirect response may be required. Should the query succeed initially, no penalty in execution time will be paid for the ability to produce the indirect responses. In addition, the only increase in space overhead is a small control program to produce the appropriate subgraphs (the linguistic generation of the indirect response is essentially free--it is a trivial addition to the paraphrase component already used in the parsing phase).</p><p>The MQL also provides a means for selecting the most appropriate set of corrective responses when more than one is applicable. The presumptions of a question can be partially ordered according to an entailment relationship: the failure of some presumptions entail the failure of others. For example, if there are no courses, then there are no Fs in courses, which in turn entails that there are no Fs in linguistics courses, etc. It is often the case that several presumptions of a question fail simultaneously, in part because of this partial ordering.</p><p>In such cases, the most appropriate response is to correct the least failing set of presumptions in this orderingfl In the MQL, this ordering manifests itself as a subgraph relation among the subgraphs of the MQL: some subgraphs are subgraphs of others. By checking the non-emptiness of the subgraphs in a suitable order, the most appropriate response can be formulated. Thus, in the example, it is possible for the system to produce a response such as "I don't know of any Fs, and I don't know of any linguistics courses.", without producing the additional irrelevant facts that there are no Fs in courses, no students got Fs, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Specifications and Restrictions</head><p>CO-OP was designed and implemented in order to study the feasibility of producing cooperative responses to requests for information retrieval in a computational setting. Consequently, the goal of the implementation was not to produce a fully robust natural language query system, but rather to provide a testbed for the continuing study of several aspects of cooperation in human question-answering. Careful attention was paid to maintain a highly modular and portable (to new databases) system, so that new ideas could possibly be explored by supplementing or supplanting portions of the work already done. The system is implemented on a DEC KL-10 under TOPS-10 mainly in UCI-RUTGERS-LISP and FORTRAN. It runs as two separate tasks, one FORTRAN (the SEED database system <ref type="bibr" target="#b6">[7]</ref> and Q query processor <ref type="bibr" target="#b2">[3]</ref>), and 2 This is more an empirical observation than a provable fact. This set of failed presumptions provides the most perspicuous way of communicating the nature of the problem to the questioner, following the Maxims of <ref type="bibr" target="#b7">[8]</ref>.</p><p>one LISP (the natural language front end, including query generator and report writer). The LISP task, including interpreter, compiled code, lexicon, database schema, grammar, and 84K bytes of workspace occupies about 168 memory pages, or 336K bytes. The FORTRAN task occupies 76 memory pages, or 152K bytes. These two tasks communicate through files, using a straightforward protocol. (This interface was developed by Steven Platt.) All user interactions take place with the LISP task.</p><p>CPU time for the natural language front end required to answer the questions in the protocols ranged from 0.5 to 7 CPU seconds, with the average around 2.5 seconds. A significant portion of these times is attributable to the interface: the communication file is checked once a second while the database query system is in operation. Real time response ranged from as fast as could be printed at 300 baud to about 30 seconds (under average machine load), though these figures vary substantially depending on the contention for system resources. Approximately 90% of this time is spent actually accessing the database.</p><p>A rough description of the major components of the system is as follows. The control structure prints an introductory message and accepts a query from the terminal. This input is put through a lexical scanner, which includes a morphological analyzer, and is then passed to the parser. The parser, mainly developed by Eric Mays, is an Augmented Transition Network parser <ref type="bibr" target="#b21">[22]</ref> that outputs MQL directly. The MQL is passed to the paraphrase component, and presented to the user for approval. The paraphrase component was developed by Kathy McKeown <ref type="bibr" target="#b15">[16]</ref>. If acceptable, it is passed to a response component that first attempts a direct response, and then various indirect responses. Throughout the process, various MQL expressions are passed to a translation component that converts them to a formal query in the Q query language. (This translation uses only the MQL and the database schema as knowledge sources.) The results are sent to the database system by writing them to a file. A second file is checked repeatedly for a response. When the response returns, it is reorganized, formatted, and printed by the report writer, and the cycle begins again.</p><p>Several systematic limitations were imposed on the implementation to simplify the design. The major ones are:</p><p>(1) The grammar is capable only of building MQL structures that are trees. This eliminates certain types of co-reference, but simplifies the traversal and translation procedures tremendously.</p><p>(2) The database path finding algorithms assume that the database schema is a tree, although an extended version that operates on graphs was designed but not implemented. This restriction has minimal effects.</p><p>(3) The grammar is designed to handle only simple WHquestions. (Questions beginning with a WH-word, such as What, Where, Who, etc.) Not only does this reduce the size of the grammar, but it encourages the user to use certain syntactic structures that facilitate the communication of intentions beyond the literal content of the request. In addition, this restriction is easily explained to a naive user and does not seem to significantly limit the range of queries that can be expressed. The grammar also does not handle anaphora, elipsis, verb phrase deletion, and a variety of other linguistic phenomena.</p><p>(4) The semantics of verbs and prepositions are assumed in the database to be paths through the database schema between the referring expressions that they link. In this way their semantics can be derived from the database schema, at the cost of potential misinterpretation.</p><p>(5) The system can only process requests for retrieval of data already present in the database system. Thus, requests that require arbitrary calculations, regardless of how trivial, cannot be answered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">The lexicon</head><p>The handling of the lexicon is central to the design of CO-OP, in part because it is a major source of domain specific world knowledge. Perhaps its most unusual features are the ability to construct new lexical entries for unknown strings in the input (assumed to be database values, as described in <ref type="bibr" target="#b11">[12]</ref>), and the definitions of different word senses (semantic ambiguities) as procedures for extracting the referents of these words from the database. The lexicon handling is based on the hypothesis that the semantic knowledge necessary to interpret and respond to questions can to a large degree be decomposed to the lexical level. Hedging this somewhat, the lexicon can (and does) contain not only individual words but also phrases that are treated as single lexical items (such as 'computing resource units'). For a discussion of this concept see the phrasal lexicon of <ref type="bibr" target="#b0">[1]</ref>.</p><p>By far the largest class of entries in the lexicon are the nouns, which usually make direct reference to particular fields, records, etc. in the database. The most difficult aspect of coding nouns in the lexicon is the construction of the data structure that indicates the various senses that the word can take on in the domain. This data structure represents the meaning of the noun by identifying the items in the database that it refers to. The identification is in the form of a program schemata, from which a program fragment is easily constructed to retrieve the actual referent, if any, when required. The program schemata consists of:</p><p>(1) A 'context' record type--all information that needs to be accessed to select the referent must occur in or above this record in the database schema. It serves as a 'handle' into the database to retrieve the referent, and is used in the disambiguation heuristics.</p><p>(2) A repeating substructure consisting of a field name, the record in which that field occurs, any restrictions to be applied to the values of that field, and a flag to indicate if the item should be printed as an identifier.</p><p>As a simple example, consider the noun 'programmers'. In one of the test databases, the programmers are instances of the 'USERS' record, but are identified by having 'user numbers' that are greater than 8000. The context record is therefore 'USERS', and two fields have to be accessed to identify the programmers--'USENR' (user number) and 'USNAM' (user name). The USENR field carried a restriction that the value must exceed 8000, while the USNAM field is unrestricted. The values of both fields are printed (indicated by the 'T' flag, below) to identify specific instances in the referent. The LISP form of this structure is ... (USERS (USENR USERS (GT 8000) T) (USNAM USERS NIL T))...</p><p>If the word 'programmers' had more than one potential meaning in this domain, a structure like this would be created for each meaning. A specific one would be chosen in a given instance by the word sense disambiguation routines based on the syntactic and semantic context in which the word occurs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Sample Questions and Responses</head><p>The domain for these examples is a real database from the National Center for Atmospheric Research (NCAR) in Boulder, Colorado. One of the functions of NCAR is to provide computational resources to researchers across the country working on government grants, mainly in meteorology. The database tracks the utilization of these resources. It contains information on users, programmers (users that work for the computing facility), divisions (which are organized further into superdivisions), accounts, projects, sponsors, and project advisors, to name a few. To understand the responses, it is important to note that users can be in many divisions, and work on many projects, but the projects are not considered to be in particular divisions. The projects, however, are organized into areas of interest, according to a set of area codes. A diagram and description of the NCAR database can be found in Appendix A.</p><p>An annotated sample of questions and answers illustrating the salient features of the current implementation follows. Names have been altered in the interest of privacy. 'Q' (below) stands for question, 'P' for paraphrase, and 'R' for response. (The paraphrases are presented to the user for approval prior to execution of the query.) Commentary is in square brackets ([ ]). (Some irrelevant paraphrases and responses have been deleted for brevity.)</p><p>Q: Who advises projects in area 36? P: Assuming that there are projects that are in area 36, who advises those projects?</p><p>[The system incorporates a powerful paraphraser, 3 that performs two types of disambiguation: lexical--it ~vill explain its chosen interpretation for vague or ambiguous terms; and syntactic--it explains the clausal dependencies determined by the parser. It is also used for indirect responses, as illustrated below. This component has access solely to the MQL (parser output), and so requires no modification on new domains.] R: I don't know of any area 36.</p><p>[This is an example of a corrective indirect response. Rather than giving a misleading direct answer of "No one.", the system produces the appropriate indirect response, using the techniques described above. Note that the system carefully hedges its response with respect to its state of knowledge, rather than assuming either a closed or open world database <ref type="bibr" target="#b16">[17]</ref>. 4] Q: Which programmers from the ASD group are in superdivision 5000?</p><p>[The programmers are organized into groups, identified by group IDs.] P: (I am assuming that ASD is a GROUP ID.) Which programmers are in superdivision 5000? Look for programmers that are from ASD group.</p><p>[This paraphrase illustrates both types of disambiguation, although the lexical disambiguation is probably unnecesary in this example.] R: I don't know of any ASD group. I don't know of any programmers that are in superdivision 5000.</p><p>[This corrective indirect response has two components. Rather than simply correcting all subgraphs of the MQL that denote empty references in the database, the system explains only the appropriate ones. For example, since there is no ASD group, it is obvious that there are no programmers in the ASD group. This parsimony, a reflection of Grice's "Maxim of Quantity" <ref type="bibr" target="#b7">[8]</ref>, is achieved by noting that the presumptions (subgraphs) of the MQL are partially ordered according to a 'subgraph' relation, i.e. some subgraphs are subgraphs of others. The emptiness of a lesser subgraph in the ordering will necessarily entail the emptiness of all greater subgraphs. CO-OP computes and corrects only the least failing subgraphs in this ordering. Note that this technique is entirely domain transparent: no additional domain driven inference is required.] Q: Which projects in oceanography does Nasa Headquarters sponsor? P: (I am assuming that 'Nasa Headquarters' is a SPONSOR NAME.) (I am assuming that 'oceanography' is an AREA OF INTEREST.) Which projects does Nasa Headquarters sponsor? Look for projects that are in oceanography.</p><p>[Note that 'Nasa Headquarters" and 'oceanography" appear only as values in the database--not as explicit entries in the lexicon. A set of heuristics are used to infer the appropriate fields in the database in which these unknown terms are likely to occur. This allows the lexicon to remain current even though the database may be subject to updates. This problem is handled as a special case of word sense disambiguation.[ A suggestive response provides further information, not literally requested, when the answer to the original query is null or trivial (but no detectable presumptions fail). Normally, a suggestive response is an answer to a slightly modified question. As implemented, this modified question is generated by altering the "focus' of the question (the aspect of the question most likely to change in a follow-up question). In this case, after discovering an empty referent in the database for the entire query, the system attempts to find a corrective response. Since this query is well formed with respect to the database (i.e. no presumptions fail), it attempts to locate a focus in the query which it can eliminate to produce a hopefully relevant and helpful response. On a syntactic basis, 'oceanography' is designated as the focus, and a new query is formed for the indirect response by eliminating this from the query. Specifically, this focus is a modifying clause syntactically 'furthest' from the subject (Nasa Headquarters). This new query is then executed and displayed.] [This is an example of failure in the system. In principle the only kind of failure is parse failure--the interpretive components can process any legal output of the parser. (In addition, the parser will reach an interpretation of any syntactically valid input, regardless of its semantic well-formedness.) Consequently, the only type of failure diagnostics that are required are in the parse. During the parse a current hypothesis regarding the input is maintained at all times. In the event of a parse failure, the best guess (largest hypothesis) encountered is displayed for the user, in the hope that this will aid the user in localizing the nature of the problem. This approach, to try to explain what went right with the parse rather than what went wrong, is motivated by the fact that the point at which the error actually occurred is often considerably before the point at which the error is detected <ref type="bibr" target="#b20">[21]</ref>. Any attempt to diagnose the error at the point of failure is more likely to mystify the user than to help him or her re-phrase the question. In this case the system is unable to process a negation preceding a prepositional phrase.] Q: Which programmers are in division 4111 and 4361?</p><p>[The scoping of conjunction is a subtle problem that must be handled in any serious natural language query system. Here the parser is faced with essentially three syntactically valid scopes: conjoining the numbers, the divisions (division 4111 and division 4361), or conjoining the programmers (programmers in division 4lll and programmers in division 4361). The system chooses the narrowest scoping that could result in a non-empty response set based on an inspection of the database schema. The basic structure of the CODASYL formalism is the functional relationship (in-or-above in the database schema diagram), in this case revealing that divisions can have only one number. On this basis, the narrowest scope is ruled out. However, the schema does admit the possibility of programmers being in two divisions (a many-to-many relationship), and so this interpretation is chosen. The paraphrase makes this choice clear to the user.] P: Which programmers are in division 4361 and division 4111?</p><p>[By contrast, the following question is given a wide scope interpretation, although it is syntactically identical. Areas, like divisions, can have only one number, but, in this case, projects can be in only one area.] Q: Which projects are in area 6 and 27? P: To simplify matters I'm going to split your question into several parts. I understand your question to mean: Which projects are in area 27'? Which projects are in area 6?</p><p>[Mainly for its own convenience, the system interprets wide scoped conjunctions as presenting multiple questions. Notice that the effect of the 'and' in this case is rather like that of an 'or'. The system then answers each question in turn. [Another form of 'stonewalling" is to provide precisely the information requested, without labelling or identifying it sufficiently. Although this question literally asks only for phone numbers, the response includes the additional relevant information of the advisor's names and titles. Without this information, the list of numbers is not likely to be useful. The basic strategy here is to incorporate into the response information on each class of items explicitly mentioned in the question that is not restricted to a single value. Since the advisors have been explicitly mentioned, their names and titles are included in the response. (These fields are specified as the identifying fields for advisors in the lexicon.)] [This question illustrates how the system organizes the responses according to the way the information is presented by the question. This can be contrasted with the following question, which requests the same information in a different form. CO-OP is designed around the convenient fiction that every option a user has for phrasing his or her question plays some role in the formulation of a cooperative response.] Q: Which groups do programmers work in? R:</p><formula xml:id="formula_2">Q: Which</formula><p>( [Universal quantification (all, every, etc.) requires executing more than one query against the database. First, a query is executed to determine the size of the universally quantified set (in this case, the number of projects in area of interest 55). This value is substituted into a second query to produce the appropriate response. Note that the paraphrase in the above example reflects the fact that in English, universally quantified expressions are normally assumed to be non-empty.] Q: What are the specialties of the HAO group?</p><p>[This question, while quite natural for English speakers to interpret, contains a form of indirect reference. 'HAO group' here does not actually refer to the group itself, but rather to its members. If the system were very literal minded, it would find this question semantically ill-formed, since groups don't have specialties. However, because the question has been posed, CO-OP assumes that the user must have meant something, no matter how poorly expressed. This pragmatic effect is reflected in the system's ability to reach a most reasonable interpretation of virtually any syntactically valid input, regardless of its literal implausibility. In this case CO-OP discovers that the simplest path in the schema from specialties to groups is through the programmers, and so it responds as follows.] R:</p><p>( </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Portability</head><p>Much work in AI has focussed on methods for organizing and representing large amounts of world knowledge. One motivation for this research is an assumption that the more knowledge that can be incorporated into a system, the more intelligent its behavior will be. While this assertion is almost certainly valid, it is equally interesting to explore the question of how little knowledge may be necessary to perform particular tasks. A sufficient amount of specialpurpose knowledge can be encoded in a program to perform practically any particular task; however, it is difficult to discover what knowledge is necessary and to partition it into general and specific components.</p><p>For this reason, a design limitation was placed on CO-OP that all domain specific knowledge be encoded at the lexical level. Only the information coded in the lexicon or already available in the database system could be used as sources of knowledge about the domain. All other aspects of the system, including the generation of cooperative responses, had to be totally free of any database specific knowledge. (That is, the programs had to be completely domain transparent.) Though this limited the type of questions that could be handled to simple extensional requests for the retrieval of existing data, it provided a means of separating the general knowledge required for this task from the domain specific knowledge, and for discovering what, if any, additional knowledge sources were required.</p><p>A by-product of this limitation was that the system could be transported to new domains simply by changing the database and lexicon. This portability provided a rigorous test of the programs. To verify the claims of domain transparency and portability, CO-OP was moved from the NCAR database to the ONRODA database, a collection of military information on ships, aircraft, submarines, etc., created as part of the Operational Decision Aids Program of the Office of Naval Research at the University of Pennsylvania. s</p><p>The move was quite successful: the CO-OP programs continued to produce cooperative responses without modification. This section reports on the results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">Domain specific structures</head><p>Several data structures required recoding to affect the changover. They are as follows.</p><p>(1) The lexicon. As described earlier, some of the domain specific words available to the users must be encoded explicitly in the lexicon, along with their definitions in terms of the database.</p><p>(2) The database schema. This has to be put in a special form to facilitate path finding, in order to generate database queries that can traverse the database structure. This task can be performed automatically if the schema is a s Under contract N00014-75-C-0440 with the assistance of CTEC, Inc., of McLean, Va. s.J. KAPLAN tree structure (i.e. if no ambiguous paths exist), and so a program could be written that inputs a standard CODASYL DDL and outputs the needed structure. In the case of a graph structured schema, a selection of preferred paths is required.</p><p>(3) The database itself. Obviously, the new database must be supplied.</p><p>(4) The item print names. A special list associating a print name with each field in the database is required for labelling the output and providing lexical disambiguation in the paraphrase.</p><p>(5) The database name and password. These are needed to open the database.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.">Effort required and extent of a new domain</head><p>Since the translation of the database schema could be done automatically (it was not in this instance), with the exception of resolving ambiguous paths, the time required to encode it by hand is not particularly relevant here. 6 Similarly, no significant effort was expended to acquire the database, or supply the database name and password. The remaining time was occupied by the preparation, entry and verification of the lexicon and list of print names: this required about 5 hours.</p><p>Several caveats should be observed in extrapolating this experience, however. Only a subset of the ONRODA database was used. A selection of 18 records and 22 sets was made, containing a total of about 58 fields. The basic lexicon contained about 110 entries, not including morphological variants or nouns and numbers occuring only as database values. Estimating the true extent of the lexicon is difficult because of the system's ability to handle unknown terms. However, given the current contents of the database as a starting point, the system has an effective relevant vocabulary of about 750-i000 words. This proved more than adequate to formulate a wide variety of non-trivial queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.">Results and examples</head><p>Immediately upon completion of the ONRODA lexicon, the system was able to produce the same types of responses to the same classes of questions as with the NCAR database. No further tuning or modification of the programs of any kind was required. In fact, the ONRODA database proved to be a richer domain than the NCAR database, and consequently provided a wider range of interesting questions with which to test the system. Response times were comparable to those observed with the NCAR database.</p><p>The database was operational under the SEED CODASYL database system on a DEC KL-10. It consists of records on ships, aircraft, submarines, guns, By hand, it took about 5 hours. torpedos, radar, and bombs, with a significant variety of data on each. The sets generally indicate which and how many of the latter four exist on the first three. The data has been falsified, and so does not accurately reflect the real world. No modifications of any kind were made to either the database, database schema, or the database system.</p><p>An annotated sample of questions and responses is listed below. As before, 'Q' means question, 'P' means paraphrase, 'R' means response, and comments are enclosed in square brackets ([ ]). (Irrelevant paraphrases and responses are deleted for brevity.) The programs that produced this output are the same ones that produced the transcript in the previous section: absolutely no changes were made.</p><p>Q: What is the maximum ceiling of aircraft that carry MK-84 bombs? R:</p><formula xml:id="formula_3">(ARCRFT MAX CEIL (FT)) (ARCRFF NAME) 41500 A-7 44000 A-6 50000 AV-8A 58000 F-5</formula><p>[This query gives a flavor of the type of data in the ONRODA database. Notice that the system has produced the information for each aircraft--it is incapable of selecting only the greatest of these.] Q: Which subs with radar don't carry MK-44 torpedos? R: I don't know of any subs with radar. 1 don't know of any subs that carry MK-44 torpedos.</p><p>[This is an example of a corrective response. Notice that the latter correction entails that all subs don't carry MK-44 torpedos. Here the negated presumption does not entail an empty set, but rather the entire set, indicating that the restriction was irrelevant. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R:</head><p>]This response contains information not literally requested. In addition to the detection range, which was the only information literally requested, it supplies the ship name and torpedo names as well.I Q: Which aircraft that carry MK-46 torpedos have refuel capability? R: I don't know of any aircraft that carry MK-46 torpedos that have refuel capability. But you might be interested in any aircraft that carry any torpedos that have refuel capability... [To interpret this question it is necessary for the system to recognize that an indirect reference has been made. In the database, ships don't have fire rates; guns do. Rather than reject the question as semantically ill-formed, CO-OP concludes that the user is probably referring to the fire rate of the guns on the ships, and responds accordingly. The response could be improved by including the gun names. A minor change to the lexicon would achieve this.]</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusion</head><p>Just as programming languages have their own style and environment of use, natural languages have pragmatic conventions of use and stylistic considerations (these may vary from culture to culture). While ignoring structuring principles may lead to incomprehensible but functionally correct programs, ignoring conventions of natural language use in query systems may lead to uncooperative but literally correct responses. For natural language systems to improve the utility of databases by providing access to inexpert users, they will have to obey the conversational principles observed by native speakers of the language.</p><p>This paper has summarized the design and implementation of CO-OP, a natural language database query system that provides cooperative responses to simple English requests for data retrieval. By relying solely on the lexicon and database itself for the domain specific knowledge required to parse, disambiguate, interpret, and respond cooperatively to queries, the system achieves a high degree of portability to new databases. The portability of the system demonstrates that there are universal (domain-independent) aspects of cooperative behavior that can be captured in a practical computer program, and applied to real-world problems such as increasing the utility of database query systems. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>FIG. 2 .</head><label>2</label><figDesc>FIG. 2. Connected subgraphs of MQL query.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>R:</head><label></label><figDesc>I don't know of any projects in oceanography that Nasa Headquarters sponsors. But you might be interested in any projects that Nasa Headquarters sponsors ... (PROJECT/ACCq') (PROJECT TITLE) 35071040 NON-EQUILIB. OF ELECTRONS IN SOLR RE 35071048 OUTER ATMOSPHERES OF DWARF STARS... [This is an example of another type of indirect response--a suggestive indirect response.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Q[</head><label></label><figDesc>-Which projects advised by Thomas Wirth does Nasa Goddard Space Center sponsor'? [This question receives a direct response, and is designed to set up a context for the following question.[ Q: Which projects sponsored by NSF does Thomas Wirth advise'? R: I don't know of any projects that were sponsored by NSF that Thomas Wirth advises. But you might be interested in any projects that Thomas Wirth advises... This suggestive response was generated by designating the sponsor as the focus of the original query. Here the focus was determined contextually by comparing the current query with the previous one to see what has changed. Syntactic cues, such as in the previous example, are used only when no contextual cue can be derived from the previous query.] Q: Who sponsors projects not in oceanography? R" FAILURE. Sorry, but I didn't understand you fully--I have a very limited knowledge of English. My best guess as to what you meant is Who sponsors projects? Could you please rephrase your question and try again...</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>( 3 ][</head><label>3</label><figDesc>Here, system produces a suggestive indirect response. It has designated the torpedo type as the most likely focus, and consequently answers the more general question, as indicated.] Q: What are the classes of ships? This question requires the system to perform an inversion on the ship class field to present the data in a form consistent with the request. Although the user has presented the classes as entities, they are represented in the database as attributes of the ships. Responses in CO-OP are a function of the phrasing of the query and the information in the database, but not the particular organization for the data chosen by the database designer.] Q: What is the fire rate of ships with SPS-40 radar?</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>TABLE A .</head><label>A</label><figDesc>1. Description of the NCAR database</figDesc><table><row><cell>Record</cell><cell>Item</cell><cell>Descriptkm</cell></row><row><cell>SUDIV</cell><cell>SDVNR</cell><cell>superdivision number</cell></row><row><cell></cell><cell>DIVNA</cell><cell>superdivision name</cell></row><row><cell>DIV1S</cell><cell>DIVNR</cell><cell>division number</cell></row><row><cell>DVNAM</cell><cell>UNNAM</cell><cell>division name</cell></row><row><cell>USDIV</cell><cell></cell><cell>(linking record)</cell></row><row><cell>USERS</cell><cell>USENR</cell><cell>user number</cell></row><row><cell></cell><cell>USNAM</cell><cell>user name</cell></row><row><cell>PROGR</cell><cell>EXPER</cell><cell>years of experience programming</cell></row><row><cell></cell><cell>SPECI</cell><cell>specialties</cell></row><row><cell></cell><cell>GROUP</cell><cell>programming group</cell></row><row><cell>RSCHS</cell><cell>RNAME</cell><cell>research sponsor name</cell></row><row><cell></cell><cell>RADDR</cell><cell>sponsor address</cell></row><row><cell>DATRS</cell><cell>CONID</cell><cell>contract monitor number</cell></row><row><cell></cell><cell>CONMT</cell><cell>contract monitor name</cell></row><row><cell></cell><cell>RSDAT</cell><cell>contract start date</cell></row><row><cell></cell><cell>REDAT</cell><cell>contract end date</cell></row><row><cell>ADVSR</cell><cell>ADNAM</cell><cell>project advisor name</cell></row><row><cell></cell><cell>ADVTL</cell><cell>advisor title</cell></row><row><cell></cell><cell>ADADR</cell><cell>advisor address</cell></row><row><cell></cell><cell>ADPNR</cell><cell>advisor phone number</cell></row><row><cell>DATAD</cell><cell>ADUSR</cell><cell>advisor user number</cell></row><row><cell></cell><cell>ASDAT</cell><cell>advising start date</cell></row><row><cell></cell><cell>AEDAT</cell><cell>advising end date</cell></row><row><cell>AOFIN</cell><cell>AOINR</cell><cell>area of interest number</cell></row><row><cell></cell><cell>TITLE</cell><cell>area of interest name</cell></row><row><cell>PROJT</cell><cell>PRONR</cell><cell>project number</cell></row><row><cell></cell><cell>ACFLG</cell><cell>activity flag</cell></row><row><cell></cell><cell>LSTUP</cell><cell>date of last activity</cell></row><row><cell></cell><cell>LUSER</cell><cell>user number of project leader</cell></row><row><cell></cell><cell>TCRUS</cell><cell>total CRU usage to date</cell></row><row><cell>PRJID</cell><cell>PRTIT</cell><cell>project title</cell></row><row><cell>ACCNT</cell><cell>TCRU</cell><cell>computing resource units used</cell></row><row><cell></cell><cell>TCPU</cell><cell>CPU seconds used</cell></row><row><cell></cell><cell>TPPU</cell><cell>peripheral processor secs used</cell></row><row><cell></cell><cell>TPRT</cell><cell>pages printed</cell></row><row><cell></cell><cell>TCRD</cell><cell>#f cards punched...</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_0"><p>Designed and implemented by Kathy McKeown<ref type="bibr" target="#b15">[16]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_1"><p>A closed world database is one in which the absence of a fact implies the truth of its negation. For example, if a database does not contain information that John Smith is a manager, then it can be assumed that John Smith is not a manager, under the closed world assumption. In an open worm database, this assumption does not hold--if John Smith is not listed in the phone book, it cannot be inferred that he doesn't have a phone number.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENT</head><p>I am indebted to several people for their contributions to the implementation efforts: Kathy McKeown for designing and implementing the paraphraser, Eric Mays for his work on the parser, Steve Platt for getting LISP and FORTRAN talking, Peter Buneman and Ron Lee for much help and advice, Bruce Kaufman, Tom Williams, Rajeev Sangal, John Hayward, Rob Gerritsen and Dave Root. In addition, John Donnelly and his colleagues at the National Center for Atmospheric Research in Boulder, Colorado kindly provided me with a sample database.</p><p>I would like to thank my thesis advisor, Aravind K. Joshi, for his guidance and advice throughout the development of this work.</p></div>
			</div>


			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>* This work was partially supported by NSF grant MCS 76-19466 and ARPA contract MDA</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix A. NCAR DB Description</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The phrasal lexicon</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Becker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. First Workshop on Theoretical Issues in Natural Language Processing</title>
		<meeting>First Workshop on Theoretical Issues in Natural Language essing<address><addrLine>Cambridge, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1975">1975</date>
			<biblScope unit="page" from="60" to="63" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">D</forename><surname>Belnap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">B</forename><surname>Steel</surname></persName>
		</author>
		<title level="m">The Logic of Questions and Answers</title>
		<meeting><address><addrLine>New Haven, CT</addrLine></address></meeting>
		<imprint>
			<publisher>Yale University Press</publisher>
			<date type="published" when="1976">1976</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Q--Communication query system for SEED</title>
		<author>
			<persName><forename type="first">P</forename><surname>Buneman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sangal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Hayward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Tech. Rept., Dept. of Decision Sciences</title>
		<imprint>
			<date type="published" when="1978">1978</date>
			<pubPlace>Philadelphia, PA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Pennsylvania</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Data Base Task Group of CODASYL Programming Language Commiteee</title>
		<imprint>
			<date type="published" when="1971">1971</date>
			<publisher>ACM Publications</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
	<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Rendezvous version 1 : An experimental English-language query formulation system for casual users of relational data bases</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">F</forename><surname>Codd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Research Rept</title>
		<imprint>
			<biblScope unit="volume">2144</biblScope>
			<date type="published" when="1978">294117. 1978</date>
			<pubPlace>San Jose, CA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>IBM Research Laboratory</orgName>
		</respStmt>
	</monogr>
	<note>RJ</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m">Syntax and Semantics: Speech Acts</title>
		<editor>
			<persName><forename type="first">P</forename><surname>Cole</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Morgan</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1975">1975</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">SEED Reference Manual, Version CII(I--B04 draft</title>
		<author>
			<persName><forename type="first">R</forename><surname>Gerritsen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1978">1978</date>
			<publisher>International Data Base Systems, Inc</publisher>
			<pubPlace>Philadelphia, PA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Logic and conversation</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">P</forename><surname>Grice</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Syntax and Semantics: Speech Acts</title>
		<editor>
			<persName><forename type="first">P</forename><surname>Cole</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">L</forename><surname>Morgan</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1975">1975</date>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="41" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The ROBOT system: Natural language processing applied to data base query</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">R</forename><surname>Harris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM 78</title>
		<meeting>ACM 78<address><addrLine>Washington, DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1978">1978</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">A logical analysis of questions and answers</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">D</forename><surname>Hull</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1974">1974</date>
			<pubPlace>Jesus College, CA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Univ. of Cambridge</orgName>
		</respStmt>
	</monogr>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Cooperative responses from a portable natural language data base query system</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Kaplan</surname></persName>
		</author>
		<idno>HPP-79-19</idno>
		<imprint>
			<date type="published" when="1979">1979</date>
			<pubPlace>Stanford, CA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Univ. of Pennsylvania; ibid ; Computer Science Department, Stanford University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Stanford Heuristic Programming Project Report</note>
	<note>Ph.D. Dissertation</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A technique for managing the lexicon in a natural language interface to a changing data base</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Mays</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">K</forename><surname>Joshi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IJCAI</title>
		<meeting>IJCAI<address><addrLine>Tokyo, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1979">1979. 1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">On the difference between natural language and high level query languages</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Kaplan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM 78</title>
		<meeting>ACM 78<address><addrLine>Washington, DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1978">1978</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Two kinds of presupposition in natural language</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">L</forename><surname>Keenan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Studies in Linguistic Semantics</title>
		<editor>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Fillmore</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">D</forename><forename type="middle">T</forename><surname>Langendoen</surname></persName>
		</editor>
		<meeting><address><addrLine>Holt, Rinehart and Winston, New York</addrLine></address></meeting>
		<imprint>
			<date>19711</date>
			<biblScope unit="page" from="45" to="54" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Formal languages for semantic representation</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">P J</forename><surname>Landsbergen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J H</forename><surname>Scha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Aspects of Automated TextProcessing</title>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">S</forename><surname>Petofi</surname></persName>
		</editor>
		<meeting><address><addrLine>Hamburg</addrLine></address></meeting>
		<imprint>
			<publisher>Buske</publisher>
			<date type="published" when="1978">1978</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Paraphrasing using given and new information in a question-answering system</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">R</forename><surname>Mckeown</surname></persName>
		</author>
		<idno>MS-CIS-80-13</idno>
		<imprint>
			<date type="published" when="1979">1979</date>
			<pubPlace>Philadelphia, PA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Dept. of Computer and Information Science, Univ. of Pennsylvania</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Rept</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On closed world data bases</title>
		<author>
			<persName><forename type="first">R</forename><surname>Reiter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Logic and Data Bases</title>
		<editor>
			<persName><forename type="first">H</forename><surname>Gallaire</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Minker</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Plenum Press</publisher>
			<date type="published" when="1978">1978</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Language access to distributed data with error recovery</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">D</forename><surname>Sacerdoti</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 5th IJCAL</title>
		<meeting>5th IJCAL</meeting>
		<imprint>
			<date type="published" when="1977">1977</date>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="196" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">REL: A Rapidly Extensible Language system</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">P</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">C</forename><surname>Lockeman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">H</forename><surname>Dostert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Deverill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 24th ACM National Conference</title>
		<meeting>24th ACM National Conference<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1969">1969</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">An English language question-answering system for a large relational database</title>
		<author>
			<persName><forename type="first">I</forename><surname>Waltz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">7</biblScope>
			<date type="published" when="1978">1978</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Responding to potentially unparsible sentences</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Weischedel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Tech. Rept., Dept. of Computer and Information Science, Univ. of Delaware</title>
		<imprint>
			<date type="published" when="1978">1978</date>
			<pubPlace>Newark, DE</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">An experimental parsing system for transition network grammars</title>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">A</forename><surname>Woods</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Natural Language Processing</title>
		<title level="s">Courant Computer Science Symposium</title>
		<editor>
			<persName><forename type="first">R</forename><surname>Rustin</surname></persName>
		</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Algorithmics Press</publisher>
			<date type="published" when="1973">1973</date>
			<biblScope unit="volume">8</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<author>
			<persName><forename type="first">W</forename><forename type="middle">A</forename><surname>Woods</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Nash-Webber</surname></persName>
		</author>
		<title level="m">The Lunar sciences information system: Final Report, BBN Rept. 2378, Bolt, Beranek and Newman Inc</title>
		<meeting><address><addrLine>Cambridge, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1972-10">1972. October 1980</date>
		</imprint>
	</monogr>
	<note>Received</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
