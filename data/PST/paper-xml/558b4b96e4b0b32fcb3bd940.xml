<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Do Faster Releases Improve Software Quality? An Empirical Case Study of Mozilla Firefox</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Foutse</forename><surname>Khomh</surname></persName>
							<email>foutse.khomh@queensu.ca</email>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Elec. and Comp. Engineering</orgName>
								<orgName type="institution">Queen&apos;s University</orgName>
								<address>
									<settlement>Kingston</settlement>
									<region>Ontario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Tejinder</forename><surname>Dhaliwal</surname></persName>
							<email>tejinder.dhaliwal@queensu.ca</email>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Elec. and Comp. Engineering</orgName>
								<orgName type="institution">Queen&apos;s University</orgName>
								<address>
									<settlement>Kingston</settlement>
									<region>Ontario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ying</forename><surname>Zou</surname></persName>
							<email>ying.zou@queensu.ca</email>
							<affiliation key="aff0">
								<orgName type="department">Dept. of Elec. and Comp. Engineering</orgName>
								<orgName type="institution">Queen&apos;s University</orgName>
								<address>
									<settlement>Kingston</settlement>
									<region>Ontario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Bram</forename><surname>Adams</surname></persName>
							<email>bram.adams@polymtl.ca</email>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">GIGL</orgName>
								<orgName type="institution" key="instit2">École Polytechnique de Montréal</orgName>
								<address>
									<region>Québec</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Do Faster Releases Improve Software Quality? An Empirical Case Study of Mozilla Firefox</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A949CF81FCF429C1C86ADACE76536D5A</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T05:08+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Software release</term>
					<term>release cycle</term>
					<term>software quality</term>
					<term>testing</term>
					<term>bugs</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Nowadays, many software companies are shifting from the traditional 18-month release cycle to shorter release cycles. For example, Google Chrome and Mozilla Firefox release new versions every 6 weeks. These shorter release cycles reduce the users' waiting time for a new release and offer better marketing opportunities to companies, but it is unclear if the quality of the software product improves as well, since shorter release cycles result in shorter testing periods. In this paper, we empirically study the development process of Mozilla Firefox in 2010 and 2011, a period during which the project transitioned to a shorter release cycle. We compare crash rates, median uptime, and the proportion of post-release bugs of the versions that had a shorter release cycle with those having a traditional release cycle, to assess the relation between release cycle length and the software quality observed by the end user. We found that (1) with shorter release cycles, users do not experience significantly more post-release bugs and (2) bugs are fixed faster, yet (3) users experience these bugs earlier during software execution (the program crashes earlier).</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>In today's fast changing business environment, many software companies are aggressively shortening their release cycles (i.e., the time in between successive releases) to speed up the delivery of their latest innovations to customers <ref type="bibr" target="#b0">[1]</ref>. Instead of typically working 18 months on a new release containing hundreds of new features and bug fixes, companies reduce this period to, say, 3 months by limiting the scope of the release to the new features and fixing only the most crucial bugs. For example, with a rapid release model (i.e., a development model with a shorter release cycle), Mozilla could release over 1,000 improvements and performance enhancements with Firefox 5.0 in approximately 3 months <ref type="bibr" target="#b1">[2]</ref>. Under the traditional release model (i.e., a development model with a long release cycle), Firefox users used to wait for a year to get some major improvements or new features.</p><p>The concept of rapid release cycle was introduced by agile methodologies like XP <ref type="bibr" target="#b2">[3]</ref>, which claim that shorter release cycles offer various benefits to both companies and end users. Companies get faster feedback about new features and bug fixes, and releases become slightly easier to plan (shortterm vs. long-term planning). Developers are not rushed to complete features because of an approaching release date, and can focus on quality assurance every 6 weeks instead of every couple of months. Furthermore, the higher number of releases provide more marketing opportunities for the companies. Customers benefit as well, since they have faster access to new features, bug fixes and security updates.</p><p>However, the claim that shorter release cycles improve the quality of the released software has not been empirically validated yet. Baysal et al. <ref type="bibr" target="#b3">[4]</ref> found that bugs were fixed faster (although not statistically significantly) in versions of Firefox using a traditional release model than in Chrome, which uses a rapid release model. <ref type="bibr">Porter et al.</ref> reported that shorter release cycles make it impossible to test all possible configurations of a released product <ref type="bibr" target="#b4">[5]</ref>. Furthermore, anecdotal evidence suggests that shorter release cycles do not allow enough time to triage bugs from previous versions, and hence hurt the developers' chances of catching persistent bugs <ref type="bibr" target="#b5">[6]</ref>. This is why Firefox's current high number of unconfirmed bugs has been attributed to the adoption of the 6 week-release cycle <ref type="bibr" target="#b5">[6]</ref>. In August 2011, Firefox had about 2, 600 bugs that had not been touched since the release of Firefox 4 five months earlier. The number of Firefox bugs that were touched, but not triaged or worked on was even higher and continues to grow everyday <ref type="bibr" target="#b5">[6]</ref>.</p><p>To understand whether and how transitioning to a rapid release model can affect the quality of a software system as observed by users, we empirically study the historical field testing data of Mozilla Firefox. Firefox is a hugely popular web browser that has shifted from the traditional development model to a rapid release model. This allows us to compare the quality of traditional releases to that of rapid releases, while controlling for unpredictable factors like development process and personnel (since those largely remained constant). As measures of the quality of Firefox, we analyze the number of post-release bugs, the daily crash counts and the uptime of Firefox (i.e., the time between a user starting up Firefox and experiencing a failure).</p><p>We studied the following three research questions:</p><p>RQ1) Does the length of the release cycle affect the software quality?</p><p>There is only a negligible difference in the number of post-release bugs when we control for the time interval between subsequent release dates. However, the median uptime is significantly lower for versions developed in short release cycles, i.e., failures seem to occur faster at run-time. RQ2) Does the length of the release cycle affect the fixing of bugs? Bugs are fixed significantly faster for versions developed in a rapid release model. RQ3) Does the length of the release cycle affect software updates? Versions developed in a rapid release model are adopted faster by customers, i.e., the proportion of customers running outdated versions that possibly contain closed security holes is reduced. A better understanding of the impact of the release cycle on software quality will help decision makers in software companies to find the right balance between the delivery speed (release cycle) of new features and the quality of their software.</p><p>The rest of the paper is organized as follows. Section II provides some background on Mozilla Firefox. Section III describes the design of our study and Section IV discusses the results. Section V discusses threats to the validity of our study. Section VI discusses the related literature on release cycles and software quality. Finally, Section VII concludes the paper and outlines future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. MOZILLA FIREFOX</head><p>Firefox is an open source web browser developed by the Mozilla Corporation. It is currently the third most widely used browser, with approximately 25% usage share worldwide <ref type="bibr" target="#b6">[7]</ref>. Firefox 1.0 was released in November 2004 and the latest version, Firefox 9, was released on December 20, 2011. Figure <ref type="figure" target="#fig_2">1</ref>(a) shows the release dates of major Firefox versions. Firefox followed a traditional release model until version 4.0 (March 2011). Afterwards, Firefox adopted a rapid release model to speed up the delivery of its new features. This was partly done to compete with Google Chrome's rapid release model <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>, which was eroding Firefox's user base. The next subsections discuss the Firefox development and quality control processes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Development Process</head><p>Before March 2011, FireFox supported multiple releases in parallel, not only the last major release. Every version of FireFox was followed by a series of minor versions, each containing bug fixes or minor updates over the previous version. These minor versions continued even after a new major release was made. Figure <ref type="figure" target="#fig_2">1</ref>(b) shows the release dates of the minor versions of Firefox.</p><p>With the advent of shorter release cycles in March 2011, new features need to be tested and delivered to users faster. To achieve this goal, Firefox changed its development process. First, versions are no longer supported in parallel, i.e., To date, five major versions of Firefox (i.e., 5.0, 6.0, 7.0, 8.0, 9.0) have finished the new rapid release model. Figure <ref type="figure" target="#fig_0">2</ref> illustrates the current development and release process of Firefox. The NIGHTLY channel integrates new features from the developers' source code repositories as soon as the features are ready. The AURORA channel inherits new features from NIGHTLY at regular intervals (i.e., every 6 weeks). The features that need more work are disabled and left for the next import cycle into AURORA. The BETA channel receives only new AURORA features that are scheduled by management for the next Firefox release. Finally, mature BETA features make it into MAIN. Note that at any given time (independent from the 6 week release schedule) unscheduled releases may be performed to address critical security or stability issues.</p><p>Firefox basically follows a pipelined development process. At the same time as the source code of one release is imported from the NIGHTLY channel into the AURORA channels, the source code of the next release is imported into the NIGHTLY channel. Consequently, four consecutive releases of Firefox migrate through Mozilla's NIGHTLY, AURORA, BETA, and MAIN channels at any given time. Figure <ref type="figure" target="#fig_0">2</ref> illustrates this migration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Quality Control Process</head><p>One of the main reasons for splitting Firefox' development process into pipelined channels is to enable incremental quality control. As changes make their way through the release process, each channel makes the source code available for testing to a ten-fold larger group of users. The estimated number of contributors and end users on the channels are respectively 100,000 for NIGHTLY, 1 million for AURORA, 10 million for BETA and 100+ millions for a major Firefox version <ref type="bibr" target="#b10">[11]</ref>. NIGHTLY reaches Firefox developers and contributors, while other channels (i.e., AU-RORA and BETA) recruit external users for testing. The source code on AURORA is tested by web developers who  are interested in the latest standards, and by Firefox add-on developers who are willing to experiment with new browser APIs. The BETA channel is tested by Firefox's regular beta testers.</p><p>Each version of Firefox in any channel embeds an automated crash reporting tool, i.e., the Mozilla Crash Reporter, to monitor the quality of Firefox across all four channels. Whenever Firefox crashes on a user's machine, the Mozilla Crash Reporter <ref type="bibr" target="#b11">[12]</ref> collects information about the event and sends a detailed crash report to the Socorro crash report server. Such a crash-report includes the stack trace of the failing thread and other information about a user environment, such as the operating system, the version of Firefox, the installation time, and a list of plug-ins installed.</p><p>Socorro groups similar crash-reports into crash-types. These crash-types are then ranked by their frequency of occurrence by the Mozilla quality assurance teams. For the top crash-types, testers file bugs in Bugzilla and link them to the corresponding crash-type in the Socorro server. Multiple bugs can be filed for a single crash-type and multiple crashtypes can be associated with the same bug. For each crashtype, the Socorro server provides a crash-type summary, i.e., a list of the crash-reports of the crash-type and a set of bugs that have been filed for the crash-type.</p><p>Firefox users can also submit bug reports in Bugzilla manually. A bug report contains detailed semantic information about a bug, such as the bug open date, the last modification date, and the bug status. The bugs are triaged by bug triaging developers and assigned for fixing. When a developer fixes a bug, he typically submits a patch to Bugzilla. Once approved, the patch code is integrated into the source code of Firefox on the corresponding channel and migrated through the other channels for release. Bugs that take too long to get fixed and hence miss a scheduled release are picked up by the next release's channel.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. STUDY DESIGN</head><p>This section presents the design of our case study, which aims to address the following three research questions:</p><p>1) Does the length of the release cycle affect the software quality? 2) Does the length of the release cycle affect the fixing of bugs? 3) Does the length of the release cycle affect software updates?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Data Collection</head><p>In this study, we analyze all versions of Firefox that were released in the period from January 01, 2010 to December 21, 2011. In total, we study 25 alpha versions, 25 beta versions, 29 minor versions and 7 major versions that were released within a period of one year before or after the move to a rapid release model. Firefox 3.6, Firefox 4 and their subsequent minor versions were developed following a traditional release cycle with an average cycle time of 52 weeks between the major version releases and 4 weeks between the minor version releases. Firefox 5, 6, 7, 8, 9 and their subsequent minor versions followed a rapid release model with an average release time interval of 6 weeks between the major releases and 2 weeks between the minor releases. Table <ref type="table" target="#tab_0">I</ref> shows additional descriptive statistics of the different versions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Data Processing</head><p>Figure <ref type="figure" target="#fig_3">3</ref> shows an overview of our approach. First, we check the release notes of Firefox and classify the versions based on their release model (i.e., traditional release model and rapid release model). Then, for each version, we extract the necessary data from the source code repository (i.e., Mercurial), the crash repository (i.e., Socorro), and the bug repository (i.e., Bugzilla). Using this data, we compute several metrics, then statistically compare these metrics between the traditional release (TR) model group and the rapid release (RR) model group. The remainder of this section elaborates on each of these steps. 1) Analyzing the Mozilla Wiki: For each version, we extract the starting date of the development phase and the release date from the release notes on the Mozilla Wiki. The release cycle is the time period between the release dates of two consecutive versions. We also compute the development time of the version by calculating the difference between the release date and the starting date of the development phase. The development time is slightly longer than the release cycle because the development of a new version is started before the release of the previous one.</p><p>2) Mining the Mozilla Source Code Repository: On the source code of each downloaded version, we use the source code measurement tool, SourceMonitor, to compute the number of Total Lines of Code and the Average Complexity. SourceMonitor 1 can be applied on C ++, C, C , V B.N ET , Java, Delphi, V isualBasic(V B6), and HT M L source code files. Such a polyvalent tool is necessary, given the diverse set of programming languages used by Firefox.</p><p>3) Mining the Mozilla Crash Repository: We downloaded the summaries of crash reports for all versions of Firefox that were released between January 21, 2010 and December 21, 2011. From these summaries, we extracted the date of the crash, the version of Firefox that was running during the crash, the list of related bugs, and the uptime (i.e., the duration in seconds for which Firefox was running before it crashed).</p><p>4) Analyzing the Mozilla Bug Repository: We downloaded all Firefox bug reports related to the Firefox crashes. These reports contain both pre-release and post-release bugs. We parse each of the bug reports to extract information about the bug status (e.g., UNCONFIRMED, FIXED), the bug open and modification dates, the priority of the bug and the severity of the bug. However, we cannot directly identify the major or minor version of Firefox for which the bug was raised, since this is not recorded. 1 http://www.campwoodsw.com/ Since the analyzed bugs are related to crashes, and crashes are linked to specific versions, we instead use this mapping to link the bugs to Firefox versions. For each bug, we check the crash-types for which the bug is filed. Then, we look at the crash reports of the corresponding crash-type(s) to identify the version that produces the crash-type, and we link the bug to that version. When the same crash-type contains crash reports from users on different versions, we consider that the crash-type is generated by the oldest version.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. CASE STUDY RESULTS</head><p>This section presents and discusses the results of our three research questions. For each research question, we present the motivation behind the question, the analysis approach and a discussion of our findings.</p><p>A. RQ1: Does the length of the release cycle affect the software quality? Motivation: Despite the benefits of speeding up the delivery of new features to users, shorter release cycles could have a negative impact on the quality of software systems, since there is less time for testing. Many reported issues are likely to remain unfixed until the software is released. This in turn might expose users to more post-release bugs. On the other hand, with fast release trains (e.g., every 6 weeks), developers are less pressured to rush half-baked features into the software repository to meet the deadline. Hence, a rapid release model could actually introduce less bugs compared to traditional release models. Clearing up the interaction between both factors is important to help decision makers in software organizations find the right balance between the speed of delivery of new features and maintaining software quality.</p><p>Approach: We measure the quality of a software system using the following three well-known metrics:</p><p>• Post-Release Bugs: the number of bugs reported after the release date of a version (lower is better).</p><p>• Median Daily Crash Count: the median of the number of crashes per day for a particular version (lower is better).</p><p>• Median Uptime: the median across the uptime values of all the crashes that are reported for a version (higher is better).  We answer this research question in three steps. First, we compare the number of post-release bugs between the traditional release (i.e., TR) and rapid release (i.e., RR) groups.</p><p>For each Firefox version, we consider all bugs reported after its release date. Note that we cannot perform this comparison directly. Herraiz et al. <ref type="bibr" target="#b12">[13]</ref> have shown that the number of reported post-release bugs of a software system is related to the number of deployments. In other words, a larger number of deployments increases the likelihood of users reporting a higher number of bugs. Since the number of deployments is affected by the length of the period during which a release is used, and this usage period is directly related to the length of the release cycle, we need to normalize the number of postrelease bugs of each version to control for the usage time. Hence, for each version, we divide the number of reported post-release bugs by the length of the release cycle of the version, and test the following null hypothesis: H 1 01 : There is no significant difference between the number of post-release bugs of RR versions and TR versions.</p><p>Second, we analyze the distribution of the median daily crash counts for RR and TR versions, and test the following null hypothesis: H 1 02 : There is no significant difference between the median daily crash count of RR versions and TR versions.</p><p>Third, we compare the median uptime of RR versions to TR versions. We test the following null hypothesis: H 1 03 : There is no significant difference between the median uptime values of RR versions and TR versions.</p><p>We use the Wilcoxon rank sum test <ref type="bibr" target="#b13">[14]</ref> to test H 1 01 , H 1 02 , and H 1 03 . The Wilcoxon rank sum test is a nonparametric statistical test used for assessing whether two independent distributions have equally large values. Nonparametric statistical methods make no assumptions about the distributions of the assessed variables.</p><p>Findings: When controlled for the length of the release cycle of a version, there is no significant difference between the number of post-release bugs of rapid release and traditional release versions. Figure <ref type="figure" target="#fig_4">4</ref> shows the distribution of the normalized number of post-release bugs for TR and RR versions, respectively. We can see that the medians are similar for RR and TR versions. The Wilcoxon rank sum test confirms this observation (pvalue = 0.3), therefore we cannot reject H 1 01 . There is no significant difference between the median daily crash count of rapid release versions and traditional release versions. The Wilcoxon rank sum test yielded a p-value of 0.73. Again, we cannot reject H The median uptime is significantly lower for rapid release versions. Figure <ref type="figure" target="#fig_5">5</ref> shows the distribution of the median uptime across TR and RR versions, respectively. We can observe that the median uptime is lower for RR versions. We ran the Wilcoxon rank sum test to decide if the observed difference is statistically significant or not, and obtained a pvalue of 6.11e -06. Therefore, we reject H 1 03 . In general, we can conclude that although the median of daily crash counts and the number of post-release bugs are comparable for RR versions and TR versions, the median uptime of RR versions is lower. In other words, although rapid releases do not seem to impact software quality directly, end users do get crashes earlier during execution (H 1 03 ), i.e., the bugs of RR versions seem to have a higher show-stopper probability than the bugs of TR versions. It is not clear why exactly this happens, i.e., because of a quality assurance problem or by accident (i.e., one or more showstopper bugs with a high impact).</p><p>Users experience crashes earlier during the execution of versions developed following a rapid release model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. RQ2: Does the length of the release cycle affect the fixing of bugs?</head><p>Motivation: For RQ1, we found that when one controls for the cycle time of versions, there is no significant difference between the number of post-release bugs of traditional release and rapid release versions reported per day. However, since a shorter release cycle time allows less time for testing and there was no substantial change in the development team of Firefox when switching to shorter release cycles, we might expect that the same group of developers now have less time to fix the same stream of bugs. Hence, in this question, we investigate the proportion of bugs fixed and the speed with which the bugs are fixed in the rapid release model.</p><p>Approach: For each alpha, beta, and major version, we compute the following metrics:</p><p>• Fixed Bugs: the number of post-release bugs that are closed with the status field set to FIXED (higher is better).</p><p>• Unconfirmed Bugs: the number of post-release bugs with the status field set to UNCONFIRMED (lower is better).</p><p>• Fix Time: the duration of the fixing period of the bug (i.e., the difference between the bug open time and the last modification time). This metric is computed only for bugs with the status FIXED (lower is better). We test the following null hypothesis to compare the efficiency of testing activities under traditional and rapid release models: H 2 01 : There is no significant difference between the proportion of bugs fixed during the testing period of a RR version and the proportion of bugs fixed during the testing of a TR version.</p><p>We consider the testing period of a version v i to be the period between the release date of the first alpha version of v i and the release date of v i . As such, bugs opened or fixed during this period correspond to post-release bugs of the alpha or beta versions of v i . To compute the proportion of bugs fixed during the testing period, we divided the number of bugs fixed in the testing period by the total number of bugs opened during the testing period. We do not further divide by the length of the testing period, since, as discussed in RQ1, both the number of fixed bugs and the number of opened bugs depend on the length of the testing period.</p><p>To assess and compare the speed at which post-release bugs are fixed under traditional and rapid release models, we test the following null hypothesis: H 2 02 : There is no significant difference between the distribution of Fix Time values for bugs related to TR versions and bugs related to RR versions.</p><p>We also investigate a similar hypothesis for high priority bugs only. Because high priority bugs are likely to impede or prevent the use of core functionalities, we expect that they will be fixed with the same timely manner under traditional and rapid release models.</p><p>For this, we classify all the bugs based on their priority, i.e., for each bug, we extract priority and severity values from the corresponding bug report. Since only 5% of Mozilla bugs from our data set are filed with priority values, we rely on the severity value of a bug report if the priority value is absent. Severity values are always available in the bug reports from our data set. In our analysis, we consider a bug to have a high priority if the bug was filed explicitly with a high priority value or if the bug's severity level is either "critical", "major", or "blocker". We used this heuristic before, with good results <ref type="bibr" target="#b14">[15]</ref>. We can then test the following null hypothesis: H 2 03 : There is no significant difference between the distribution of Fix Time values for high-priority bugs related to TR versions and high-priority bugs related to RR versions.</p><p>Similar to RQ1, hypotheses H 2 01 , H 2 02 and H 2 03 are twotailed. We perform a Wilcoxon rank sum test to accept or refute them.</p><p>Findings: When following a rapid release model, the proportion of bugs fixed during the testing period is lower than the proportion of bugs fixed in the testing period under the traditional release model. Figure <ref type="figure">6</ref> shows the distribution of the proportion of bugs fixed during the testing period of TR and RR versions. We can observe that the proportion of bugs fixed is higher under the traditional release model. The Wilcoxon rank sum test returned a significant pvalue of 0.003. Therefore, we reject H 2 01 . Bugs are fixed faster under a rapid release model. Figure <ref type="figure">7</ref> shows the distributions of the bug fixing time for TR and RR versions, respectively. We can see that developers take almost three times longer to fix bugs under the traditional release cycle. The medians of bug fixing times under traditional release and rapid release models are respectively 16 days and 6 days. The result of the Wilcoxon rank sum test shows that the observed difference is statistically significant (pvalue = 5.22e -08). Therefore, we reject H 2 02 . When limiting our comparison to high priority bugs, we obtain again a statistically significant difference, with a smaller pvalue(&lt; 2.2e -16). Hence, we can also reject H 2 03 .</p><p>In order to see if the observed difference in the bug fixing time and the proportion of bugs fixed is caused by source code size or complexity, we compute the following source code metrics on TR and RR versions. We compute the metrics on all files contained in a version.</p><p>• Total Lines of Code: the total number of lines of code of all files contained in a version.</p><p>• Average Complexity: the average of the McCabe Cyclomatic Complexity of all files contained in a version. The McCabe Cyclomatic Complexity of a file is the count of the number of linearly independent paths through the source code contained in the file.</p><p>• Development Time: the duration in days of the development phase of a version.</p><p>• Rate of New Code: the total number of new lines of code added in the version divided by the Development Time. We found no significant difference between the complexity of traditional release and rapid release versions. Also, the rate of new code in major RR versions is similar to the rate of new code in minor TR versions. This finding is consistent with our other finding that the development time of major RR versions is similar to the development time of minor TR.</p><p>In summary, we found that although bugs are fixed faster during a shorter release cycle, a smaller proportion of bugs is fixed compared to the traditional release model, which allows a longer testing period. We analyzed the bugs reported during the testing period (i.e., excluding post-release bugs), and found that, when testing under a rapid release model, bugs are reported at a slightly higher rate compared to the traditional model, i.e., the project gets more feedback. The average (respectively median) number of bugs reported when testing under a rapid release model is 10.7 bugs (respectively 1.8 bugs), while the average (respectively median) number of bugs reported when testing under the traditional release model is 2.6 bugs (respectively 1.6 bugs). Similar to other projects <ref type="bibr" target="#b15">[16]</ref>, Firefox seems to experience a flood of user feedback that, given the limited length of the release cycle, cannot be triaged and fixed in timely fashion.</p><p>The Firefox rapid release model fixes bugs faster than using the traditional model, but fixes proportionally less bugs.</p><p>C. RQ3: Does the length of the release cycle affect software updates?</p><p>Motivation: One of the main arguments of advocates of rapid release models is the possibility to speed up the delivery of brand new features to users in order to keep them updated with the latest features as soon as development is completed. However, to achieve this goal, it is important that users quickly update to the new release. A fast adoption of new versions is also very critical for quality improvement. Users need to adopt new versions quickly in order to test the fixes and allow the maintenance team to discover new bugs to work on instead of spending developers' time testing buggy features reported already by others on earlier channels. In this research question, we investigate how fast new features and bug fixes reach users of TR and RR versions.</p><p>Approach: For each version v i of Firefox in our data set, we compute the following metric:</p><p>• Staleness: the number of days the version v i is still in use after a newer version v i+1 has been released. This metric is inspired by the work of Baysal et al. <ref type="bibr" target="#b3">[4]</ref>. However, instead of relying on the logs of a set of web servers to compute staleness values, we use the collected user crash reports. We compute the staleness of a Firefox  <ref type="table" target="#tab_0">II</ref> shows low staleness for RR versions 6, 7 and 8. Four weeks after the release of Firefox 7, 50% of the collected crash reports were already coming from the newly released version. In contrast, for Firefox 4 (developed according to the traditional model), it took 9 weeks before the mark of 50% of reported crash reports was reached.</p><p>With a rapid release model, users adopt new versions faster compared to the traditional release model.</p><p>Curiously, as shown on Figure <ref type="figure" target="#fig_7">8</ref>, almost 20% of the users remain on a stalled version for a very long time. According to Firefox specialist Mike Kaply <ref type="bibr" target="#b16">[17]</ref>, a large share of these users are companies. In fact, many companies have remained on older versions of Firefox (e.g., 3.6) because the rapid release schedule does not give them enough time to stabilize their platforms <ref type="bibr" target="#b8">[9]</ref> and customer support costs are increasing because of the frequent upgrades <ref type="bibr" target="#b17">[18]</ref>.</p><p>To address this issue, Mozilla has initiated parallel versions of Firefox for companies. These versions are released at a slower schedule <ref type="bibr" target="#b18">[19]</ref>. For other users, Mozilla has adopted silent updates for minor fixes of Firefox and it plans to integrate a complete silent update feature in the upcoming releases of Firefox, to keep all users on the latest versions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. THREATS TO VALIDITY</head><p>We now discuss the threats to validity of our study following common guidelines for empirical studies <ref type="bibr" target="#b19">[20]</ref>.</p><p>Construct validity threats concern the relation between theory and observation. In this work, these threats are mainly due to measurement errors. We compute source code metrics using the open source tool SourceMonitor. We extract crash and bug information by parsing their corresponding HTML (crash reports) and XML (bug reports) files. We use the occurrence of crashes to capture stalled usages of a version. The proportional drop of a version's crash count indicates that users have upgraded to a newer version. However, as the new version might have substantially more (or less) crash reports, the old version might drop faster (or slower) to for example 50%. In our data set, we have found no significant differences between the median daily crash count of the different versions.</p><p>Threats to internal validity concern our selection of subject systems, tools, and analysis method. Although we selected Firefox to control for development process and other changes before and after the migration to a rapid release cycle, some of the findings might still be specific to Firefox's development process.</p><p>Conclusion validity threats concern the relation between the treatment and the outcome. We paid attention not to violate assumptions of the constructed statistical models.</p><p>Reliability validity threats concern the possibility of replicating this study. We attempt to provide all the necessary details to replicate our study. The Mercurial repository of Firefox is publicly available to obtain the source code of Mozilla Firefox. Both the Socorro crash repository and Bugzilla repository are also publicly available. SourceMonitor is an open source code measurement tool <ref type="bibr" target="#b20">[21]</ref>.</p><p>Threats to external validity concern the possibility to generalize our results. Although this study is limited to Mozilla Firefox, our results on the time it takes users to adopt a new version are consistent with the findings of previous studies on Google Chrome, which has been following a rapid release model for a much longer time <ref type="bibr" target="#b3">[4]</ref>. Nevertheless, further studies on different systems are desirable. Also, we only studied bug reports that were linked to crashes. Further studies on all bug reports are needed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. RELATED WORK</head><p>To the best of our knowledge, this study is the first attempt to empirically quantify the impact of release cycle time on software quality in a controlled setting.</p><p>Since open source projects have been using agile methods for a long time, many projects adopted short release cycles. Ten years ago, Zhao et al. found that 54% of the open source apps released at least once per month. Five years later, Otte et al. <ref type="bibr" target="#b21">[22]</ref> found slightly contrasting numbers (on a different set of apps), i.e., 49.3% released at least once per 3 months. Although this is still relatively rapid, it is not clear why this shift has happened. In any case, modern commercial software projects <ref type="bibr" target="#b22">[23]</ref>, <ref type="bibr" target="#b23">[24]</ref> and open source projects backed by a company <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b24">[25]</ref> have embraced shorter release cycles.</p><p>A lot of work has focused on enabling consistent, short release cycles. For example, van der Storm <ref type="bibr" target="#b25">[26]</ref> and Dolstra et al. <ref type="bibr" target="#b26">[27]</ref> developed infrastructure to automatically build, package and deploy individual code changes. Mainstream continuous integration servers <ref type="bibr" target="#b27">[28]</ref> automatically run sets of unit, integration or even acceptance tests after each check- in, while more advanced environments are able to run such tests in a massively parallel way in the shorter time in between releases <ref type="bibr" target="#b4">[5]</ref>. The combination of these ideas and practices have led to the concept of continuous delivery <ref type="bibr" target="#b28">[29]</ref>, which uses highly automated infrastructure to deploy new releases in record time. Amazon, for example, deploys on average every 11.6 seconds <ref type="bibr" target="#b23">[24]</ref>, achieving more than 1,000 deployments per hour. Despite all this work on achieving and pushing for shorter release cycles, there is hardly any empirical evidence that it really improves product quality, except for various developer surveys <ref type="bibr" target="#b29">[30]</ref>, <ref type="bibr" target="#b30">[31]</ref>. Escrow.com reduced its release cycle to iterations of 2 weeks <ref type="bibr" target="#b31">[32]</ref>, resulting in a reduction of the number of defects by 70%. However, since many agile techniques and team restructurings were introduced at once, this improvement in quality cannot be related to shorter release cycles alone. Marschall <ref type="bibr" target="#b15">[16]</ref> found that short release cycles require a steady flow of releases in order to control the number of reported bugs.</p><p>Kuppuswami et al. <ref type="bibr" target="#b32">[33]</ref> built a simulation model to analyze the effects of each XP practice on development effort. Small, incremental releases reduce the development effort needed by 2.67%, but no link with software quality was made. Stewart et al. <ref type="bibr" target="#b33">[34]</ref> tried to relate code quality to release frequency, number of releases and the change of size across releases, but could not derive any conclusions.</p><p>Releasing too frequently not only decreases the time to run tests, but it also might make customers weary of yet another update to install <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b34">[35]</ref>. For this reason, many projects do not automatically distribute each release to their customers. For example, although the Eclipse project uses 6-week release cycles, the resulting milestone releases are only available to interested users and developers <ref type="bibr" target="#b24">[25]</ref>, similar to how the NIGHTLY, AURORA and BETA Firefox channels are only targeted at specific groups of users. Clear communication about each channel/release is necessary to make sure that the intended user group deploys the new release and provides feedback about it <ref type="bibr" target="#b24">[25]</ref>, <ref type="bibr" target="#b34">[35]</ref>.</p><p>The work that is most closely related to ours is that of Baysal et al. <ref type="bibr" target="#b3">[4]</ref>. It compares the release and bug fix strategies of Mozilla Firefox and Google Chrome based on browser usage data from web logs. At that time, Firefox was still in the 3.x series, i.e., before its transition to a shorter release cycle, whereas Chrome had been following a short release cycle since its birth. Although the different profiles of both systems made it hard to compare things, the median time to fix a bug in the TR system (Firefox) seemed to be 16 days faster than in the RR system (Chrome), but this difference was not significant. We found the opposite, i.e., Firefox RR fixes bugs faster than Firefox TR. However, the findings about staleness in the TR system confirm our findings.</p><p>Our paper eliminates the inconsistency between the two compared systems, by focusing on one project (Firefox) that only modified its release cycle, but otherwise remained the same. We believe that this allows to make more accurate claims regarding RR versus TR models. Furthermore, we use actual field crash data to assess the quality perceived by customers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. CONCLUSION</head><p>The increased competitiveness of today's business environment has prompted many companies to adopt shorter release cycles, yet the impact of this adoption on software quality has not been established thus far. In this paper, we analyze the evolution of Mozilla Firefox during the period in which it shifted from a traditional release model to a rapid release model. We find that similar amounts of crashes occur, yet users seem to experience crashes earlier during runtime. Furthermore, bugs are fixed faster under rapid release models, but proportionally less bugs are fixed compared to the traditional release model. This could not be explained by differences in the complexity of the source code developed under both models. However, we found indications that the migration to a shorter release cycle could have triggered too many crash reports at once, flooding the triagers and bug fixers. Finally, as expected, users of a software system developed following a rapid release model tend to adopt new versions faster compared to the traditional release model.</p><p>Although more case studies are needed, our results provide some warnings for decision makers in software organizations that should be taken into account when changing the release cycle of their software systems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Development and Release Process of Mozilla Firefox a new version supersedes the previous ones. Second, every FireFox version now flows through four release channels: NIGHTLY, AURORA, BETA and MAIN. The versions move from one channel to the next every 6 weeks [10].To date, five major versions of Firefox (i.e., 5.0, 6.0, 7.0, 8.0, 9.0) have finished the new rapid release model.Figure2illustrates the current development and release process of Firefox. The NIGHTLY channel integrates new features from the developers' source code repositories as soon as the features are ready. The AURORA channel inherits new features from NIGHTLY at regular intervals (i.e., every 6 weeks). The features that need more work are disabled and left for the next import cycle into AURORA. The BETA channel receives only new AURORA features that are scheduled by management for the next Firefox release. Finally, mature BETA features make it into MAIN. Note that at any given time (independent from the 6 week release schedule) unscheduled releases may be performed to address critical security or stability issues.Firefox basically follows a pipelined development process. At the same time as the source code of one release is imported from the NIGHTLY channel into the AURORA channels, the source code of the next release is imported into the NIGHTLY channel. Consequently, four consecutive releases of Firefox migrate through Mozilla's NIGHTLY, AURORA, BETA, and MAIN channels at any given time. Figure2illustrates this migration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Time Line of Major Versions of FireFox (b) Time Line of Minor Versions of FireFox</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Timeline of FireFox versions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 .</head><label>3</label><figDesc>Figure3. Overview of our approach to study the impact of release cycle time on software quality.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Boxplot of the number of post release bugs raised per day.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Boxplot of the median uptime.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>FixedFigure 6 .Figure 7 .</head><label>67</label><figDesc>Figure 6. Boxplot of the proportion of bugs fixed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Staleness of major versions of FireFox.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table I STATISTICS</head><label>I</label><figDesc>FROM THE ANALYZED FIREFOX VERSIONS (THE CYCLE TIME IS GIVEN IN DAYS).</figDesc><table><row><cell></cell><cell>Version</cell><cell>Release date</cell><cell>Cycle time</cell><cell>LOC</cell><cell>Alpha Versions (#)</cell><cell>Beta Versions (#)</cell><cell>Minor Versions (#)</cell></row><row><cell>Traditional release model Rapid release model</cell><cell>3.6 4.0 5.0 6.0 7.0 8.0 9.0</cell><cell>21-01-2010 22-03-2011 21-06-2011 16-08-2011 27-09-2011 08-11-2011 20-12-2011</cell><cell>425 91 56 42 42 42 42</cell><cell>4,076,624 4,738,536 4,702,874 4,667,335 4,653,081 4,635,064 4,687,901</cell><cell>3.6a1pre-3.6b6pre (8) 4.0.b1pre-4.0.b12pre (12) 5.0Aurora (1) 6.0Aurora (1) 7.0Aurora (1) 8.0Aurora (1) 9.0Aurora (1)</cell><cell>3.6b1-3.6b6 (6) 4.0.b1beta-4.0.1beta (14) 5.0Beta (1) 6.0Beta (1) 7.0Beta (1) 8.0Beta (1) 9.0Beta (1)</cell><cell>3.6.2-3.6.24 (22) 4.0.1 (1) 5.0.1 (1) 6.0.1, 6.0.2 (2) 7.0.1 (1) 8.0.1 (1) 9.0.1 (1)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>by calculating the time period between the release date of a new version v i+1 and the disappearance of crash reports related to the version v i from the field. Since full disappearance of a version is hard to achieve, we measure the time before the proportion of crashes from the users of the version v i falls below respectively 70%, 60%, and 50%, of the total number of reported crashes per day. Staleness basically captures the speed with which the users are moving to new versions.Findings: Users switch faster to a newer rapid release version than to a new traditional release version. Table</figDesc><table><row><cell></cell><cell cols="3">Table II STALENESS OF FIREFOX VERSIONS.</cell><cell></cell></row><row><cell></cell><cell>Version released</cell><cell cols="3"># Weeks before staleness below 70% 60% 50%</cell></row><row><cell>Traditional release model Rapid release model</cell><cell>3.6 4 5 6 7 8</cell><cell>6 6 7 4 3 2</cell><cell>7 7 7 4 3 2</cell><cell>9 7 8 4 5 3</cell></row><row><cell>version v i</cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Shorten release cycles by bringing developers to application lifecycle management</title>
		<ptr target="http://bit.ly/x5PdXl" />
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>HP Applications Handbook, Retrieved on Febuary 08</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Mozilla puts out firefox 5.0 web browser which carries over 1,000 improvements in just about 3 months of development</title>
		<ptr target="http://bit.ly/aecRrL" />
		<imprint>
			<date type="published" when="2011-01-12">2011. January 12. 2012</date>
		</imprint>
	</monogr>
	<note>InvestmentWatch on June 25th</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Extreme Programming Explained: Embrace Change (2nd Edition)</title>
		<author>
			<persName><forename type="first">K</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Andres</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A tale of two browsers</title>
		<author>
			<persName><forename type="first">O</forename><surname>Baysal</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W</forename><surname>Godfrey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 8th Working Conf. on Mining Software Repositories (MSR)</title>
		<meeting>of the 8th Working Conf. on Mining Software Repositories (MSR)</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="238" to="241" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Techniques and processes for improving the quality and performance of open-source software</title>
		<author>
			<persName><forename type="first">A</forename><surname>Porter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Yilmaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Memon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">S</forename><surname>Krishna</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">C</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Gokhale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software Process: Improvement and Practice</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="163" to="176" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Some clarification and musings</title>
		<author>
			<persName><forename type="first">T</forename><surname>Downer</surname></persName>
		</author>
		<ptr target="http://bit.ly/q8RCuw" />
		<imprint>
			<date type="published" when="2012-01-06">January 06. 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Web browsers (global marketshare)</title>
		<ptr target="http://bit.ly/81klgi" />
	</analytic>
	<monogr>
		<title level="j">Roxr Software Ltd. Retrieved on</title>
		<imprint>
			<date type="published" when="2012-01-12">January 12, 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Google ethos speeds up chrome release cycle</title>
		<author>
			<persName><forename type="first">S</forename><surname>Shankland</surname></persName>
		</author>
		<ptr target="http://cnet.co/wlS24U" />
		<imprint>
			<date type="published" when="2010-07">July 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Rapid-release firefox meets corporate backlash</title>
		<ptr target="http://cnet.co/ktBsUU" />
		<imprint>
			<date type="published" when="2011-06">June 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">New channels for firefox rapid releases</title>
		<idno>Blog. 2011-04-13</idno>
		<ptr target="http://bit.ly/hc1zmY" />
		<imprint>
			<date type="published" when="2012-01-12">January 12, 2012</date>
		</imprint>
	</monogr>
	<note type="report_type">The Mozilla</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Mozilla outlines 16-week firefox development cycle</title>
		<author>
			<persName><forename type="first">R</forename><surname>Paul</surname></persName>
		</author>
		<ptr target="http://bit.ly/fLHEfo" />
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Socorro: Mozilla&apos;s crash reporting system</title>
		<ptr target="http://bit.ly/9A9zKP" />
		<imprint>
			<date type="published" when="2011-03-29">March 29, 2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Impact of installation counts on perceived quality: A case study on debian</title>
		<author>
			<persName><forename type="first">I</forename><surname>Herraiz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Shihab</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">H D</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Hassan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 18th Working Conf. on Reverse Engineering (WCRE)</title>
		<meeting>of the 18th Working Conf. on Reverse Engineering (WCRE)</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="219" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Nonparametric Statistical Methods, 2nd ed</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hollander</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">A</forename><surname>Wolfe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999">1999</date>
			<publisher>John Wiley and Sons, inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An entropy evaluation approach for triaging field crashes: A case study of mozilla firefox</title>
		<author>
			<persName><forename type="first">F</forename><surname>Khomh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Zou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">E</forename><surname>Hassan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 18th Working Conf. on Reverse Engineering (WCRE)</title>
		<meeting>of the 18th Working Conf. on Reverse Engineering (WCRE)</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Transforming a six month release cycle to continuous flow</title>
		<author>
			<persName><forename type="first">M</forename><surname>Marschall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the conf. on AGILE</title>
		<meeting>of the conf. on AGILE</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="395" to="400" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Understanding the corporate impact</title>
		<ptr target="http://bit.ly/mBzP37" />
		<imprint>
			<date type="published" when="2012-01-12">January 12, 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Why do companies stay on old technology?</title>
		<ptr target="http://bit.ly/k3fruK" />
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>Retrieved on January 12</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Mozilla proposes not-so-rapid-release firefox</title>
		<ptr target="http://cnet.co/mQZ6Tf" />
		<imprint>
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>CNET, Retrieved on February 08</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">K</forename><surname>Yin</surname></persName>
		</author>
		<title level="m">Case Study Research: Design and Methods -Third Edition</title>
		<imprint>
			<publisher>SAGE Publications</publisher>
			<date type="published" when="2002">2002</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>rd ed</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Sourcemonitor</title>
		<ptr target="http://bit.ly/9AKzN8" />
		<imprint>
			<date type="published" when="2012-01-12">January 12. 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Applied quality assurance methods under the open source development model</title>
		<author>
			<persName><forename type="first">T</forename><surname>Otte</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Moreton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">D</forename><surname>Knoell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 32nd Annual IEEE Intl. Computer Software and Applications Conf. (COMPSAC)</title>
		<meeting>of the 32nd Annual IEEE Intl. Computer Software and Applications Conf. (COMPSAC)</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="1247" to="1252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A case study in agile-at-scale delivery</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">W</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 12th Intl. Conf. on Agile Processes in Software Engineering and Extreme Programming (XP)</title>
		<meeting>of the 12th Intl. Conf. on Agile esses in Software Engineering and Extreme Programming (XP)</meeting>
		<imprint>
			<date type="published" when="2011-05">May 2011</date>
			<biblScope unit="volume">77</biblScope>
			<biblScope unit="page" from="266" to="281" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Velocity culture (the unmet challenge in ops)</title>
		<author>
			<persName><forename type="first">J</forename><surname>Jenkins</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011-06">June 2011</date>
		</imprint>
	</monogr>
	<note>Presentation at O&apos;Reilly Velocity Conference</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Agile, open source, distributed, and on-timeinside the eclipse development process</title>
		<author>
			<persName><forename type="first">E</forename><surname>Gamma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Keynote at the 27th Intl. Conf. on Software Engineering (ICSE)</title>
		<imprint>
			<date type="published" when="2005-05">May 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Continuous release and upgrade of component-based software</title>
		<author>
			<persName><forename type="first">T</forename><surname>Van Der Storm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 12th intl. wrksh. on Softw. configuration management (SCM)</title>
		<meeting>of the 12th intl. wrksh. on Softw. configuration management (SCM)</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="43" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Nix: A safe and policy-free system for software deployment</title>
		<author>
			<persName><forename type="first">E</forename><surname>Dolstra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>De Jonge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Visser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 18th USENIX conf. on System admin</title>
		<meeting>of the 18th USENIX conf. on System admin</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="79" to="92" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<author>
			<persName><forename type="first">P</forename><surname>Duvall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Matyas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Glover</surname></persName>
		</author>
		<title level="m">Continuous Integration: Improving Software Quality and Reducing Risk</title>
		<imprint>
			<publisher>Addison-Wesley Professional</publisher>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><surname>Humble</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Farley</surname></persName>
		</author>
		<title level="m">Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation, 1st ed</title>
		<imprint>
			<publisher>Addison-Wesley Professional</publisher>
			<date type="published" when="2010">2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">The challenge of improving software quality: Developers&apos; beliefs about the contribution of agile practices</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Kendall</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">E</forename><surname>Kendall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Americas Conf. on Information Systems (AMCIS)</title>
		<meeting>of the Americas Conf. on Information Systems (AMCIS)</meeting>
		<imprint>
			<date type="published" when="2009-08">August 2009</date>
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">4th annual state of agile survey</title>
		<author>
			<persName><surname>Versionone</surname></persName>
		</author>
		<ptr target="http://bit.ly/6BPw5" />
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">eXtreme Adoption eXperiences of a B2B Start Up</title>
		<author>
			<persName><forename type="first">P</forename><surname>Hodgetts</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Phillips</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
			<publisher>Addison-Wesley Longman Publishing Co., Inc</publisher>
		</imprint>
	</monogr>
	<note>ch. 30, extreme Programming Perspectives</note>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">The effects of individual xp practices on software development effort</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kuppuswami</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Vivekanandan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Ramaswamy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Rodrigues</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">SIGSOFT Softw. Eng. Notes</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page">6</biblScope>
			<date type="published" when="2003-11">November 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Observations on patterns of development in open source software projects</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">J</forename><surname>Stewart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">P</forename><surname>Darcy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Daniel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="s">SIGSOFT Softw. Eng. Notes</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1" to="5" />
			<date type="published" when="2005-05">May 2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Ten misconceptions about product software release management explained using update cost/value functions</title>
		<author>
			<persName><forename type="first">S</forename><surname>Jansen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Brinkkemper</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Intl. Workshop on Software Product Management</title>
		<meeting>of the Intl. Workshop on Software Product Management</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="44" to="50" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
