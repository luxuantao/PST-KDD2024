<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Greedy Facility Location Algorithms Analyzed using Dual Fitting with Factor-Revealing LP</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2002-07-09">9 Jul 2002</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Kamal</forename><surname>Jain</surname></persName>
							<email>kamalj@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="department">Microsoft Research</orgName>
								<address>
									<addrLine>One Microsoft Way</addrLine>
									<postCode>98052</postCode>
									<settlement>Redmond</settlement>
									<region>WA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Mohammad</forename><surname>Mahdian</surname></persName>
							<email>mahdian@math.mit.edu</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Mathematics</orgName>
								<orgName type="institution">MIT</orgName>
								<address>
									<postCode>02139</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Evangelos</forename><surname>Markakis</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">College of Computing</orgName>
								<orgName type="institution">Georgia Tech</orgName>
								<address>
									<postCode>30332</postCode>
									<settlement>Atlanta</settlement>
									<region>GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Amin</forename><surname>Saberi</surname></persName>
							<email>saberi@cc.gatech.edu</email>
							<affiliation key="aff2">
								<orgName type="department">College of Computing</orgName>
								<orgName type="institution">Georgia Tech</orgName>
								<address>
									<postCode>30332</postCode>
									<settlement>Atlanta</settlement>
									<region>GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Vijay</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
							<email>vazirani@cc.gatech.edu</email>
							<affiliation key="aff2">
								<orgName type="department">College of Computing</orgName>
								<orgName type="institution">Georgia Tech</orgName>
								<address>
									<postCode>30332</postCode>
									<settlement>Atlanta</settlement>
									<region>GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Greedy Facility Location Algorithms Analyzed using Dual Fitting with Factor-Revealing LP</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2002-07-09">9 Jul 2002</date>
						</imprint>
					</monogr>
					<idno type="MD5">FC3DC22318554981297579F29E22262A</idno>
					<idno type="arXiv">arXiv:cs.DS/0207028v1</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-27T05:04+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper, we will formalize the method of dual fitting and the idea of factor-revealing LP. This combination is used to design and analyze two greedy algorithms for the metric uncapacitated facility location problem. Their approximation factors are 1.861 and 1.61, with running times of O(m log m) and O(n 3 ), respectively, where n is the total number of vertices and m is the number of edges in the underlying complete bipartite graph between cities and facilities. The algorithms are used to improve recent results for several variants of the problem.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A large fraction of the theory of approximation algorithms, as we know it today, is built around the theory of linear programming, which offers the two fundamental algorithm design techniques of rounding and the primal-dual schema (see <ref type="bibr" target="#b43">[44]</ref>). Interestingly enough, the LP-duality based analysis <ref type="bibr" target="#b29">[30,</ref><ref type="bibr" target="#b9">10]</ref> for perhaps the most central problem of this theory, the set cover problem, did not use either of these techniques. Moreover, the analysis used for set cover does not seem to have found use outside of this problem and its generalizations <ref type="bibr" target="#b37">[38]</ref>, leading to a somewhat unsatisfactory state of affairs. In this paper 1 , we formalize the technique used for analyzing set cover as the method of dual fitting, and we also introduce the idea of using a factor-revealing LP. Using this combination we analyze two greedy algorithms for the metric uncapacitated facility location problem. Their approximation factors are 1.861 and 1.61, with running times of O(m log m) and O(n 3 ) respectively, where m and n denote the total number of edges and vertices in the underlying complete bipartite graph between cities and facilities. In other words, m = n c × n f and n = n c + n f , where n c is the number of cities and n f is the number of facilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Dual fitting with factor-revealing LP</head><p>The set cover problem offers a particularly simple setting for illustrating most of the dominant ideas in approximation algorithms (see <ref type="bibr" target="#b43">[44]</ref>). Perhaps the reason that the method of dual fitting was not clear so far was that the set cover problem did not require its full power. However, in retrospect, its salient features are best illustrated again in the simple setting of the set cover problem -we do this in Section 9. The method of dual fitting can be described as follows, assuming a minimization problem: The basic algorithm is combinatorial -in the case of set cover it is in fact a simple greedy algorithm. Using the linear programming relaxation of the problem and its dual, one first interprets the combinatorial algorithm as a primal-dual-type algorithm -an algorithm that is iteratively making primal and dual updates. Strictly speaking, this is not a primal-dual algorithm, since the dual solution computed is, in general, infeasible (see Section 9 for a discussion on this issue). However, one shows that the primal integral solution found by the algorithm is fully paid for by the dual computed. By fully paid for we mean that the objective function value of the primal solution is bounded by that of the dual. The main step in the analysis consists of dividing the dual by a suitable factor, say γ, and showing that the shrunk dual is feasible, i.e., it fits into the given instance. The shrunk dual is then a lower bound on OPT, and γ is the approximation guarantee of the algorithm.</p><p>Clearly, we need to find the minimum γ that suffices. Equivalently, this amounts to finding the worst possible instance -one in which the dual solution needs to be shrunk the most in order to be rendered feasible. For each value of n c , the number of cities, we define a factor-revealing LP that encodes the problem of finding the worst possible instance with n c cities as a linear program. This gives a family of LP's, one for each value of n c . The supremum of the optimal solutions to these LP's is then the best value for γ. In our case, we do not know how to compute this supremum directly. Instead, we obtain a feasible solution to the dual of each of these LP's. An upper bound on the objective function values of these duals can be computed, and is an upper bound on the optimal γ. In our case, this upper bound is 1.861 for the first algorithm and 1.61 for the second one. In order to get a closely matching tight example, we numerically solve the factor-revealing LP for a large value of n c .</p><p>The technique of factor-revealing LPs is similar to the idea of LP bounds in coding theory. LP bounds give the best known bounds on the minimum distance of a code with a given rate by bounding the solution of a linear program. (cf. McEliece et al. <ref type="bibr" target="#b32">[33]</ref>). In the context of approximation algorithms, Goemans and Kleinberg <ref type="bibr" target="#b11">[12]</ref> use a similar method in the analysis of their algorithm for the minimum latency problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">The facility location problem</head><p>In the (uncapacitated) facility location problem, we have a set F of n f facilities and a set C of n c cities. For every facility i ∈ F, a nonnegative number f i is given as the opening cost of facility i. Furthermore, for every facility i ∈ F and city j ∈ C, we have a connection cost (a.k.a. service cost) c ij between facility i and city j. The objective is to open a subset of the facilities in F, and connect each city to an open facility so that the total cost is minimized. We will consider the metric version of this problem, i.e., the connection costs satisfy the triangle inequality. This problem has occupied a central place in operations research since the early 60's <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b39">40,</ref><ref type="bibr" target="#b40">41]</ref>, and has been studied from the perspectives of worst case analysis, probabilistic analysis, polyhedral combinatorics and empirical heuristics (see <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b34">35]</ref>). Although the first approximation algorithm for this problem, a greedy algorithm achieving a guarantee of O(log n) in the general (non-metric) case due to Hochbaum <ref type="bibr" target="#b19">[20]</ref>, dates back to almost 20 years ago, renewed interest in recent years has resulted in much progress. Recently, the problem has found several new applications in network design problems such as placement of routers and caches <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b28">29]</ref>, agglomeration of traffic or data <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b16">17]</ref>, and web server replications in a content distribution network (CDN) <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b35">36,</ref><ref type="bibr" target="#b36">37]</ref>. The first constant factor approximation algorithm for this problem was given by Shmoys, Tardos, and Aardal <ref type="bibr" target="#b38">[39]</ref>. Later, the factor was improved by Chudak and Shmoys <ref type="bibr" target="#b8">[9]</ref> to 1 + 2/e. Both these algorithms were based on LP-rounding, and therefore had high running times. Jain and Vazirani <ref type="bibr" target="#b21">[22]</ref> gave a primal-dual algorithm, achieving a factor of 3, and having the same running time as ours (we will refer to this as the JV algorithm). Their algorithm was adapted for solving several related problems such as the fault-tolerant and outlier versions, and the k-median problem <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b7">8]</ref>. Mettu and Plaxton <ref type="bibr" target="#b33">[34]</ref> used a restatement of the JV algorithm for the on-line median problem.</p><p>Strategies based on local search and greedy improvement for facility location problem have also been studied. The work of Korupolu et al. <ref type="bibr" target="#b26">[27]</ref> shows that a simple local search heuristic proposed by Kuehn and Hamburger <ref type="bibr" target="#b27">[28]</ref> yields a (5 + ǫ)-approximation algorithm with a running time of O(n 6 log n/ǫ), for any ǫ &gt; 0. Charikar and Guha <ref type="bibr" target="#b5">[6]</ref> improved the factor slightly to 1.728 by combining the JV algorithm, greedy augmentation, and the LP-based algorithm <ref type="bibr" target="#b8">[9]</ref>. They also combined greedy improvement and cost scaling to improve the factor of the JV algorithm to 1.853. For a metric defined by a sparse graph, Thorup <ref type="bibr" target="#b42">[43]</ref> has obtained a (3 + o(1))-approximation algorithm with running time Õ(|E|). Regarding hardness results, Guha and Khuller <ref type="bibr" target="#b14">[15]</ref> showed that the best approximation factor possible for this problem is 1.463, assuming</p><formula xml:id="formula_0">N P ⊆ DT IM E[n O(log log n) ].</formula><p>Since the publication of the first draft of the present paper, two new algorithms have been proposed for the facility location problem. The first algorithm, due to Sviridenko <ref type="bibr" target="#b41">[42]</ref>, uses the LP-rounding method to achieve an approximation factor of 1.58. The second algorithm, due to Mahdian, Ye, and Zhang <ref type="bibr" target="#b31">[32]</ref>, combines our second algorithm with the idea of cost scaling to achieve an approximation factor of 1.52, which is currently the best known factor for this problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Our results</head><p>Our first algorithm is quite similar to the greedy set cover algorithm: iteratively pick the most costeffective choice at each step, where cost-effectiveness is measured as the ratio of the cost incurred to the number of new cities served. In order to use LP-duality to analyze this algorithm, we give an alternative description which can be seen as a modification of the JV algorithm -when a city gets connected to an open facility, it withdraws whatever it has contributed towards the opening cost of other facilities. This step of withdrawing contribution is important, since it ensures that the primal solution is fully paid for by the dual.</p><p>The second algorithm has a minor difference with the first one: A city might change the facility to which it is connected and connect to a closer facility. If so, it offers this difference toward opening the latter facility.</p><p>The approximation factor of the algorithms are 1.861 and 1.61, with running times of O(m log m) and O(n 3 ) respectively where n is the total number of vertices and m is the number of edges in the underlying complete bipartite graph between cities and facilities. We have experimented our algorithms on randomly generated instances as well as instances obtained from the Operations Research library <ref type="bibr" target="#b3">[4]</ref> and GT-ITM Internet topology generator <ref type="bibr" target="#b44">[45]</ref>. The cost of the integral solution found is compared against the solution of the LP-relaxation of the problem, rather than OPT (computing which would be prohibitively time consuming). The results are encouraging: The average error of our algorithms is about 3% and 1% respectively, and is a significant improvement over the JV algorithm which has an error of even 100% in some cases. The primal-dual algorithm of Jain and Vazirani <ref type="bibr" target="#b21">[22]</ref> is versatile in that it can be used to obtain algorithms for many variants of the facility location problem, such as k-median <ref type="bibr" target="#b21">[22]</ref>, a common generalization of k-median and facility location <ref type="bibr" target="#b21">[22]</ref>, capacitated facility location with soft capacities <ref type="bibr" target="#b21">[22]</ref>, prize collecting facility location <ref type="bibr" target="#b7">[8]</ref>, and facility location with outliers <ref type="bibr" target="#b7">[8]</ref>. In Section 8, we apply our algorithms to several variants of the problem. First, we consider a common generalization of the facility location and k-median problems. In this problem, which we refer to as the k-facility location problem, an instance of the facility location problem and an integer k are given and the objective is to find the cheapest solution that opens at most k facilities. The k-median problem is a special case of this problem in which all opening costs are 0. The k-median problem is studied extensively <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b21">22]</ref> and the best known approximation algorithm for this problem, due to Arya et al. <ref type="bibr" target="#b1">[2]</ref>, achieves a factor of 3 + ǫ. The k-facility location problem has also been studied in operations research <ref type="bibr" target="#b10">[11]</ref>, and the best previously known approximation factor for this problem was 6 <ref type="bibr" target="#b21">[22]</ref>.</p><p>Next, we show an application of our algorithm to the facility location game. We also use our algorithm to improve recent results for some other variants of the problem. In the facility location problem with outliers we are not required to connect all cities to open facilities. We consider two versions of this variant: In the robust version, we are allowed to leave l cities unconnected. In facility location with penalties we can either connect a city to a facility, or pay a specified penalty. Both versions were motivated by commercial applications, and were proposed by Charikar et al. <ref type="bibr" target="#b7">[8]</ref>. In this paper we will modify our algorithm to obtain a factor 2 approximation algorithm for these versions, improving the best known result of factor 3 <ref type="bibr" target="#b7">[8]</ref>.</p><p>In the fault tolerant variant, each city has a specified number of facilities it should be connected to. This problem was proposed in <ref type="bibr" target="#b22">[23]</ref> and the best factor known is 2.47 <ref type="bibr" target="#b17">[18]</ref>. We can achieve a factor of 1.61 when all cities have the same connectivity requirement. In addition, we introduce a new variant which can be seen as a special case of the concave cost version of this problem: the cost of opening a facility at a location is specified and it can serve exactly one city. In addition, a setup cost is charged the very first time a facility is opened at a given location.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Algorithm 1</head><p>In the following algorithm we use a notion of cost effectiveness. Let us say that a star consists of one facility and several cities. The cost of a star is the sum of the opening cost of the facility and the connection costs between the facility and all the cities in the star. More formally, the cost of the star (i, C ′ ), where i is a facility and C ′ ⊆ C is a subset of cities, is f i + j∈C ′ c ij . The cost effectiveness of the star (i, C ′ ) is the ratio of the cost of the star to the size of C ′ , i.e., (</p><formula xml:id="formula_1">f i + j∈C ′ c ij ) /|C ′ | . Algorithm 1</formula><p>1. Let U be the set of unconnected cities. In the beginning, all cities are unconnected i.e. U := C and all facilities are unopened.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">While U = ∅:</head><p>• Among all stars, find the most cost-effective one, (i, C ′ ), open facility i, if it is not already open, and connect all cities in C ′ to i.</p><formula xml:id="formula_2">• Set f i := 0, U := U \ C ′ .</formula><p>Note that a facility can be chosen again after being opened, but its opening cost is counted only once since we set f i to zero after the first time the facility is picked by the algorithm. As far as cities are concerned, every city j is removed from C, when connected to an open facility, and is not taken into consideration again. Also, notice that although the number of stars is exponentially large, in each iteration the most cost-effective pair can be found in polynomial time. For each facility i, we can sort the cities in increasing order of their connection cost to i. It can be easily seen that the most cost-effective star will consist of a facility and a set, containing the first k cities in this order, for some k.</p><p>The idea of cost effectiveness essentially stems from a similar notion in the greedy algorithm for the set cover problem. In that algorithm, the cost effectiveness of a set S is defined to be the cost of S over the number of uncovered elements in S. In each iteration, the algorithm picks the most cost-effective set until all elements are covered. The most cost-effective set can be found either by using direct computation, or by using the dual program of the linear programming formulation for the problem. The dual program can also be used to prove the approximation factor of the algorithm.</p><p>Similarly, we will use the LP-formulation of facility location to analyze our algorithm. As we will see, the dual formulation of the problem helps us to understand the nature of the problem and the greedy algorithm.</p><p>The facility location problem can be captured by an integer program due to Balinski <ref type="bibr" target="#b2">[3]</ref>. For the sake of convenience, we give another equivalent formulation for the problem. Let S be the set of all stars. The facility location problem can be thought of as picking a minimum cost set of stars such that each city is in at least one star. This problem can be captured by the following integer program. In this program, x S is an indicator variable denoting whether star S is picked and c S denotes the cost of star S.</p><formula xml:id="formula_3">minimize S∈S c S x S<label>(1)</label></formula><p>subject to ∀j ∈ C :</p><formula xml:id="formula_4">S:j∈S x S ≥ 1 ∀S ∈ S : x S ∈ {0, 1}</formula><p>The LP-relaxation of this program is:</p><formula xml:id="formula_5">minimize S∈S c S x S<label>(2)</label></formula><p>subject to ∀j ∈ C :</p><formula xml:id="formula_6">S:j∈S x S ≥ 1 ∀S ∈ S : x S ≥ 0</formula><p>The dual program is:</p><formula xml:id="formula_7">maximize j∈C α j<label>(3)</label></formula><p>subject to ∀S ∈ S :</p><formula xml:id="formula_8">j∈S∩C α j ≤ c S ∀j ∈ C : α j ≥ 0</formula><p>There is an intuitive way of interpreting the dual variables. We can think of α j as the contribution of city j, or its share toward the total expenses. Note that the first inequality of the dual can also be written as j∈C max(0, α jc ij ) ≤ f i for every facility i. We can now see how the dual variables can help us find the most cost-effective star in each iteration of the greedy algorithm: if we start raising the dual variables of all unconnected cities simultaneously, the most cost-effective star will be the first star (i, C ′ ) for which j∈C ′ max(0, α jc ij ) = f i . Hence we can restate Algorithm 1 based on the above observation. This is in complete analogy to the greedy algorithm and its restatement using LP-formulation for set-cover.</p><p>Restatement of Algorithm 1</p><p>1. We introduce a notion of time, so that each event can be associated with the time at which it happened. The algorithm starts at time 0. Initially, each city is defined to be unconnected (U := C), all facilities are unopened, and α j is set to 0 for every j.</p><p>2. While U = ∅, increase the time, and simultaneously, for every city j ∈ U , increase the parameter α j at the same rate, until one of the following events occurs (if two events occur at the same time, we process them in arbitrary order).</p><p>(a) For some unconnected city j, and some open facility i, α j = c ij . In this case, connect city j to facility i and remove j from U .</p><p>(b) For some unopened facility i, we have j∈U max(0, α jc ij ) = f i . This means that the total contribution of the cities is sufficient to open facility i. In this case, open this facility, and for every unconnected city j with α j ≥ c ij , connect j to i, and remove it from U .</p><p>In each iteration of algorithm 1 the process of opening a facility and/or connecting some cities will be defined as an event. It is easy to prove the following lemma by induction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 1</head><p>The sequence of events executed by Algorithm 1 and its restatement are identical.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof: By induction. 2</head><p>This restatement can also be seen as a modification of JV algorithm <ref type="bibr" target="#b21">[22]</ref>. The only difference is that in JV algorithm cities, when connected to an open facility, are not excluded from U , hence they might contribute towards opening several facilities. Due to this fact they have a second cleanup phase in which some of the already open facilities will be closed down. Also, it is worth noting that despite the similarity between Algorithm 1 and Hochbaum's greedy algorithm for facility location (which is equivalent to the set cover algorithm applied on the set of stars), they are not equivalent. This is because we set f i to zero after picking a set containing f i .</p><p>As the following example shows, the approximation factor of Hochbaum's algorithm is Ω( log n log log n ) on instances with metric inequality: Consider k facilities with opening cost p k located in the same place Also k -1 groups of cities S 1 , S 2 , . . . , S k-1 . The group S i consists of p k-i+1 cities with distance j=1...i p j-1 from the facilities. Other distances are obtained from the triangle inequality. Hochbaum's algorithm opens all facilities and therefore its solution costs more than kp k . The optimum solution is p k + i=1...k-1 j=1...i p j-1 . It is easy to show that with a careful choice of k, the ratio of these two expressions is Ω( log n log log n ). We do not know whether the approximation factor of Hochbaum's algorithm on metric instances is strictly less than log n or not.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Analysis of Algorithm 1</head><p>In this section we will give an LP-based analysis of the algorithm. As stated before, the contribution of each city goes towards opening at most one facility and connecting the city to an open facility. Therefore, the total cost of the solution produced by our algorithm will be equal to the sum j α j of the contributions. However, α is not a feasible dual solution as it was in JV algorithm. The reason is that in every iteration of the restatement of Algorithm 1, we exclude a subset of cities and withdraw their contribution from all facilities. So at the end, for some facility i, j max(α jc ij , 0) can be greater than f i and hence the corresponding constraints of the dual program is violated. However, if we find an γ for which α/γ is feasible, j α j /γ would be a lower bound to the optimum and therefore the approximation factor of the algorithm would be at most γ. This observation motivates the following definition.</p><p>Definition Given α j (j = 1, . . . , n c ), a facility i is called at most γ-overtight if and only if</p><formula xml:id="formula_9">j max(α j /γ -c ij , 0) ≤ f i .</formula><p>Using the above definition, it is trivial that α/γ is a feasible dual if and only if each facility is at most γ-overtight. Now, we want to find such an γ. Note that in the above sum we only need to consider the cities j for which α j ≥ γc ij . Let us assume without loss of generality that it is the case only for the first k cities. Moreover, assume without loss of generality that</p><formula xml:id="formula_10">α 1 ≤ α 2 ≤ • • • ≤ α k .</formula><p>The next two lemmas express the constraints on α imposed by the problem or our algorithm. The first lemma mainly captures metric property and the second one expresses the fact that the total contribution offered to a facility at any time during the algorithm is no more than its cost.</p><p>Lemma 2 For every two cities j, j ′ and facility i,</p><formula xml:id="formula_11">α j ≤ α j ′ + c ij ′ + c ij .</formula><p>Proof: If α j ′ ≥ α j , the inequality obviously holds. Assume α j &gt; α j ′ . Let i ′ be the facility that city j ′ is connected to by our algorithm. Thus, facility i ′ is open at time α j ′ . The contribution α j cannot be greater than c i ′ j because in that case city j could be connected to facility i ′ at some time t &lt; α j . Hence α j ≤ c i ′ j . Furthermore, by triangle inequality,</p><formula xml:id="formula_12">c i ′ j ≤ c i ′ j ′ + c ij ′ + c ij ≤ α j ′ + c ij ′ + c ij . 2</formula><p>Lemma 3 For every city j and facility i, k l=j max(α jc il , 0) ≤ f i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof:</head><p>Assume, for the sake of contradiction, that for some j and some i the inequality does not hold, i.e., nc k=j max(α jc ik , 0) &gt; f i . By the ordering on cities, for k ≥ j, α k ≥ α j . Let time t = α j . By the assumption, facility i is fully paid for before time t. For any city k, j ≤ k ≤ n c for which α jc ik &gt; 0 the edge (i, k) must be tight before time t. Moreover, there must be at least one such city. For this city, α k &lt; α j , since the algorithm will stop growing α k as soon as k has a tight edge to a fully paid for facility. The contradiction establishes the lemma.</p><p>2</p><p>Subject to the constraints introduced by Lemmas 2 and 3, we want to find the minimum γ for</p><formula xml:id="formula_13">which k j=1 (α j /γ -c ij ) ≤ f i .</formula><p>In other words, we want to find the maximum of the ratio</p><formula xml:id="formula_14">k j=1 α j f + k j=1 d j .</formula><p>We can define variables f , d j , and α j , corresponding to facility cost, distances, and contributions respectively and write the following maximization program:</p><formula xml:id="formula_15">z k = maximize k j=1 α j f + k j=1 d j subject to α j ≤ α j+1 ∀j ∈ {1, . . . , k -1} α j ≤ α l + d j + d l ∀j, l ∈ {1, . . . , k} k l=j max(α j -d l , 0) ≤ f ∀j ∈ {1, . . . , k} α j , d j , f ≥ 0 ∀j ∈ {1, . . . , k}<label>(4)</label></formula><p>It's not difficult to prove that z k (the maximum value of the objective function of program 4) is equal to the optimal solution of the following linear program which we call the factor-revealing LP.</p><formula xml:id="formula_16">z k = maximize k j=1 α j subject to f + k j=1 d j ≤ 1 α j ≤ α j+1 ∀j ∈ {1, . . . , k -1} α j ≤ α l + d j + d l ∀j, l ∈ {1, . . . , k} x jl ≥ α j -d l ∀j, l ∈ {1, . . . , k} k l=j x jl ≤ f ∀j ∈ {1, . . . , k} α j , d j , f ≥ 0 ∀j ∈ {1, . . . , k}<label>(5)</label></formula><p>Lemma 4 Let γ = sup k≥1 {z k }. Every facility is at most γ-overtight Proof: Consider facility i. We want to show that j max(α j /γc ij , 0) ≤ f i . Suppose without loss of generality that the subset of cities j such that α j ≥ γc ij is {j = 1, 2, . . . , k} for some k.</p><p>Moreover </p><formula xml:id="formula_17">α 1 ≤ α 2 ≤ . . . α k . Let d j = c ij , j = 1, . . . ,</formula><formula xml:id="formula_18">f i + k j=1 c ij ≤ z k .</formula><p>2</p><p>By what we said so far, we know that the approximation factor of our algorithm is at most sup k≥1 {z k }. In the following theorem, we prove, by demonstrating an infinite family of instances, that the approximation ratio of Algorithm 1 is not better than sup k≥1 {z k }.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 5</head><p>The approximation factor of our algorithm is precisely sup k≥1 {z k }.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof:</head><p>Consider an optimum feasible solution of program 4. We construct an instance of the facility location problem with k cities and k + 1 facilities as follows: The cost of opening facility i is</p><formula xml:id="formula_19">f i = 0 if 1 ≤ i ≤ k f if i = k + 1</formula><p>The connection cost between a city j and a facility i is:</p><formula xml:id="formula_20">c ij =      α j if 1 ≤ i = j ≤ k d j if 1 ≤ j ≤ k, i = k + 1 d i + d j + α i otherwise</formula><p>It is easy to see that the connection costs satisfy the triangle inequality. On this instance, our algorithm connects city 1 to facility 1, then it connects city 2 to facility 2, and finally connects city k to facility k. (The inequality k l=j max(α jd l , 0) ≤ f guarantees that city i can get connected to facility i before facility k + 1). Therefore, the cost of the restatement of Algorithm 1 is equal to</p><formula xml:id="formula_21">k j=1 c jj + k i=1 f i = k j=1 α j = z k .</formula><p>On the other hand, the optimal solution for this instance is to connect all the cities to facility k + 1. The cost of this solution is equal to k j=1 c k+1,j + f k+1 = f + k j=1 d j ≤ 1. Thus, our algorithm outputs a solution whose cost is at least z k times the cost of the optimal solution.</p><p>2</p><p>The only thing that remains is to find an upper bound on sup k≥1 {z k }. By solving the factorrevealing LP for any particular value of k, we get a lower bound on the value of γ. In order to prove an upper bound on γ, we need to present a general solution to the dual of the factor-revealing LP. Unfortunately, this is not an easy task in general. (For example, performing a tight asymptotic analysis of the LP bound is still an open question in coding theory). However, here empirical results can help us: we can solve the dual of the factor-revealing LP for small values of k to get an idea of how the general optimal solution looks like. Using this, it is usually possible (although sometimes tedious) to prove a close-to-optimal upper bound on the value of z k . We have used this technique to prove an upper bound of 1.861 on γ.</p><p>Lemma 6 For every k ≥ 1, z k ≤ 1.861.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof:</head><p>Let r = 1.8609. By doubling a feasible solution of 4 it is easy to show that z k ≤ z 2k so we can assume, without loss of generality that k is sufficiently large. Consider a feasible solution of the program 4. It is clear from the third inequality that for every j, j ′ we have</p><formula xml:id="formula_22">j ′ i=j (α j -d i ) ≤ f.<label>(6)</label></formula><p>Now, we define l j and θ j as follows:</p><formula xml:id="formula_23">l j = p 2 k if j ≤ p 1 k k j &gt; p 1 k θ j =      r+1 p 2 k if j ≤ p 1 k (r+1)(p 2 -p 1 ) p 2 (1-p 1 )k p 1 k &lt; j ≤ p 2 k 0 j &gt; p 2 k</formula><p>where p 1 = 0.1991 and p 2 = 0.5696. We consider Inequality 6 for every j ≤ p 2 k and j ′ = l j , and multiply both sides of this inequality by θ j . By adding up all these inequalities, we obtain</p><formula xml:id="formula_24">p 1 k j=1 p 2 k i=j θ j (α j -d i ) + p 2 k j=p 1 k+1 k i=j θ j (α j -d i ) ≤ ( p 2 k j=1 θ j )f. (<label>7</label></formula><formula xml:id="formula_25">)</formula><p>The coefficient of f in the right-hand side of the above inequality is equal to</p><formula xml:id="formula_26">p 2 k j=1 θ j = r+1 p 2 k p 1 k + (r+1)(p 2 -p 1 ) p 2 (1-p 1 )k (p 2 k -p 1 k) ≈ 1.8609 &lt; 1.</formula><p>861. Also, the coefficients of α j and d j in the left-hand side of Inequality 7 are equal to</p><formula xml:id="formula_27">coeff[α j ] = (p 2 k -j + 1)θ j j ≤ p 1 k (k -j + 1)θ j j &gt; p 1 k (8) coeff[d j ] = j i=1 θ i j ≤ p 2 k j i=p 1 k+1 θ i j &gt; p 2 k<label>(9)</label></formula><p>Notice that the sum of coefficients of α j 's is equal to</p><formula xml:id="formula_28">k j=1 coeff[α j ] = p 1 k j=1 r + 1 p 2 k (p 2 k -j + 1) + p 2 k j=p 1 k+1 (r + 1)(p 2 -p 1 ) p 2 (1 -p 1 )k (k -j + 1) &gt; (r + 1) p 1 - p 2 1 2p 2 + (p 2 -p 1 ) 2 p 2 (1 -p 1 ) - (p 2 -p 1 ) 2 (p 1 + p 2 ) 2p 2 (1 -p 1 ) k ≈ 1.00004k &gt; k</formula><p>Now, we use the inequality α i ≥ α jd jd i on the expression on the left hand side of inequality 7 to reduce the coefficients of α j 's that are greater than 1, and increase the coefficient of α j 's that are less than 1. Since the sum of these coefficients is greater than k, using this inequality and the inequality α j ≥ 0 we can obtain an expression E that is less than or equal to the left hand side of inequality 7, and in which all α j 's have coefficient 1. The coefficient of d j in this expression will be equal to its coefficient in the left hand side of inequality 7, plus the absolute value of the change in the coefficient of the corresponding α j . Therefore, by equations 8 and 9 this coefficient is equal to:</p><formula xml:id="formula_29">coeff E [d j ] =      j i=1 θ i + |(p 2 k -j + 1)θ j -1| j ≤ p 1 k j i=1 θ i + |(k -j + 1)θ j -1| p 1 k &lt; j ≤ p 2 k j i=p 1 k+1 θ i + |(k -j + 1)θ j -1| j &gt; p 2 k If j ≤ p 1 k, we have (p 2 k -j + 1)θ j &gt; (p 2 k -p 1 k) r+1 p 2 k = (r + 1)(p 2 -p 1 )/p 2 ≈ 1.8609 &gt; 1 Therefore, coeff E [d j ] = j i=1 θ i + (p 2 k -j + 1)θ j -1 = r + O( 1 k ) &lt; 1.861 Similarly, if p 1 k &lt; j ≤ p 2 k, we have (k -j + 1)θ j &gt; (k -p 2 k) (r+1)(p 2 -p 1 ) p 2 (1-p 1 )k = (r+1)(p 2 -p 1 )(1-p 2 ) p 2 (1-p 1 ) ≈ 1.00003 &gt; 1. Therefore, coeff E [d j ] = j i=1 θ i + (k -j + 1)θ j -1 = r + O( 1 k ) &lt; 1.861 Finally, if j &gt; p 2 k, the coefficient of d j is equal to coeff E [d j ] = j i=p 1 k θ i + |0 -1| = (r + 1)(p 2 -p 1 ) p 2 (1 -p 1 )k (p 2 k -p 1 k) + 1 ≈ 1.8609 &lt; 1.861</formula><p>Therefore, in each case, the coefficient of d j is less than or equal to 1.861. Thus, we have proved that</p><formula xml:id="formula_30">k j=1 α j - k j=1 1.861d j &lt; 1.861f.</formula><p>This clearly implies that z k &lt; 1.861. 2</p><p>Figure <ref type="figure">1</ref> shows a tight example for k = 2, for which the approximation factor of the algorithm is 1.5. The cost of the missing edges is given by triangle inequality. Numerical computations using the software CPLEX show that z 300 ≈ 1.81. Thus, the approximation factor of our algorithm is between 1.81 and 1.861. We do not know the exact approximation ratio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Algorithm 2</head><p>Algorithm 2 is similar to the restatement of Algorithm 1. The only difference is that in Algorithm 1 cities stop offering money to facilities as soon as they get connected to a facility, but here they still offer some money to other facilities. The amount that an already-connected city offers to a facility j is equal to the amount that it would save in connection cost by switching its facility to j. As we will see in the next section, this change reduces the approximation factor of the algorithm from 1.861 to 1.61.</p><formula xml:id="formula_31">0 0 1 0 1 2 1 + ε 1 2</formula><p>Figure <ref type="figure">1</ref>: The approximation ratio of Algorithm 1 is at least 1.5</p><p>Algorithm 2</p><p>1. We introduce a notion of time. The algorithm starts at time 0. At this time, each city is defined to be unconnected (U := C), all facilities are unopened, and α j is set to 0 for every j.</p><p>At every moment, each city j offers some money from its contribution to each unopened facility i. The amount of this offer is computed as follows: If j is unconnected, the offer is equal to max(α jc ij , 0) (i.e., if the contribution of j is more than the cost that it has to pay to get connected to i, it offers to pay this extra amount to i); If j is already connected to some other facility i ′ , then its offer to facility i is equal to max(c i ′ jc ij , 0) (i.e., the amount that j offers to pay to i is equal to the amount j would save by switching its facility from i ′ to i).</p><p>2. While U = ∅, increase the time, and simultaneously, for every city j ∈ U , increase the parameter α j at the same rate, until one of the following events occurs (if two events occur at the same time, we process them in an arbitrary order).</p><p>(a) For some unopened facility i, the total offer that it receives from cities is equal to the cost of opening i. In this case, we open facility i, and for every city j (connected or unconnected) which has a non-zero offer to i, we connect j to i. The amount that j had offered to i is now called the contribution of j toward i, and j is no longer allowed to decrease this contribution.</p><p>(b) For some unconnected city j, and some open facility i, α j = c ij . In this case, connect city j to facility i and remove j from U .</p><p>Clearly the main issue in the facility location problem is to decide which facilities to open. Once this is done, each city should be connected to the closest open facility. Observe that Algorithm 2 makes greedy choices in deciding which facilities to open and once it opens a facility, it does not alter this decision. In this sense, it is also a greedy algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Analysis of Algorithm 2</head><p>The following fact should be obvious from the description of Algorithm 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 7</head><p>The total cost of the solution found by Algorithm 2 is equal to the sum of α j 's. Now, as in the analysis of Algorithm 1, we need to find a number γ, such that for every star S, j∈S∩C α j ≤ γc S . Such a γ will be an upper bound on the approximation ratio of the algorithm, since if for every facility i that is opened in the optimal solution and the collection A of cities that are connected to it, we write the inequality j∈A α j ≤ γ(f i + j∈A c ij ) and add up these inequalities, we will obtain that the cost of our solution is at most γ times the cost of the optimal solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Deriving the factor-revealing LP</head><p>Our proof follows the methodology of Section 3: express various constraints that are imposed by the problem or by the structure of the algorithm as inequalities and get a bound on the value of γ defined above by solving a series of linear programs.</p><p>Consider a star S consisting of a facility having opening cost f (with a slight misuse of the notation, we call this facility f ), and k cities numbered 1 through k. Let d j denote the connection cost between facility f and city j, and α j denote the contribution of the city j at the end of Algorithm 2. We may assume without loss of generality that</p><formula xml:id="formula_32">α 1 ≤ α 2 ≤ • • • ≤ α k .<label>(10)</label></formula><p>We need more variables to capture the execution of Algorithm 2. For every i (1 ≤ i ≤ k), consider the situation of the algorithm at time t = α iǫ, where ǫ is very small, i.e., just a moment before city i gets connected for the first time. At this time, each of the cities 1, 2, . . . , i -1 might be connected to a facility. For every j &lt; i, if city j is connected to some facility at time t, let r j,i denote the connection cost between this facility and city j; otherwise, let r j,i := α j . The latter case occurs if and only if α i = α j . It turns out that these variables (f , d j 's, α j 's, and r j,i 's) are enough to write down some inequalities to bound the ratio of the sum of α j 's to the cost of S (i.e., f + k j=1 d j ). First, notice that once a city gets connected to a facility, its contribution remains constant and it cannot revoke its contribution to a facility, so it can never get connected to another facility with a higher connection cost. This implies that for every j,</p><formula xml:id="formula_33">r j,j+1 ≥ r j,j+2 ≥ • • • ≥ r j,k .<label>(11)</label></formula><p>Now, consider time t = α iǫ. At this time, the amount city j offers to facility f is equal to max(r j,id j , 0) if j &lt; i, and max(t</p><formula xml:id="formula_34">-d j , 0) if j ≥ i.</formula><p>Notice that by the definition of r j,i this holds even if j &lt; i and α i = α j . It is clear from Algorithm 2 that the total offer of cities to a facility can never become larger than the opening cost of the facility. Therefore, for all i,</p><formula xml:id="formula_35">i-1 j=1 max(r j,i -d j , 0) + k j=i max(α i -d j , 0) ≤ f.<label>(12)</label></formula><p>The triangle inequality is another important constraint that we need to use. Consider cities i and j with j &lt; i at time t = α iǫ. Let f ′ be the facility j is connected to at time t. By the triangle inequality and the definition of r j,i , the connection cost c f ′ i between city i and facility f ′ is at most r j,i + d i + d j . Furthermore, c f ′ i can not be less than t, since if it is, our algorithm could have connected the city i to the facility f ′ at a time earlier than t, which is a contradiction. Here we need to be careful with the special case α i = α j . In this case, r j,i + d i + d j is not more than t. If α i = α j , the facility f ′ is open at time t and therefore city i can get connected to it, if it can pay the connection cost. Therefore for every 1 ≤ j &lt; i ≤ k,</p><formula xml:id="formula_36">α i ≤ r j,i + d i + d j .<label>(13)</label></formula><p>The above inequalities form the following factor-revealing LP.</p><p>maximize</p><formula xml:id="formula_37">k i=1 α i f + k i=1 d i (14) subject to ∀ 1 ≤ i &lt; k : α i ≤ α i+1 ∀ 1 ≤ j &lt; i &lt; k : r j,i ≥ r j,i+1 ∀ 1 ≤ j &lt; i ≤ k : α i ≤ r j,i + d i + d j ∀ 1 ≤ i ≤ k : i-1 j=1 max(r j,i -d j , 0) + k j=i max(α i -d j , 0) ≤ f ∀ 1 ≤ j ≤ i ≤ k : α j , d j , f, r j,i ≥ 0</formula><p>Notice that although the above optimization program is not written in the form of a linear program, it is easy to change it to a linear program by introducing new variables and inequalities.</p><p>Lemma 8 If z k denotes the solution of the factor-revealing LP, then for every star S consisting of a facility and k cities, the sum of α j 's of the cities in S in Algorithm 2 is at most z k c S .</p><p>Proof: Inequalities 10, 11, 12, and 13 derived above imply that the values α j , d j , f, r j,i that we get by running Algorithm 2 constitute a feasible solution of the factor-revealing LP. Thus, the value of the objective function for this solution is at most z k . 2</p><p>Lemmas 7 and 8 imply the following.</p><p>Lemma 9 Let z k be the solution of the factor-revealing LP, and γ := sup k {z k }. Then Algorithm 2 solves the metric facility location problem with an approximation factor of γ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Solving the factor-revealing LP</head><p>As mentioned earlier, the optimization program ( <ref type="formula">14</ref>) can be written as a linear program. This enables us to use an LP-solver to solve the factor-revealing LP for small values of k, in order to compute the numerical value of γ. Table <ref type="table">1</ref> shows a summary of results that are obtained by solving the factor-revealing LP using CPLEX. It seems from the experimental results that z k is an increasing sequence that converges to some number close to 1.6 and hence γ ≈ 1.6. We are using the same idea as Lemma 6 in Section 3 to prove the upper bound of 1.61 on z k .  <ref type="table">1</ref>: Solution of the factor-revealing LP Lemma 10 Let z k be the solution to the factor-revealing LP. Then for every k, z k ≤ 1.61.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof:</head><p>Using the same argument as in Lemma 6, we can assume, without loss of generality, that k is sufficiently large. Consider a feasible solution of the factor-revealing LP. Let x j,i := max(r j,id j , 0). The fourth inequality of the factor-revealing LP implies that for every i ≤ i ′ ,</p><formula xml:id="formula_38">(i ′ -i + 1)α i ≤ i ′ j=i d j + f - i-1 j=1 x j,i .<label>(15)</label></formula><p>Now, we define l i as follows:</p><formula xml:id="formula_39">l i = p 2 k if i ≤ p 1 k k if i &gt; p 1 k</formula><p>where p 1 and p 2 are two constants (with p 1 &lt; p 2 ) that will be fixed later. Consider Inequality 15 for every i ≤ p 2 k and i ′ = l i , and divide both sides of this inequality by (l ii + 1). By adding up these inequalities we obtain</p><formula xml:id="formula_40">p 2 k i=1 α i ≤ p 2 k i=1 l i j=i d j l i -i + 1 + ( p 2 k i=1 1 l i -i + 1 )f - p 2 k i=1 i-1 j=1 x j,i l i -i + 1 .<label>(16)</label></formula><p>Now for every j ≤ p 2 k, let y j := x j,p 2 k . The second inequality of the factor-revealing LP implies that x j,i ≥ y j for every j &lt; i ≤ p 2 k and x j,i ≤ y j for every i &gt; p 2 k. Also, let ζ := p 2 k i=1 1 l i -i+1 . Therefore, inequality 16 implies</p><formula xml:id="formula_41">p 2 k i=1 α i ≤ p 2 k i=1 l i j=i d j l i -i + 1 + ζf - p 2 k i=1 i-1 j=1 y j l i -i + 1 . (<label>17</label></formula><formula xml:id="formula_42">)</formula><p>Consider the index ℓ ≤ p 2 k for which 2d ℓ + y ℓ has its minimum (i.e., for every j ≤ p 2 k, 2d ℓ + y ℓ ≤ 2d j + y j ). The third inequality of the factor-revealing LP implies that for i = p 2 k + 1, . . . , k,</p><formula xml:id="formula_43">α i ≤ r ℓ,i + d i + d ℓ ≤ x ℓ,i + 2d ℓ + d i ≤ d i + 2d ℓ + y ℓ . (<label>18</label></formula><formula xml:id="formula_44">)</formula><p>By adding Inequality 18 for i = p 2 k + 1, . . . , k with Inequality 17 we obtain</p><formula xml:id="formula_45">k i=1 α i ≤ p 2 k i=1 l i j=i d j l i -i + 1 + (2d ℓ + y ℓ )(1 -p 2 )k + k j=p 2 k+1 d j - p 2 k i=1 i-1 j=1 y j l i -i + 1 + ζf = p 2 k j=1 ζd j - p 2 k j=1 p 2 k i=j+1 d j + y j l i -i + 1 + k j=p 2 k+1</formula><p>(1 +</p><formula xml:id="formula_46">p 2 k i=p 1 k+1 1 k -i + 1 )d j +(2d ℓ + y ℓ )(1 -p 2 )k + ζf ≤ p 2 k j=1 ζd j + k j=p 2 k+1</formula><p>(1 +</p><formula xml:id="formula_47">p 2 k i=p 1 k+1 1 k -i + 1 )d j + ζf +(2d ℓ + y ℓ )   (1 -p 2 )k - 1 2 p 2 k j=1 p 2 k i=j+1 1 l i -i + 1   ,</formula><p>where the last inequality is a consequence of the inequality 2d ℓ + y ℓ ≤ 2d j + y j ≤ 2d j + 2y j for j ≤ p 2 k. Now, let</p><formula xml:id="formula_48">ζ ′ := 1 + p 2 k i=p 1 k+1 1 k-i+1 and δ := (1 -p 2 ) -1 2k p 2 k j=1 p 2 k i=j+1 1 l i -i+1</formula><p>. Therefore, the above inequality can be written as follows:</p><formula xml:id="formula_49">k i=1 α i ≤ p 2 k j=1 ζd j + k j=p 2 k+1 ζ ′ d j + ζf + δ(2d ℓ + y ℓ )k,<label>(19)</label></formula><p>where</p><formula xml:id="formula_50">ζ = p 2 k i=1 1 l i -i + 1 = ln p 2 (1 -p 1 ) (p 2 -p 1 )(1 -p 2 ) + o(1),<label>(20)</label></formula><formula xml:id="formula_51">ζ ′ = 1 + p 2 k i=p 1 k+1 1 k -i + 1 = 1 + ln 1 -p 1 1 -p 2 + o(1),<label>(21)</label></formula><formula xml:id="formula_52">δ = 1 -p 2 - 1 2k p 2 k j=1 p 2 k i=j+1 1 l i -i + 1 = 1 2 (2 -p 2 -p 2 ln p 2 p 2 -p 1 -ln 1 -p 1 1 -p 2 ) + o(1).<label>(22)</label></formula><p>Now if we choose p 1 and p 2 such that δ &lt; 0, and let γ := max(ζ, ζ ′ ) then inequality 19 implies that</p><formula xml:id="formula_53">k i=1 α i ≤ (γ + o(1))(f + k i=1 d j ).</formula><p>Using equations 20, 21, and 22, it is easy to see that subject to the condition δ &lt; 0, the value of γ is minimized when p 1 ≈ 0.439 and p 2 ≈ 0.695, which gives us γ &lt; 1.61. 2</p><p>Also, as in the proof of Theorem 5, we can use the optimal solution of the factor-revealing LP that is computed numerically (see Table <ref type="table">1</ref>) to construct an example on which our algorithm performs at least z k times worse than the optimum. These results imply the following.</p><p>Theorem 11 Algorithm 2 solves the facility location problem in time O(n 3 ), where n = max(n f , n c ), with an approximation ratio between 1.598 and 1.61.  We defined the cost of a solution in the facility location problem as the sum of the facility cost (i.e., total cost of opening facilities) and the connection cost. We proved in the previous section that Algorithm 2 achieves an overall performance guarantee of 1.61. However, sometimes it is useful to get different approximation guarantees for facility and connection costs. The following theorem gives such a guarantee. The proof is similar to the proof of Lemma 9.</p><p>Theorem 12 Let γ f ≥ 1 and γ c := sup k {z k }, where z k is the solution of the following optimization program.</p><formula xml:id="formula_54">maximize k i=1 α i -γ f f k i=1 d i (23) subject to ∀ 1 ≤ i &lt; k : α i ≤ α i+1 ∀ 1 ≤ j &lt; i &lt; k : r j,i ≥ r j,i+1 ∀ 1 ≤ j &lt; i ≤ k : α i ≤ r j,i + d i + d j ∀ 1 ≤ i ≤ k : i-1 j=1 max(r j,i -d j , 0) + k j=i max(α i -d j , 0) ≤ f ∀ 1 ≤ j ≤ i ≤ k : α j , d j , f, r j,i ≥ 0</formula><p>Then for every instance I of the facility location problem, and for every solution SOL for I with facility cost F SOL and connection cost C SOL , the cost of the solution found by Algorithm 2 is at most</p><formula xml:id="formula_55">γ f F SOL + γ c C SOL .</formula><p>We have computed the solution of the optimization program 23 for k = 100, and several values of γ f between 1 and 3, to get an estimate of the corresponding γ c 's. The result is shown in the diagram in Figure <ref type="figure" target="#fig_0">2</ref>. Every point (γ f , γ ′ c ) on the thick line in this diagram represents a value of γ f , and the corresponding estimate for the value of γ c . The dashed line shows the following lower bound, which can be proved easily by adapting the proof of Guha and Khuller <ref type="bibr" target="#b14">[15]</ref> for hardness of the facility location problem.</p><p>Theorem 13 Let γ f and γ c be constants with γ c &lt; 1 + 2e -γ f . Assume there is an algorithm A such that for every instance I of the metric facility location problem, A finds a solution whose cost is not more than γ f F SOL + γ c C SOL for every solution SOL for I with facility and connection costs</p><formula xml:id="formula_56">F SOL and C SOL . Then NP ⊆ DTIME[n O(log log n) ].</formula><p>Similar tradeoff problems are considered by Charikar and Guha <ref type="bibr" target="#b5">[6]</ref>. However, an important advantage that we get here is that all the inequalities ALG ≤ γ f F SOL + γ c C SOL are satisfied by a single algorithm. In Section 8, we will use the point γ f = 1 of this tradeoff to design algorithms for other variants of the facility location problem. Other points of this tradeoff can also be useful in designing other algorithms based on our algorithm. For example, Mahdian, Ye, and Zhang <ref type="bibr" target="#b31">[32]</ref> use the point γ f = 1.1 of this tradeoff to obtain a 1.52-approximation algorithm for the metric facility location problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Experimental Results</head><p>We have implemented our algorithms, as well as the JV algorithm, using the programming language C. We have made four kinds of experiments. In all cases the solution of the algorithms is compared to the optimal solution of the LP-relaxation, computed using the package CPLEX to obtain an upper bound on the approximation factor of the algorithms. The test bed of our first set of experiments consists of randomly generated instances on a 10, 000 × 10, 000 grid: In each instance, cities and facilities are points, drawn randomly from the grid. The connection cost between a city and a facility is set to be equal to the euclidean distance of the corresponding points. Furthermore, the opening cost of each facility is drawn uniformly at random from the integers between 0 and 9999. For the second set of experiments, we have generated random graphs (according to the distribution G(n, p)) and assigned uniform random weights on the edges. Cities and facilities correspond to the nodes of this graph, and the connection cost between a city and a facility is defined to be the shortest path between the corresponding nodes. The opening costs of facilities are generated at random. The instance sizes in both of the above types vary from 50 cities and 20 facilities to 400 cities and 150 facilities. For each size, 15 instances are generated and the average error of the algorithm (compared to the LP lower bound) is computed. The results of these experiments are shown in Table <ref type="table" target="#tab_3">2</ref>.</p><p>An Internet topology generator software, namely GT-ITM, is used to generate the third set of instances. GT-ITM is a software package for generating graphs that have a structure modeling the topology of the Internet <ref type="bibr" target="#b44">[45]</ref>. This model is used because of the applications of facility location problems in network applications such as placing web server replicas <ref type="bibr" target="#b36">[37]</ref>. In this model we consider transit nodes as potential facilities and stub nodes as cities. The connection cost is the distance produced by the generator. The opening costs are again random numbers. We have generated 10 instances for each of the 10 different instance sizes. The results are shown in Table <ref type="table">3</ref>.</p><p>We also tested all algorithms on 15 instances from <ref type="bibr" target="#b3">[4]</ref>, which is a library of test data sets for several operations research problems. Our results are shown in Table <ref type="table" target="#tab_4">4</ref>. As we can see from the tables, Algorithm 2 behaves extremely well, giving almost no error in many cases. Algorithm 1 has an error of 7% on the worst instance and an average error of 2-3%. On the other hand, the JV algorithm has much larger error, sometimes as high as 100 %. We should also note that the running times of the three algorithms did not vary significantly. In the biggest instances of 1000 cities and 100 facilities all the algorithms ran in approximately 1-2 seconds. The implementation of the algorithms as well as all the data sets are available upon request. For other experimental results see <ref type="bibr" target="#b4">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Variants of the problem</head><p>In this section, we show that our algorithms can also be applied to several variants of the metric facility location problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">The k-median problem</head><p>The k-median problem differs from the facility location problem in two respects: there is no cost for opening facilities, and there is an upper bound k, that is supplied as part of the input, on the number of facilities that can be opened. The k-facility location problem is a common generalization of k-median and the facility location problem. In this problem, we have an upper bound k on the number of facilities that can be opened, as well as costs for opening facilities. The k-median problem is studied extensively <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b21">22]</ref> and the best known approximation algorithm for this problem, due to Arya et al. <ref type="bibr" target="#b1">[2]</ref>, achieves a factor of 3 + ǫ. It is also straightforward to adapt the proof of hardness of the facility location problem <ref type="bibr" target="#b14">[15]</ref> to show that there is no (1 + 2 eǫ)-approximation algorithm for k-median, unless NP ⊆ DTIME[n O(log log n) ]. Notice that this proves that k-median is a strictly harder problem to approximate than the facility location problem because the latter can be approximated within a factor of 1.61. Jain and Vazirani <ref type="bibr" target="#b21">[22]</ref> reduced the k-median problem to the facility location problem in the following sense: Suppose A is an approximation algorithm for the facility location problem. Consider an instance I of the problem with optimum cost OP T , and let F and C be the facility and connection costs of the solution found by A. We call algorithm A a Lagrangian Multiplier Preserving αapproximation (or LMP α-approximation for short) if for every instance I, C ≤ α(OP T -F ). Jain and Vazirani <ref type="bibr" target="#b21">[22]</ref> show that an LMP α-approximation algorithm for the metric facility location problem gives rise to a 2α-approximation algorithm for the metric k-median problem. They have noted that this result also holds for the k-facility location problem.</p><p>Lemma 14 <ref type="bibr" target="#b21">[22]</ref> An LMP α-approximation algorithm for the facility location problem gives a 2αapproximation algorithm for the k-facility location problem.</p><p>Here we use Theorem 12 together with the scaling technique of Charikar and Guha <ref type="bibr" target="#b5">[6]</ref> to give an LMP 2-approximation algorithm for the metric facility location problem based on Algorithm 2. This will result in a 4-approximation algorithm for the metric k-facility location problem, whereas the best previously known was 6 <ref type="bibr" target="#b21">[22]</ref>.</p><p>Lemma 15 Assume there is an algorithm A for the metric facility location problem such that for every instance I and every solution SOL for I, A finds a solution of cost at most F SOL + αC SOL , where F SOL and C SOL are facility and connection costs of SOL, and α is a fixed number. Then there is an LMP α-approximation algorithm for the metric facility location problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof:</head><p>Consider the following algorithm: The algorithm constructs another instance I ′ of the problem by multiplying the facility opening costs by α, runs A on this modified instance I ′ , and outputs its answer. It is easy to see that this algorithm is an LMP α-approximation.</p><p>2</p><p>Now we only need to prove the following. The proof of this theorem follows the general scheme that is explained in Section 9.</p><p>Theorem 16 For every instance I and every solution SOL for I, Algorithm 2 finds a solution of cost at most F SOL + 2C SOL , where F SOL and C SOL are facility and connection costs of SOL.</p><p>Proof: By Theorem 12 we only need to prove that the solution of the factor-revealing LP 23 with γ f = 1 is at most 2. We first write the maximization program 23 as the following equivalent linear program.</p><p>maximize</p><formula xml:id="formula_57">k i=1 α i -f<label>(24)</label></formula><p>subject to</p><formula xml:id="formula_58">k i=1 d i = 1 ∀ 1 ≤ i &lt; k : α i -α i+1 ≤ 0 ∀ 1 ≤ j &lt; i &lt; k : r j,i+1 -r j,i ≤ 0 ∀ 1 ≤ j &lt; i ≤ k : α i -r j,i -d i -d j ≤ 0 ∀ 1 ≤ j &lt; i ≤ k : r j,i -d i -g i,j ≤ 0 ∀ 1 ≤ i ≤ j ≤ k : α i -d j -h i,j ≤ 0 ∀ 1 ≤ i ≤ k : i-1 j=1 g i,j + k j=i h i,j -f ≤ 0 ∀ i, j : α j , d j , f, r j,i , g i,j , h i,j ≥ 0</formula><p>We need to prove an upper bound of 2 on the solution of the above LP. Since this program is a maximization program, it is enough to prove the upper bound for any relaxation of the above program. Numerical results (for a fixed value of k, say k = 100) suggest that removing the second, third, and seventh inequalities of the above program does not change its solution. Therefore, we can relax the above program by removing these inequalities. Now, it is a simple exercise to write down the dual of the relaxed linear program and compute its optimal solution. This solution corresponds to multiplying the third, fourth, fifth, and sixth inequalities of the linear program 24 by 1/k, and the first one by (2 -1/k), and adding up these inequalities. This gives an upper bound of 2 -1/k on the value of the objective function. Thus, for γ f = 1, we have γ c ≤ 2. In fact, γ c is precisely equal to 2, as shown by the following solution for the program 23.</p><formula xml:id="formula_59">α i = 2 -1 k i = 1 2 2 ≤ i ≤ k d i = 1 i = 1 0 2 ≤ i ≤ k r j,i = 1 j = 1 2 2 ≤ j ≤ k f = 2(k -1)</formula><p>This example shows that the above analysis of the factor-revealing LP is tight. 2</p><p>Lemma 15 and Theorem 16 provide an LMP 2-approximation algorithm for the metric facility location problem. This result improves all the results in Jain and Vazirani <ref type="bibr" target="#b21">[22]</ref>, and gives straightforward algorithms for some other problems considered by Charikar et al <ref type="bibr" target="#b7">[8]</ref>. Notice that Theorem 13 shows that finding an LMP (1 + 2 eǫ)-approximation for the metric facility location problem is hard. Also, the integrality gap examples found by Guha <ref type="bibr" target="#b13">[14]</ref> show that Lemma 14 is tight. This shows that one cannot use Lemma 14 as a black box to obtain a smaller factor than 2 + 4 e for k-median problem. Note that 3 + ǫ approximation is already known <ref type="bibr" target="#b1">[2]</ref> for the problem. Hence if one wants to beat this factor using the Lagrangian relaxation technique then it will be necessary to look into the underlying LMP algorithm as already been done by Charikar and Guha <ref type="bibr" target="#b5">[6]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Facility location game</head><p>An important consideration, in cooperative game theory, while distributing the cost of a shared utility, is that the cost shares should satisfy the coalition participation constraint, i.e., the total cost share of any subset of the users shall not be larger than their stand-alone cost of receiving the service, so as to prevent this subset from seceding. In general, this turns out to be a stringent condition to satisfy. For the facility location problem, Goemans and Skutella <ref type="bibr" target="#b12">[13]</ref> showed that such a cost allocation is only possible for a very special case. Furthermore, intractability sets in as well, for instance, in the case of the facility location problem, computing the optimal cost of serving a set of users is NP-hard.</p><p>In <ref type="bibr" target="#b23">[24]</ref> Jain and Vazirani relax this notion: for a constant k, ensure that the cost share of any subset is no more than k times its stand-alone cost. They also observe that LP-based approximation algorithms directly yield a cost sharing method compatible with this relaxed notion. However, this involves solving an LP, as in the case of LP-rounding. We observe that our facility location algorithms automatically yield such a cost sharing method, with k = 1.861 and k = 1.61 respectively, by defining the cost share of city j to be α j .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Arbitrary demands</head><p>In this version, for each city j, a non-negative integer demand d j , is specified. An open facility i can serve this demand at the cost of c ij d j . The best way to look at this modification is to reduce it to unit demand case by making d j copies of city j. This reduction suggests that we need to change our algorithms , so that each city j raises its contribution α j at rate d j . Note that the modified algorithms still have the same running time in more general cases, where d j is fractional or exponentially large, and achieve the same approximation ratio.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.4">Fault tolerant facility location with uniform connectivity requirements</head><p>We are given a connectivity requirement r j for each city j, which specifies the number of open facilities that city j should be connected to. We can see that this problem is closely related to the set multi-cover problem, in the case that every set can be picked at most once <ref type="bibr" target="#b37">[38]</ref>. The greedy algorithm for set-cover can be adapted for this variant of the multi-cover problem achieving the same approximation factor. We can use the same approach to deal with the fault tolerant facility location: The mechanism of raising dual variables and opening facilities is the same as in our initial algorithms. The only difference is that city j stops raising its dual variable and withdraws its contribution from other facilities, when it is connected to r j open facilities. We can show that when all r j 's are equal, our algorithms can still achieve the approximation factor of 1.861 and 1.61.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.5">Facility location with penalties</head><p>In this version we are not required to connect every city to an open facility; however, for each city j, there is a specified penalty, p j , which we have to pay, if it is not connected to any open facility. We can modify our algorithms for this problem as follows: If α j reaches p j before j is connected to any open facility, the city j stops raising its dual variable and keeps its contribution equal to its penalty until it is either connected to an open facility or all remaining cities stop raising their dual variables. At this point, the algorithm terminates and unconnected cities remain unconnected. Using the linear programming formulation introduced in Charikar et al. <ref type="bibr">([8]</ref> inequalities (4.6)-(4.10)), we can show that the approximation ratio and running time of our modified algorithms have not changed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.6">Robust facility location</head><p>In this variant, we are given a number l and we are only required to connect n cl cities to open facilities. This problem can be reduced to the previous one via Lagrangian relaxation. Very recently, Charikar et al. <ref type="bibr" target="#b7">[8]</ref> proposed a primal-dual algorithm, based on JV algorithm, which achieves an approximation ratio of 3. As they showed, the linear programming formulation of this variant has an unbounded integrality gap. In order to fix this problem, they use the technique of parametric pruning, in which they guess the most expensive facility in the optimal solution. After that, they run JV algorithm on the pruned instance, where the only allowable facilities are those that are not more expensive than the guessed facility. Here we can use the same idea, using Algorithm 1 rather than the JV algorithm. Using a proof similar to the proof of the Theorem 3.2 in <ref type="bibr" target="#b7">[8]</ref>, we can prove that this algorithm solves the robust facility location problem with an approximation factor of 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.7">Dealing with capacities</head><p>In real applications, it is not usually the case that the cost of opening a facility is independent of the number of cities it will serve. But we can assume that we have economy of scales, i.e., the cost of serving each city decreases when the number of cities increases (since publication of the first draft of this paper, this problem has also been studied in <ref type="bibr" target="#b18">[19]</ref>). In order to capture this property, we define the following variant of the capacitated metric facility location problem. For each facility i, there is an initial opening cost f i . After facility i is opened, it will cost s i to serve each city. This variant can be solved using metric uncapacitated facility location problem: We just have to change the metric such that for each city j and facility i, c ′ ij = c ij + s i . Clearly, c ′ is also a metric and the solution of the metric uncapacitated version to this problem can be interpreted as a solution to the original problem with the same cost.</p><p>We can reduce the variant of the capacitated facility location problem in which each facility can be opened many times <ref type="bibr" target="#b21">[22]</ref> to this problem by defining s i = f i /u i . If in the solution to this problem k cities are connected to facility i, we open this facility ⌈k/u i ⌉ times. The cost of the solution will be at most two times the original cost so any α-approximation for the uncapacitated facility location problem can be turned into a 2α-approximation for this variant of the capacitated version. We can also use the same technique as in <ref type="bibr" target="#b21">[22]</ref> to give a factor 3-approximation algorithm for this problem based on the LMP 2-approximation algorithm for uncapacitated facility location problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Discussion</head><p>The method of dual fitting can be seen as an implementation of the primal-dual schema in which, instead of relaxing complementary slackness conditions (which is the most common way of implementing the schema), we relax feasibility of the dual. However, we prefer to reserve the term primal-dual for algorithms that produce feasible primal and dual solutions. Let us show how the combination of dual fitting with factor-revealing LP applies to the set cover problem. The duality-based restatement of the greedy algorithm (see <ref type="bibr" target="#b43">[44]</ref>) is: All elements in the universal set U increase their dual variables uniformly. Each element contributes its dual towards paying for the cost of each of the sets it is contained in. When the total contribution offered to a set equals its cost, the set is picked. At this point, the newly covered elements freeze their dual variables and withdraw their contributions from all other sets. As stated in the introduction, the latter (important) step ensures that the primal is fully paid for by the dual. However, we might not get a feasible dual solution. To make the dual solution feasible we look for the smallest positive number Z, so that when the dual solution is shrunk by a factor of Z, it becomes feasible. An upper bound on the approximation factor of the algorithm is obtained by maximizing Z over all possible instances.</p><p>Clearly Z is also the maximum factor by which any set is over-tight. Consider any set S. We want to see what is the worst factor, over all sets and over all possible instances of the problem, by which a set S is over-tight. Let the elements in S be 1, 2, • • • , k. Let x i be the dual variable corresponding to the element i at the end of the algorithm. Without loss of generality we may assume that x 1 ≤ x 2 ≤ • • • ≤ x k . It is easy to see that at time t = x - i , total duals offered to S is at least (ki + 1)x i . Therefore, this value cannot be greater than the cost of the set S (denoted by c S ). So, the optimum solution of the following mathematical program gives an upper bound on the value of Z. (Note that c S is a variable not a constant). maximize k i=1 x i c S <ref type="bibr" target="#b24">(25)</ref> subject to ∀1 ≤ i &lt; k :</p><formula xml:id="formula_60">x i ≤ x i+1 ∀1 ≤ i ≤ k : (k -i + 1)x i ≤ c S ∀1 ≤ i ≤ k : x i ≥ 0 c S ≥ 1</formula><p>The above optimization program can be turned into a linear program by adding the constraint c S = 1 and changing the objective function to k i=1 x i . We call this linear program the factorrevealing LP. Notice that the factor-revealing LP has nothing to do with the LP formulation of the set cover problem; it is only used in order to analyze this particular algorithm. This is the important distinction between the factor-revealing LP technique, and other LP-based techniques in approximation algorithms. One advantage of reducing the analysis of the approximation guarantee of an algorithm to obtaining an upper bound on the optimal solution to a factor-revealing LP is that one can introduce emperical experimentation into the latter task. This can also help decide which aspects of the execution of the algorithm to introduce into the factor-revealing LP to obtain the best possible bound on the performance of the algorithm, e.g., we needed to introduce the variables r j,i in Section 5.1 in order to get a good bound on the approximation ratio of Algorithm 2. In general, this technique is not guaranteed to yield a tight analysis of the algorithm, since the algorithm may be performing well not because of local reasons but for some global reasons that are difficult to capture in a factor-revealing LP. In the case of set cover, this method not only produces a tight analysis, but the factor-revealing LP also helps produce a tight example for the algorithm. From any feasible solution x of factor-revealing LP 25, one can construct the following instance: There are k elements 1, . . . , k, a set S = {1, . . . , k} of cost 1 + ǫ which is the optimal solution, and sets S i = {i} of cost x i for i = 1, . . . , k. It is easy to verify that the greedy algorithm gives a solution that is x i times worse than the optimal on this instance. Picking x to be the optimal solution, we get a tight example, and also show that the approximation ratio of the greedy algorithm is precisely equal H n , the optimal solution of the factor-revealing LP.</p><p>Finally, in terms of practical impact, what is the significance of improving the approximation guarantee for facility location from 3 to 1.81 or 1.61 when practitioners are seeking algorithms that come within 2% to 5% of the optimal? The superior experimental results of our algorithms, as compared with the JV algorithm, seem to provide the answer and to support the argument made in <ref type="bibr" target="#b43">[44]</ref> (Preface, page IX) that the approximation factor should be viewed as a "measure that forces us to explore deeper into the combinatorial structure of the problem and discover more powerful tools for exploiting this structure" and the observation that "sophisticated algorithms do have the error bounds of the desired magnitude, 2% to 5%, on typical instances, even though their worst case error bounds are much higher".</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The tradeoff between γ f and γ c</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Random Graphs and Random Points on a Grid</figDesc><table><row><cell></cell><cell></cell><cell cols="4">Random Points on a Grid</cell><cell>Random Graphs</cell></row><row><cell>n c</cell><cell>n f</cell><cell>JV</cell><cell cols="3">ALG 1 ALG 2 JV</cell><cell>ALG 1 ALG 2</cell></row><row><cell>50</cell><cell>20</cell><cell cols="4">1.0927 1.0083 1.0004</cell><cell>1.0021 1.0007 1.0001</cell></row><row><cell cols="2">100 20</cell><cell cols="4">1.0769 1.0082 1.0004</cell><cell>1.0014 1.0022 1.0</cell></row><row><cell cols="2">100 50</cell><cell cols="4">1.2112 1.0105 1.0013</cell><cell>1.0225 1.0056 1.0005</cell></row><row><cell cols="2">200 50</cell><cell>1.159</cell><cell cols="3">1.0095 1.001</cell><cell>1.0106 1.0094 1.0002</cell></row><row><cell cols="3">200 100 1.301</cell><cell cols="3">1.0105 1.0016</cell><cell>1.0753 1.0178 1.0018</cell></row><row><cell cols="2">300 50</cell><cell cols="4">1.1151 1.0091 1.0011</cell><cell>1.0068 1.0102 1.0002</cell></row><row><cell cols="2">300 80</cell><cell cols="4">1.1787 1.0116 1.001</cell><cell>1.0259 1.0171 1.0004</cell></row><row><cell cols="6">300 100 1.2387 1.0118 1.0014</cell><cell>1.0455 1.0185 1.0009</cell></row><row><cell cols="3">300 150 1.327</cell><cell cols="3">1.0143 1.0015</cell><cell>1.1365 1.0249 1.0018</cell></row><row><cell cols="2">400 50</cell><cell cols="4">1.0905 1.0092 1.0005</cell><cell>1.0044 1.012</cell><cell>1.0</cell></row><row><cell cols="6">400 100 1.8513 1.0301 1.0026</cell><cell>1.0313 1.0203 1.0003</cell></row><row><cell cols="6">400 150 1.8112 1.0299 1.0023</cell><cell>1.1008 1.0234 1.0009</cell></row><row><cell></cell><cell></cell><cell>n c</cell><cell>n f</cell><cell>JV</cell><cell>ALG 1 ALG 2</cell></row><row><cell></cell><cell></cell><cell cols="2">100 20</cell><cell>1.004</cell><cell>1.0047 1.0001</cell></row><row><cell></cell><cell></cell><cell cols="2">160 20</cell><cell cols="2">1.5116 1.0612 1.0009</cell></row><row><cell></cell><cell></cell><cell cols="2">160 40</cell><cell>1.065</cell><cell>1.0063 1.0</cell></row><row><cell></cell><cell></cell><cell cols="2">208 52</cell><cell cols="2">2.2537 1.074</cell><cell>1.019</cell></row><row><cell></cell><cell></cell><cell cols="2">240 60</cell><cell cols="2">1.0083 1.0045 1.0001</cell></row><row><cell></cell><cell></cell><cell cols="2">300 75</cell><cell cols="2">1.8088 1.0478 1.0006</cell></row><row><cell></cell><cell></cell><cell cols="2">312 52</cell><cell cols="2">1.7593 1.0475 1.0008</cell></row><row><cell></cell><cell></cell><cell cols="2">320 32</cell><cell cols="2">1.0972 1.0015 1.0</cell></row><row><cell></cell><cell></cell><cell cols="4">400 100 1.0058 1.0048 1.0</cell></row><row><cell></cell><cell></cell><cell cols="2">416 52</cell><cell cols="2">1.0031 1.0048 1.0</cell></row><row><cell></cell><cell></cell><cell></cell><cell cols="3">Table 3: GT-ITM Model</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>Table 4 :</head><label>4</label><figDesc>Instances from Operations Research library</figDesc><table /></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Acknowledgments. We would like to thank Michel Goemans, Mohammad Ghodsi, Nicole Immorlica, Nisheet K. Vishnoi, Milena Mihail, and Christos Gkantsidis for their helpful comments and discussions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The access network design problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Andrews</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 39th Annual IEEE Symposium on Foundations of Computer Science</title>
		<meeting>the 39th Annual IEEE Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Local search heuristics for k-median and facility location problems</title>
		<author>
			<persName><forename type="first">V</forename><surname>Arya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Khandekar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Meyerson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Munagala</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Pandit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 33rd ACM Symposium on Theory of Computing</title>
		<meeting>33rd ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">On finding integer solutions to linear programs</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">L</forename><surname>Balinski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IBM Scientific Computing Symposium on Combinatorial Problems</title>
		<meeting>IBM Scientific Computing Symposium on Combinatorial Problems</meeting>
		<imprint>
			<date type="published" when="1966">1966</date>
			<biblScope unit="page" from="225" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Beasley</surname></persName>
		</author>
		<title level="m">Operations research library</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">High-density model for server allocation and placement</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">W</forename><surname>Cameron</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">H</forename><surname>Low</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">X</forename><surname>Wei</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note>unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Improved combinatorial algorithms for facility location and k-median problems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Charikar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Guha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 40th Annual IEEE Symposium on Foundations of Computer Science</title>
		<meeting>the 40th Annual IEEE Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1999-10">October 1999</date>
			<biblScope unit="page" from="378" to="388" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A constant-factor approximation algorithm for the k-median problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Charikar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Tardos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 31st Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 31st Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1999-05">May 1999</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Facility location with outliers</title>
		<author>
			<persName><forename type="first">M</forename><surname>Charikar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Khuller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Mount</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Narasimhan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th Annual ACM-SIAM Symposium on Discrete Algorithms</title>
		<meeting><address><addrLine>Washington DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-01">January 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Improved approximation algorithms for the uncapacitated facility location problem</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">A</forename><surname>Chudak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Shmoys</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
	<note>unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A greedy heuristic for the set covering problem</title>
		<author>
			<persName><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Math. Oper. Res</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="233" to="235" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The uncapacitated facility location problem</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cornuejols</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Nemhauser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Wolsey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Discrete Location Theory</title>
		<editor>
			<persName><forename type="first">P</forename><surname>Mirchandani</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">R</forename><surname>Francis</surname></persName>
		</editor>
		<imprint>
			<publisher>John Wiley and Sons Inc</publisher>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="119" to="171" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An improved approximation ratio for the minimum latency problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Goemans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kleinberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Programming</title>
		<imprint>
			<biblScope unit="volume">82</biblScope>
			<biblScope unit="page" from="111" to="124" />
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Cooperative facility location games</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">X</forename><surname>Goemans</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Skutella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Discrete Algorithms</title>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="76" to="85" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Approximation algorithms for facility location problems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Guha</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000">Stanford University, 2000</date>
		</imprint>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Greedy strikes back: Improved facility location algorithms</title>
		<author>
			<persName><forename type="first">S</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Khuller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="228" to="248" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Hierarchical placement and network design problems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Meyerson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Munagala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 41th Annual IEEE Symposium on Foundations of Computer Science</title>
		<meeting>the 41th Annual IEEE Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Improved combinatorial algorithms for single sink edge installation problems</title>
		<author>
			<persName><forename type="first">S</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Meyerson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Munagala</surname></persName>
		</author>
		<idno>STAN-CS-TN00 -96</idno>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Improved algorithms for fault tolerant facility location</title>
		<author>
			<persName><forename type="first">S</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Meyerson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Munagala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Discrete Algorithms</title>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="636" to="641" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Facility location problem with concave cost functions</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hajiaghayi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mirrokni</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note>unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Heuristics for the fixed cost median problem</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Hochbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Programming</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="148" to="162" />
			<date type="published" when="1982">1982</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A new greedy approach for facility location problems</title>
		<author>
			<persName><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Saberi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Theory of Computing</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Primal-dual approximation algorithms for metric facility location and k-median problems</title>
		<author>
			<persName><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 40th Annual IEEE Symposium on Foundations of Computer Science</title>
		<meeting>the 40th Annual IEEE Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1999-10">October 1999</date>
			<biblScope unit="page" from="2" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">An approximation algorithm for the fault tolerant metric facility location problem</title>
		<author>
			<persName><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Approximation Algorithms for Combinatorial Optimization, Proceedings of APPROX 2000</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<editor>
			<persName><forename type="first">K</forename><surname>Jansen</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Khuller</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="2000-09">September 2000</date>
			<biblScope unit="volume">1913</biblScope>
			<biblScope unit="page" from="177" to="183" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Applications of approximation algorithms to cooperative games</title>
		<author>
			<persName><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Theory of Computing</title>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="364" to="372" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">On the placement of internet instrumentations</title>
		<author>
			<persName><forename type="first">S</forename><surname>Jamin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Raz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Shavitt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE INFOCOM&apos;00</title>
		<meeting>IEEE INFOCOM&apos;00</meeting>
		<imprint>
			<date type="published" when="2000-03">March 2000</date>
			<biblScope unit="page" from="26" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A plant and warehouse location problem</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kaufman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Vanden Eede</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operational Research Quarterly</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="547" to="557" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Analysis of a local search heuristic for facility location problems</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">R</forename><surname>Korupolu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">G</forename><surname>Plaxton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Rajaraman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th Annual ACM-SIAM Symposium on Discrete Algorithms</title>
		<meeting>the 9th Annual ACM-SIAM Symposium on Discrete Algorithms</meeting>
		<imprint>
			<date type="published" when="1998-01">January 1998</date>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A heuristic program for locating warehouses</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Kuehn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Hamburger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Management Science</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="643" to="666" />
			<date type="published" when="1963">1963</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">On the optimal placement of web proxies in the internet</title>
		<author>
			<persName><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Golin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Italiano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sohraby</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE INFOCOM&apos;99</title>
		<meeting>IEEE INFOCOM&apos;99</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="1282" to="1290" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">On the ratio of optimal integral and fractional covers</title>
		<author>
			<persName><forename type="first">L</forename><surname>Lovasz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete Mathematics</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="383" to="390" />
			<date type="published" when="1975">1975</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A greedy facility location algorithm analyzed using dual fitting</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Markakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Saberi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 5th International Workshop on Randomization and Approximation Techniques in Computer Science</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting>5th International Workshop on Randomization and Approximation Techniques in Computer Science</meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">2129</biblScope>
			<biblScope unit="page" from="127" to="137" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Improved approximation algorithms for metric facility location problems</title>
		<author>
			<persName><forename type="first">M</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note>Unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">New upper bounds on the rate of a code via the delsarte-macwilliams inequalities</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">J</forename><surname>Mceliece</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Rodemich</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Rumsey</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">R</forename><surname>Welch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Theory</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="157" to="166" />
			<date type="published" when="1977">1977</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">The online median problem</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">R</forename><surname>Mettu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Plaxton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Foundations of Computer Science</title>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="339" to="348" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Integer and Combinatorial Optimization</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">L</forename><surname>Nemhauser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">A</forename><surname>Wolsey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>John Wiley and Sons</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">On the placement of web server replicas</title>
		<author>
			<persName><forename type="first">L</forename><surname>Qiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">N</forename><surname>Padmanabhan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Voelker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE INFOCOM&apos;01</title>
		<meeting>IEEE INFOCOM&apos;01<address><addrLine>Anchorage, AK, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-04">April 2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">On the placement of web server replicas</title>
		<author>
			<persName><forename type="first">Lili</forename><surname>Qiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Venkata</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoffrey</forename><forename type="middle">M</forename><surname>Padmanabhan</surname></persName>
		</author>
		<author>
			<persName><surname>Voelker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INFOCOM</title>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="1587" to="1596" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Primal-dual RNC approximation algorithms for set cover and covering integer programs</title>
		<author>
			<persName><forename type="first">S</forename><surname>Rajagopalan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="525" to="540" />
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Approximation algorithms for facility location problems</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Tardos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 29th Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 29th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1997">1997</date>
			<biblScope unit="page" from="265" to="274" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">The effect of technical change and output expansion on the optimum number, size and location of pear marketing facilities in a California pear producing region</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Stollsteimer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1961">1961</date>
		</imprint>
		<respStmt>
			<orgName>University of California at Berkeley</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">A working model for plant numbers and locations</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">F</forename><surname>Stollsteimer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Farm Econom</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page" from="631" to="645" />
			<date type="published" when="1963">1963</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">An 1.582-approximation algorithm for the metric uncapacitated facility location problem</title>
		<author>
			<persName><forename type="first">M</forename><surname>Sviridenko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the Ninth Conference on Integer Programming and Combinatorial Optimization</title>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
	<note>to appear in</note>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Quick k-median, k-center, and facility location for sparse graphs</title>
		<author>
			<persName><forename type="first">M</forename><surname>Thorup</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Automata, Languages and Programming, 28th International Colloquium</title>
		<title level="s">Lecture Notes in Computer Science</title>
		<meeting><address><addrLine>Crete, Greece</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="volume">2076</biblScope>
			<biblScope unit="page" from="249" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Approximation Algorithms</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001">2001</date>
			<publisher>Springer-Verlag</publisher>
			<pubPlace>Berlin</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">How to model an internetwork</title>
		<author>
			<persName><forename type="first">Ellen</forename><forename type="middle">W</forename><surname>Zegura</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kenneth</forename><forename type="middle">L</forename><surname>Calvert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Samrat</forename><surname>Bhattacharjee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Infocom</title>
		<meeting><address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996-03">March 1996</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="594" to="602" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
