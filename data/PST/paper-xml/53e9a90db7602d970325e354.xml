<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Illumination for Computer Generated Pictures</title>
				<funder ref="#_CC2KJRc">
					<orgName type="full">Rome Air Development Center, Griffiss Air Force Base</orgName>
				</funder>
				<funder>
					<orgName type="full">University of Utah Computer Science Division</orgName>
				</funder>
				<funder>
					<orgName type="full">Advanced Research Projects Agency of the U.S. Department of Defense</orgName>
				</funder>
				<funder ref="#_x4CEMCs">
					<orgName type="full">unknown</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">W</forename><surname>Newman</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Utah</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Tuong</forename><surname>Bui</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Digital Systems Laboratory</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><surname>Phong</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Digital Systems Laboratory</orgName>
								<orgName type="institution">Stanford University</orgName>
								<address>
									<postCode>94305</postCode>
									<settlement>Stanford</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Illumination for Computer Generated Pictures</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-01-03T09:31+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>computer graphics</term>
					<term>graphic display</term>
					<term>shading</term>
					<term>hidden surface removal. CR Categories: 3.26</term>
					<term>3.41</term>
					<term>8.2 Introduction</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The quality of computer generated images of threedimensional scenes depends on the shading technique used to paint the objects on the cathode-ray tube screen. The shading algorithm itself depends in part on the method for modeling the object, which also determines the hidden surface algorithm. The various methods of object modeling, shading, and hidden surface removal are thus strongly interconnected. Several shading techniques corresponding to different methods of object modeling and the related hidden surface algorithms are presented here. Human visual perception and the fundamental laws of optics are considered in the development of a shading rule that provides better quality and increased realism in generated images.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>311</head><p>parts and the shading of the objects. Until now, most effort has been spent in the search for fast hidden surface removal algorithms. With the development of these algorithms, the programs that produce pictures are becoming remarkably fast, and we may now turn to the search for algorithms to enhance the quality of these pictures.</p><p>In trying to improve the quality of the synthetic images, we do not expect to be able to display the object exactly as it would appear in reality, with texture, overcast shadows, etc. We hope only to display an image that approximates the real object closely enough to provide a certain degree of realism. This involves some understanding of the fundamental properties of the human visual system. Unlike a photograph of a real world scene, a computer generated shaded picture is made from a numerical model, which is stored in the computer as an objective description. When an image is then generated from this model, the human visual system makes the final subjective analysis. Obtaining a close image correspondence to the eye's subjective interpretation of the real object is then the goal. The computer system can be compared to an artist who paints an object from its description and not from direct observation of the object. But unlike the artist, who can correct the painting if it does not look right to him, the computer that generates the picture does not receive feedback about the quality of the synthetic images, because the human visual system is the final receptor. This is a subjective domain. We must at the outset define the degree of realism we wish to attain, and fix certain goals to be accomplished. Among these goals are: 1. "Real time" display of dynamic color pictures of three-dimensional objects. A real time display system is one capable of generating pictures at the rate of at least 30 frames a second. 2. Representation of objects made of smooth curved surfaces. 3. Elimination or attenuation of the effects of digital sampling techniques. The most important consideration in trying to attain these goals is the object modeling technique.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Existing Shading Techniques</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Methods of Object Modeling</head><p>Image quality depends directly on the effectiveness of the shading algorithm, which in turn depends on the method of modeling the object. Two principal methods of object description are commonly used : 1. Surface definition using mathematical equations. 2. Surface approximation by planar polygonal mosaic.</p><p>Several systems have been implemented to remove hidden parts for mathematically defined curved surfaces [1, 2, 3, 4, 5]. With these systems, exact information at each point of the surface can be obtained, and the result-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Communications</head><p>June 1975 of Volume 18 the ACM Number 6</p><p>ing computer generated pictures are most realistic. The class of possible surfaces is restricted, however, and the computation time needed to remove the hidden parts and to perform shading is very large. Up to the present time, these systems have usually considered the class of surfaces represented by quadric patches. Although higher degree surfaces are desirable and are sometimes necessary to model an object, they have not been taken into consideration due to an increase in computation time to remove hidden surfaces and to perform shading computations. Even when only quadric surfaces are considered, the implementation of a real time display system using this type of model is too expensive and complex.</p><p>A simple method of representing curved surfaces and objects of arbitrary shape is to approximate the surfaces with small planar polygons; for example, a cone might be represented as shown in Figure <ref type="figure">1</ref>. This type of representation has the advantage that it avoids the problem, posed by mathematically curved surface approaches, of solving higher order equations.</p><p>Planar approximation also offers the only means of reducing hidden surface computation to within reasonable bounds, without restricting the class of surfaces that can be represented. For this reason, all recent attempts to devise fast hidden surface algorithms have been based on the use of this approximation for curved surfaces; these algorithms have been summarized and classified by Sutherland et al. <ref type="bibr" target="#b5">[6]</ref>. The next section discusses their influence on the way shading is computed.</p><p>While planar approximation greatly simplifies hidden surface removal, it introduces several major problems in the generation of a realistic displayed image. One of these is the contour edge problem: the outline or silhouette of a polygonally approximated object is itself a polygon, not a smooth curve. The other problem is that of shading the polygons in a realistic manner. This paper is concerned with the shading problem; the contour edge problem is discussed by the author and F.C. Crow in <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Influence of Hidden Surface Algorithms</head><p>The order in which a hidden surface algorithm computes visible information has a decided influence on the way shading is performed. For example Warnock, who developed one of the first such algorithms <ref type="bibr" target="#b7">[8]</ref>, computed display data by a binary subdivision process: this meant that the order of generating display data was largely independent both of the order of scanning the display and of the order of the polygons in memory. This made it difficult to perform effective shading on curved objects.</p><p>The two major advances in the development of fast hidden surface algorithms have been made by Watkins <ref type="bibr" target="#b8">[9]</ref> and by Newell, Newell, and Sancha <ref type="bibr" target="#b9">[10]</ref>. Watkins generates the displayed picture scan line by scan line. On each scan line he computes which polygons intersect the scan line, and then computes the visible segment of each polygon, where this segment is the visible strip of 312 Fig. <ref type="figure">1</ref>. A cone represented by means of planar approximation. the polygon, one screen resolution unit in height, that lies on the scan line.</p><p>Newell, Newell, and Sancha adopt a different approach, using a frame buffer into which the object is painted, face by face. The hidden surface problem is solved by painting the farthest face first, and the nearest last. Each face is painted scan line by scan line, starting at the top of the face.</p><p>From the shading aspect, the important attribute of these algorithms is that they both generate information scan line by scan line in order to display the faces of an object. This information is in the form of segments, one screen resolution unit high, on which the shading computation may then be performed. The main differences between the algorithms, from the point of view of shading, are (a) the order in which the segments are generated, and (b) the fact that Watkins generates each screen dot only once, whereas the NewelI-Sancha algorithm may overwrite the same dot several times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Shading with the Polyhedral Model</head><p>When planar polygons are used to model an object, it is customary to shade the object by using the normal vectors to the polygons. The shading of each point on a polygon is then the product of a shading coefficient for the polygon and the cosine of the angle between the polygon normal and the direction of incident light. This cosine relationship is known in optics as the "cosine law," and allows us to compute the shading Sp for a polygon p as</p><formula xml:id="formula_0">sp = Cpcos(i), (<label>1</label></formula><formula xml:id="formula_1">)</formula><p>where Cp is the reflection coefficient of the material o f p relative to the incident wavelength, and i is the incident angle.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Communications</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>313</head><p>This shading offers only a very rough approximation of the true physical effect. It does not allow for any of the specular properties of the material, i.e. the ability of the material to generate highlights by reflection from its outer surface, and the position of the observer, which is ignored. A more serious drawback to this method, however, is the poor effect when using it to display smooth curved surfaces. The cosine law rule is appropriate for objects that are properly modeled with planar surfaces, such as boxes, buildings, etc., but it is inappropriate for smoothly curved surfaces such as automobile bodies. This does not mean, however, that we should abandon the use of such a polygon-oriented shading rule and search for a different rule for curved surfaces. Recent research in shading techniques demonstrates that significant results can be achieved by using the basic shading rule of eq. ( <ref type="formula" target="#formula_0">1</ref>) and modifying the results to reduce the discontinuities in shading between adjacent polygons.</p><p>1. Warnock's shading. As three-dimensional objects are projected onto the cathode-ray tube screen, the depth sensation is lost, and the images of those objects appear flat. In order to restore the depth sensation, two effects were simulated by Warnock: I. Decreasing intensity of the reflected light from the object with the distance between the light source and the object.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Highlights created by specular reflection.</head><p>Warnock placed the light source and the eye at the same position, so that the shading function was the sum of two terms, one for the normal "cosine" law, and the other term for the specularly reflected light. The resulting pictures have several desirable attributes; for example, identical parallel faces, located differently in space, will be shaded at different intensities, and facets which face directly toward the light source are brighter than adjacent facets facing slightly away from the incident light. However, the polygonal model gives a discontinuity in shading between faces of an approximated curved surface. When a curved surface is displayed, the smoothness of the curved surface is destroyed by this discontinuity. This is clearly visible in Figure <ref type="figure">1</ref>.</p><p>2. Newell, Newell, and Sancha's shading. Newell, Newell, and Sancha presented some ideas on creating transparency and highlights. From observations in the real world, they found that highlights are created not only by the incident light source but also by the reflection of light from other objects in the scene; this is especially true in the case of objects made of highly reflective or transparent materials. In the Newell-Sancha model, curved surfaces are approximated with planar polygons. Unfortunately, the ability to generate highlights is severely limited due to the inability to vary light intensity over the surface of any single polygon. This problem is apparent in Figure <ref type="figure" target="#fig_0">2</ref>. or "Bezier patches," Gouraud <ref type="bibr" target="#b10">[11]</ref> developed an algorithm to shade curved surfaces. With his algorithm, a surface represented by a patch is approximated by polygonal planar facets. Gouraud computes information about the curvature of the surface at each vertex of each of these facets. From the curvature, a shade intensity is computed and retained. For example, the shade intensity may be computed for each vertex using eq. ( <ref type="formula" target="#formula_0">1</ref>), with i as the angle between the incident light and the normal to the surface at this vertex. When the surface is displayed, this shade intensity is linearly interpolated along the edge between adjacent pairs of vertices of the object.</p><p>The shade at a point on the surface is also a linear interpolation of the shade along a scan line between intersections of the edges with a plane passing through the scan line (Figure <ref type="figure" target="#fig_8">3</ref>). This very simple method gives a continuous gradation of shade over the entire surface, which in most cases restores the smooth appearance. An example of Gouraud's shading is shown in Figure <ref type="figure">4</ref>.</p><p>With the introduction of the Gouraud smooth shading technique, the quality of computer-generated images improved sufficiently to allow representation of a large variety of objects with great realism. Problems still exist, however, one of which is the apparent discontinuity across polygon edges. On surfaces with a high component of specular reflection, highlights are often inappropriately shaped, since they depend upon the disposition and shape of the polygons used to approximate a curved surface and not upon the curvature of.the object surface itself. The shading of a surface in motion (in a computer generated film) has annoying frame to frame discontinuities due to the changing orientation of the polygons describing the surface. Also the shading algorithms are not invariant under rotation.</p><p>Frame-to-frame discontinuities of shade in a computer generated film are illustrated in the following situation. A curved surface is approximated with planar facets. When this surface is in motion, all the facets which are perpendicular to the direction of the light take on a uniform shade. In the next frame the motion of the object brings these facets into a different orientation toward the light, and the intensity of the shade across their surfaces varies continuously from one end to the other. Thus the surface appears to change from one with highlights to one of uniform shade. Moreover, the position of these highlights is not steady from frame to frame as the object rotates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Mach Band Effect</head><p>Many of the shading problems associated with planar approximation of curved surfaces are the result of the discontinuities at polygon boundaries. One might expect that these problems could be avoided by reducing the size of the polygons. This would be undesirable, of course, since it would increase the number of polygons and hence would increase both the memory requirements for storing the model and the time for hidden surface removal.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Po ,?</head><p>REFLECTED / EYE RAY / / / / / P Unfortunately, because of visual perception effects, the reduction of polygon size is not as beneficial as might be expected, The particular effect responsible is the Mach Band effect. Mach established the following principle:</p><p>Wherever the light-intensity curve of an illuminated surface (the light intensity of which varies in only one direction) has a concave or convex flection with respect to the axis of the abscissa, that particular place appears brighter or darker, respectively, than its surroundings [E. Mach, 1865].</p><p>Whenever the slope of the light intensity curve changes, this effect appears. The extent to which it is noticeable depends upon the magnitude of the curvature change, but the effect itself is always present.</p><p>Without the Mach Band effect, one might hope to achieve accurate shading by reducing the size of polygons. Unfortunately the eye enhances the discontinuities over polygon edges, creating undesired areas of apparent brightness along the edges. Therefore unless the size of the displayed facets is shrunk to a resolution point, increasing the number of facets does not solve the problem. Using the Gouraud method to interpolate the shade linearly between vertices, the discontinuities of the shading function disappear, but the Mach Band effect is visible where the slope of the shading function changes. This can be seen in Figure <ref type="figure">4</ref>. The subjective discontinuity of shade at the edges due to the Mach Band effect then destroys the smooth appearance of the curved surface.</p><p>A better shading rule is therefore proposed for displaying curved surfaces described by planar polygons. This new technique requires the computation of the normal to the displayed surface at each point. It is therefore more expensive in computation than Gouraud's technique; but the quality of the resulting picture, and the accuracy of the displayed highlights, is much improved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Using a Physical Model</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Specular Reflection</head><p>If the goal in shading a computer-synthesized image is to simulate a real physical object, then the shading model should in some way imitate real physical shading situations. Clearly the model of eq. ( <ref type="formula" target="#formula_0">1</ref> ,Y VR \ q--:/ -\ I"-,,&lt; i i ..... I-Z LIGHT I LZ ignores both the position of the observer and the specular properties of the object. Even with the improvements introduced by Gouraud, which provide remarkably better shading, these properties are still ignored.</p><p>The first step in accounting for the specular properties of objects and the position of the observer is to determine the normal to the surface at each point to be shaded, i.e. at each point where a picture element of the raster display projects onto the surface. It is only with this knowledge that information about the direction of reflected rays can be acquired, and only with this information can we model the specular properties of objects. It is evident from the preceding discussion, however, that our polyhedral model provides information about normals only at the vertices of polygons. Thus the first step in improving our shading model is to devise a way to obtain the normal to the surface for each raster unit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Computation of the Normal at a Point on the Surface</head><p>The normal at each vertex can be approximated by either one of the methods described by <ref type="bibr">Gouraud [I0]</ref>. It is now necessary to define the normal to the surface along the edges and at a point on the surface of a polygon.</p><p>The normal to the surface at a point along the edge of a polygonal model is the result of a linear interpolation to the normals at the two vertices of that edge. An example is given in Figure <ref type="figure" target="#fig_4">5</ref>: the normal Nt to the surface at a point between the two vertices P0 and P1 is computed as follows:</p><formula xml:id="formula_2">Nt = tN1 q-(1--t)N0,<label>(2)</label></formula><p>where t = 0 at No a n d t = 1 a t N x .</p><p>The determination of the normal at a point on the 315 surface of a polygon is achieved in the same way as the computation of the shading at that point with the Gouraud technique. The normal to the visible surface at a point located between two edges is the linear interpolation of the normals at the intersections of these two edges with a scan plane passing through the point under consideration. Note that the general surface normal is quadratically related to the vertex normal.</p><p>From the approximated normal at a point, a shading function determines the shading value at that point.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Shading Function Model</head><p>In computer graphics, a shading function is defined as a function which yields the intensity value of each point on the body of an object from the characteristics of the light source, the object, and the position of the observer.</p><p>Taking into consideration that the light received by the eye is provided one part by the diffuse reflection and one part by the specular reflection of the incident light, the shading at point P (Figure <ref type="figure">6</ref>) on an object can be computed as:</p><formula xml:id="formula_3">Sp = Cp[cos(i) (1 -d) +d] q-W(i) [cos(s)] ",<label>(3)</label></formula><p>where: Cp is the reflection coefficient of the object at point P for a certain wavelength. i is the incident angle. d is the environmental diffuse reflection coefficient. W(i) is a function which gives the ratio of the specular reflected light and the incident light as a function of the incident angle i. s is the angle between the direction of the reflected light and the line of sight. n is a power which models the specular reflected light for each material. The function W(i) and the power n express the specular reflection characteristics of a material. For a highly reflective material, the values of both W(i) and n are large. The range of W(i) is between 10 and 80 percent, and n varies from 1 to 10. These numbers are empirically adjusted for the picture, and no physical justifications are made. In order to simplify the model, and thereby the computation of the terms cos(i) and cos(s) of formula (3), it is assumed that: 1. The light source is located at infinity; that is, the light rays are parallel. 2. The eye is also removed to infinity.</p><p>With these two considerations, the values of cos(i) and cos(s) of the shading function in (3) can be re- Fig. <ref type="figure">9</ref>. Improved shading, applied to the example of Figure <ref type="figure" target="#fig_0">2</ref>.</p><p>quantity is one component of the vector Np in a coordinate system where the direction of light is parallel to one axis. In this case, the quantity u R p / IRp[ can be obtained directly from the vector N~ in the following way.</p><p>Let us consider a Cartesian coordinate system having the origin located at point P and having the z axis parallel to the light but opposite in direction (Fig. <ref type="figure" target="#fig_6">7(a)</ref>).</p><p>We have the following assumptions about the model: 1. The normalized vector Np makes an angle i with the z axis, and the reflected light vector Rp makes an angle 2i with the same axis. 2. Only incident angles less than or equal to 90 degrees are considered in the shading computation. For a greater angle, this means that the light source is behind the front surface. In the case where a view of the back surface is desired when it is visible, it can be assumed that the normal will always point toward the light source. </p><p>where X~, 2"., Yr, and Y. are respectively the components of R~ and Np in the x and y directions.</p><p>From assumptions (1) and ( <ref type="formula" target="#formula_2">2</ref>), the component Z . of Np is:</p><formula xml:id="formula_5">Z . = cos(i),<label>(5)</label></formula><p>where 0 &lt;_ i &lt; 90 degrees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>316</head><p>By simple trigonometry, we obtain the following expressions:</p><formula xml:id="formula_6">Z~ = cos(2i) = 2[cos(i)] 2 --1 = 2Z, 2 -1,<label>(6) Xr2q</label></formula><formula xml:id="formula_7">-Yr ~ = [sin(2i)]2= 1 -[cos(2i)] 2.<label>(7)</label></formula><p>From ( <ref type="formula" target="#formula_4">4</ref>) and ( <ref type="formula" target="#formula_7">7</ref>), we obtain: X~ = 2ZnXn , Yr = 2Z, Y,, 0 &lt; Zn &lt;_ 1.</p><p>The three components of Rp are then known in the light source coordinate system. The projection of the vector Rp onto the z-axis of the eye coordinate system may be found by a simple dot product of the reflected vector with this z-axis. The component of Rp on an axis parallel to the line of sight is the value of the cosine of the angle between the reflected light and the line of sight. The value of this cosine will be used in the simulation of the specular reflection.</p><p>This method of calculating the direction of the reflected light for each point from the orientation of the normal is preferred over the computation of the reflected light vector at vertices and the subsequent interpolation of them in the same way as the normal. It is faster and it requires less storage space than the interpolation scheme.</p><p>With the described method, the shading of a point is computed from the orientation of the approximated normal; it is not a linear interpolation of the shading values at the vertices. Therefore, a better approximation of the curvature of the surface is obtained, and highlights due to the simulation of specular reflection are properly rendered. Examples of application of the shading technique are shown in Figures <ref type="figure" target="#fig_7">8</ref> and<ref type="figure">9</ref>. Figure <ref type="figure" target="#fig_9">10</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusion</head><p>The linear interpolation scheme used here to approximate the orientation of the normal does not guarantee a continuous first derivative of the shading function across an edge of a polygonal model. In extreme cases where there is an abrupt change in the orientation of two adjacent polygons along a common edge, the subjective brightness due to the Mach Band effect will be visible along this edge. However, this effect is much less visible in the described model than in the Gouraud smooth shading model. Also, an interesting fact discussed previously on Mach Band effect shows 317 that this effect is visible whenever there is a great change in the slope of the intensity distribution curve, even if the curve has a continuous first derivative. When a higher degree interpolation curve is used, it will make the presence of the edges unnoticeable, although it will still give some Mach Band effect.</p><p>When a comparison was made of pictures of the same object generated with different shading techniques, it was found that little difference existed between pictures generated with the new shading and the ones created with a cubic interpolant curve for the shading computation. Furthermore, as time is the critical factor in a real time dynamic picture display system, the use of a high degree interpolation curve does not seem to be possible at the moment with the current techniques to compute the coefficients of such a function.</p><p>A hardware implementation of this shading model would of course require more hardware than the simpler Gouraud method. The Gouraud model needs one interpolator for the shading function. It must compute a new shading value for each raster unit, and hence must be very high speed to drive a real time display. The model proposed here requires three of these interpolators operating in parallel. In addition, since the results of the interpolation do not yield a unit vector, and since eqs. ( <ref type="formula" target="#formula_6">6</ref>), <ref type="bibr" target="#b6">(7)</ref>, and (8) require a unit normal vector, some extra hardware is necessary to "normalize" the outputs of the interpolators. This requires a very fast mechanism for obtaining square roots. None of these problems is too difficult to solve; and judging from the improvements in image quality obtained using the new model, it may well be worth the extra expense to provide such hardware in applications for which real time display is important. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. An example of the use of Newell, Newell, and Sancha's shading technique, showing transparency and highlight effects.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .Fig. 4 .</head><label>34</label><figDesc>Fig. 3. Computation of the shading at point R using the Gouraud method. There are two successive linear interpolations: (1) across polygon edges, i.e. P between A and B, Q between A and D; and (2) along the scan line, i.e. R between P and Q.</figDesc><graphic url="image-5.png" coords="3,59.26,60.87,237.00,241.00" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>3. Gouraud's shading. While working on a technique to represent curved objects made of "Coons surfaces"</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>314</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Normal at a point along an edge.Fig.6. Shading at a point.ILIGHT SOURCE Np \ \ ^ ^ ^ ~ , X A N, ^</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 (</head><label>7</label><figDesc>Fig. 7(a). Determination of the reflected light.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 7 (</head><label>7</label><figDesc>Fig. 7(b). Projections of the reflecte~</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Improved shading, applied to approximated cone of Fig. 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>3 .</head><label>3</label><figDesc>If k is the unit vector along the PZ axis, then by simple geometry, it may be shown that the three vectors k, Np, and Rp are coplanar. 4. The two vectors Np and Rp are of unit length. F r o m assumption (3), the projections of the vectors Np and Rp onto the plane defined by (PX, P Y) are merged into a line segment (Figure 7(b)). Therefore, X r / Y r = X . / r . ,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 10 (</head><label>10</label><figDesc>Fig. 10(a). A sphere displayed with the improved shading.</figDesc></figure>
		</body>
		<back>

			<div type="funding">
<div><p>This research was supported in part by the <rs type="funder">University of Utah Computer Science Division</rs> and the <rs type="funder">Advanced Research Projects Agency of the U.S. Department of Defense</rs>, monitored by the <rs type="funder">Rome Air Development Center, Griffiss Air Force Base</rs>, <rs type="grantNumber">NY 13440</rs>, under Contract <rs type="grantNumber">F30602-70-C-0300</rs>.</p></div>
			</div>
			<listOrg type="funding">
				<org type="funding" xml:id="_CC2KJRc">
					<idno type="grant-number">NY 13440</idno>
				</org>
				<org type="funding" xml:id="_x4CEMCs">
					<idno type="grant-number">F30602-70-C-0300</idno>
				</org>
			</listOrg>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Mathematical Applications Group Inc. 3-D simulated graphics</title>
		<author>
			<persName><surname>Magi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Datamation</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page">69</biblScope>
			<date type="published" when="1968-02">Feb. 1968</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">A procedure of detecting intersections of threedimensional objects</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">G</forename><surname>Comba</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1967-01">Jan. 1967</date>
			<pubPlace>New York Scientific Center</pubPlace>
		</imprint>
	</monogr>
	<note>Rep. 39,020, IBM</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">BE VISION, a package of IBM 7090 FORTRAN programs to draw orthographic views of combinations of plane and quadric surfaces</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Weiss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. A C M</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="194" to="204" />
			<date type="published" when="1966-04">Apr. 1966</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Visible surface algorithm for quadric patches</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mahl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. C</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="1" to="4" />
			<date type="published" when="1972-01">Jan. 1972</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A subdivision algorithm for computer display of curved surfaces</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">E</forename><surname>Catmull</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ph.D th., Dep. of Comput. Sci</title>
		<imprint>
			<publisher>U. of Utah</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A characterization of ten-hidden surface algorithms</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">E</forename><surname>Sutherland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">F</forename><surname>Sproull</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">A</forename><surname>Schumacker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="1" to="56" />
			<date type="published" when="1974-03">Mar. 1974</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Improved rendition of polygonal models of curved surfaces. To be presented at the joint USA-Japan Computer Conference</title>
		<author>
			<persName><forename type="first">Tuong</forename><surname>Bui</surname></persName>
		</author>
		<author>
			<persName><surname>Phong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">C</forename><surname>Crow</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A hidden-line algorithm for halftone picture representation</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Warnock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Dep. of Comput. Sci., U. of Utah</title>
		<imprint>
			<biblScope unit="page" from="4" to="15" />
			<date type="published" when="1969">1969</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A real-time visible surface algorithm</title>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">S</forename><surname>Watkins</surname></persName>
		</author>
		<idno>UTEC-CSc-70-101</idno>
	</analytic>
	<monogr>
		<title level="j">Dep. of Comput. Sci., U. of Utah</title>
		<imprint>
			<date type="published" when="1970-06">June 1970</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A new approach to the shaded picture problem</title>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Newell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">G</forename><surname>Newell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">L</forename><surname>Sancha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM</title>
		<meeting>ACM</meeting>
		<imprint>
			<date type="published" when="1973">1973</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Computer display of curved surfaces</title>
		<author>
			<persName><forename type="first">H</forename><surname>Gouraud</surname></persName>
		</author>
		<idno>UTEC-CSc-71-113</idno>
	</analytic>
	<monogr>
		<title level="m">IEEE Trans. C-20</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1971-06">June 1971. June 1971. June 1975</date>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="623" to="629" />
		</imprint>
	</monogr>
	<note>Communications</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
