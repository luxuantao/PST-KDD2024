<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Making Use of All the Networks Around Us: A Case Study in Android</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Kok-Kiong</forename><surname>Yap</surname></persName>
							<email>yapkke@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University NEC</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Te-Yuan</forename><surname>Huang</surname></persName>
							<email>huangty@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University NEC</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Masayoshi</forename><surname>Kobayashi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University NEC</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yiannis</forename><surname>Yiakoumis</surname></persName>
							<email>yiannisy@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University NEC</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Nick</forename><surname>Mckeown</surname></persName>
							<email>nickm@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University NEC</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Sachin</forename><surname>Katti</surname></persName>
							<email>skatti@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University NEC</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Guru</forename><surname>Parulkar</surname></persName>
							<email>parulkar@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University NEC</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Making Use of All the Networks Around Us: A Case Study in Android</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">8D48553B73C5648C8934958D6AC81580</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:48+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C.2.0 [Computer Systems Organization]: Computer-Communication Networks-General Design</term>
					<term>Experimentation</term>
					<term>Performance Mobile Internet</term>
					<term>Open vSwitch</term>
					<term>Android</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Poor connectivity is common when we use wireless networks on the go. A natural way to tackle the problem is to take advantage of the multiple network interfaces on our mobile devices, and use all the networks around us. Using multiple networks at a time makes makes possible faster connections, seamless connectivity and potentially lower usage charges. The goal of this paper is to explore how to make use of all the networks with today's technology. Specifically, we prototyped a solution on an Android phone. Using our prototype, we demonstrate the benefits (and difficulties) of using multiple networks at the same time.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Poor connectivity is common when using wireless networks on the go. Connectivity comes and goes, throughput varies, latencies can be extremely unpredictable, and failures are frequent. Industry reports that demand is growing faster than wireless capacity, and the wireless crunch will continue for some time to come <ref type="bibr" target="#b2">[2,</ref><ref type="bibr" target="#b10">10]</ref>. Yet users expect to run increasingly rich and demanding applications on their smart-phones, such as video streaming, anywhereanytime access to their personal files, and online gaming; all of which depend on connectivity to the cloud over unpredictable wireless networks. Given the mismatch between user expectations and wireless network characteristics, users will continue to be frustrated with application performance on their mobile computing devices.</p><p>The problem is often attributed to a shortage of wireless capacity or spectrum. This is not entirely true. Today, if we stand in the middle of a city, we can likely "see" multiple cellular and WiFi networks. But, frustratingly, this capacity and infrastructure is not available to us. Our contracts with cellular companies restrict access to other networks; most private WiFi networks require authentication, and are effectively inaccessible to us. Although we are often surrounded by abundant wireless capacity, almost all is off-limits. This is not good for us, and it is not good for network owners: Their network might have lots of spare capacity, even though a paying customer is close-by.</p><p>We believe users should be able to travel in a rich field of wireless networks with access to all wireless infrastructure around them, leading to a competitive market-place with lower-cost connectivity and broader coverage. In the extreme, if all barriers to fluidity can be removed, users could connect to multiple networks at the same time, opening up enormous capacity and coverage.</p><p>The good news is that smart-phones will be armed with multiple radios capable of connecting to several networks at the same time. Whereas today's phones commonly have four or five radios (e.g. 3G, 4G, WiFi, Bluetooth), in future they will have more. Shrinking geometries and energyefficient circuit design will lead to mobile devices with more radios/antennas; a mobile device will talk to multiple APs at the same time for improved capacity, coverage and seamless handover.</p><p>If a smart-phone can take advantage of multiple wireless networks at the same time, then the user can experience: Seamless connectivity: by using the best current network, and allowing the client to choose which network to connect to dynamically, Faster connections: by stitching together flows over multiple networks, Lower usage charges: by choosing to use the most costeffective network that meets the application needs, Lower energy: by using the network with the current lowest energy-usage per byte.</p><p>In our vision, intelligent and autonomous mobile devices will hunt the vicinity to find the best radio networks, and will choose which one(s) to connect to so as to best meet the user's needs. Key to our vision is the notion that control rests with the client (the user and the smart-phone): The network and the mobile client software will provide information about the presence, performance and price of different networks; the client and the applications decide which one(s) to use. Beyond barriers due to business reasons, there are technical challenges.</p><p>Our vision requires much more than just multiple radios and multiple networks-it requires that the mobile client (as well as the applications and user) can take advantage of them. Today's clients are ill-equipped to do so, having grown up in an era of TCP connections bound to a single physical network connection. This leads to several well-known shortcomings: (1) An ongoing connection oriented flowlike TCP-cannot easily be handed over to a new interface, without re-establishing state; (2) If multiple network interfaces are available, an application cannot take advantage of them to get higher throughput; at best it can use the fastest connection available; (3) A user cannot easily and dynamically choose interfaces at fine granularity so as to minimize loss, delay, power consumption, or usage charges.</p><p>The three limitations are not just consequences of TCP. They are manifestations of the way the network stack is implemented in the operating system of the mobile device today. Therefore, as a step towards our bigger vision, we want to understand what changes are needed in the mobile device networking stack, to overcome these three limitations. In this paper, we describe how we refactored and then modified the networking stack on Android and Linux devices to be able to use multiple network interfaces simultaneously, and then we measure the performance of several experiments where several network interfaces are used.</p><p>Our first prototype, reported here, is purely host-based. The sending host decides which interfaces to use, and then divides outgoing traffic over multiple interfaces. In some cases we assume the receiver is also equipped with the same networking stack, so it can reconstitute the original flow. However, in this paper we assume the rest of the network infrastructure is unchanged. We plan to explore the benefits of coordination between the end host and the infrastructure in future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">SYSTEM DESCRIPTION</head><p>We will now describe how we modified the Android and Linux operating system to allow a mobile device to use multiple interfaces. For our prototype, we had four high-level requirements: (1) it should run on commercially available smartphone devices and laptops, (2) it should work with unmodified existing applications, (3) it should connect to existing production WiFi and cellular networks, and (4) wherever possible, it should reuse existing well-supported software components.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Prototype</head><p>Our prototype consists of the following components shown in Fig. <ref type="figure" target="#fig_0">1</ref>:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.1">Android/Linux</head><p>The first problem to solve is that, by default, Android only allows one network interface to be active at a time-clearly no good for us. Android chooses which interface to use according to a preference order: If the device is connected to a WiFi network, Android automatically disconnects from WiMAX. We therefore modified the Connectivity Service in Android to allow us to use multiple interfaces simultaneously. Next, we need to spread traffic from one application over multiple interfaces. The application sends traffic using one IP source address; the networking stack takes care of spreading the traffic over several interfaces, each with its own IP address. We do this using a virtual Ethernet interface to connect the application, with its local IP address, to a special gateway inside the Linux kernel. The gateway stitches multiple interfaces together, without the application knowing. Essentially, the gateway is a traffic load-balancer that demultiplexes flows using Open vSwitch (see below), with appropriate changes made to the routing table and ARP tables. In this way, the application flow is decoupled from the IP addresses on each interface, which allows the set of interfaces to change dynamically as connectivity comes and goes. We further illustrate this setup using our experiment described in section 3.1.</p><p>Android is based on a minimal Linux kernel which is missing several tools and kernel modules we need (e.g. the kernel module for virtual Ethernet interfaces). We added the modules and cross-compiled common utilities such as ifconfig, route and ip.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.2">Open vSwitch (OVS)</head><p>Open vSwitch (OVS) replaces the bridging code in Linux, <ref type="foot" target="#foot_0">1</ref>and lets us dynamically change how each flow is routed. OVS has an OpenFlow interface and therefore we can use &lt;match,action&gt; flow-table entries to easily route, re-route and handover existing connections.</p><p>We run OVS in kernel space, and ported it to Android by patching and and cross-compiling its kernel module and user-space control programs using Android Native Development Kit (NDK) for the ARM or OMAP processors. <ref type="foot" target="#foot_1">2</ref></p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.3">Control Plane</head><p>We control how flows are routed and re-routed using a small custom-built control plane, that interfaces to OVS using the OpenFlow protocol. In our prototype, the control plane is on the mobile device; but in principle the control  plane can be anywhere-for example, it could be run by the network operator, or outsourced to a third party provider.</p><p>Our control plane runs as an Android background service, and applications can interact with the control plane using Android IPCs <ref type="bibr" target="#b1">[1]</ref>. This control plane controls OVS using the OpenFlow protocol running over a TCP socket. It controls the network interfaces (and other local resources) through system calls (e.g., Android Runtime Process). The control plane can also communicate with control planes on other hosts using JSON messages, allowing it to negotiate how flows are spread across interfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Hardware</head><p>Our prototype runs on four common mobile devices (three smartphones running Android, and a laptop running Linux), shown in Fig. <ref type="figure" target="#fig_2">2</ref> Where possible, we run experiments on the mobile phones, but sometimes it is infeasible (e.g. in one experiment we used ten interfaces, which is too many for current smart phones). Our experiments also communicate with peer servers and middleboxes, for which we used servers running Ubuntu 11.04.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Overhead Benchmarks</head><p>Our prototype adds functionality to Android, and inevitably consumes more power, more CPU cycles, and potentially reduces the maximum throughput. We designed the system to have minimal overhead, which is confirmed by our first set of experiments.</p><p>Throughput Reduction: We measured the goodput for ten iperfs with and without OVS. To maximize the cost of the overhead, we used the Motorola Droid, the least provisioned 3 Android 2.3.5 includes an important fix to WiMAX driver. RTT Increase: Similarly, we profiled the delay incurred by sending 300 pings with and without OVS. There is no observable increase (in Fig. <ref type="figure" target="#fig_4">3(b)</ref>) in round trip time.</p><p>CPU Load: The CPU load is logged while running iperf on the Droid with and without OVS. Fig. <ref type="figure" target="#fig_4">3</ref>(c) shows that the CPU load is increased by 1.8%.</p><p>Power Consumption: To measure our prototype's impact on power consumption, we removed the battery and powered the Droid via its USB port and a power monitor. Fig. <ref type="figure" target="#fig_4">3(d)</ref> shows negligible power increase with OVS. Several of the authors use the prototype daily, and it has proved robust so far. Going forward, we intend to support it for others to use, and enable others to build their research prototypes on top.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">EXPERIMENTS</head><p>The goal of our prototype is to overcome the three problems listed in the introduction, namely (1) an ongoing connection cannot easily be handed over to a new interface without re-establishing state; (2) if multiple network interfaces are available, an application cannot take advantage of them to get higher throughput (3) a user cannot easily choose interfaces so as to minimize power consumption, or usage charges.</p><p>To evaluate how well our prototype solves these problems, we ran the three experiments described below. Our experiments assume we have no special control of the network (we use existing WiFi and cellular networks), and the clients communicate with unmodified peers (except other-  wise noted). Hence our experiments also validate the degree to which our prototype is backward compatible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Seamless Connectivity</head><p>We begin with a simple testing to show how the system maintains a HTTP connection across a migration. Our model is a user arriving to work who wishes to migrate an ongoing video stream from a public WiMAX network to a corporate WiFi network.</p><p>In this experiment, both the client and peer are running our prototype stack (i.e., with OVS and a custom control plane). During the migration, the client's IP address will change. This change has to be coordinated with the peer for a seamless migration through control packets between the OpenFlow controllers. The control packet signals the impending migration of an ongoing flow to the peer, which can be done without aid from the network. The peer would then rewrite the addresses of the subsequently incoming packets such that the migration of the flow is transparent to the application above.</p><p>Several possibilities exists in this design space. In our implementation, we rewrote the source address to that of the initially established flow (as shown Fig. <ref type="figure" target="#fig_6">5</ref>). At any point in time, the application in host A thinks that the communication is between addresses A' and B while the application in host B thinks that the communication is between addresses A1 and B'. The consistent views of the applications in the end hosts is maintained by the translations indicated in Fig. <ref type="figure" target="#fig_6">5</ref>. Another possible implementation is to always rewrite the source address to one that is arbitrarily picked at the onset of the flow. Fig. <ref type="figure" target="#fig_7">6</ref> shows the throughput of the session as we migrate the flow (as shown in Fig. <ref type="figure" target="#fig_5">4</ref>). Initially the flow is routed through WiMAX; then after 30 seconds we migrate  it to WiFi. The control plane decides when to make the move, and reconfigures OVS to change the addresses, rewrite packet headers, and switch packets to/from the new interface. This change is coordinated with the control plane of the peer. The result is an uninterrupted TCP flow that has been migrated from one network to another without reestablishing state.</p><p>To show the flexibility of our system, we also tested a very different migration mechanism, as described by Stoica et al using I3 <ref type="bibr" target="#b18">[18]</ref>. The flow is routed through an off-path middlebox (or waypoint); each end communicates only with the middlebox. This could be used, for example, to insert a firewall or DPI box in a corporate environment. In our experiment, the migration takes place at 50 seconds, with a brief drop in data rate while packets reach the middlebox.</p><p>The experiment shows that our setup is quite powerful: Both migrations were done without changing the network. Usually, migration and mobility are considered fixed functions of the infrastructure <ref type="bibr" target="#b16">[16,</ref><ref type="bibr" target="#b18">18]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Stitching Networks for Throughput</head><p>Our prototype allows multiple networks to be used simultaneously. To test how well this works, we streamed data while varying the number of interfaces, and measured the throughput seen by the application.</p><p>In the experiment, we download a 100 megabyte file using five parallel TCP connections using aria2c. First, we ran all five TCP connections over our campus WiFi network; then we used Clearwire's WiMAX network. Finally, the control plane stitched both networks together. We ran each test ten times on two clients (the laptop, and on the Nexus S 4G smartphone), and report the average throughput. Fig. <ref type="figure" target="#fig_8">7</ref> shows the average aggregate throughput with and without stitching. The laptop achieves 95% of the aggregate data-rate, whereas the smartphone achieves 77%. Further investigation revealed that there is interference between the WiFi and WiMAX interface in the mobile phone, because the transceivers are close together. There is no fundamental reason why this can not be solved by better shieldingsomething we can expect if stitching becomes common.</p><p>Stitching interfaces together also helps maintain connectivity during times of packet loss or complete network outage, as Fig. <ref type="figure" target="#fig_9">8</ref> shows. Each interface was turned off for 20s during the experiment; connectivity was maintained because of the other interface.</p><p>Finally, to push the limits of stitching, we stitch ten networking interfaces together (!). The ten networks are listed in Fig. <ref type="figure" target="#fig_10">9</ref>, and include four different wireless technologies: 3G, WiMAX, WiFi 802.11a (5 GHz), and WiFi 802.11g (2.4 GHz); and include six different production networks. We had to use the laptop, because there was no way to attach so many interfaces to a smartphone. To measure the capacity brought by each successive interface, we gradually bring up one interface at a time. The control plane stitches it to the others to increase the data-rate. Fig. <ref type="figure" target="#fig_10">9</ref> shows the throughput rising as each interface is added (in the same order as Fig. <ref type="figure" target="#fig_10">9</ref>), up to a maximum of 70 Mbps (more than three times the fastest interface).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Dynamic Choice of Network</head><p>Our final experiment (inspired by <ref type="bibr" target="#b13">[13]</ref>), shows how the user or application can choose which network to use. In our experiment, we use the phone's accelerometer to tell if the device is moving. When the user is moving, we connect it to WiMAX for greater coverage; when stationary, we connect it to the free and faster WiFi network (Fig. <ref type="figure" target="#fig_11">10</ref>).  Because the decision is made by the user (or client), we can expect faster innovations to be designed and made available in the future, for example methods described in <ref type="bibr" target="#b8">[8,</ref><ref type="bibr" target="#b13">13,</ref><ref type="bibr" target="#b14">14]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">RELATED WORK</head><p>There is a large body of work that seeks to exploit the diversity of connectivity options in mobile wireless networks <ref type="bibr" target="#b4">[4,</ref><ref type="bibr" target="#b5">5,</ref><ref type="bibr" target="#b12">12]</ref>. This work is also related to recent work on multipath transport protocols <ref type="bibr" target="#b9">[9,</ref><ref type="bibr" target="#b11">11,</ref><ref type="bibr" target="#b15">15]</ref>. While MPTCP provides bandwidth aggregation, similar transport protocol optimizations such as TCP Migrate <ref type="bibr" target="#b17">[17]</ref> provide the ability to handover a TCP connection to a new physical path without breaking the application. Our work is orthogonal to these techniques, our goal is to provide an implementation that can accommodate these (and other) extensions.</p><p>Our work is also related to a number of recent optimizations to improve wireless network performance, some of which leverage sensors <ref type="bibr" target="#b13">[13]</ref>, others exploit geolocation informa-tion <ref type="bibr" target="#b8">[8]</ref>, while some leverage user-specified application policies <ref type="bibr" target="#b3">[3]</ref>. Finally, recent work <ref type="bibr">[7]</ref> has noted the prevalence of multiple-SIM phones in countries such as India and proposed modifications to the cellular network infrastructure to enables clients to make better network choices. Similarly techniques such as FatVap <ref type="bibr" target="#b12">[12]</ref> aggregate bandwidth from multiple neighboring APs to build a faster connection. Our work compliments these techniques by providing flexibility at the client to take advantage of these innovations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">DISCUSSION</head><p>Our prototype using Android and Open vSwitch, is able to achieve the following: (1) handover an ongoing TCP connection without re-establishing state; (2) stitch multiple interfaces together for higher throughput; (3) dynamically choose interfaces to minimize loss, delay, power consumption or usage charges. This demonstrates that a refactored client network stack can achieve a lot of our goals without modifying the fixed infrastructure.</p><p>However, current networks and devices do not make it easy: Address ambiguity : A client might have two interfaces connected to different networks that use identical private address spaces, for example they might both use addresses starting from 192.168.0.0. While we can send packets via gateways on both networks, to reach hosts directly attached to either networks requires us to distinguish them by some means other than IP address; e.g. by forwarding packets based on the interface they are destined to (if we know). Otherwise, one set of hosts will be unreachable.</p><p>Discovering connectivity : Discovery protocols (e.g. DNS and DHCP) are typically tied to a particular network interface, and therefore if we want to use multiple networks, we must keep track of the DNS and DHCP settings for each interface. And to find which networks are available, we must proactively ARP hosts and routers on each interface.</p><p>Middleboxes : Wireless networks-particularly cellular networksare riddled with middleboxes, which can interfere with flow migration. For example, a migrating flow might be blocked if the new network did not see a SYN packet which we observed during our experiments.</p><p>Interfaces : Sometimes, a single network requires different header formats depending on the physical device. For example, a 3G network requires Nexus One (using the Qualcomm MSM 3G chipset) to present a virtual Ethernet interface, whereas they are presented as IP interfaces on Google Nexus S and the Sierra 3G USB Dongle. Different interfaces also present different MTU to the network stack, e.g. 3G and Ethernet interfaces typically has MTU of 1400 and 1500 bytes respectively. 4 These are not limitations of the approach, because it is possible to rewrite the header format arbitrarily for each interface and fragment the packet accordingly.</p><p>To solve the problem of ambiguous private addresses will take more work. Hopefully cellular providers will, in time, fix the middlebox problem. The advantage of our refactored client networking stack-where changes can easily be added to OVS or to the control plane-it should be quite straightforward to add solutions to these, and as-yet unidentified 4 We set the MTU to the minimum of all interfaces in our prototype to work around this problem.</p><p>problems down the road. Indeed, we believe our approach makes innovation and experimentation very straightforward 6. ACKNOWLEDGEMENT</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: System diagram illustrating the main features of our prototype</figDesc><graphic coords="2,352.68,53.80,167.37,154.34" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>(a) Android smartphones. (b) Laptop with ten interfaces.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Devices running our prototype network stack.</figDesc><graphic coords="3,177.95,58.77,107.60,80.70" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>: Smartphone: Motorola Droid with TI OMAP processor (600 MHz) and 256 MB of RAM, CDMA with Verizon 3G data plan, running Android Gingerbread 2.3.3. Smartphone: Nexus One with Qualcomm ARM processor (1 GHz) and 512 MB of RAM, GSM, HSDPA with T-Mobile 3G data plan, running Android Gingerbread 2.3.3. Smartphone: Nexus S 4G with Cortex ARM processor (1 GHz) and 512 MB of RAM, CDMA, WiMAX with Sprint 3G/WiMAX data plan, running Android Gingerbread 2.3.5. 3 Laptop: Dell with AMD Phenom II P920 quad-core processor (3.2 GHz) and 4 GB memory, installed with Ubuntu 10.04.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Overhead of Switch Datapath</figDesc><graphic coords="3,325.10,199.75,152.93,105.41" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Diagram showing the routes of the flow at each stage of the experiment.</figDesc><graphic coords="4,65.75,180.86,215.18,114.19" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Diagram showing address translation happening along the routes of each flow at each stage of the experiment.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Throughput of mobile during the experiment.</figDesc><graphic coords="4,316.81,53.80,239.11,187.16" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Stitching two networks: Steady state throughput.</figDesc><graphic coords="4,316.81,283.19,239.10,99.83" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Stitching two networks: Throughput when downloading a 100 MB file. WiFi is turned off from 20s to 40s, and WiMAX from 60s to 80s.</figDesc><graphic coords="5,53.80,53.80,239.10,185.82" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Connecting a laptop to ten wireless networks. The data-rate increases as more networks are added (in the order listed in the figure). The arrows show when each interface is turned on.</figDesc><graphic coords="5,316.81,294.67,239.10,176.05" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Moving an ongoing flow from WiMAX to WiFi when device stops moving.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>OVS was recently upstreamed to Linux kernel 3.3<ref type="bibr" target="#b6">[6]</ref>.</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>Our patches and instructions are publicly available at https://docs.google.com/document/pub?id=1k5jAkz_ R475Ohj0OaJdWwSpAw6mmR2Mp_Ggr8_yrXsY.</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This research is supported in part by the NSF POMI (Programmable Open Mobile Internet) 2020 Expedition Grant 0832820, and ONRC (Open Networking Research Center). The authors also like to thank Monica Lam, Yongqiang Liu, and Adam Covington for their time, effort and advice in the early stages of this project.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><surname>References</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<ptr target="http://developer.android.com/guide/topics/intents/intents-filters.html" />
		<title level="m">Intents and Intent Filters</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">AT&amp;T: Give us spectrum, not rules</title>
		<author>
			<persName><forename type="first">C</forename><surname>Albanesius</surname></persName>
		</author>
		<ptr target="http://www.pcmag.com/article2/0" />
		<imprint>
			<date type="published" when="2817">2817,2361708</date>
			<biblScope unit="page">0</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Augmenting mobile 3G using WiFi</title>
		<author>
			<persName><forename type="first">A</forename><surname>Balasubramanian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Mahajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Venkataramani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM MobiSys &apos;10</title>
		<meeting>ACM MobiSys &apos;10</meeting>
		<imprint>
			<date type="published" when="2010-06">Jun. 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Contact networking: a localized mobility system</title>
		<author>
			<persName><forename type="first">C</forename><surname>Carter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Kravets</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Tourrilhes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM MobiSys &apos;03</title>
		<meeting>ACM MobiSys &apos;03</meeting>
		<imprint>
			<date type="published" when="2003-05">May 2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">MultiNet: Connecting to multiple IEEE 802.11 networks using a single wireless card</title>
		<author>
			<persName><forename type="first">R</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bahl</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Bahl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
		<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Routing open vswitch into the mainline</title>
		<author>
			<persName><forename type="first">J</forename><surname>Corbet</surname></persName>
		</author>
		<ptr target="https://lwn.net/Articles/469775/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">MOTA: engineering an operator agnostic mobile service</title>
		<author>
			<persName><forename type="first">S</forename><surname>Deb</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nagaraj</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Srinivasan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM MobiCom &apos;11</title>
		<meeting>ACM MobiCom &apos;11</meeting>
		<imprint>
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Cabernet: Vehicular Content Delivery Using WiFi</title>
		<author>
			<persName><forename type="first">J</forename><surname>Eriksson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM MOBICOM</title>
		<meeting>ACM MOBICOM</meeting>
		<imprint>
			<date type="published" when="2008-09">Sep. 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">A</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Raiciu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Handley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Barre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Iyengar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">6182</biblScope>
		</imprint>
	</monogr>
	<note>Informational</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<author>
			<persName><forename type="first">V</forename><surname>Godinez</surname></persName>
		</author>
		<ptr target="http://www.thenewstribune.com/2011/04/24/1638191/wireless-carriers-grapple-with.html" />
		<title level="m">Wireless carriers grapple with spectrum shortage</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">pTCP: an end-to-end transport layer protocol for striped connections</title>
		<author>
			<persName><forename type="first">H.-Y</forename><surname>Hsieh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sivakumar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE ICNP</title>
		<meeting>IEEE ICNP</meeting>
		<imprint>
			<date type="published" when="2002-11">2002. Nov. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">FatVAP: aggregating AP backhaul capacity to maximize throughput</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kandula</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">C</forename></persName>
		</author>
		<author>
			<persName><forename type="first">-J</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Badirkhanli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Katabi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX NSDI &apos;08</title>
		<meeting>USENIX NSDI &apos;08</meeting>
		<imprint>
			<date type="published" when="2008-04">Apr. 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Improving wireless network performance using sensor hints</title>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">B</forename><surname>Lenin Ravindranath</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Calvin</forename><surname>Newport</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX NSDI &apos;11</title>
		<meeting>USENIX NSDI &apos;11</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">BreadCrumbs: forecasting mobile connectivity</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Nicholson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">D</forename><surname>Noble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM MobiCom &apos;08</title>
		<meeting>ACM MobiCom &apos;08</meeting>
		<imprint>
			<date type="published" when="2008-09">Sep. 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">L</forename><surname>Ong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Yoakum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">3286</biblScope>
		</imprint>
	</monogr>
	<note>Informational</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title/>
		<author>
			<persName><forename type="first">C</forename><surname>Perkins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">5944</biblScope>
		</imprint>
	</monogr>
	<note>Proposed Standard</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An end-to-end approach to host mobility</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C</forename><surname>Snoeren</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM MobiCom &apos;00</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Internet indirection infrastructure</title>
		<author>
			<persName><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Adkins</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zhuang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Surana</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM &apos;02</title>
		<meeting>ACM SIGCOMM &apos;02</meeting>
		<imprint>
			<date type="published" when="2002-08">Aug. 2002</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
