<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Public-Key Encryption with Fuzzy Keyword Search: A Provably Secure Scheme under Keyword Guessing Attack</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Peng</forename><surname>Xu</surname></persName>
							<email>xupeng@mail.hust.edu</email>
						</author>
						<author>
							<persName><roleName>Member, IEEE</roleName><forename type="first">Qianhong</forename><surname>Wu</surname></persName>
							<email>qhwu@xidian.edu.cn..</email>
						</author>
						<author>
							<persName><forename type="first">Wei</forename><surname>Wang</surname></persName>
							<email>wangw@pkusz.edu.cn</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science and Technology</orgName>
								<orgName type="laboratory">Services Computing Technology and System Lab, Cluster and Grid Computing Lab</orgName>
								<orgName type="institution">Huazhong University of Science and Technology</orgName>
								<address>
									<postCode>430074</postCode>
									<settlement>Wuhan</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">School of Electronics and Information Engineering</orgName>
								<orgName type="institution">Beihang Univerisity</orgName>
								<address>
									<postCode>100191</postCode>
									<settlement>Beijing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department" key="dep1">Shenzhen Eng. Lab of Converged Networks Technology</orgName>
								<orgName type="department" key="dep2">Shenzhen Key Lab of Cloud Computing Tech. &amp; App</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="department">Shenzhen Graduate School</orgName>
								<orgName type="institution">Peking University</orgName>
								<address>
									<postCode>518055</postCode>
									<settlement>Shenzhen</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Public-Key Encryption with Fuzzy Keyword Search: A Provably Secure Scheme under Keyword Guessing Attack</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">9A84974DC489FEA02D52BD238A06FFDF</idno>
					<idno type="DOI">10.1109/TC.2012.215</idno>
					<note type="submission">received 21 Aug. 2011; revised 19 June 2012; accepted 26 Aug. 2012; published online 5 Sept. 2012.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:13+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Public-key encryption with keyword search</term>
					<term>keyword guessing attack</term>
					<term>public-key encryption with fuzzy keyword search</term>
					<term>identity-based encryption</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Public-key encryption with keyword search (PEKS) is a versatile tool. It allows a third party knowing the search trapdoor of a keyword to search encrypted documents containing that keyword without decrypting the documents or knowing the keyword. However, it is shown that the keyword will be compromised by a malicious third party under a keyword guess attack (KGA) if the keyword space is in a polynomial size. We address this problem with a keyword privacy enhanced variant of PEKS referred to as public-key encryption with fuzzy keyword search (PEFKS). In PEFKS, each keyword corresponds to an exact keyword search trapdoor and a fuzzy keyword search trapdoor. Two or more keywords share the same fuzzy keyword trapdoor. To search encrypted documents containing a specific keyword, only the fuzzy keyword search trapdoor is provided to the third party, i.e., the searcher. Thus, in PEFKS, a malicious searcher can no longer learn the exact keyword to be searched even if the keyword space is small. We propose a universal transformation which converts any anonymous identity-based encryption (IBE) scheme into a secure PEFKS scheme. Following the generic construction, we instantiate the first PEFKS scheme proven to be secure under KGA in the case that the keyword space is in a polynomial size.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>O UTSOURING searchable encrypted data to a third party is of increasing interest in secure Cloud storage <ref type="bibr" target="#b0">[1]</ref>. In a typical application of this kind, a sender encrypts documents to a receiver who has a storage account in a cloud server. The encrypted documents are uploaded to the storage server. The receiver can retrieve some encrypted documents containing a specific keyword by providing the server with a keyword search trapdoor corresponding to that keyword. With this keyword search trapdoor, the storage server can find the matching documents without decryption. The cryptographic tool facilitating search on encrypted data is referred to as searchable encryption.</p><p>Searchable encryption has been realized in both symmetric and asymmetric (public-key) encryption settings. In a multisender scenario, symmetric searchable encryption schemes <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref> suffer from complicated secret key distribution/management. That is, each sender needs to securely obtain a secret key from the intended receiver before the sender can encrypt documents. Public-key encryption with keyword search (PEKS), introduced by Boneh et al. <ref type="bibr" target="#b5">[6]</ref>, is more flexible and allows any one seeing the receiver's public key to encrypt documents. They established a well-defined security notion of semantic security under chosen-keyword attack (SS-CKA). It means that the server cannot learn anything about the keyword contained in an SS-CKA secure PEKS ciphertext, if the server does not know the keyword search trapdoor. In this way, the keyword privacy is guaranteed for the documents owner.</p><p>The SS-CKA security does not state whether the keyword privacy can be preserved after the keyword search trapdoor is known. Byun et al. first proposed KGA <ref type="bibr" target="#b7">[8]</ref> and launched a successful attack on PEKS schemes <ref type="bibr" target="#b8">[9]</ref> in 2006. Jeong et al. <ref type="bibr" target="#b9">[10]</ref> proved that any PEKS scheme satisfying at least computationally indistinguishable consistency is subjected to KGA. The KGA on PEKS works as follows: The adversary generates the ciphertexts of all keywords. This is feasible if the keyword space is in a polynomial size. Having a keyword trapdoor, the adversary can launch a keyword guessing attack (KGA) by exhaustively testing the ciphertexts of the keywords; and the keyword associated with the search trapdoor is discovered once a matching ciphertext containing the keyword is found. It seems challenging to achieve keyword privacy under KGA in traditional PEKS schemes, since the keyword space is usually small in the real world. A simple solution is to enlarge the keyword space by letting the encrypters (senders) arbitrarily define the keywords. However, as shown in <ref type="bibr" target="#b6">[7]</ref>, this makes it hard for the receiver to generate the corresponding keyword search trapdoor; and if different senders use different keywords for the same meaning, the receiver has to generate multiple keyword search trapdoors to search the matching ciphertexts, which multiplies the search time of the third party and incurs unbearable overheads. Hence, it is desirable to extend the traditional PEKS model in a practical way to achieve keyword privacy under KGA even if the keyword space is small.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Our Contributions</head><p>We observe that in addition to the condition that the keyword space is in a polynomial size, another condition for the adversary to launch a successful KGA is that the adversary has to know the keyword search trapdoor. Hence, if searching on encrypted documents can be performed without leaking the full the keyword search trapdoor, then the adversary, i.e., the searcher, cannot find the keyword contained in the encrypted documents that the user requests for. This observation allows us to practically enhance the PEKS to achieve keyword privacy under KGA even if the keyword space is small. Specifically, our contributions include the following aspects.</p><p>First, we formalize the notion of public-key encryption with fuzzy keyword search (PEFKS). Compared with traditional PEKS, the keyword search trapdoor in PEFKS is divided into two parts, i.e., a fuzzy keyword search trapdoor and an exact keyword search trapdoor. A novel fuzzy function is defined to map two or more keywords to the same fuzzy keyword search trapdoor. When retrieving the ciphertexts containing a specific keyword, only the fuzzy keyword search trapdoor is provided to the server. Using the fuzzy keyword search trapdoor, the server can filter most nonmatching ciphertexts and return a superset of the matching ciphertexts. With the exact keyword search trapdoor, the receiver can locally find the matching ciphertexts by filtering out the nonmatching ones in the superset. We define the SS-CKA security and the IK-NCK-KGA (indistinguishability of keywords under nonadaptively chosen keyword and keyword guessing attack) security for PEFKS. The SS-CKA security of PEFKS is similar to its counterpart for PEKS. The IK-NCK-KGA security means that an adversary cannot determine a ciphertext is an encryption of which keyword among the keywords having the same fuzzy keyword search trapdoor, even if the adversary knows the fuzzy keyword search trapdoors of all keywords. The novel IK-NCK-KGA security guarantees postsearch keyword privacy for the receivers even if the keyword space is small. Second, we propose a generic transformation which converts any anonymous IBE scheme into a PEFKS scheme. In an anonymous IBE scheme, one encrypts a message to the receiver who can decrypt if the receiver is given a secret key associated with his/her identity; seeing only the ciphertext, an adversary cannot determine the message was encrypted to which identity, even if the identity space is known. By letting an identity play, the role of a keyword and the secret key associated with the identity play the role of the corresponding keyword search trapdoor, we realize a universal transformation from anonymous IBE to PEFKS with a carefully designed fuzzy function mapping two (or more) keywords to the same fuzzy keyword search trapdoor. We prove that the resulting PEFKS is SS-CKA and IK-NCK-KGA secure if the underlying IBE is Anon-ID-CPA (anonymous under adaptively chosen ID and chosen plaintext attack) secure. A universal transformation from anonymous IBE to traditional PEKS has been observed in literatures, but no formal proof has been provided. Our anonymous IBE-to-PEFKS transformation and proofs fill this gap since PEFKS is a stronger notion than PEKS (i.e., PEFKS implies PEKS).</p><p>Third, we study the implementation issues of practical PEFKS schemes. Following the universal anonymous IBEto-PEFKS transformation, we realize the first PEFKS scheme based on the anonymous IBE scheme in <ref type="bibr" target="#b10">[11]</ref>. We further study how to sort the keywords so that better keyword privacy can be achieved if the keywords are not uniformly distributed. Finally, we show that the outputs of any other fuzzy function do not have min-entropy greater than the outputs of our fuzzy function. This implies that our fuzzy function is optimal and produces the maximum minentropy to the adversary who knows the fuzzy keyword search trapdoors of all keywords.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Related Work</head><p>Boneh et al. <ref type="bibr" target="#b5">[6]</ref> introduced the PEKS primitive, and formalized well-defined notions of privacy of the keywords, with an observation that there exists a universal transformation from the anonymous IBE scheme to PEKS. Subsequently, Abdalla et al. <ref type="bibr" target="#b11">[12]</ref> completed the foundations of PEKS, and presented an improved universal transformation from anonymous IBE to PEKS. They also proposed a publickey encryption scheme with temporary keyword search.</p><p>Several variants of standard PEKS have been proposed in recent years. Public-key encryption with conjunctive keyword search (PECKS) schemes <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b17">[18]</ref>, <ref type="bibr" target="#b18">[19]</ref> were proposed to achieve combinable multikeyword search. Bethencourt et al. <ref type="bibr" target="#b19">[20]</ref> succeeded on public-key encryption with conjunctive keyword range search, and further updated their work <ref type="bibr" target="#b20">[21]</ref>. Boneh and Waters <ref type="bibr" target="#b21">[22]</ref> proposed a novel technique called hidden vector encryption (HVE) to achieve conjunctive, range and subset searches. Camenisch et al. <ref type="bibr" target="#b22">[23]</ref> proposed oblivious generation of the keyword search trapdoor to keep the privacy of keyword against a curious trapdoor generator. Most variants have been proposed to improve the versatility of PEKS, while few efforts made to enhance the security of PEKS (under KGA).</p><p>PEKS is closely related to the well-known cryptographic primitive of IBE. The first anonymous IBE scheme <ref type="bibr" target="#b10">[11]</ref> was proposed by Boneh and Franklin in the random oracle (RO) model. Boyen and Waters <ref type="bibr" target="#b12">[13]</ref> proposed the first anonymous IBE scheme in the standard model. Gentry <ref type="bibr" target="#b13">[14]</ref> proposed the most efficient anonymous IBE scheme in the standard model. Ducas <ref type="bibr" target="#b14">[15]</ref> proposed an anonymous IBE scheme based on the asymmetric bilinear map. Fan et al. <ref type="bibr" target="#b15">[16]</ref> proposed an anonymous multireceiver IBE scheme. By applying our IBE-to-PEFKS transformation, these anonymous IBE schemes can be exploited to build efficient PEFKS schemes secure against KGAs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Paper Organization</head><p>The remainder of the paper is organized as follows: In Section 2, we formally analyze the insecurity of PEKS under KGA. Section 3 formalizes PEFKS and defines its SS-CKA and IK-NCK-KGA securities. We propose a universal IBE-to-PEFKS transformation in Section 4. The implementation issues of PEFK are studied in Section 5.2. Finally, Section 6 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">PEKS AND ITS INSECURITY UNDER KGA</head><p>We specify some notations used throughout the paper. Let $ &lt; denote an element randomly sampled from the space &lt; or the output by running the randomized algorithm &lt;. We use ? to represent the abortion of an algorithm. Let P olyðkÞ denote any polynomial function in k,</p><p>where k 2 IN is a security parameter. We next review the definition of PEKS <ref type="bibr" target="#b5">[6]</ref>, and analyze its insecurity under KGA.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 1 (PEKS).</head><p>A PEKS scheme consists of the following probabilistic polynomial time (PPT) algorithms:</p><p>. ðP K P EKS ; SK P EKS Þ SysGðk; WÞ: Take as inputs a security parameter k 2 IN and a keyword space W, output a public-secret key pair ðP K P EKS ; SK P EKS Þ, where P K P EKS contains the keyword space W. . T W T rapdoorðSK P EKS ; WÞ: Take as inputs a secret key SK P EKS and a keyword W 2 W, output a keyword search trapdoor T W . . C CipherGðP K P EKS ; WÞ: Take as inputs a public key P K P EKS and a keyword W 2 W, output a keyword searchable ciphertext C. . 1=0</p><p>ExactT estðP K P EKS ; T W ; CÞ: Take as inputs P K P EKS , a keyword search trapdoor T W and a keyword searchable ciphertext C ¼ CipherGðP K P EKS ; W 0 Þ, and return 1; if W 0 ¼ W ; 0; otherwise: &amp; A PEKS scheme should satisfy the consistency which states that, for any keyword searchable ciphertext C ¼ CipherGðP K P EKS ; W 0 Þ, ExactT estðP K P EKS ; T W ; CÞ returns 1 if and only if W ¼ W 0 . KGA on PEKS <ref type="bibr" target="#b7">[8]</ref> is a brute force way to guessing the correct keyword associated with a keyword search trapdoor. KGA can be efficiently launched by testing the ciphertexts of all the keywords if jWj P olyðkÞ, that is, the size of keyword space is no more than a polynomial level. KGA on PEKS can be defined as follows:</p><p>Definition 2 (KGA on PEKS). Given the public key P K P EKS of PEKS and the valid keyword search trapdoor T W of any keyword W 2 W, an adversary indexes all keywords in the keyword space W as fW 1 ; W 2 ; . . . ; W jWj g and implements keyword guessing attack as follows: , the storage server) can correctly guess the keyword after receiving a keyword search trapdoor from the receiver. Note that the keyword space is usually very small in practice. Therefore, the KGA is a practical privacy threat to the users who store sensitive documents in a cloud server.</p><formula xml:id="formula_0">1. Let i ¼ 1.<label>2</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">MODELING PEFKS</head><p>In this section, we formalize the PEFKS model and define its SS-CKA and IK-NCK-KGA securities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The Definition of PEFKS</head><p>Consider the scenario in which a receiver retrieves data from a cloud server storing documents encrypted by the senders. PEFKS enhances PEKS with two test algorithms, i.e., the fuzzy test algorithm F uzzT est and the exact test algorithm ExactT est. F uzzT est is run by the storage server with a fuzzy keyword search trapdoor as input, while ExactT est is locally executed by the receiver with an exact fuzzy keyword search trapdoor as input. Accordingly, a new algorithm is required to generate the fuzzy search trapdoor and the exact search trapdoor. Given a keyword W , PEFKS generates a fuzzy keyword search trapdoor of W and an exact keyword search trapdoor. To search the PEFKS ciphertexts containing W , algorithm F uzzT est takes the fuzzy keyword search trapdoor as input and filter out most of nonmatching ciphertexts, and returns a set of ciphertexts consisting of all matching ciphertexts and a small part of nonmatching ones. Finally, the algorithm ExactT est takes the exact keyword search trapdoor of W to filter out all nonmatching ciphertexts and outputs the matching ones to the receiver.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 3 (PEFKS).</head><p>A PEFKS scheme consists of following PPT algorithms:</p><p>. ðP K P EF KS ; SK P EFKS Þ SysGðk; WÞ: Take as inputs a security parameter k 2 IN and the keyword space W, output public-secret key pair ðP K P EF KS , SK P EFKS Þ. Here, P K P EF KS contains the keyword space W and a fuzzy function F uzðW; WÞ. The function F uzðW; WÞ takes a keyword W 2 W as input and outputs a fuzzy value in the sense that two (or more) keywords share the same fuzzy value. . ðF T W ; ET W Þ DT rapdoorðSK P EFKS ; WÞ: Take as inputs SK P EF KS and a keyword W 2 W, output a fuzzy-exact keyword search trapdoor pair ðF T W ; ET W Þ. . C CipherGðP K P EF KS ; WÞ: Take as inputs the public key P K P EFKS and a keyword W 2 W, output a PEFKS ciphertext C of the keyword W . . 1=0</p><p>F uzzT estðP K P EFKS ; F T W ; CÞ: Take as inputs the public key P K P EFKS , a fuzzy keyword search trapdoor F T W and a PEFKS ciphertext C ¼ CipherGðP K P EF KS ; W 0 Þ, return 1; if FuzðW 0 ; WÞ ¼ F uzðW; WÞ; 0; otherwise: . 1=0</p><p>ExactT estðP K P EFKS ; ET W ; CÞ: Take as inputs the public key P K P EFKS , an exact keyword search trapdoor ET W and a PEFKS ciphertext </p><formula xml:id="formula_1">C ¼ CipherGðP K P EFKS ; W 0 Þ, return 1; if W 0 ¼ W ; 0; otherwise: &amp; A PEFKS</formula><formula xml:id="formula_2">if W ¼ W 0 .</formula><p>We illustrate how a PEFKS scheme is implemented in practice. In a typical implementation, the receiver generates his/her public-secret key pair. The receiver also generates the fuzzy keyword search trapdoor F T W and the exact keyword search trapdoor ET W of a keyword W . When receiving the fuzzy keyword search trapdoor F T W , the storage server implements the algorithm F uzzT est, and returns a superset of the matching ciphertexts to the receiver. Finally, the receiver runs the algorithm ExactT est to find out the matching ciphertexts containing the keyword W .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">SS-CKA Security Definition of PEFKS</head><p>SS-CKA security was presented by Boneh et al. <ref type="bibr" target="#b5">[6]</ref> to capture the keyword privacy requirement in PEKS. It means that an adversary cannot determine a ciphertext is the encryption of which keyword among a set of keywords adaptively chosen by the adversary, given that the adversary does not know the corresponding keyword search trapdoors. We define a similar SS-CKA security property in our PEFKS setting.</p><p>In PEFKS, the keyword search trapdoor of a keyword consists of a fuzzy keyword search trapdoor and an exact keyword search trapdoor. The exact search trapdoor is generated and used locally by the receiver. Hence, it is only known to the receiver. For the system to work, the fuzzy keyword search trapdoor will be sent to the storage server. That is, the fuzzy keyword search trapdoor in our PEFKS plays a similar role of the keyword search trapdoor in traditional PEKS. Accordingly, the SS-CKA security of PEFKS can be defined as that a dishonesty server cannot determine a ciphertext is the encryption of which keyword among a set of keywords of the server's choice, provided that the server has not yet known the corresponding fuzzy keyword search trapdoors. Formally, the SS-CKA security of PEFKS is defined as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 4 (SS-CKA Security of PEFKS). Let b</head><p>$ f0; 1g.</p><p>A PEFKS scheme is SS-CKA secure, if any adversary A, associated with the experiment EXP SS-CKA-b P EF KS;A ðkÞ defined in Fig. <ref type="figure" target="#fig_1">1</ref> , has a negligible advantage Adv SS-CKA P EF KS;A , where</p><formula xml:id="formula_3">Adv SS-CKA P EF KS;A ¼ j Pr À EXP SS-CKA-1 P EF KS;A ðkÞ ¼ 1 Á À Pr À EXP SS-CKA-0 P EFKS;A ðkÞ ¼ 1 Á j:</formula><p>In the above SS-CKA experiment of PEFKS, algorithm SysGðk; WÞ is first run to generate the public-secret key pairs. The public key is sent to adversary A. In the "find" phase of A, it takes the public key P K P EFKS as input, and outputs two challenging keywords W Ã 0 and W Ã 1 , and any "state" information. During the "find" phase, adversary A can get the fuzzy keyword search trapdoor of any keyword by querying the oracle Q F T ðÁÞ. With a random bit b as input, the experiment generates a PEFKS ciphertext C Ã to challenge A. To answer this challenge, adversary A in the "guess" phase takes as inputs the ciphertexts C Ã and the "state" information, and outputs a guess bit b 0 as a candidate answer of b. During the "guess" phase, adversary A can also arbitrarily query the oracle Q F T ðÁÞ. Finally, adversary A's guess bit b 0 is a valid output of the experiment if A has never queried the fuzzy keyword search trapdoors of W Ã 0 and W Ã 1 . The SS-CKA security says that A has negligible opportunity to distinguish the experiment with a secret bit b ¼ 1 as input from the experiment with b ¼ 0 as input. That is, A does not know the challenging ciphertext corresponds to which keyword. In this way, certain keyword privacy is guaranteed for the receivers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">IK-NCK-KGA Security Definition of PEFKS</head><p>IK-NCK-KGA is a stronger security notion than SS-CKS by allowing the adversary to access (partial information about) the keyword search trapdoors of the challenging words. In PEFKS, a KGA adversary (i.e., the storage server) can know the fuzzy keyword search trapdoors of the keywords. Accordingly, to define the IK-NCK-KGA security of PEFKS, the adversary is allowed to additionally access the fuzzy keyword search trapdoors of the keywords which are likely to be hidden in the challenging ciphertext. An IK-NCK-KGA secure PEFKS scheme requires that such a KGA adversary cannot determine the challenging ciphertext is the encryption of which keyword among the keywords having the same fuzzy keyword search trapdoor, even if the KGA adversary knows this fuzzy keyword search trapdoor. We formally define the IK-NCK-KGA security of PEFKS as follows.  , where</p><formula xml:id="formula_4">Adv IK-NCKÀKGA P EFKS;A ¼ j Pr À EXP IK-NCK-KGA-1 P EF KS;A ðkÞ ¼ 1 Á À Pr À EXP IK-NCK-KGA-0 P EFKS;A ðkÞ ¼ 1 Á j:</formula><p>The IK-NCK-KGA experiment is similar to the SS-CKA experiment of PEFKS. Their main difference lies in the condition of a valid guess bit b 0 . In the IK-NCK-KGA experiment of PEFKS, the guess b 0 of adversary A is valid, if the two challenging keywords chosen by A have the same fuzzy keyword search trapdoor; also, adversary A can query the fuzzy keyword search trapdoors of the challenging keywords. The IK-NCK-CKA security states that A has negligible opportunity to distinguish the experiment with a secret bit b ¼ 1 as input from the experiment with b ¼ 0 as input, even if A is additionally allowed to see the fuzzy keyword search trapdoors. That is, A does not know the challenging ciphertext corresponds to which keyword among a set of challenging keywords chosen by A. Note that in the SS-CKA experiment in PEFKS or PEKS, the adversary A is not allowed to know any information about the search trapdoors of the challenging keywords. Hence, the IK-NCK-CKA security notion guarantees stronger keyword privacy for the receiver.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">IBE-TO-PEFKS TRANSFORMATION</head><p>In this section, we propose a universal transformation from anonymous IBE to PEFKS. Then we prove that the resulting PEFKS is SS-CKA and IK-NCK-KGA secure if the underlying IBE is anonymous.</p><p>Assume a keyword space W with a polynomial size. Let E W denote the probability/frequency that the keyword W 2 W occurs. We sort all keywords in a descending order of their probabilities and denote the sorted keywords by W ¼ fW 1 ; W 2 ; . . . ; W jWj g (see Section 5.2 for how to estimate the probability distribution of the keyword space).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Definition of IBE</head><p>Before proposing the universal transformation, we first review the standard definition of IBE <ref type="bibr" target="#b10">[11]</ref>. </p><p>The consistency of IBE implies that for any M 2 M, the above PEFKS satisfies</p><formula xml:id="formula_6">F uzðW 0 ; WÞ ¼ F uzðW; WÞ holds , M ¼ DecryptðMP IBE ; F T W ; C F Þ holds:<label>ð2Þ</label></formula><p>For any PEFKS ciphertext C ¼ CipherGðP K P EF KS ; W 0 Þ, according to equality relationships 1 and 2, we have F uzzT estðP K P EF KS ; F T W ; CÞ returns 1 , F uzðW 0 ; WÞ ¼ F uzðW; WÞ holds:</p><p>The above shows that the resulting PEFKS scheme satisfies the consistency Condition 1. Similarly, one can prove that the above PEFKS also satisfies the consistency Condition 2 defined in Definition 3. Therefore, the above PEFKS construction is consistent if the underlying IBE is consistent. t u</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">SS-CKA Security of the above PEFKS</head><p>The SS-CKA security of the above PEFKS relies on the Anon-ID-CPA security of the underlying IBE. We briefly review the Anon-ID-CPA security definition for IBE as follows: Coarsely speaking, it means that an adversary cannot determine a ciphertext is an encryption to which identity among a set of identities adaptively chosen by the adversary, given that the adversary does not know the secret keys generated for these identities. In the Anon-ID-CPA Experiment of IBE, the experiment is initialized by running SetupðkÞ to generate the master public/secret keys. The master public key is provided to the adversary B. In the "find" phase, B takes the public parameter MP IBE as input, and outputs two challenging identity ID Ã 0 and ID Ã 1 , a challenging plaintext M Ã and any "state" information. During the "find" phase, adversary B can query any identity to the oracle Q Ex ðÁÞ to get the corresponding secret key. According to random input b 2 f0; 1g, the experiment generates an IBE ciphertext C Ã to challenge adversary B. To answer this challenge, adversary B in the "guess" phase takes as inputs the challenging ciphertext C Ã and the "state" information, and outputs a guess bit b 0 of the random input bit b in the experiment. During the "guess" phase, adversary B also can arbitrarily query the oracle Q Ex ðÁÞ. Finally, if adversary B has queried the private key of neither ID Ã 0 nor ID Ã 1 , then adversary B's guess b 0 is said to be a valid output of the experiment.</p><p>The SS-CKA security of the above PEFKS is guaranteed by the following theorem.</p><p>Theorem 2. Let hash function H 1 be modeled as a random oracle.</p><p>Given the above PEFKS scheme, suppose that an adversary A can efficiently break the SS-CKA security of the above PEFKS with advantage Adv SSÀCKA P EFKS;A in the SS-CKA experiment. Then there exists an adversary B efficiently breaking the Anon-ID-CPA security of IBE with advantage at least Proof. We prove the theorem by constructing an algorithm B who invokes adversary A as a black box to break the Anon-ID-CPA security of the underlying IBE with advantage at least Adv Anon-ID-CP A IBE;B ! 1 2 Á Adv SS-CKA P EFKS;A . Algorithm B needs to simulate the services (including the public parameters, the challenging ciphertexts and the oracles) that A can access in the SS-CKA experiment of the PEFKS.</p><p>Let MP IBE be the master public key of the underlying IBE. Assume that Q Ex ðÁÞ and C Ã are the Extraction oracle and the challenging ciphertext defined the above Anon-ID-CPA experiment, respectively. Next, we construct the "find" and "guess" phase of B of the Anon-ID-CPA experiment.</p><p>In the "find" phase, B uses MP IBE to simulate the public key of the PEFKS scheme, and leverages the "find" phase of A to complete its own "find" phase. The details of B in this phase are as follows.</p><p>In the "guess" phase, B takes the challenging ciphertext C Ã to itself to challenge A. Then B takes the guess of A as its output to break the Anon-ID-CPA security of the underlying IBE. The details of B in this phase are as follows.</p><p>In the above phases, B employs the oracle Q Ex ðÁÞ to simulate the oracle Q F T ðW i Þ. The latter can be adaptively queried by A. The details of Q F T ðW i Þ in this simulation are as follows.</p><p>In the above, by exploiting the oracle Q Ex ðÁÞ and the master public key MP IBE , B simulates a real SS-CKA experiment of the PEFKS scheme; and leverage A to break the Anon-ID-CPA security of the underlying IBE. If C Ã E is generated by the keyword W Ã 0 , the experiment simulated by B is the same as the real SS-CKA experiment of the PEFKS. Since the keyword W Ã 0 has a probability 1  2 to be used in generating C Ã E , it follows that</p><formula xml:id="formula_7">Adv Anon-ID-CP A IBE;B ! 1 2 Á Adv SS-CKA P EF KS;A :</formula><p>It can be seen that if A finishes the attack in polynomial time, then B also breaks the Anon-ID-CPA security of the underlying IBE in polynomial time. This completes the proof. Let MP IBE be the master public key of the underlying IBE. Assume that Q Ex ðÁÞ and C Ã are the Extraction oracle and the challenging ciphertext defined in the Anon-ID-CPA experiment, respectively. We next construct the "find" and "guess" phases of B, as defined in the above Anon-ID-CPA experiment of IBE.</p><p>In the "find" phase, B uses MP K IBE to simulate a PEFKS scheme, and leverages the "find" phase of A to find the challenging identities and the challenging plaintext. The details of B in this phase are as follows:</p><p>In the "guess" phase, B takes the challenging ciphertext C Ã as input to simulate the challenging ciphertext defined in the IK-NCK-KGA experiment of PEFKS. Then B challenges A who can efficiently break the IK-NCK-KGA security of the resulting PEFKS, and takes the guess of A as its output to break the Anon-ID-CPA security of the underlying IBE. The details of B in this phase are as follows:</p><p>In the above phases, B uses the oracle Q Ex ðÁÞ to simulate the oracle Q F T ðW i Þ which can be adaptively queried by A in the IK-NCK-CKA experiment of PEFKS. The details of Q F T ðW i Þ in this simulation are as follows:</p><p>In the above, taking as inputs the oracle Q Ex ðÁÞ and the master public key MP IBE , B simulates a real IK-NCK-KGA experiment for the resulting PEFKS; and leverages A to break the Anon-ID-CPA security of the underlying IBE. The experiment simulated by B is the same as the real IK-NCK-KGA experiment of PEFKS. Therefore, we have</p><formula xml:id="formula_8">Adv Anon-ID-CP A IBE;B ! Adv IK-NCK-KGA P EF KS;A :</formula><p>It can be seen that if A breaks the IK-NCK-KGA security of the PEFKS construction in polynomial time, then B breaks the Anon-ID-CPA security of the underlying IBE in polynomial time. This completes the proof. t u</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">IMPLEMENTATION ISSUES</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">An Instantiation of PEFKS</head><p>Following the universal transformation, we instantiate a PEFKS scheme based on the anonymous IBE scheme due to Boneh and Franklin <ref type="bibr" target="#b10">[11]</ref>.</p><p>Our instantiation is built from bilinear pairings briefly reviewed as follows: Let G G and G G t , respectively, denote an additive group and a multiplicative group. Both groups have prime order q. Assume that P is a generator of G G. Let the bilinear map ê : G G Â G G ! G G t <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b23">[24]</ref>, <ref type="bibr" target="#b24">[25]</ref> be an efficiently computable and nondegenerate function with the bilinearity that êðaP ; bP Þ ¼ êðP ; P Þ ab , where fa; bg $ Z Z Ã q . Then, êðP ; P Þ is a generator of G G t . Let the bilinear map generator BGenð1 k Þ be an efficient algorithm that takes as input a security parameter k 2 IN and returns tuple hq; G G; G G t ; P ; êi as specified above. Our instantiation is as follows:</p><p>. SysGðk; WÞ: It takes as inputs a security parameter k and a keyword space W, and works as follows: </p><formula xml:id="formula_9">- Run BGenð1 k Þ to generate hq; G G; G G t ; P ; êi; - Set P pub ¼ sP , where s $ Z Z Ã q ; - Choose two cryptographic hash functions H 1 : f0; 1g Ã ! G G</formula><formula xml:id="formula_10">C F ¼ hr 1 Á P ; H 2 ðêðP 1 ; P pub Þ r 1 Þ È Mi; C E ¼ hr 2 Á P ; H 2 ðêðP 2 ; P pub Þ r2 Þ È Mi:</formula><p>. F uzzT estðP K P EF KS ; F T W i ; hM; C F ; C E iÞ. It takes as inputs the public key P K P EF KS , a fuzzy keyword search trapdoor F T W i and a PEFKS ciphertext hM; C F ; C E i, and works as follows: </p><formula xml:id="formula_11">- Parse C F as hC F ;1 ; C F ;2 i. - Return 1 if M ¼ C F ;2 È H 2 ðêðF T W i ; C F ;</formula><formula xml:id="formula_12">- Parse C E as hC E;1 ; C E;2 i. - Return 1 if M ¼ C E;2 È H 2<label>ðêðET</label></formula><p>Wi ; C E;1 ÞÞ; otherwise, return 0. The consistency of the above PEFKS instance. From Theorem 1, the PEFKS instantiation is consistent since the underlying IBE scheme <ref type="bibr" target="#b10">[11]</ref> satisfies consistency. That is, if all the procedures are run by following the specifications, then the receiver can always receive the matching PEFKS ciphertexts containing the keyword that the receiver requested.</p><p>The security of the above PEFKS instance. From Theorems 2 and 3, the PEFKS instantiation is SS-CKA and IK-NCK-KGA secure since the underlying IBE scheme <ref type="bibr" target="#b10">[11]</ref> is the Anon-ID-CPA secure. The SS-CKA security implies that an adversary cannot know a PEFKS ciphertext corresponds to which keyword without seeing the keyword search trapdoor. The IK-NCK-KGA security guarantees that an adversary cannot distinguish a PEFKS ciphertext of one keyword from another keyword even if the adversary sees the fuzzy keyword search trapdoors, given that these keywords share the same fuzzy keyword trapdoor. These security properties protect the keyword privacy for the receiver.</p><p>Performance comparison. To obtain stronger keyword privacy, PEFKS divides a regular query from the receiver into two processes. In the first process, the storage server tests all the stored ciphertexts with a fuzzy keyword search trapdoor, and returns a superset of the matching ciphertexts to the receiver. In the second process, the receiver locally tests the superset of the ciphertexts returned by the server with an exact keyword search trapdoor, and finally outputs the matching ciphertexts containing the requested keyword. In contrast, PEKS has only an exact keyword search executed by the server over all stored ciphertexts. Hence, a PEFKS scheme generally doubles the cost of a PEKS scheme as its counterpart without postsearch keyword privacy. We summarize this performance comparison in Table <ref type="table" target="#tab_5">1</ref>. Here, the time and communication costs are denoted by the number of keyword searchable ciphertexts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Sorting the Keyword Space</head><p>Before generating a PEFKS cryptosystem, it is necessary to sort all keywords in the keyword space according to their probabilities. For a uniformly distributed keyword space, each keyword has the same probability. So the uniformly distributed keyword space can be directly taken as input to generate a PEFKS cryptosystem. But it is not clear how to sort the non-uniformly distributed keyword space.</p><p>In this section, we employ two approaches to sort the nonuniformly distributed keyword space. They are as follows:</p><p>1. The SubtlexUS <ref type="bibr" target="#b25">[26]</ref> project proposed a new and improved word frequency measure, and counted the frequencies of more than 60,384 words. Their results can be downloaded from webpage <ref type="bibr" target="#b26">[27]</ref>. By their results, we can sort the keyword space according to the descending order of the frequencies. But this method just be effective for the keyword consisting of only one word. 2. For the keyword consisting of more than one word, we can estimate the frequencies of keyword by internet search engine Google. This method was proposed in <ref type="bibr" target="#b27">[28]</ref>. And then, we sort the keyword space according to the descending order of the frequencies. Although this method cannot exactly estimate the frequencies of keywords, it is enough for us to decide which one of any two keywords has higher probability to be used, and then sort the keyword space according to these decisions. For example, let the keyword space W consist of 50 American states. We do the exact search on Google by searching "state_name State" for each state name. Table <ref type="table" target="#tab_6">2</ref> lists these states and their approximate frequencies. Moreover, it is enough for us to decide the order of them. Table <ref type="table" target="#tab_6">2</ref> also sorts these states in the descending order of their frequencies.</p><p>In addition to the above approaches, depending on the applications, one can also sort the keyword space in other ways. For instance, consider an encrypted database in which all citizens' addresses are stored in ciphertexts, and the database provider provides keyword search on the encrypted addresses. In this scenario, it seems appropriate to sort the keywords (i.e., the American states in the above example) according to the population of in these states. One can extend this approach to sort keyword space for different applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">The Fuzzy Function Design</head><p>Let W be the keyword space with size jWj. In the above IBEto-PEFKS transformation, the function F uzðW; WÞ takes as inputs a keyword W 2 W and the keyword space W, outputs a keyword set containing W . Without loss of generality, we assume that F uzðW; WÞ ¼ hW ; W 0 i, where W 0 2 W and W 6 ¼ W 0 . Let E W &gt; 0 denote the probability of any keyword W 2 W and F T W denote the fuzzy keyword search trapdoor of any keyword W 2 W. According to the SS-CKA and IN-NCK-KGA securities of the above IBE-to-PEFKS transformation, an adversary who knows F T W can decide whether a fuzzy keyword searchable ciphertext is an encryption of the keyword belonging to hW; W 0 i. But it cannot deterministically decide whether a fuzzy keyword searchable ciphertext is an encryption of the keyword W not the keyword W 0 . Moreover, more higher the min-entropy of hW; W 0 i is, more harder the adversary make the decision. Therefore, to maximize the min-entropy of hW ; W 0 i in the view of the adversary, we sort the keyword space W before taking it as an input of the function F uzðÃ; WÞ.</p><p>In the above IBE-to-PEFKS transformation, we sort the keyword space in the descending order of the probabilities of all keywords. Let us denote the sorted keyword space as W ¼ fW 1 ; W 2 ; . . . ; W jWj g, in which E Wi ! E Wj for any keywords W i and W j . Next, we prove that taking the sorted keyword space W as input, the outputs of the function F uzðÃ; WÞ have the maximum min-entropy for the adversary who knows the fuzzy keyword search trapdoors of all keywords.  Suppose that there is an optimal function F uz 0 ðW i ; WÞ. It takes a keyword W i 2 W and the sorted keyword space W as input and then outputs hW i ; W j i, where W j 2 W and W i 6 ¼ W j . Moreover, the min-entropy À log</p><formula xml:id="formula_13">E W i EW i þEW iþ1</formula><p>of the set hW i ; W j i is maximum for the adversary who knows the fuzzy keyword search trapdoor of all keywords. We will prove that F uz 0 ðW i ; WÞ ¼ F uzðW i ; WÞ for any keyword W i .</p><p>First, we prove that if the set hW i ; W j i has the maximum min-entropy for the adversary, W j is either W iÀ1 or W iþ1 , where 2 i jWj À 1. In other words, we prove that the following equations are true.</p><formula xml:id="formula_14">À log E W1 E W1 þ E Wi Á Á Á À log E WiÀ1 E WiÀ1 þ E Wi À log E W i E W i þ E W iþ1 ! Á Á Á ! À log E W i E W i þ E W jWj Claim 1: À log EW 1 EW 1 þEW i Á Á Á À log EW iÀ1 EW iÀ1 þEW i is true.</formula><p>Proof. We can prove this claim by the following deduction:</p><formula xml:id="formula_15">À log E W 1 E W 1 þ E W i Á Á Á À log E W iÀ1 E W iÀ1 þ E W i , E W1 E W1 þ E Wi ! Á Á Á ! E WiÀ1 E WiÀ1 þ E Wi , 1 1 þ EW i E W 1 ! Á Á Á ! 1 1 þ EW i E W iÀ1 , E Wi E W1 Á Á Á E Wi E WiÀ1 , E W1 ! Á Á Á ! E WiÀ1: Because E W1 ! Á Á Á ! E WiÀ1 is true, Claim 1 also is true. t u Claim 2: À log EW i EW i þEW iþ1 ! Á Á Á ! À log EW i EW i þEW jWj is true.</formula><p>Proof. We can prove this claim by the following deduction:</p><formula xml:id="formula_16">À log E W i E Wi þ E Wiþ1 ! Á Á Á ! À log E W i E Wi þ E W jWj , E Wi E Wi þ E Wiþ1 Á Á Á E Wi E Wi þ E W jWj , 1 1 þ E W iþ1 E W i Á Á Á 1 1 þ E W jWj E W i , E Wiþ1 E W i ! Á Á Á ! E W jWj E W i , E W iþ1 ! Á Á Á ! E W jWj : Because E Wiþ1 ! Á Á Á ! E W jWj is true, Claim 2 also is true. t u</formula><p>Second, we prove that for any two keywords W i and W j 2 W, either F uz 0 ðW i ; WÞ ¼ F uz 0 ðW j ; WÞ or F uz 0 ðW i ; WÞ ^F uz 0 ðW j ; WÞ ¼ ; is true. Suppose that there is a keyword W x 2 W has F uz 0 ðW i ; WÞ ¼ hW i ; W x i and F uz 0 ðW j ; WÞ ¼ hW j ; W x i. If the min-entropy of hW i ; W x i is less than the min-entropy of hW j ; W x i, the adversary who knows F T Wi can deterministically decide that the fuzzy keyword searchable ciphertext of W i is an encryption of W i , since a fuzzy keyword searchable ciphertext of W x cannot pass the fuzzy test of F T Wi . Due to the similar reason, if the min-entropy of hW j ; W x i is less than the minentropy of hW i ; W x i, the adversary who knows F T Wj can deterministically decide that the fuzzy keyword searchable ciphertext of W j is an encryption of W j . Therefore, for any two keywords W i and W j 2 W, either F uz 0 ðW i ; ¼ F uz 0 ðW j ; WÞ or F uz 0 ðW i ; WÞ ^F uz 0 ðW j ; WÞ ¼ ; is true, when an adversary knows the fuzzy keyword search trapdoors of all keywords.</p><p>Third, we prove that if jWj is an odd number and more than 2, F uz 0 ðW i ; WÞ ¼ hW jWjÀ2 ; W jWjÀ1 ; W jWj i is better for i ! jWj À 2. According to the above proof in the second part, if F uz 0 ðW i ; WÞ ¼ hW jWjÀ2 ; W jWjÀ1 i and F uz 0 ðW i ; WÞ ¼ hW jWjÀ1 ; W jWj i, it is insecure for the adversary who knows the fuzzy keyword search trapdoors of all keywords. So there are two methods to solve the insecurity: the first one is to let F uz 0 ðW i ; WÞ ¼ hW jWjÀ2 ; W jWjÀ1 ; W jWj i for i ! jWj À 2; the other one is to let F uz 0 ðW i ; WÞ ¼ hW 1 ; W 2 ; W 3 i for i 3. It is obvious that the first method is more efficient in practice.</p><p>We now prove that F uz 0 ðW i ; WÞ ¼ F uzðW i ; WÞ for any keyword W i . According to the above proof in the first part, we have F uz 0 ðW 1 ; WÞ ¼ hW 1 ; W 2 i ¼ F uzðW 1 ; WÞ. According to the second proof, we have F uz 0 ðW 2 ; WÞ ¼ hW 1 ; W 2 i ¼ F uzðW 2 ; WÞ. According to the proofs in the first and second parts, we have F uz 0 ðW 3 ; WÞ ¼ hW 3 ; W 4 i ¼ F uzðW 3 ; WÞ. Due to the same reason, we have F uz 0 ðW i ; WÞ ¼ F uzðW i ; WÞ for any keyword W i 2 W and i &lt; jWj À 2. If jWj is an even number, we further have F uz 0 ðW i ; WÞ ¼ F uzðW i ; WÞ for i ! jWj À 2 by the same reason. If jWj is an odd number and more than 3, we have F uz 0 ðW i ; WÞ ¼ F uzðW i ; WÞ for i ! jWj À 2 according to the proof in the third part. Consequently, F uz 0 ðW i ; WÞ ¼ F uzðW i ; WÞ holds for any keyword W i 2 W.</p><p>By summing up the above proofs, if the keyword space W is sorted in a descending order and the fuzzy function F uzðÞ is defined as in the construction, the output F uzðÃ; WÞ has the maximum min-entropy to the adversary who knows the fuzzy keyword search trapdoor of all keywords.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUDING REMARKS</head><p>Considering the polynomial size of the keyword space in the real world, this paper investigated the insecurity of PEKS under keyword guessing attack. Motivated by this, we proposed the new primitive of PEFKS to resist KGA and formalized the SS-CKA and the IK-NCK-KGA securities of PEFKS, followed with a universal transformation from anonymous IBE to PEFKS. We proved that the resulting PEFKS is SS-CKA and the IK-NCK-KGA secure if the underlying IBE is Anon-ID-CPA secure. Following the generic construction, we instantiated a secure PEFKS scheme based the anonymous IBE scheme in <ref type="bibr" target="#b10">[11]</ref>. We further studied how to sort the keywords if they are not uniformly distributed. Finally, it was shown that the outputs of any other fuzzy function do not have minentropy greater than the outputs of our fuzzy function. This implies that our fuzzy function is optimal and produces the maximum min-entropy to the adversary who knows the fuzzy keyword search trapdoors of all keywords.</p><p>In both existing PEKS schemes and our keyword privacy enhanced PEFKS scheme, the search takes time linear in the size of the database storing the keyword searchable ciphertexts. This is unaffordable if the database is large. Hence, it is an interesting to reduce the search time in both PEKS and PEFKS schemes. We leave this for future work.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Definition 5 (</head><label>5</label><figDesc>IK-NCK-KGA Security of PEFKS). Let b $ f0; 1g. A PEFKS scheme is IK-NCK-KGA secure if any adversary A, associated with the experiment</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. SS-CKA experiment of PEFKS.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Definition 7 (</head><label>7</label><figDesc>Anon-ID-CPA Security of IBE). Let b $ f0; 1g. An IBE scheme is Anon-ID-CPA secure if any adversary B, associated with the experiment EXP Anon-ID-CP A-b IBE;B ðkÞ in Fig. 3, has a negligible advantage Adv Anon-ID-</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Anon-ID-CPA experiment of IBE.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>t u 4 . 5 Theorem 3 .</head><label>453</label><figDesc>IK-NCK-KGA Security of the above PEFKS We next discuss the IK-NCK-KGA security of our generic PEFKS construction. It is guaranteed by the following theorem. Let hash function H 1 be modeled as a random oracle. Suppose that an adversary A can efficiently break the IK-NCK-KGA security of our PEFKS with advantage Adv IK-NCK-KGA P EFKS;A in the IK-NCK-KGA experiment. Then there exists an adversary B efficiently breaking the Anon-ID-CPA security of IBE with advantage at least Adv Anon-ID-CP A IBE;B ! Adv IK-NCK-KGA P EF KS;A : Proof. We show how to construct algorithm B who leverages adversary A to break the Anon-ID-CPA security of IBE with advantage at least Adv Anon-ID-CP A IBE;B ! Adv IK-NCK-KGA P EF KS;A : Algorithm B needs to simulate the services (including the public parameters, the challenging ciphertexts and the oracles) that A can access in the IK-NCK-KGA experiment.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>. Generate a keyword searchable ciphertext C of W i by running CipherGðP K P EKS ; W i Þ. 3. If ExactT estðP K P EKS ; T W ; CÞ ¼ 1, then return W i ; 4. If i 6 ¼ jWj, set i ¼ i þ 1 and go to step 2; otherwise, it returns "?." Insecurity of PEKS under KGA. For the valid keyword search trapdoor T W ¼ T rapdoorðSK P EKS ; WÞ of any W 2 W, the output W i of the above KGA adversary is exactly W according to the consistency of PEKS. When jWj P loyðkÞ, a KGA adversary will efficiently finish the attack because the most time-consuming step is to generate the ciphertexts of the keywords in the keyword space. This can be done in polynomial time if jWj P loyðkÞ. Hence, a dishonest searcher (i.e.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head></head><label></label><figDesc>scheme should satisfy the consistency, which states that, for any PEFKS ciphertext C ¼ CipherGðP K P EF KS ; W 0 Þ, it holds that: 1. F uzzT estðP K P EFKS ; F T W ; CÞ returns 1, if and only if F uzðW 0 ; WÞ ¼ F uzðW ; WÞ. 2. ExactT estðP K P EFKS ; ET W ; CÞ returns 1, if and only</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Definition 6 (IBE). An IBE scheme consists of following PPT algorithms: . ðMP IBE ; MS IBE Þ SetupðkÞ. Take as input a security parameter k 2 IN, output a pair of master public/ secret keys ðMP IBE ; MS IBE Þ. Here, MP IBE includes the description of a plaintext space M and an identity space ID. . SK ID ExtractðMS IBE ; IDÞ. Take as inputs MS IBE and an identity ID 2 ID, output the secret key SK ID of ID for a user having identity ID. . C EncryptðMP IBE ; ID; MÞ. Take as inputs MP IBE , an identity ID 2 ID, and a plaintext M 2 M, output a ciphertext C. . M DecryptðMP IBE ; SK ID ; CÞ. Take as inputs MP IBE , a private key SK ID and a ciphertext C, output a plaintext M. An IBE scheme should satisfy consistency which states that for any M 2 M, DecryptðMP IBE ; SK ID ; CÞ ¼ M holds if and only if C ¼ EncryptðMP IBE ; ID; MÞ. Output a public-secret key pair ðP K P EF KS , SK P EFKS Þ, where P K P EF KS ¼ hMP IBE ; F uz; H 1 ; Wi; SK P EFKS ¼ MS IBE : . DT rapdoorðSK P EFKS ; W i Þ. Take as inputs the secret key SK P EF KS and a keyword W i 2 W, output a fuzzy keyword search trapdoor F T Wi and an exact keyword search trapdoor ET Wi , where EncryptðMP IBE ; H 1 ðF uzðW i ; WÞÞ; MÞ; C E ¼ EncryptðMP IBE ; H 1 ðW i Þ; MÞ: . F uzzT estðP K P EFKS ; F T Wi ; hM; C F ; C E iÞ. Take as inputs the public key P K P EF KS , a fuzzy keyword search trapdoor F T Wi and a PEFKS ciphertext hM; C F ; C E i; return</figDesc><table><row><cell cols="2">(</cell><cell>1; if M ¼ DecryptðMP IBE ; F T Wi ; C F Þ;</cell></row><row><cell></cell><cell></cell><cell>0; otherwise:</cell></row><row><cell cols="3">. ExactT estðP K P EFKS ; ET Wi ; hM; C F ; C E iÞ. Take as</cell></row><row><cell cols="3">inputs the public key P K P EF KS , an exact search Fig. 2. IK-NCK-KGA experiment of PEFKS. trapdoor ET Wi and a PEFKS ciphertext hM; C F ; C E i;</cell></row><row><cell cols="3">return</cell></row><row><cell>&amp;</cell><cell cols="2">0; otherwise: 1; if M ¼ DecryptðMP K IBE ; ET W i ; C E Þ;</cell><cell>4.2 A Universal Transformation</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Given an IBE scheme IBE ¼ ðSetup; Extract; Encrypt;</cell></row><row><cell cols="3">4.3 Consistency of the above PEFKS</cell><cell>DecryptÞ, the universal transformation from IBE to PEFKS</cell></row><row><cell cols="3">The consistency of the above PEFKS is guaranteed by the</cell><cell>is as follows:</cell></row><row><cell cols="3">following theorem.</cell></row><row><cell></cell><cell></cell><cell></cell><cell>8 &gt; &lt; &gt; :</cell><cell>hW iÀ1 ; W i i; hW i ; W iþ1 i;</cell><cell>if i is even; if i is odd:</cell></row></table><note><p>. SysGðk; WÞ. Take as inputs a security parameter k 2 IN and the keyword space W; set an identity space ID ¼ W; run the algorithm SetupðkÞ of IBE to generate ðMP IBE ; MS IBE Þ, where MP IBE contains the identity space ID; choose a cryptographic hash function H 1 : f0; 1g Ã ! ID; define the function F uzðW i ; WÞ as -If jWj is even, F uzðW i ; WÞ outputs hW iÀ1 ; W i i; if i is even; hW i ; W iþ1 i; if i is odd: &amp; -Otherwise, F uzðW i ; WÞ outputs hW jWjÀ2 ; W jWjÀ1 ; W jWj i; if i ! jWj À 2; F T Wi ¼ ExtractðMS IBE ; H 1 ðF uzðW i ; WÞÞ; ET W i ¼ ExtractðMS IBE ; H 1 ðW i ÞÞ: . CipherGðP K P EF KS ; W i Þ. Take as inputs the public key P K P EF KS and a keyword W i 2 W; choose a message M $ M and output a PEFKS ciphertext hM; C F ; C E i, where C F ¼ Theorem 1. The above PEFKS construction is consistent if the underlying IBE is consistent. Proof. We first prove that the above PEFKS satisfies the consistency Condition 1 defined in Definition 3. For any PEFKS ciphertext C ¼ CipherGðP K P EFKS ; W 0 Þ, parse C into hM; C F ; C E i, where M $ M; C F ¼ EncryptðMP IBE ; H 1 ðF uzðW 0 ; WÞÞ; MÞ; C E ¼ EncryptðMP IBE ; H 1 ðW 0 Þ; MÞ: According to the above IBE-to-PEFKS transformation, we have F uzzT estðP K P EFKS ; F T W ; CÞ returns 1 , M ¼ DecryptðMP IBE ; F T W ; C F Þ holds:</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head></head><label></label><figDesc>CipherGðP K P EF KS ; W i Þ. It takes as inputs the public key P K P EF KS and a keyword W i 2 W, and works as follows: Compute P 1 ¼ H 1 ðF uzðW i ; WÞÞ and P 2 ¼ H 1 ðW i Þ; and -Generate a fuzzy keyword searchable ciphertext hM; C F ; C E i, where</figDesc><table><row><cell>and H 2 : G G t ! M; and Generate a public-secret key pair P K P EF KS ¼ hq; G G; G G t ; P ; ê; P pub ; F uz; H 1 ; H 2 ; W; Mi; SK P EF KS ¼ s; where M ¼ f0; 1g n and n 2 IN. . DT rapdoorðSK P EF KS ; W ---</cell><cell>Choose a message M numbers fr 1 ; r 2 g $ Z Z Ã q ;</cell><cell>$ M and two random</cell></row></table><note><p><p>i Þ: It takes as inputs the secret key SK P EF KS and a keyword W i 2 W, and works as follows: -Compute the fuzzy keyword search trapdoor F T Wi ¼ s Á H 1 ðF uzðW i ; WÞÞ; -Compute the exact keyword search trapdoor ET Wi ¼ s Á H 1 ðW i Þ; and -Return fF T W i ; ET W i g.</p>.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head></head><label></label><figDesc>1 ÞÞ; otherwise, return 0. . ExactT estðP K P EF KS ; ET W i ; hM; C F ; C E iÞ. It takes as inputs the public key P K P EF KS , an exact keyword search trapdoor ET Wi and a PEFKS ciphertext hM; C F ; C E i, and works as follows:</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head>TABLE 1 Performance</head><label>1</label><figDesc>Comparison between PEKS and PEFKSn is the total number of keyword searchable ciphertexts stored in the server. t is the average number of keyword searchable ciphertexts matching the query of the receiver.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6"><head>TABLE 2</head><label>2</label><figDesc>Frequencies of 50 American States by Searching Them on the Internet Search Engine Google R. denotes the descending order according to the frequencies of states. F. denotes the frequencies of above 50 states when searching them in the Internet search engine Google. The unit of F. is million.</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>IEEE TRANSACTIONS ON COMPUTERS, VOL. 62, NO. 11, NOVEMBER 2013</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGMENTS</head><p>The authors would like to thank the reviewers for their valuable suggestions that helped to improve this paper. Peng Xu was partly supported by the National Natural Science Foundation of China under grant no. 61100222, the China Postdoctoral Science Foundation under grant no. 20100480900. Hai Jin was partly supported by the National Program on Key Basic Research Project (973 Program, no. 2014CB340600) and the National High-Tech R&amp;D Program (863 Program, no. 2012AA012600). Qianhong Wu was partly supported by the EU FP7 through projects "DwB" and "Inter-Trust"; by the Spanish Government through projects CTV-09-634, PTA2009-2738-E, TSI-020302-2010-153, TIN2009-11689, TIN2011-27076-C03-01, CONSOLIDER INGENIO 2010 "ARES" CSD2007-0004, and TSI2007-65406-C03-01; and by the National Natural Science Foundation of China under grants nos. 61370190, 61173154, and 61003214. Wei Wang was partly supported by the National Program on Key Basic Research Project (973 Program) under grant no. 2012CB315904 and by the National Natural Science Foundation of China under grant no. 61179028.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Qianhong Wu received the PhD degree in cryptography from Xidian University in 2004. Since then, he has been with Wollongong University, Australia, as an associate research fellow, with Wuhan University, China, as an associate professor, and with the Universitat Rovira i Virgili, Spain, as a research director. His research interests include cryptography, information security and privacy, cloud computing security, and ad hoc network security. He has been a holder/coholder of six China/Australia/Spain funded projects. He has authored five patents and more than 85 publications. He has served on the program committee of several international conferences and on the editorial board of ISI JCR. He is a member of the IEEE and the IACR.</p><p>Wei Wang received the PhD degree in electronic and communication engineering from the Huazhong University of Science and Technique, Wuhan, China, in 2011. She is currently a postdoctoral researcher at Peking University, Beijing, China. Her research interests include cloud security, network coding, and multimedia transmission.</p><p>. For more information on this or any other computing topic, please visit our Digital Library at www.computer.org/publications/dlib.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Cryptographic Cloud Storage</title>
		<author>
			<persName><forename type="first">S</forename><surname>Kamara</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Lauter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 14th Int&apos;l Conf. Financial Cryptography and Data Security (FC &apos;10)</title>
		<meeting>14th Int&apos;l Conf. Financial Cryptography and Data Security (FC &apos;10)</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="136" to="149" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Practical Techniques for Searches on Encrypted Data</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">X</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Perrig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Symp. Security and Privacy</title>
		<meeting>IEEE Symp. Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="44" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Secure Indexes</title>
		<author>
			<persName><forename type="first">E.-J</forename><surname>Goh</surname></persName>
		</author>
		<ptr target="http://eprint.iacr.org/2003/216.pdf" />
	</analytic>
	<monogr>
		<title level="j">Cryptology ePrint Archive: Report</title>
		<imprint>
			<date type="published" when="2003">2003/216. 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Order Preserving Encryption for Numeric Data</title>
		<author>
			<persName><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGMOD Int&apos;l Conf. Management of Data</title>
		<meeting>ACM SIGMOD Int&apos;l Conf. Management of Data</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="563" to="574" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Searchable Symmetric Encryption: Improved Definitions and Efficient Constructions</title>
		<author>
			<persName><forename type="first">R</forename><surname>Curtmola</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 13th ACM Conf. Computer and Comm. Security</title>
		<meeting>13th ACM Conf. Computer and Comm. Security</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="79" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Public Key Encyrption with Keyword Search</title>
		<author>
			<persName><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Ann. Int&apos;l Advances in Cryptology (EUROCRYPT &apos;04)</title>
		<meeting>Ann. Int&apos;l Advances in Cryptology (EUROCRYPT &apos;04)</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="506" to="522" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Searching Encrypted Data</title>
		<author>
			<persName><forename type="first">W</forename><surname>Harrower</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">technical report, Dept. of Computing</title>
		<imprint>
			<date type="published" when="2009">2009</date>
			<pubPlace>Imperial College London</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Offline Keyword Guessing Attacks on Recent Keyword Search Schemes over Encrypted Data</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">W</forename><surname>Byun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Third VLDB Int&apos;l Conf. Secure Data Management</title>
		<meeting>Third VLDB Int&apos;l Conf. Secure Data Management</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="75" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Public Key Encryption with Conjunctive Field Keyword Search</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">J</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Fifth Int&apos;l Conf. Information Security Applications (WISA &apos;04)</title>
		<meeting>Fifth Int&apos;l Conf. Information Security Applications (WISA &apos;04)</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
			<biblScope unit="page" from="73" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Constructing PEKS Schemes Secure against Keyword Guessing Attacks Is Possible?</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">R</forename><surname>Jeong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Comm</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="394" to="396" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Identity-Based Encryption from the Weil Pairing</title>
		<author>
			<persName><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Franklin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 21st Ann. Int&apos;l Advances in Cryptology (CRYPTO &apos;01)</title>
		<meeting>21st Ann. Int&apos;l Advances in Cryptology (CRYPTO &apos;01)</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="213" to="239" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Searchable Encryption Revisited: Consistency Properties, Relation to Anonymous IBE, and Extensions</title>
		<author>
			<persName><forename type="first">M</forename><surname>Abdalla</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Ann. Int&apos;l Advances in Cryptology (CRYPTO &apos;05)</title>
		<meeting>Ann. Int&apos;l Advances in Cryptology (CRYPTO &apos;05)</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="205" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Anonymous Hierarchical Identity-Based Encryption (without Random Oracles)</title>
		<author>
			<persName><forename type="first">X</forename><surname>Boyen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Waters</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Ann. Int&apos;l Advances in Cryptology (CRYPTO &apos;06)</title>
		<meeting>Ann. Int&apos;l Advances in Cryptology (CRYPTO &apos;06)</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="290" to="307" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Practical Identity-Based Encyrption without Random Oracles</title>
		<author>
			<persName><forename type="first">C</forename><surname>Gentry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Ann. Int&apos;l Advances in Cryptology (EUROCRYPT &apos;06)</title>
		<meeting>Ann. Int&apos;l Advances in Cryptology (EUROCRYPT &apos;06)</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page" from="445" to="464" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Anonymity from Asymmetry: New Constructions for Anonymous Hibe</title>
		<author>
			<persName><forename type="first">L</forename><surname>Ducas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int&apos;l Conf. Topics in Cryptology (CT-RSA &apos;10)</title>
		<meeting>Int&apos;l Conf. Topics in Cryptology (CT-RSA &apos;10)</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="148" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Anonymous Multireceiver Identity-Based Encryption</title>
		<author>
			<persName><forename type="first">C.-I</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L.-Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P.-H</forename><surname>Ho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Computers</title>
		<imprint>
			<biblScope unit="volume">59</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1239" to="1249" />
			<date type="published" when="2010-09">Sept. 2010</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Achieving Efficient Conjunctive Keyword Searches over Encrypted Data</title>
		<author>
			<persName><forename type="first">L</forename><surname>Ballard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Kamara</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Monrose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Seventh Int&apos;l Conf. Information and Comm. Security (ICICS &apos;05)</title>
		<meeting>Seventh Int&apos;l Conf. Information and Comm. Security (ICICS &apos;05)</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="414" to="426" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Efficient Conjunctive Keyword-Searchable Encryption</title>
		<author>
			<persName><forename type="first">E.-K</forename><surname>Ryu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Takagi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 21st Int&apos;l Conf. Advanced Information Networking and Applications Workshops (AINAW &apos;07)</title>
		<meeting>21st Int&apos;l Conf. Advanced Information Networking and Applications Workshops (AINAW &apos;07)</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="409" to="414" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Public Key Encryption with Conjunctive Keyword Search and Its Extension to a Multi-User System</title>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">H</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Pairing Based Cryptography Conf</title>
		<meeting>Pairing Based Cryptography Conf</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="2" to="22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Anonymous Multi-Attribute Encryption with Range Query and Conditional Decryption</title>
		<author>
			<persName><forename type="first">J</forename><surname>Bethencourt</surname></persName>
		</author>
		<idno>CMU-CS-06-135</idno>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon Univ.</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Multidimensional Range Query over Encrypted Data</title>
		<author>
			<persName><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<idno>CMU-CS-06-135</idno>
		<imprint>
			<date type="published" when="2007">2007</date>
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon Univ.</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Conjunctive, Subset, and Range Queries on Encrypted Data</title>
		<author>
			<persName><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Waters</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Fourth Conf. Theory of Cryptography (TCC &apos;07)</title>
		<meeting>Fourth Conf. Theory of Cryptography (TCC &apos;07)</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="535" to="554" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Blind and Anonymous Identity-Based Encryption and Authorised Private Searches on Public Key Encrypted Data</title>
		<author>
			<persName><forename type="first">J</forename><surname>Camenisch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 12th Int&apos;l Conf. Practice and Theory in Public Key Cryptography (PKC &apos;09)</title>
		<meeting>12th Int&apos;l Conf. Practice and Theory in Public Key Cryptography (PKC &apos;09)</meeting>
		<imprint>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="196" to="214" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Reducing Elliptic Curve Logarithms to Logarithms in a Finite Field</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Menezes</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Okamoto</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">A</forename><surname>Vanstone</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Information Theory</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1639" to="1646" />
			<date type="published" when="1993-09">Sept. 1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The Tate Pairing and the Discrete Logarithm Applied to Elliptic Curve Cryptosystems</title>
		<author>
			<persName><forename type="first">G</forename><surname>Frey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Muller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H.-G</forename><surname>Ruck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Information Theory</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1717" to="1719" />
			<date type="published" when="1999-07">July 1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Moving Beyond Kucera and Francis: A Critical Evaluation of Current Word Frequency Norms and the Introduction of a New and Improved Word Frequency Measure for American English</title>
		<author>
			<persName><forename type="first">M</forename><surname>Brysbaert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>New</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Behavior Research Methods</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="977" to="990" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">M</forename><surname>Brysbaert</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>New</surname></persName>
		</author>
		<ptr target="http://subtlexus.lexique.org/" />
		<title level="m">SUBTLEXus: American Word Frequencies</title>
		<imprint>
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Peng Xu received the BA degree in computer science from the Wuhan University of Science and Technique, China, in 2003 and the master&apos;s and PhD degrees in computer science from the Huazhong</title>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">V</forename><surname>Blair</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><forename type="middle">R</forename><surname>Urland</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Behavior Research Methods Instruments and Computers</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="286" to="290" />
			<date type="published" when="2002">2002. 2006 and 2010. 2010</date>
			<pubPlace>Wuhan, China; Wuhan, China</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Science and Technique ; Huazhong University of Science and Technique</orgName>
		</respStmt>
	</monogr>
	<note>He received two grants from the National Natural Science Foundation of China and the China Postdoctoral Science Foundation, respectively. He has authored more than 10 research papers. His research is focused on the field of cryptography</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
