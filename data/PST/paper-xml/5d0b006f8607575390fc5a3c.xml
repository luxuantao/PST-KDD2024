<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Adversarial Examples on Graph Data: Deep Insights into Attack and Defense</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Huijun</forename><surname>Wu</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of New South Wales</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Data61</orgName>
								<address>
									<country>CSIRO</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Chen</forename><surname>Wang</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Data61</orgName>
								<address>
									<country>CSIRO</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Yuriy</forename><surname>Tyshetskiy</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Data61</orgName>
								<address>
									<country>CSIRO</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Andrew</forename><surname>Docherty</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Data61</orgName>
								<address>
									<country>CSIRO</country>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName><forename type="first">Kai</forename><surname>Lu</surname></persName>
							<email>kailu@nudt.edu.cn</email>
							<affiliation key="aff2">
								<orgName type="institution">National University of Defense Technology</orgName>
								<address>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Liming</forename><surname>Zhu</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of New South Wales</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Data61</orgName>
								<address>
									<country>CSIRO</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Adversarial Examples on Graph Data: Deep Insights into Attack and Defense</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-01-01T13:44+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Graph deep learning models, such as graph convolutional networks (GCN) achieve remarkable performance for tasks on graph data. Similar to other types of deep models, graph deep learning models often suffer from adversarial attacks. However, compared with non-graph data, the discrete features, graph connections and different definitions of imperceptible perturbations bring unique challenges and opportunities for the adversarial attacks and defenses for graph data. In this paper, we propose both attack and defense techniques. For attack, we show that the discreteness problem could easily be resolved by introducing integrated gradients which could accurately reflect the effect of perturbing certain features or edges while still benefiting from the parallel computations. For defense, we observe that the adversarially manipulated graph for the targeted attack differs from normal graphs statistically. Based on this observation, we propose a defense approach which inspects the graph and recovers the potential adversarial perturbation. Our experiments on a number of datasets show the effectiveness of the proposed methods.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Graph is commonly used to model many real-world relationships, such as social networks <ref type="bibr" target="#b5">[Newman et al., 2002]</ref>, citation networks and transactions <ref type="bibr" target="#b6">[Ron and Shamir, 2013]</ref> and the control-flow of programs <ref type="bibr" target="#b1">[Allen, 1970]</ref>. The recent advance <ref type="bibr" target="#b5">[Kipf and Welling, 2017;</ref><ref type="bibr" target="#b7">Veličković et al., 2018;</ref><ref type="bibr" target="#b2">Cao et al., 2016;</ref><ref type="bibr" target="#b4">Henaff et al., 2015]</ref> in deep learning expands its applications on graph data. One common task on graph data is node classification: for a graph and labels of a portion of nodes, the goal is to predict the labels for the unlabelled nodes. This can be used to classify the unknown roles in the graph. For example, topics of papers in the citation network, customer types in the recommendation systems.</p><p>Compared with the classic methods <ref type="bibr" target="#b1">[Bhagat et al., 2011;</ref><ref type="bibr">Xu et al., 2013]</ref>, deep learning starts to push forward the performance of node classification tasks. The graph convolutional networks <ref type="bibr" target="#b2">[Bruna et al., 2013;</ref><ref type="bibr">Edwards and Xie, 2016]</ref> and its recent variants <ref type="bibr" target="#b5">[Kipf and Welling, 2017]</ref> perform convolution operations in the graph domain by aggregating and combining the information of neighbor nodes. In these works, both node features and the graph structures (i.e., edges) are considered for classifying nodes.</p><p>Deep learning methods are often criticized for their lack of robustness <ref type="bibr" target="#b3">[Goodfellow et al., 2015]</ref>. In other words, it is not difficult to craft adversarial examples by only perturbing a tiny portion of examples to fool the deep neural networks to give incorrect predictions. Graph convolutional networks are no exception. These vulnerabilities under adversarial attacks are major obstacles for deep learning applications to be used in the safety-critical scenarios. In graph neural networks, one node can be a user in the social network or an e-commerce website. A malicious user may manipulate his profile or connect to targeted users on purpose to mislead the analytics system. Similarly, adding fake comments to specific products can fool the recommender systems of a website.</p><p>The key challenge for simply adopting existing adversarial attack techniques used in non-graph data on graph convolutional networks is the discrete input problems. Specifically, the features of the graph nodes are often discrete. The edges, especially those in unweighted graphs, are also discrete. To address this, some recent studies have proposed greedy methods <ref type="bibr">[Wang et al., 2018;</ref><ref type="bibr" target="#b11">Zügner et al., 2018]</ref> to attack the graph-based deep learning systems. A greedy method to perturb either features or graph structure iteratively. Graph structure and features statistics are preserved during the greedy attack. In this paper, we show that although having the discrete input issue, the gradients can still be approximated accurately by integrated gradients. Integrated gradients approximate Shapley values <ref type="bibr" target="#b4">[Hart, 1989;</ref><ref type="bibr" target="#b5">Lundberg and Lee, 2016]</ref> by integrating partial gradients with respect to input features from reference input to the actual input. Integrated gradients greatly improve the efficiency of the node and edge selection in comparison to iterative methods.</p><p>Compared with explorations in attacks, the defense of adversarial examples in graph models is not well-studied. In this paper, we show that one key reason for the vulnerabilities of graph models, such as GCN, is that these models are essentially aggregating the features according to graph structures. They heavily rely on the nearest neighboring information while making predictions on target nodes. We looked into the perturbations made by the existing attack techniques arXiv:1903.01610v3 [cs.LG] 22 May 2019 and found that adding edges which connect to nodes with different features plays the key role in all of the attack methods. In this paper, we show that simply performing pre-processing to the adjacency matrix of the graph is able to identify the manipulated edges. For nodes with bag-of-words (BOW) features, the Jaccard index is effective while measuring the similarities between connected nodes. By removing edges that connect very dissimilar nodes, we are able to defend the targeted adversarial attacks without decreasing the accuracy of the GCN models. Our results on a number of real-world datasets show the effectiveness and efficiency of the proposed attack and defense.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Graph Convolutional Network</head><p>Given an attributed graph G = (A, X ), A ∈ [0, 1] N ×N is the adjacency matrix and X ∈ [0, 1] D represents the D-dimenisonal binary node features. Assuming the indices for nodes and features are V = {1, 2, ..., N } and F = {1, 2, ..., D}, respectively. We then consider the task of semi-supervised node classification where a subset of nodes V L ⊆ V are labelled with labels from classes C = {1, 2, ..., c K }. The target of the task is to map each node in the graph to a class label. This is often called transductive learning given the fact that the test nodes are already known during the training time.</p><p>In this work, we study Graph Convolutional Network (GCN) <ref type="bibr" target="#b5">[Kipf and Welling, 2017]</ref>, a well-established method for semi-supervised node classifications. For GCN, initially, H 0 = X. The GCN model then follows the following rule to aggregate the neighboring features:</p><formula xml:id="formula_0">H (l+1) = σ( D− 1 2 Ã D− 1 2 H (l) W (l) )<label>(1)</label></formula><p>where Ã = A + I N is the adjacency matrix of the graph G with self connections added, D is a diagonal matrix with Di,i = Σ j Ãij , and σ is the activation function to introduce non-linearity. Each of the above equation corresponds to one graph convolution layer. A fully connected layer with softmax loss is usually used after L layers of graph convolution layers for the classification. A two-layer GCN is commonly used for semi-supervised node classification tasks <ref type="bibr" target="#b5">[Kipf and Welling, 2017]</ref>. The model can, therefore, be described as:</p><formula xml:id="formula_1">Z = f (X, A) = softmax( Âσ( ÂXW (0) )W (1) )<label>(2)</label></formula><p>where</p><formula xml:id="formula_2">Â = D− 1 2 Ã D− 1 2 .</formula><p>Â is essentially the symmetrically normalized adjacency matrix. W (0) and W (1) are the input-to-hidden and hidden-to-output weights, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Gradients Based Adversarial Attacks</head><p>Gradients are commonly exploited to attack deep learning models <ref type="bibr" target="#b10">[Yuan et al., 2019]</ref>. One can either use the gradients of the loss function or the gradients of the model output w.r.t the input data to achieve the attacks. Two examples are Fast Gradient Sign Method (FGSM) attack and Jacobianbased Saliency Map Approach (JSMA) attack. Fast Gradient Sign Method (FGSM) <ref type="bibr" target="#b5">[Ian J. Goodfellow, 2014]</ref> generates adversarial examples by performing gradient update along the direction of the sign of gradients of loss function w.r.t each pixel for image data. Their perturbation can be expressed as:</p><formula xml:id="formula_3">η = sign(∇J θ (x, l)) (3)</formula><p>where is the magnitude of the perturbation. The generated example is x = x + η.</p><p>JSMA attack was first proposed in <ref type="bibr">[Papernot et al., 2016]</ref>. By exploiting the forward derivative of a DNN model, one can find the adversarial perturbations that force the model to misclassify the test point into a specific target class. Given a feed-forward neural network F and sample X, the Jacobian is computed by:</p><formula xml:id="formula_4">∇F (X) = ∂F (X) ∂X = ∂F j (X) ∂x i i∈1...M,j∈1...N<label>(4)</label></formula><p>where the dimensions for the model output and input data are M and N , respectively. To achieve a target class t, one wants F t (X) gets increased while F j (X) for all the other j = t to decrease. This is accomplished by exploiting the adversarial saliency map which is defined by:</p><formula xml:id="formula_5">S(X, t)[i] = 0, if ∂Ft(X) ∂Xi &lt; 0 or Σ j =t ∂Fj (X) ∂Xi &gt; 0 ∂Ft(X) ∂Xi |Σ j =t ∂Fj (X) ∂Xi |, otherwise<label>(5)</label></formula><p>Starting from a normal example, the attacker follows the saliency map and iteratively perturb the example with a very tiny amount until the predicted label is flipped. For untargeted attack, one tries to minimize the prediction score for the winning class.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Defense for Adversarial Examples</head><p>Although adversarial attack for a graph is a relatively new topic, a few works have been done as the defense for adversarial images on convolutional neural networks (e.g., <ref type="bibr" target="#b9">[Xu et al., 2018;</ref><ref type="bibr">Papernot and McDaniel, 2018]</ref>). For images, as the feature space is continuous, adversarial examples are carefully crafted with little perturbations. Therefore, in some cases, adding some randomization to the images is able to defend the attacks <ref type="bibr" target="#b8">[Xie et al., 2018]</ref>. Other forms of input pre-processing, such as local smoothing <ref type="bibr" target="#b9">[Xu et al., 2018]</ref> and image compression <ref type="bibr" target="#b6">[Shaham et al., 2018]</ref> have also been used to defend the attacks. These pre-processing works based on the observation that neighboring pixels of natural images are normally similar. Adversarial training <ref type="bibr" target="#b7">[Tramèr et al., 2018]</ref> introduces the generated examples to the training data to enhance the robustness of the model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Integrated Gradients Guided Attack</head><p>Although FGSM and JSMA are not the most sophisticated attack techniques, they are still not well-studied for graph models. For image data, the success of FGSM and JSMA benefits from the continuous features in pixel color space. However, recent explorations in the graph adversarial attack techniques <ref type="bibr" target="#b11">[Zügner et al., 2018;</ref><ref type="bibr" target="#b3">Dai et al., 2018]</ref> show that simply applying these methods may not lead to successful attacks. These work address this problem by either using greedy methods or reinforcement learning based methods which are often expensive.</p><p>The node features in a graph are often bag-of-words kind of features which can either be 1 or 0. The unweighted edges in a graph are also frequently used to express the existence of specific relationships, thus having only 1 or 0 in the adjacency matrix. When attacking the model, the adversarial perturbations are limited to either changing 1 to 0 or vice versa. The main issue of applying vanilla FGSM and JSMA in graph models is the inaccurate gradients. Given a target node t, for FGSM attack, ∇J</p><formula xml:id="formula_6">W (1) ,W (2) (t) = ∂J W (1) ,W (2) (t)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>∂X</head><p>measures the feature importance of all nodes to the loss function value. Here, X is the feature matrix, each row of which describes the features for a node in the graph. For a specific feature i of node n, a larger value of ∇J W (1) ,W (2) in indicates perturbing feature i to 1 is helpful to get the target node misclassified. However, following this gradient may not help for two reasons: First, the feature value might already be 1 so that we could not perturb it anymore; Second, even if the feature value is 0, since a GCN model may not learn a local linear function between 0 and 1 for this feature value, the result of this perturbation is unpredictable. It is also similar for JSMA as the Jacobian of the model shares all the limitations with the gradients of loss. In other words, vanilla gradients suffer from local gradient problems. Take a simple ReLU network f (x) = ReLU (x) as an example, when x increase from 0 to 1, the function value also increases by 1. However, computing the gradient at x = 0 gives 0, which does not capture the model behaviors accurately. To address this, we propose an integrated gradients based method rather than directly using vanilla derivatives for the attacks. Integrated gradients were initially proposed by <ref type="bibr" target="#b6">[Sundararajan et al., 2017]</ref> to provide sensitivity and implementation invariance for feature attribution in the deep neural networks, particularly the convolutional neural networks for images.</p><p>The integrated gradient is defined as follows: for a given model F : R n → [0, 1], let x ∈ R n be the input, x is the baseline input (e.g., the black image for image data). Consider a straight-line path from x to the input x, the integrated gradients are obtained by accumulating all the gradients at all the points along the path. Formally, for the i th feature of x, the integrated gradients (IG) is as follows:</p><formula xml:id="formula_7">IGi(F (x)) ::= (xi − x i ) × 1 α=0 ∂F (x + αx(x − x )) ∂xi dα<label>(6)</label></formula><p>For GCN on graph data, we propose a generic attack framework. Given the adjacency matrix A, feature matrix X, and the target node t, we compute the integrated gradients for function F W (1) ,W (2) (A, X, t) w.r.t I where I is the input for attack. I = A indicates edge attacks while I = X indicates feature attacks. When F is the loss function of the GCN model, we call this attack technique FGSM-like attack with integrated gradients, namely IG-FGSM. Similarly, we call the attack technique by IG-JSMA when F is the prediction output of the GCN model. For a targeted IG-JSMA or IG-FGSM attack, the optimization goal is to maximize the value of F . Therefore, for the features or edges having the value of 1, we select the features/edges which have the lowest negative IG scores and perturb them to 0. The untargeted IG-JSMA attack aims to minimize the prediction score for the winning class so that we try to increase the input dimensions with high IG scores to 0.</p><p>Note that unlike image feature attribution where the baseline input is the black image, we use the all-zero or all-one feature/adjacency matrices to represent the 1 → 0 or 0 → 1 perturbations. While removing a specific edge or setting a specific feature from 1 to 0, we set the adjacency matrix A and feature matrix X to all-zero respectively since we want to describe the overall change pattern of the target function F while gradually adding edges/features to the current state of A and X. On the contrary, to add edges/features, we compute the change pattern by gradually removing edges/features from all-one to the current state, thus setting either A or X to an all-one matrix. To keep the direction of gradients consistent and ensure the computation is tractable, the IG (for edge attack) is computed as follows:</p><formula xml:id="formula_8">IG(F (X, A, t))[i, j] ≈              (Aij − 0) × Σ m k=1 ∂F ( k m ×(A ij −0)) ∂A ij × 1 m , for removing edges (1 − Aij ) × Σ m k=1 ∂F ( k m ×(1−A ij )) ∂A ij × 1 m , for adding edges (7)</formula><p>Algorithm 1 shows the pseudo-code for untargeted IG-JSMA attack. We compute the integrated gradients of the prediction score for winning class c w.r.t the entries of A and X. The integrated gradients are then used as metrics to measure the priority of perturbing specific features or edges in the graph G. Note that the edge and feature values are considered and only the scores of possible perturbations are computed (see Eq.(7)). For example, we only compute the importance of adding edges if the edge does not exist before. Therefore, for a feature or an edge with high perturbation priority, we perturb it by simply flipping it to a different binary value.</p><p>While setting the number of steps m for computing integrated gradients, one size does not fit all. Essentially, more steps are required to accurately estimate the discrete gradients when the function learned for certain features/edges is non-linear. Therefore, we enlarge the number of steps while attacking the nodes with low classification margins until stable performance is achieved. Moreover, the calculation can be done in an incremental way if we increase the number of steps by integer multiples.</p><p>To ensure the perturbations are unnoticeable, the graph structure and feature statistics should be preserved for edge attack and feature attack, respectively. The specific properties to preserve highly depend on the application requirements. For our IG based attacks, we simply check against these application-level requirements while selecting an edge or a feature for perturbation. In practice, this process can be trivial as many statistics can be pre-computed or re-computed incrementally <ref type="bibr" target="#b11">[Zügner et al., 2018]</ref>.</p><p>Algorithm 1: IG-JSMA -Integrated Gradient Guided untargeted JSMA attack on GCN Input: Graph G (0) = (A (0) , X (0) ), target node v0 F : the GCN model trained on G (0) budget ∆: the maximum number of perturbations. Output: Modified graph G = (A , X ). 1 Procedure Attack() 2 //compute the gradients as the perturbation scores for edges and features.  In order to defend the adversarial targeted attacks on GCNs, we first hypothesize that the GCNs are easily attacked due to the fact that the GCN models strongly rely on the graph structure and local aggregations. The model trained on the attacked graph therefore suffers from the attack surface of the model crafted by the adversarial graph. As it is well known that adversarial attacks on deep learning systems are transferable to models with similar architecture and trained on the same dataset. Existing attacks on GCN models are successful as the attacked graphs are directly used to train the new model. Given that, one feasible defense is to make the adjacency matrix trainable. If the edge weights are learned during the training process, they may evolve so that the graph becomes different compared with the graph crafted by the adversary.</p><p>We then verify this idea by making the edge weights trainable in GCN models. In CORA-ML dataset, we select a node that is correctly classified and has the highest prediction score for its ground-truth class. The adversarial graph was constructed by using nettack <ref type="bibr" target="#b11">[Zügner et al., 2018]</ref>. Without any defense, the target node is misclassified with the confidence of 0.998 after the attack. Our defense initializes the weights of the edges just as the adversarial graph. We then train the GCN model without making any additional modifications on the loss functions or other parameters of the model. Interestingly, with such a simple defense method, the target node is correctly classified with high confidence (0.912) after the attack.</p><p>To explain why the defense works, we observe following the characteristics of the attacks: First, perturbing edges is more effective than modifying the features. This is consistent in all the attacks (i.e., FGSM, JSMA, nettack, and IG-JSMA). Feature-only perturbations generally fail to change the predicted class of the target node. Moreover, the attack approaches tend to favour adding edges over removing edges; Second, nodes with more neighbors are more difficult to attack than those with less neighbors. This is also consistent with the observations in <ref type="bibr" target="#b11">[Zügner et al., 2018]</ref> that nodes with higher degrees have higher classification accuracy in both the clean and the attacked graphs.</p><p>Last, the attacks tend to connect the target node to nodes with different features and labels. We find out that this is the most powerful way to perform attacks. We verify this observation using CORA-ML dataset. To measure the similarity of the features, we use the Jaccard similarity score since the features of CORA-ML dataset are bag-of-words. Note that our defense mechanism is generic, while the similarity measures may vary among different datasets. For the graphs with other types of features, such as numeric features, we may use different similarity measures. Given two nodes u and v with n binary features, the Jaccard similarity score measures the overlap that u and v share with their features. Each feature of u and v can either be 0 or 1. The total number of each combination of features for both u and v are specified as follows:</p><p>M 11 is the number of features where both u and v have a value of 1. M 01 is the feature number where the value of the feature is 0 in node u but 1 in node v. Similarly, M 10 is the total number of features which have a value of 1 in node u but 0 in node v. M 00 represents the total number of features which are 0 for both nodes. The Jaccard similarity score is given as</p><formula xml:id="formula_9">J u,v = M 11 M 01 + M 10 + M 11 . (<label>8</label></formula><formula xml:id="formula_10">)</formula><p>We train a two-layer GCN on the CORA-ML dataset and study the nodes that are classified correctly with high probability (i.e., ≥ 0.8). For these nodes, Figure <ref type="figure" target="#fig_2">1</ref> shows the histograms for the Jaccard similarity scores between connected nodes before and after the FGSM attack. The adversarial attack significantly increases the number of neighbors which have low similarity scores to the target nodes. This also stands for nettack <ref type="bibr" target="#b11">[Zügner et al., 2018]</ref>. For example, we enable both feature and edge attacks for nettack and attack the node 200 in the GCN model trained on CORA-ML dataset. Given the node degree of 3, the attack removes the edge 200 → 1582 because node 1582 and node 200 are similar (J 1582,200 = 0.113). Meanwhile, the attacks add edge 200 → 1762 and 200 → 350, and node 200 shares no feature similarity with the two nodes. No features were perturbed in this experiment.</p><p>This result explains our observations. Compared with deep convolutional neural networks (for image data) which have often more layers and parameters than graph neural networks. GNNs, such as GCN for node classifications, are relatively simple. They essentially aggregate the features according to the graph structure. For a target node, an adversarially crafted graph attempts to connect the nodes with different features and labels to pollute the representation of the target node to make the target node less similar to the nodes within its correct class. Correspondingly, while removing edges, the attack tends to remove the edges connecting the nodes that share many similarities to the target node. The edge attacks are more effective due to the fact that adding or removing one edge affects all the feature dimensions during the aggregation. In contrast, modifying one feature only affects one dimension in the feature vector and the perturbation can be easily masked by other neighbors of nodes with high degrees.</p><p>Based on these observations, we make another hypothesis that the above defense approach works because the model assigns lower weights to the edges that connect the target node to the nodes sharing little feature similarity with it. To verify this, we plot the learned weights and the Jaccard similarity scores of the end nodes for the edges starting from the target node (see Figure <ref type="figure" target="#fig_4">2</ref>). Note that for the target node we choose, the Jaccard similarity scores between every neighbor of the target node and itself are larger than 0 in the clean graph. The edges with zero similarity scores are all added by the attack. As expected, the model learns low weights for most of the edges with low similarity scores.  To make the defense more efficient, we do not even need to use learnable edge weights as the defense. Learning the edge weights inevitably introduces extra parameters to the model, which may affect the its scalability and accuracy. A simple approach is potentially as effective based on the following: First, normal nodes generally do not connect to many nodes that share no similarities with it; Second, the learning process essentially assigns low weights to the edges connecting two dissimilar nodes. We therefore propose a simple yet effective defense approach based on the following insight.</p><p>Our defense approach is pre-processing based. We perform a pre-processing on a given graph before training. We check the adjacency matrix of the graph and inspect the edges. All the edges that connect nodes with low similarity score (e.g., = 0) are selected as candidates to remove. Although the clean graph may also have a small number of such edges, we find that removing these edges does little harm to the prediction of the target node. On the contrary, the removal of these edges may improve the prediction in some cases. This is intuitive as aggregating features from nodes that differ sharply from the target often over-smooths the node representations. In fact, a recent study <ref type="bibr" target="#b7">[Wu et al., 2019]</ref> shows that the nonlinearity and multiple weight matrices at different layers do not contribute much to the predictive capabilities of GCN models but introduce unnecessary complexity. <ref type="bibr" target="#b11">[Zügner et al., 2018]</ref> uses a simplified surrogate model to achieve the attacks on GCN models for the same reason. <ref type="bibr" target="#b3">Dai et al. [Dai et al., 2018]</ref> briefly introduces a defense method by dropping some edges during the training. They show this decreases the attack rate slightly. In fact, their method works only when the edges connecting dissimilar nodes are removed. However, this defense fails to differentiate the useful edges from those need to be removed, thus achieving sub-optimal defense performance.</p><p>The proposed defense is computationally efficient as it only makes one pass to the existing edges in the graph, thus having the complexity of O(N ) where N is the number of edges. For large graphs, calculating the similarity scores can be easily parallelized in implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>We use the widely used CORA-ML, CITESEER <ref type="bibr" target="#b1">[Bojchevski and Günnemann, 2018]</ref> and Polblogs <ref type="bibr" target="#b0">[Adamic and Glance, 2005]</ref> datasets. The overview of the datasets is listed below. We split each graph in labeled (20%) and unlabeled nodes (80%). Among the labeled nodes, half of them is used for training while the rest half is used for validation. For the polblogs dataset, since there are no feature attributes, we set the attribute matrix to an identity matrix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Transductive Attack</head><p>As mentioned, due to the transductive setting, the models are not regarded as fixed while attacking. After perturbing either features or edges, the model is retrained for evaluating the attack effectiveness. To verify the effectiveness of the attack, we select the nodes with different prediction scores. Specifically, we select in total 40 nodes which contain the 10 nodes with top scores, 10 nodes with the lowest scores and 20 randomly selected nodes. We compare the proposed IG-JSMA with several baselines including random attacks, FGSM, and nettack. Note that for the baselines, we conducted direct attacks on the features of the target node or the edges directly connected to the target node. Direct attacks achieve much better attacks so that can act as stronger baselines.</p><p>To evaluate how effective is the attack, we use classification margins as the metric. For a target node v, the classification margin of v is Z v,c − max c =c Z v,c where c is the ground truth class, Z v,c is the probability of class c given to the node v by the graph model. A lower classification margin indicates better attack performance. Figure <ref type="figure">3</ref> shows the classification margins of nodes after re-training the model on the modified graph. We found that IG-JSMA outperforms the baselines. More remarkably, IG-JSMA is quite stable as the classification margins have much less variance. Just as stated in <ref type="bibr" target="#b11">[Zügner et al., 2018]</ref>, the vanilla gradient-based methods, such as FGSM are not able to capture the actual change of loss for discrete data. Similarly, while used to describe the saliency map, the vanilla gradients are also not accurate.</p><p>To demonstrate the effectiveness of IG-JSMA, we also compare it with the original JSMA method where the saliency map is computed by the vanilla gradients. Table <ref type="table" target="#tab_1">2</ref> compares the ratio of correctly classified nodes after the JSMA and IG-JSMA attacks for 100 random sampled nodes, respectively. A lower value is better as more nodes are misclassified. We can see that IG-JSMA outperforms JSMA attack. This shows that the saliency map given by integrated gradients approximate the change patterns of the discrete features/edges better. Figure <ref type="figure" target="#fig_5">4</ref> gives an intuitive example about this. For the graph, we conducted evasion attack where the parameters of the model are kept fixed as the clean graph. For a target node in the graph, given a two-layer GCN model, the prediction of the target node only relies on its two-hop ego graph. We define the importance of a feature/an edge as follows: For a target node v, The brute-force method to measure the importance of the nodes and edges is to remove one node or one edge at a time in the graph and check the change of prediction score of the target node.</p><p>Assume the prediction score for the winning class c is p c . After setting entry A ij of the adjacency matrix from 1 to 0, the p c changes to p c . We define the importance of the edge by ∆ pc = p c − p c . To measure the importance of a node, we could simply remove all the edges connected to the node and see how the prediction scores change. The importance values can be regarded as the ground truth discrete gradients.</p><p>Both vanilla gradients and integrated gradients are approximations of the ground truth importance scores. The node importance can be approximated by the sum of the gradients of the prediction score w.r.t all the features of the node as well as the gradients w.r.t to the entries of the adjacency matrix.</p><p>In Figure <ref type="figure" target="#fig_5">4</ref>, the node color represents the class of the node. Round nodes indicate positive importance scores while diamond nodes indicate negative importance score. The node size indicates the value of the positive/negative importance score. A larger node means higher importance. Similarly, red edges are the edges which have positive importance scores while blue ones have negative importance scores. Thicker edges correspond to more important edges in the graph and the pentagram represents the target node in the attack.</p><p>Figure <ref type="figure" target="#fig_5">4a</ref>, 4b and 4c show the node importance results of brute-force, vanilla gradients and integrated gradients approach respectively (# of steps = 20). The vanilla gradients reveal little information about node/edge importance as almost all the edges are assigned with certain importance scores and it is difficult to see the actual node/edge influence. However, in the brute-force case, we notice that the majority number of edges are considered not important for the target node. Moreover, vanilla gradients underestimate the importance of nodes overall. The integrated gradients, as shown in Figure <ref type="figure" target="#fig_5">4c</ref> is consistent with the ground truth produced by brute-force approach shown in Figure <ref type="figure" target="#fig_5">4a</ref>. With only 20 steps along the path, integrated gradients provide accurate approximations for the importance scores. This shows the integrated gradients approach is effective when used to guide the adversarial attacks on graphs with discrete values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Defense</head><p>In the following, we study the effectiveness of the proposed defense technique under different settings. We use the CORA-ML and Citeseer datasets that have features for the nodes. We first evaluate whether the proposed defense method affects the performance of the model. Table <ref type="table" target="#tab_3">4</ref> shows the accuracy of the GCN models with/without the defense. We find that the proposed defense was cheap to use as the pre-processing of our defense method almost makes no negative impact on the performance of the GCN models. Moreover, the time overhead is negligible. Enabling defense on the GCNs models for the two datasets increases the run time of training by only 7.52s and 3.79s, respectively. Note that run time results are obtained using our non-optimized Python implementation.</p><p>For different attacks, we then evaluate how the classification margins and accuracy of the attacked nodes change with/without the defense. As in the experiments of transductive attack, we select 40 nodes with different prediction scores. The statistics of the selected nodes are the followings: For CORA-ML and Citeseers datasets, we train the GCN models on the clean graphs. The selected nodes have classification margins of 0.693 ± 0.340 and 0.636 ± 0.419, respectively.  The results are given in Table <ref type="table" target="#tab_3">4</ref>. First of all, without defenses, most of the selected nodes are misclassified as the accuracy is always under 0.05 for any attacks. By enabling the defense approach, the accuracy can be significantly improved regardless of the attack methods. This, to some degree, shows that all the attack methods seek similar edges to attack and the proposed defense approach is attack-independent. Although a few nodes were still misclassified with the defense, the pre-diction confidence for their winning class is much lower since the classification margins increase. Therefore, it becomes harder to fool the users because manual checks are generally involved in predictions with low confidence. Overall, the proposed defense is effective even though we only remove the edges that connect nodes with Jaccard similarity score of 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions and Discussion</head><p>Graph neural networks (GNN) significantly improved the analytic performance on many types of graph data. However, like deep neural networks in other types of data, GNN suffers from robustness problems. In this paper, we gave insight into the robustness problem in graph convolutional networks (GCN). We proposed an integrated gradients based attack method that outperformed existing iterative and gradientbased techniques in terms of attack performance. We also analyzed attacks on GCN and revealed the robustness issue was rooted in the local aggregation in GCN. We give an effective defense method to improve the robustness of GCN models. We demonstrated the effectiveness and efficiency of our methods on benchmark data.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>nodes and edges according to their scores.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>6/</head><label></label><figDesc>features ← sort by importance(s f) 7 edges ← sort by importance(s e) 8 f ← features.first, e ← edges.first 9 while |A − A| + |X − X| &lt; ∆ do 10</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 :</head><label>1</label><figDesc>Figure1: Histograms for the Jaccard similarities between connected nodes before and after FGSM attack.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 2 :</head><label>2</label><figDesc>Figure2: The normalized learned edge weights and the Jaccard similarity scores for the end nodes of the edges. Each value of the x-axis represents an edge in the neighborhood of the target node.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Figure 3: The classification margin under different attack techniques.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Statistics of the datasets.</figDesc><table><row><cell>Dataset</cell><cell>Nodes</cell><cell>Features</cell><cell>Edges</cell></row><row><cell>CORA-ML</cell><cell>2708</cell><cell>1433</cell><cell>5429</cell></row><row><cell>Citeseer</cell><cell>3327</cell><cell>3703</cell><cell>4732</cell></row><row><cell>Polblogs</cell><cell>1490</cell><cell>-</cell><cell>19025</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 2 :</head><label>2</label><figDesc>The ratio of correctly classified nodes under JSMA and IG-JSMA attacks.</figDesc><table><row><cell>Dataset</cell><cell>CORA</cell><cell>Citeseer</cell><cell>Polblogs</cell></row><row><cell>JSMA</cell><cell>0.04</cell><cell>0.06</cell><cell>0.04</cell></row><row><cell>IG JSMA</cell><cell>0.00</cell><cell>0.01</cell><cell>0.01</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>Table 3 :</head><label>3</label><figDesc>Accuracy (%) of models on clean data with/without the proposed defense. We remove the outliers (i.e., accu ≤ 75%/65% for CORA-ML/Citeseer) due to the high variance.</figDesc><table><row><cell>Dataset</cell><cell>w/o defensde</cell><cell>w/ defense</cell></row><row><cell>CORA-ML</cell><cell>80.9± 0.6</cell><cell>80.7 ± 0.7</cell></row><row><cell>Citeseer</cell><cell>69.5 ± 0.7</cell><cell>69.6 ± 0.8</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 4 :</head><label>4</label><figDesc>Classification margins and error rates (%) for the GCN models with different attacks.</figDesc><table><row><cell>Dataset</cell><cell>Attack</cell><cell>CM (w/ attack)</cell><cell></cell><cell cols="2">Accu (w/ attack)</cell></row><row><cell></cell><cell></cell><cell>w/ defense</cell><cell>no defense</cell><cell>w/ defense</cell><cell>no defense</cell></row><row><cell></cell><cell>FGSM</cell><cell>0.299 ± 0.741</cell><cell>-0.833 ± 0.210</cell><cell>0.625</cell><cell>0.025</cell></row><row><cell>CORA</cell><cell>JSMA nettack</cell><cell>0.419 ± 0.567 0.242 ± 0.728</cell><cell>-0.828 ± 0.225 -0.839 ± 0.343</cell><cell>0.775 0.600</cell><cell>0 0.025</cell></row><row><cell></cell><cell>IG-JSMA</cell><cell>0.397 ± 0.553</cell><cell>-0.897 ± 0.114</cell><cell>0.750</cell><cell>0</cell></row><row><cell></cell><cell>FGSM</cell><cell>0.451 ± 0.489</cell><cell>-0.777 ± 0.279</cell><cell>0.825</cell><cell>0.025</cell></row><row><cell>Citeseer</cell><cell>JSMA nettack</cell><cell>0.501 ± 0.531 0.421 ± 0.468</cell><cell>-0.806 ± 0.186 -0.787 ± 0.332</cell><cell>0.775 0.775</cell><cell>0.05 0.025</cell></row><row><cell></cell><cell>IG-JSMA</cell><cell>0.495 ± 0.507</cell><cell>-0.876 ± 0.186</cell><cell>0.800</cell><cell>0.025</cell></row></table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Lada A Adamic and Natalie Glance. The political blogosphere and the 2004 us election: divided they blog</title>
		<author>
			<persName><forename type="first">Glance</forename><surname>Adamic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd international workshop on Link discovery</title>
				<meeting>the 3rd international workshop on Link discovery</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005">2005. 2005</date>
			<biblScope unit="page" from="36" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Deep gaussian embedding of attributed graphs: Unsupervised inductive learning via ranking</title>
		<author>
			<persName><forename type="first">Frances</forename><forename type="middle">E</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName><surname>Bhagat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Social network data analytics</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1970">1970. 1970. 2011. 2011. 2018. 2018</date>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="115" to="148" />
		</imprint>
	</monogr>
	<note>Proceedings of ICLR&apos;18</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Deep neural networks for learning graph representations</title>
		<author>
			<persName><forename type="first">Bruna</forename></persName>
		</author>
		<idno type="arXiv">arXiv:1312.6203</idno>
	</analytic>
	<monogr>
		<title level="m">Spectral networks and locally connected networks on graphs</title>
				<imprint>
			<date type="published" when="2013">2013. 2013. 2016. 2016</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Proceedings of AAAI&apos;16</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Explaining and harnessing adversarial examples</title>
		<author>
			<persName><surname>Dai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICML&apos;18</title>
				<meeting>ICML&apos;18</meeting>
		<imprint>
			<publisher>Michael Edwards and Xianghua Xie</publisher>
			<date type="published" when="2015">2018. 2018. 2016. 2016. 2015. 2015</date>
		</imprint>
	</monogr>
	<note>Proceedings of ICLR&apos;15</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Shapley value</title>
		<author>
			<persName><forename type="first">Sergiu</forename><surname>Hart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><surname>Hart</surname></persName>
		</author>
		<author>
			<persName><surname>Henaff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mikael Henaff, Joan Bruna, and Yann LeCun. Deep convolutional networks on graph-structured data. Proceedings of NeurIPS&apos;15</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1989">1989. 1989. 2015. 2015</date>
			<biblScope unit="page" from="210" to="216" />
		</imprint>
	</monogr>
	<note>Game Theory</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Somesh Jha, Matt Fredrikson, Z Berkay Celik, and Ananthram Swami. The limitations of deep learning in adversarial settings</title>
		<author>
			<persName><forename type="first">Ian</forename><forename type="middle">J</forename><surname>Goodfellow ; Christian Szegedy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ian</forename><forename type="middle">J</forename><surname>Goodfellow</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jonathon</forename><surname>Shlens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Kipf</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Max</forename><surname>Welling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Scott</forename><surname>Lundberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Su-In</forename><surname>Lee ; Newman</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1412.06572</idno>
		<idno>arXiv:1803.04765</idno>
	</analytic>
	<monogr>
		<title level="m">Nicolas Papernot and Patrick McDaniel. Deep k-nearest neighbors: Towards confident, interpretable and robust deep learning</title>
				<meeting><address><addrLine>Patrick McDaniel</addrLine></address></meeting>
		<imprint>
			<publisher>EuroS&amp;P</publisher>
			<date type="published" when="2002">2014. 2014. 2017. 2016. 2016. 2002. 2002. 2018. 2018</date>
			<biblScope unit="volume">99</biblScope>
			<biblScope unit="page">2016</biblScope>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Security and Privacy</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Defending against adversarial images using basis functions transformations</title>
		<author>
			<persName><forename type="first">Dorit</forename><surname>Ron</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adi</forename><surname>Shamir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">;</forename><surname>Shaham</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1803.10840</idno>
	</analytic>
	<monogr>
		<title level="m">International Conference on Financial Cryptography and Data Security</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013">2016. 2013. 2018. 2018. 2017. 2017</date>
			<biblScope unit="page" from="6" to="24" />
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Proceedings of ICML&apos;17</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Attack graph convolutional networks by adding fake nodes</title>
		<author>
			<persName><surname>Tramèr</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1810.10751</idno>
		<idno>arXiv:1902.07153</idno>
	</analytic>
	<monogr>
		<title level="m">Simplifying graph convolutional networks</title>
				<imprint>
			<date type="published" when="2018">2018. 2018. 2018. 2018. 2018. 2018. 2019. 2019</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
	<note>Proceedings of ICLR&apos;18</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Node classification in social network via a factor graph model</title>
		<author>
			<persName><surname>Xie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Pacific-Asia Conference on Knowledge Discovery and Data Mining</title>
				<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013">2018. 2018. 2013. 2013</date>
			<biblScope unit="page" from="213" to="224" />
		</imprint>
	</monogr>
	<note>Proceedings of ICLR&apos;18</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Feature squeezing: Detecting adversarial examples in deep neural networks</title>
		<author>
			<persName><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of NDSS&apos;18</title>
				<meeting>NDSS&apos;18</meeting>
		<imprint>
			<date type="published" when="2018">2018. 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Adversarial examples: Attacks and defenses for deep learning</title>
		<author>
			<persName><surname>Yuan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE transactions on neural networks and learning systems</title>
				<imprint>
			<date type="published" when="2019">2019. 2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Adversarial attacks on neural networks for graph data</title>
		<author>
			<persName><surname>Zügner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining</title>
				<meeting>the 24th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018">2018. 2018</date>
			<biblScope unit="page" from="2847" to="2856" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
