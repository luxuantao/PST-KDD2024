<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">TOWARDS HISTORICAL R-TREES</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Mario</forename><forename type="middle">A</forename><surname>Nascimento</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Jefferson</forename><forename type="middle">R O</forename><surname>Silva</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">EMBRAPA</orgName>
								<orgName type="institution">CNPTIA</orgName>
								<address>
									<postBox>P.O. Box 6041</postBox>
									<postCode>13083-970</postCode>
									<settlement>Campinas</settlement>
									<region>SP</region>
									<country key="BR">BRAZIL</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">IC -UNICAMP</orgName>
								<address>
									<postBox>P.O. Box 6176</postBox>
									<postCode>13083-970</postCode>
									<settlement>Campinas</settlement>
									<region>SP</region>
									<country key="BR">BRAZIL</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">TOWARDS HISTORICAL R-TREES</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">DF7F726685D1035CF145DE5334CFDB38</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T03:31+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>R-trees are the "de facto" reference structures for indexing spatial data, namely the minumum bounding rectangles (MBRs) of spatial objects.</p><p>However, R-trees, as currently known, do not support the evohition of such MBRs. Whenever an MBR evolves, its new version replaces the old one, which is therefore lost. Thus, an R-tree always shows the current state of the data set, not allowing the user to query the spatial database with respect to past states. In this paper we extend the R-tree in such a way that old states are preserved, allowing the user to query them. The proposed approach does not duplicate nodes which were not modified, thus saving considerable storage space. On the other hand, the query processing time does not depend on the number of past states stored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTROOUCTiON</head><p>Managing multidimensional data is needed in many application domains, e.g., spatial databases and geographical information systems <ref type="bibr" target="#b12">[13]</ref>. In particular, indexing spatial data. is of foremost importance in many application domains, and indeed such an issue has been quite well researched. Samet <ref type="bibr" target="#b12">[13]</ref> and Gaede and G/inther [4] present excellent surveys on the area. However, it is hardly argueable that an structure has been more cited and used as a reference than the R-tree <ref type="bibr" target="#b4">[5]</ref>. The R+-tree [14] and the R*-tree [I] are well known R-tree derivatives, where the R°-tree has been shown to be quite efficient. Recently, the Hilbert R-tree [7] and the STRtree [9] have been shown to have better "packing" capabilities. This is specially useful for sets of data which are not very dynamic in nature. With the exception of the R+-tree, all have the same basic structure. K-dimensional spatial objects are modeled by their Minimum Bounding Rectangles (MBRs) -we assume, without loss of generality, that K = 2. Subsets of the indexed MBRs are organized into overlapping subspaces, using a tree hierarchy. They all differ in the way "Also an invited lecturer at Institute of Computing of the State University of Campinas (marioQdcc.unicarnp.br).</p><p>'~Supported by CAPES. Alternative emaih jeffsilva~writeme.com</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>235</head><p>the tree nodes are split (when overflown) and/or MBRs are assigned to subspaces (i.e., nodes in tree).</p><p>|n this stage of our research we assume an R-tree has already been built by using algorithms from any of the Rtree derivatives, but the R +-tree. Regardless of how it was built, we refer to such an structure as an R-tree, and we assume it obeys the following conditions [51 (where a hyperrectangle is an MBR):</p><p>• Every leaf (non-leaf) node contain between m and M index records (children) unless it is the root;</p><p>• For each index record (I, Tid) in a leaf node, I is the smallest hyper-rectangle that spatially contains the object represented by the indicated tuple Tid; • For each entry (I, Cid) in a non-leaf node, I is the smallest hyper-rectangle that spatially contains the hyperrectangles in the child node Cid;</p><p>• The root node has at least two children tmless it is a leaf;</p><p>• All leaves appear on the same level.</p><p>For simplicity, and proof-of-concept, we base our algorithms for insertion, deletion and updating on those by Gutmann <ref type="bibr" target="#b4">[5]</ref>. MBRs can model objects which vary with time, one trivial example is a farm which can be expanded or shmmk by selling or buying land. Similarly new ohjeet.s can begin or cease to exist. An R-tree indexes only the current MBR for each object. Should any object evolve and have its MBR changed, the R-tree must delete the old MBR and insert the new one (the one corresponding to the new instance of the object). From that point on, no query will ever take into account that past instance of that particular MBR. In other words, R-trees as currently known, allow querying only the current state of a spatial database. A trivial way to overcome such shortcoming would be to store all previous states of the R-trees. As we shall see shortly, this is not an acceptable, nor practical, solution.</p><p>The problem of indexing non-spatial objects {i.e., regular tuples in a relation) over time has been researched by many researchers in the temporal databases community. A thorough survey can be found in <ref type="bibr" target="#b11">[12]</ref>. However, to our knowledge no research has been published regarding the temporalization of the R-tree. That is exactly the kernel of our contribution.</p><p>We assume the temporal attribute is transaction time. Transaction time interval is the time an object has been stored in the database <ref type="bibr" target="#b5">[6]</ref>. Hence an MBR is considered stored in the spatial database since the time it is input ad infinitum, or until the point it is updated or deleted. This special feature prevents one of using the quite simple idea of considering time as another spatial dimension, thus using the t( + 1 dimensional space to index MBRs varying over time. The problem is that the current MBR versions would have one of its "sides" being extended continously (notice that the current point in time is always moving forward). Even if one could somehow manage this variable side, it would imply a large overlap ratio among the R-trees' subspaces (which does affect negatively the R-tree's performance).</p><p>Hence, this paper addresses the problem of querying and maintaing current and past states of R-trees. To accomplish that the paper is organized as follows. The next Section presents an overview of the rationale behind our approach, which we call Historical R-trees. Section 3 discusses how the R-tree's algorithms need be changed to allow the realization of the Historical R-trees. We conclude in Section 4, presenting some issues which are being currently investigated and/or have potential for future research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">ENHANCING R-TREES WITH TIME</head><p>The technique we propose is inspired by an idea first presented by Burton and colleagues <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b1">2]</ref>. The authors proposed the use of overlapping trees to manage the evolution of text files. Later, the idea was generalized by <ref type="bibr" target="#b9">[10]</ref> to manage temporally evolving B+-trees in general. The basic idea behind those techniques was to keep current and past states of the B +-trees by maintaing the original tree and replicating, from state to state, only the root and the branches which reflect any changes. The unchanged branches were not replicated, but rather were pointed to by the nodes in the new branch. The approach we propose is an extension of the overlapping approach originally proposed by Manolopoulos e Kapetanakis <ref type="bibr" target="#b9">[10]</ref> for the B+-trees, to the R-trees. We call such an approach Historical R-tree (H-R-tree for short). In this paper we concentrate on managing it, rather than benchmarking it. Let us illustrate the rationale supporting the H-R-tree with the following example. Consider the initial R-tree in Figure <ref type="figure">l</ref>(a) at time TO. Suppose that at time T1 MBR 3 suffers a modification resulting in MBR 3a. Likewise MBR 8 is modified at time T2 yielding MBR 8a. The three states (at TO, Tt and T2) of that particular R-tree are thus those shown in Figures l(a), (b) and (c) respectively. Note that in that particular example the subtree rooted at node B did not change at all, nevertheless it was replicated in all three states. Moreover, the subtree rooted at C (AI) did not change from TO (TI) to T1 (T2), but the whole subtree was replicated as well. It should be now clear that duplicating the whole tree at each state is rather unpractical.</p><p>Let us now see how the same scenario would be handled by the H-R-tree. We assume an array, called A, indexing the time points where updates occurred. The initial R-tree must be kept full and it is pointed to by A/T0]. From TO to TI MBR 3 changes, and as such node A changes as well, after all its contents did change. This update propagates upwards until the root node. At the end only the path {R1, A, 3} needs to be updated, resulting the new path {R2, AI, 3a}. Naturally, the R-tree at T1 is composed by the subtrees rooted at A1, B and C. However, those rooted at B and C did not change at all, and thus need not be replicated. Similarly, at time T2 the R-tree rooted at R3 is composed by those subtrees roted at AI, B and C1. Again, from T1 to T2, the subtrees rooted at A1 and B did not go under any modification and as such need not be replicated. The resulting H-R-tree at time T2 is shown in Figure <ref type="figure" target="#fig_2">2(a)</ref>. Simple inspection shows that, even in a trivial example like this, the H-R-tree is much smaller than the set of tree R-trees in Figure <ref type="figure">1</ref>. Figure <ref type="figure" target="#fig_2">2(b)</ref> shows the logical view of the resulting R-tree at time T2, which is exactly the same one in Figure <ref type="figure">l(c)</ref>.</p><p>It is important to stress that querying any version of the R-tree under the H-R-structure is a matter of obtaining the correct R-tree root. Once this is done, using the array A[.],. the logical view is that of a standard R-tree, no complications are therefore added by the approach we use to keep the Rtree's history.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">HISTORICAL R-TREES</head><p>In this section we discuss in detail how to modify the R-tree's algorithms in order to realize the H-R-tree. Given the space constraints we omit certain details, which can be found in Guttman's original paper <ref type="bibr" target="#b4">[5]</ref>.</p><p>We draw particular attention to insertion and (logical) deletions of MBRs, modification of MBRs can be accomplished by deleting the old version and inserting the new one. As we argued above, querying any version of the R-tree is straightforward.</p><p>The H-R-tree is a structure composed by an array A of time values, which in turn point to several logical R-trees (see Figure <ref type="figure" target="#fig_2">2</ref>). The H-R-tree structure is very similar to the other R-tree derivatives. The difference, besides the existence of array A is that each node contains a timestamp t, representing the time that one node was created. Any operation is always performed onto the most current R-tree version, i.e., the one pointed to by A/t], and will yield a new version, which is thus timestamped with t = now 1. From now on, we use the notation presented in Table <ref type="table">1</ref>. A new branch of the H-R-tree is created, in which 0n is placed. A new logical R-tree rooted at NR is created, and it is pointed to by A/now]. The algorithm first invokes CreateBranch which descends the current R-tree rooted at R lit* the temporal database literature (e.g. <ref type="bibr" target="#b14">[15]</ref>), now is usually regarded a.s a variable. We, on the other hand, use it only as a shorter name for "the value of the current point in time". (which is pointed to by A [pt]) to find the leaf node in which On will be placed. CreateBranch returns a root NR and a leaf node L, where On is to be inserted The SplitNode and /tdjustTree procedures mentioned above are essentially the algorithms defined by Guttman <ref type="bibr" target="#b4">[5]</ref>. SplitNode is used when a new object On is inserted into a full node. In this case, all the entries should be divided between two nodes. A small change is needed in the original Spl itNode Algorithm though, namely the algorithm must set the timestamp of the newly created nodes. The AdjustTree ascends from a leaf node to the root, adjusting the covering rectangles and propagating splits as necessary. It is interesting to note that the logical view of the H-R-tree is that of a standard R-tree at some point in time, such as now, and as such, node splits are handled as if we were manipulating a standard R-tree. Figure <ref type="figure">3</ref> shows an example where from TO to TI a new MBR, labelled 7 was inserted. The algorithm decided that it should be inserted in node B, which was already full. Therefore a node split happened, resulting in nodes 131 and 132. As the root RI was not full, no further splitting is needed. From T1 to T2, no split is needed when MBR 8 is input into node A, thus only a single branch (optimal case) is replicated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Table h Notation used in the algorithms.</head><p>Notice that in the worst case a node split is propagated all the way from leaf to root, resulting in two (i.e., a constant and low number) branches being replicated. Therefore, considering an R-tree uses O(n/B) space 2, the H-R-tree after u updates uses O(n/B+ u log B n) space. If all previous R-tree states were kept O(un/B) space would be required.  also propagates node elimination upward as necessary, adjusting covering rectangles. The only two modifications necessary in Guttman's CondenseTree are: (l) in the insertion algorithm used to re-insert the entries removed, the I n s e r t algorithm described above must be used instead of the original one, and (2) a node containing entries to be inserted in set Q is only removed if its timestamp is now. A node will be removed only if it was duplicated by the D e l e t e algorithm, otherwise, it belongs to a previous state of the R-tree, and as such it should not be removed. set N = P and repeat from 2; 6. { re-insert orphaned entries } re-insert all enCries of nodes in set Q;</p><p>Notice that the CoadenseTree algorithm may re-insert m -1 MBRs in the current version of the R-tree. Recall that m is the minimum number of entries occupied in any Rtree node. Therefore, considering the algorithm Insert ion presented earlied, in the worst case, Delete yields 2 x (m -1) branches being replicated. It is worthwhile stressing that this is a constant number.</p><p>As an illustration, Figure <ref type="figure">4</ref> shows an H-R-tree where from time TO to T1, MBR 6 was deleted. As BI still remains with its minimtun load (assuming rn = 2), no further modifcation is needed but replicating the branch that lead to MBR 6. From TI to T2, MBR 4 is deleted and a more interesting situation arises. After deleting MBR 4 B1 falls under its minimum load, and thus all its entries must be re-inserted, freeing that node. Freeing that node leave the root of the current R-tree with only one child, which cannot occur, again per R-tree's definition. A new root (R3) is then created containing the remaining MBRs l, 2 and 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">MODIFYING A SINGLE MBR IN THE CURRENT R-TREE</head><p>Modifying an MBR in the current R-tree is rather trivial. All one needs to do is to remove the current version of the</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>,N,NN,NR,P,PP now pt a pointer to the H-R-tree the H-R-tree's array of time points root node of a R-tree MBR inserted in the H-R-tree MBR removed from the H-R-tree an entry in a R-tree node MBR associated to F pointer associated to F node N;s timestamp queue of R-tree nodes pointers to R-tree nodes current point in time most recent entry in A inserts a'new MBR On into the most recent logical version of the R-tree within the H-R-tree 0R, thus creating a new R-tree version (whose nodes will be timestamped with now).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Figure h An R-tree evolving through time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Physical and logical views of the Historical R-tree.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>8a</figDesc></figure>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We have already noted that another Modify algorithm could be devised. The main idea is to forcefully enlarge or shrink the MBRs, higher in the tree, that involve the MBR being modified. This would ensure that only one branch would be replicated per MBR modification. The cost of such alternative is yet to be investigated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">. 4 Q U E R Y I N G T H E C U R R E N T R -T R E E</head><p>The Search algorithm finds all MBRs in the H-R-tree OR that overlap the search windows S. The search can be made in some specific past state of the R-tree or in the current state, that is the R-tree pointed to by h [ p t ] The Search algorithm first finds the (R-tree) root in the H-R-tree that is pointed to by A For a discussion on how to query the R-tree we refer the reader to Guttman's original paper <ref type="bibr" target="#b4">[5]</ref>, as no modifications (at all) to the original algorithm are required.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">D I R E C T I O N S F O R F U T U R E R E S E A R C H</head><p>We have presented a systematic way to deal with modifications of an R-tree while preserving all of its previous states. While the resulting structure, which we named Historical R-tree (H-R-tree) saves substantial space when compared to saving all previous R-tree states, it does not degenerate query processing time. Future research is needed in several directions, such as:</p><p>. Implementation and benchmarking of the H-R-tree, inchiding the generation of spatial-temporal data;</p><p>• Using Z-order <ref type="bibr" target="#b10">[11]</ref> along with the original Historical B+-trees <ref type="bibr" target="#b9">[10]</ref> to index spatial-temporal data (and consequently compare the result to the H-R-tree);</p><p>• Adapting the idea of Persistent B+-trees <ref type="bibr" target="#b7">[8]</ref> to R-trees (and also compare the result to the H-R-tree);</p><p>• Investigate how the proposed approach depends on the initial R-tree configuration (recall one could use any of the R-trees, but the R +-tree, algorithms to generate the initial R-tree) and</p><p>• Determine how concurrency control algorithms are impacted in the proposed approach.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The R*-tree: An efficient and robust access method for points and rectangles</title>
		<author>
			<persName><forename type="first">N</forename><surname>Beckmann</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kriegel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Seeger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1990 ACM SIGMOD International Conferencee on Management of Data</title>
		<meeting>the 1990 ACM SIGMOD International Conferencee on Management of Data</meeting>
		<imprint>
			<date type="published" when="1990-06">June 1990</date>
			<biblScope unit="page" from="322" to="331" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Implementation of overlapping Btrees for time and space efficient representation of collection of similar files</title>
		<author>
			<persName><forename type="first">F</forename><surname>Burton</surname></persName>
		</author>
		<author>
			<persName><surname>Et Al</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Computer Journal</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="279" to="280" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Multiple generation text files using overlapping tree structures</title>
		<author>
			<persName><forename type="first">F</forename><surname>Burton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Huntbach</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Kollias</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Computer Journal</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="414" to="416" />
			<date type="published" when="1985">1985</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Multidimensional access methods</title>
		<author>
			<persName><forename type="first">V</forename><surname>Gaede</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Gunther</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
	<note>To appear in. ht tp ://www. wiw i. hu-berl in. de/,.,gaede/survey, rev. ps. Z</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">R-trees: A dynamic index structure for spatial searching</title>
		<author>
			<persName><forename type="first">A</forename><surname>Guttman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1984 ACM SIGMOD International Conferencee on Management of Data</title>
		<meeting>the 1984 ACM SIGMOD International Conferencee on Management of Data</meeting>
		<imprint>
			<date type="published" when="1984-06">Jun 1984</date>
			<biblScope unit="page" from="47" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A consensus glossary of temporal database concepts</title>
		<author>
			<persName><forename type="first">C</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Clifford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gadia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Segev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Snodgrass</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGMOD Record</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="52" to="64" />
			<date type="published" when="1994-01">Jan 1994</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An improved R-tree using fractals</title>
		<author>
			<persName><forename type="first">I</forename><surname>Kamel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName><surname>Hilbert R-Tree</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th Very Large Databases Conference</title>
		<meeting>the 20th Very Large Databases Conference</meeting>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="500" to="509" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Fully persistent B +-trees</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lanka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Mays</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1991 ACM SIGMOD International Conferencee on Management of Data</title>
		<meeting>the 1991 ACM SIGMOD International Conferencee on Management of Data</meeting>
		<imprint>
			<date type="published" when="1991-05">May 1991</date>
			<biblScope unit="page" from="426" to="435" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">STR: An efficient and simple algorithm for R-tree packing</title>
		<author>
			<persName><forename type="first">S</forename><surname>Leutenegger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Lopez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Edgington</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE International Con. ference on Data Engineering</title>
		<imprint>
			<biblScope unit="page" from="497" to="506" />
			<date type="published" when="1997-04">April 1997</date>
		</imprint>
	</monogr>
	<note>n Proceedings o] the 13th</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Overlapping B+-trees for temporal data</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Manolopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>~apetanakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th Jerusalem Conference on Information Technology</title>
		<meeting>the 5th Jerusalem Conference on Information Technology</meeting>
		<imprint>
			<date type="published" when="1990-08">August 1990</date>
			<biblScope unit="page" from="491" to="498" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Spatial query processing in an objectoriented database system</title>
		<author>
			<persName><forename type="first">J</forename><surname>Orestein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1986 ACM SIGMOD International Conferencee on Management of Data</title>
		<meeting>the 1986 ACM SIGMOD International Conferencee on Management of Data</meeting>
		<imprint>
			<date>May t986</date>
			<biblScope unit="page" from="326" to="336" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">A comparison of access methods for time evolving data</title>
		<author>
			<persName><forename type="first">B</forename><surname>Salzberg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Tsotras</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994">1994</date>
			<pubPlace>Boston, USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>College of Computer Science, Northeastern University</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep. NU-CCS-94-2l</note>
	<note>To appear in ACM Computing Surveys</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">The Design and Analysis of Spatial Data Strucutures</title>
		<author>
			<persName><forename type="first">H</forename><surname>Samet</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990">1990</date>
			<publisher>Addison-Wesley</publisher>
			<pubPlace>Reading, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The R+-tree: A dynamic index for multidimensional objects</title>
		<author>
			<persName><forename type="first">T</forename><surname>Sellis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Roussopoulos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th Very Large Databases Conference</title>
		<meeting>the 13th Very Large Databases Conference</meeting>
		<imprint>
			<date type="published" when="1987-09">September 1987</date>
			<biblScope unit="page" from="507" to="518" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Temporal Databases: Theory, Design and Implementation</title>
		<author>
			<persName><forename type="first">A</forename><surname>Tansel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">L</forename><surname>Et</surname></persName>
		</author>
		<author>
			<persName><surname>Eds</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993">1993</date>
			<pubPlace>Benjamin/Cummings, Redwood City, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
