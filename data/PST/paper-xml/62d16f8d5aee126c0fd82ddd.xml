<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">One Profile Fits All: Profile-Guided Linux Kernel Optimizations for Data Center Applications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Muhammed</forename><surname>Ugur</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Cheng</forename><surname>Jiang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<persName><roleName>Tanvir</roleName><forename type="first">Alex</forename><surname>Erf</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Ahmed</forename><surname>Khan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Baris</forename><surname>Kasikci</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Michigan</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">One Profile Fits All: Profile-Guided Linux Kernel Optimizations for Data Center Applications</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.2" ident="GROBID" when="2023-01-01T13:34+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Modern data center applications have multi-megabyte instruction footprints that easily exhaust on-chip cache structures, which typically have a size of only a couple hundred kilobytes. Consequently, today's data center applications suffer from frequent Instruction cache (I-cache) and Instruction Translation Lookaside Buffer (I-TLB) misses, causing performance losses worth millions of dollars. To make matters worse, the multi-megabyte instruction footprint of the Linux kernel precipitates an undue burden on the performance of data center applications.</p><p>In this paper, we perform a comprehensive characterization of the Linux kernel's control-flow behavior for 8 data center applications from different domains and observe that these applications show close resemblance in their usage of Linux kernel features. Based on this insight, we combine Linux kernel execution profiles from different data center applications to generate a "universal" profile which we use to optimize the code layout of the Linux kernel. Our evaluation shows that profile-guided optimizations of the Linux kernel using this universal profile achieve an average end-to-end application speedup of 8.02% for 8 data center applications.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern data center applications have large instruction footprints due to complex and deep software stacks <ref type="bibr" target="#b5">[8,</ref><ref type="bibr" target="#b6">9,</ref><ref type="bibr" target="#b9">12,</ref><ref type="bibr" target="#b12">15,</ref><ref type="bibr" target="#b20">23,</ref><ref type="bibr" target="#b23">26,</ref><ref type="bibr" target="#b27">30]</ref>. Recent studies from Google and Facebook estimate that the typical instruction footprints for these applications range from tens to hundreds of megabytes <ref type="bibr" target="#b6">[9,</ref><ref type="bibr" target="#b23">26]</ref>. On the other hand, on-chip cache structures like Instruction cache (I-cache) and Instruction Translation Lookaside Buffer (I-TLB) range only up to hundreds of kilobytes <ref type="bibr" target="#b13">[16]</ref>. As a result, today's processors face frequent I-cache and I-TLB misses while running data center applications <ref type="bibr" target="#b5">[8,</ref><ref type="bibr" target="#b9">12,</ref><ref type="bibr" target="#b12">15,</ref><ref type="bibr" target="#b44">47]</ref> and incur millions of dollars in energy and management costs <ref type="bibr" target="#b6">[9]</ref>. Consequently, even a single-digit speedup for these widely-deployed applications substantially reduces data centers' Total Cost of Ownership (TCO) and planet-scale carbon footprint <ref type="bibr" target="#b27">[30]</ref>.</p><p>The significance of reducing I-cache and I-TLB misses for data center applications has inspired researchers from both academia and industry to propose code layout optimizations that improve instruction locality <ref type="bibr">[11, 13, 17, 19-26, 28, 31]</ref>. These techniques monitor the execution of data center applications in production and leverage production profiles to reorder basic-blocks and functions in a profile-guided manner. Prior works <ref type="bibr" target="#b8">[11,</ref><ref type="bibr" target="#b22">25]</ref> have shown the effectiveness of these profileguided optimizations (PGO) in achieving 7-11% end-to-end speedup for real-world data center applications. Consequently, these techniques are widely deployed in today's data centers <ref type="bibr" target="#b6">[9,</ref><ref type="bibr" target="#b8">11]</ref>.</p><p>Despite the widespread adoption of PGO techniques for data center applications, optimizing the Linux kernel in a profile-guided manner has received little attention from both academic and industry researchers <ref type="bibr">[5,</ref><ref type="bibr" target="#b4">7,</ref><ref type="bibr" target="#b26">29,</ref><ref type="bibr" target="#b40">[43]</ref><ref type="bibr" target="#b41">[44]</ref><ref type="bibr" target="#b42">[45]</ref>. To close this gap, we investigate the implications of profile-guided kernel optimizations for data center applications in this paper. Specifically, we examine the kernel usage for 8 real-world data center applications and observe that these applications spend 43-74% (61% on average) of their overall execution time executing instructions within the kernel. Our characterization also reveals that 43-79% of all I-cache misses (61% on average) and 10-86% (46% on average) of all I-TLB misses for these data center applications originate from the kernel. Thus, our investigation shows the significance of optimizing the Linux kernel's multi-megabyte code footprint for data center applications.</p><p>Encouraged by these results, we examine the kernel profiles for different data center applications to measure the similarity and variation across different profiles. In particular, we study how the control-flow behavior of the Linux kernel varies across different data center applications since this behavior dominates how the code layout is reordered in a profile-guided manner. To this end, we leverage state-of-the-art measures of similarity metrics, including cosine similarity and L p -norms, and show that these 8 applications exhibit close resemblance in their usage of the kernel's control-flow behavior. Driven by our characterization's insight, we combine multiple kernel profiles from different data center applications and generate a "universal" kernel profile. Furthermore, we optimize the Linux kernel using this universal profile and evaluate the effectiveness of the optimization in the context of 8 data center applications. In our evaluation, universal profile-guided kernel optimizations achieve an average end-to-end speedup of 8.02% for our selected data center applications. Our evaluation also shows that optimizations using a universal kernel profile achieve an almost identical speedup to optimizations performed using application-specific Linux kernel profiles.</p><p>In this paper, we make the following contributions: • We perform a comprehensive characterization of the Linux kernel's control-flow behavior across 8 real-world data center applications and show that profile-guided optimizations of the Linux kernel have significant potential to improve data center performance in a generalized way. • We combine kernel profiles from multiple applications to create a universal profile and evaluate the effectiveness of using this universal profile to optimize the Linux kernelproviding a substantial speedup for data center applications. Profile comparison metrics. We analyze the usage of the Linux kernel across different applications by comparing the kernel execution profiles for these applications. To do this comparison, we use several state-of-the-art similarity and difference metrics from data mining and machine learning literature. Such metrics include confusion matrices, cosine similarity, and L p norms. We provide a brief description of these metrics in the next sections.</p><p>The Linux kernel's execution profile consists of several control-flow information, including execution frequencies for functions/branch instructions and taken/not-taken (i.e., fallthrough) frequencies for branch instructions. To understand how the kernel's profile varies across different applications, we compare this control-flow information using confusion matrices. To create a confusion matrix for control-flow information, we first create a feature vector for each application using a common (ordered) set of features. For example, the feature vector for function execution frequency is the number of executions for each kernel function invoked by the application. Similarly, the feature vector for branch execution frequency is the number of executions for each branch instruction invoked by the application in the kernel. Next, we compare these feature vectors using cosine similarity and L p norms and create confusion matrices. Cosine similarity. The first measure of similarity we use is cosine similarity. Let u and v be the feature vectors for the applications i and j respectively. The cosine similarity is then defined as,</p><formula xml:id="formula_0">s(u, v) = u • v ∥u∥∥v∥ ,</formula><p>where u • v is the dot product between the feature vectors, u and v, and ∥•∥ is the norm for a given feature vector. Cosine similarity has the range between zero and one, where one represents two perfectly aligned feature vectors and zero represents two feature vectors that are orthogonal to each other. Geometrically, cosine similarity can be interpreted as the angle between two unit vectors. This makes it natural to use cosine similarity to evaluate any metric that could be normalized to one, such as function execution frequency and branch execution frequency. L p norms. The second metric we consider is L p norms. L p norms of vector differences are defined as,  lower bound of zero, which occurs when the two input feature vectors are identical. The input to vector difference norm does not need to be normalized to unit vectors. Therefore, L p norms are best suited for cases where the feature elements are bounded. For example, we use L p norms to compute the similarities between different applications' branch taken and not-taken execution frequencies. We evaluated L p norms for p = {0, 1, 2}. L 0 -norm corresponds to the total number of nonzero elements in a vector. In our analysis, it represents the number of different elements in the feature vector. L 1 -norm is also known as Manhattan distance, which sums the absolute difference in each component of the feature. L 2 -norm is also known as Euclidean distance. Compared to L 1 -norm, L 2 -norm shows tolerance toward small discrepancies. Also, L 2 -norm penalizes relatively large differences between features.</p><formula xml:id="formula_1">s(u, v) = ∥u − v∥ p = |v| ∑ k=1 |u k − v k | p</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Is the kernel a bottleneck for modern data center applications?</head><p>We start our characterization of the Linux kernel by measuring what percentage of the overall execution time for data center applications is spent in the kernel. Specifically, we estimate the percentages of overall CPU cycles, executed instructions, I-cache misses, and I-TLB misses that originate from the Linux kernel for each application. Table <ref type="table" target="#tab_3">2</ref> shows the results.</p><p>As shown in Table <ref type="table" target="#tab_3">2</ref>, these data center applications spend, on average, 61% of their total CPU cycles and 57% of all executed instructions in the kernel. Additionally, on average, 61% of all I-cache misses and 46% of all I-TLB misses originate from the kernel for these 8 applications. Therefore, we conclude that the Linux kernel can be a significant hardware performance bottleneck for data center applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">How does the kernel's control-flow behavior vary across different applications?</head><p>Since the kernel is responsible for a large fraction of the overall execution time for data center applications, optimizing the end-to-end performance for these applications must aim to improve the performance of the Linux kernel. To improve the Linux kernel's performance, we mainly consider compilerbased profile-guided optimizations. These profile-guided optimizations change the code layout of a program via basicblock reordering, function reordering, and function splitting based on the program's execution profile. Such profile-guided optimizations provide significant performance benefits for a program if the profile used for optimization matches closely with the execution profile for the common case. Therefore, we examine how the Linux kernel's profile varies across different data center applications in this subsection. Function reordering and function splitting primarily leverage the execution frequencies of different functions whereas basic-block reordering uses the execution frequencies of different branch instructions along with the taken and not-taken frequencies of different conditional branch instructions. Consequently, we study the similarity and variation in kernel profiles for different applications based on execution frequencies for all functions and branch instructions along with taken and not-taken frequencies for conditional branch instructions. Function execution frequencies. We first study the variation in kernel profiles based on all function execution frequencies in the Linux kernel. For each application, we create a feature vector of function frequencies as described in §2.1. Then, we normalize these feature vectors so that each of these vectors has a unit norm. Next, we calculate the cosine similarity among different feature vectors from different data center applications and show the confusion matrix in Fig. <ref type="figure" target="#fig_0">1</ref>.</p><p>As shown in Fig. <ref type="figure" target="#fig_0">1</ref>, almost all these data center applications show close resemblance with each other based on their kernel function usage. Only LevelDB and RocksDB noticeably differ from other applications. however, the minimum similarity score is only 0.37. This suggests that even for applications with the widest function usage diversity, there is still a 37% match among their profiles. Consequently, profile-guided function reordering and splitting for the kernel should provide performance benefits across different applications based on these execution frequencies. Branch instruction execution frequencies. Next, we examine kernel profiles for these data center applications based on the execution frequencies of different branch instructions. Similar to the execution frequencies of functions, we generate a feature vector for each application based on the execution frequencies of all branch instructions from the Linux kernel. After normalizing these feature vectors to have a unit norm, we measure the cosine similarity among different feature vectors of different applications and show the confusion matrix in Fig. <ref type="figure" target="#fig_1">2</ref>. As shown in Fig. <ref type="figure" target="#fig_1">2</ref>, we observe that kernel profiles for these applications, with the exception of PostgreSQL, are similar based on branch instruction execution frequency. However, even for PostgreSQL, the minimum score for the measure of similarity is 0.41 suggesting that there is still a 41% match in branch instruction frequency for these applications. Apart from execution frequencies of branch instructions, profileguided basic-block reordering also depends on the taken and non-taken frequencies of conditional branch instructions. Hence, we next investigate the taken and not-taken frequencies of conditional branch instructions from the Linux kernel for these applications.</p><p>Taken and not-taken frequencies of conditional branch instructions from the kernel. Conditional branch instructions have two possible directions: (1) the taken direction or (2) the not-taken or fall-through direction. Since the sum of the taken and not-taken frequency for a given branch is equal to the total execution frequency, we represent taken and not-taken frequencies simultaneously with a single parameter, the taken probability. We measure the taken probability for a given conditional branch as the ratio of the branch's taken frequency divided by the branch's total execution frequency.</p><p>To compare the Linux kernel's profile across different data center applications, we create a feature vector for each application based on taken probabilities for all conditional branch instructions from the kernel. As each entry to these feature vectors ranges from zero to one, we measure the variation among these feature vectors using L p -norms, as described in §2.1. We show the corresponding confusion matrix using L p -norms for different data center applications in Fig. <ref type="figure" target="#fig_2">3</ref>. As shown in Fig. <ref type="figure" target="#fig_2">3</ref>, the L 0 -norm and L 1 -norm values are small across different data center applications, which highlights that these applications do not exhibit wide diversity among their usage of conditional branch instructions within the kernel. Specifically, the maximum L 0 -norm value is 0.33 while the maximum L 1 -norm value is only 0.16. Additionally, L 2 -norm values across all applications are always smaller than 0.005, and hence, we do not include the corresponding confusion matrix in this paper.</p><p>Since taken/not-taken frequencies of all conditional branch instructions along with execution frequencies of all branch instructions exhibit similar behavior across different applications, we conclude that profile-guided basic-block reordering for the kernel using only one application's profile will still provide a substantial performance benefit for a different application. Next, we describe how we combine kernel profiles from all applications to generate a universal profile that can achieve significant performance benefits for all applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Implementation</head><p>We leverage LLVM's profile tools to generate a universal profile and clang <ref type="bibr" target="#b0">[1]</ref> to optimize the Linux kernel using the universal profile. To generate the universal profile, we combine kernel profiles from different data center applications using the merge option of the tool, llvm-profdata. While merging the kernel profiles for different data center applications, we assign equal weights to each application's profile. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>In this section, we evaluate the effectiveness of optimizing the Linux kernel using the universal profile that we generate by combining kernel profiles from different data center applications. Specifically, we use clang <ref type="bibr" target="#b0">[1]</ref>'s profile-guided optimizations on the Linux kernel and measure the end-toend speedup (improvement in throughput) for our data center applications. For comparison, we also create applicationspecific kernels for each application and measure each application's end-to-end speedup using this application-specific Linux kernel. We show the speedup for the universal (merged) profile and application-specific profile compared to a nonoptimized (default) kernel for each application in Fig. <ref type="figure">4</ref>.</p><p>As shown in Fig. <ref type="figure">4</ref>, the universal profile-guided optimizations achieve significant performance speedup for almost all Figure <ref type="figure">4</ref>: End-to-end speedup provided by profile-guided Linux kernel optimizations for different data center applications: Linux kernel optimizations using the universal (merged) profile provide comparable performance to kernel optimizations using application-specific profiles. of these data center applications apart from PostgreSQL. For PostgreSQL, optimizations using the universal profile only provide a 1.59% average speedup since the branch instruction execution frequencies from the kernel for PostgreSQL differ from their execution frequencies for the remaining applications. On average, the universal profile-guided optimizations achieve an average end-to-end speedup of 8.02% across all applications, which is close to the average speedup of 10.03% that the application-specific profiles provide.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>Profile-guided optimizations of data center applications. Large instruction footprints of modern data center applications make a compelling case for optimizing these applications in a profile-guided manner <ref type="bibr" target="#b5">[8,</ref><ref type="bibr" target="#b6">9,</ref><ref type="bibr" target="#b9">12,</ref><ref type="bibr" target="#b12">15,</ref><ref type="bibr" target="#b27">30]</ref>. Consequently, a plethora of recent techniques <ref type="bibr">[11, 13, 17, 19-26, 28, 31]</ref> optimize the performance of data center applications by applying basic-block reordering, function reordering, and function splitting in a profile-guided manner. Unfortunately, all of these widely-deployed techniques only operate on data center applications themselves and have largely neglected the performance implications of the kernel. Hence, in this work, we investigate the performance potential of profile-guided kernel optimizations and show that such optimizations provide notable speedup for widely-used data center applications. Profile-guided optimizations of Linux kernel. Previous work for Linux kernel PGO focuses on creating applicationspecific kernels and re-writing the kernel binary <ref type="bibr" target="#b24">[27,</ref><ref type="bibr" target="#b26">29,</ref><ref type="bibr" target="#b40">[43]</ref><ref type="bibr" target="#b41">[44]</ref><ref type="bibr" target="#b42">[45]</ref>. The main limitation of these works is their focus on the implementation of kernel PGO and the feasibility of application-specific kernels. Our work instead focuses on analyzing kernel usage across different applications and generating a single universal profile to optimize all of these applications. Previous work has also investigated binary-level techniques to reduce a kernel's memory footprint for specific applications <ref type="bibr" target="#b7">[10,</ref><ref type="bibr" target="#b15">18]</ref>. Our work focuses solely on improving performance (i.e., application latency and throughput) through traditional compiler-based optimizations. Measuring profile similarity. Prior works <ref type="bibr" target="#b8">[11,</ref><ref type="bibr" target="#b11">14,</ref><ref type="bibr" target="#b28">31,</ref><ref type="bibr" target="#b43">46]</ref> on measuring profile similarity and diversity primarily investigate how execution profiles vary across different inputs or versions of an application and focus on each application on its own. Instead, our work leverages state-of-the-art measures of similarity metrics to compare kernel profiles across different applications and focuses on the operating system kernel, which is a unique program that supports many diverse workloads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>Modern data center applications lose significant performance potential due to frequent I-cache and I-TLB misses. In this paper, we showed that a large fraction of these misses emerge from the Linux kernel. Consequently, we investigated the implications of profile-guided kernel optimizations for these applications and observed that kernel profiles exhibit close similarities across different data center applications. Based on this insight, we combined the kernel profiles from different applications to generate a universal profile. We then optimized the Linux kernel using compiler-based profile-guided optimizations with this profile to improve application performance. In our evaluation, Linux kernel optimizations using the universal profile achieved an average end-to-end speedup of 8.02% for 8 widely-used data center applications.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Confusion matrix using cosine similarities for different data center applications based on the Linux kernel's function execution frequencies: apart from LevelDB and RocksDB, all other applications exhibit close similarity in their kernel function usage.</figDesc><graphic url="image-1.png" coords="4,54.00,72.00,240.12,180.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Confusion matrix using cosine similarities for different data center applications based on the Linux kernel's branch execution frequencies: apart from PostgreSQL, all other applications exhibit close similarity in their usage of branch instructions from the kernel.</figDesc><graphic url="image-2.png" coords="4,317.88,72.00,240.12,180.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Confusion matrix using L 0 -norm (top) and L 1 -norm (bottom) for different data center applications based on taken and not-taken frequencies for all branch instructions from the Linux kernel: data center applications show little variation in their usage of kernel conditional branch instructions.</figDesc><graphic url="image-4.png" coords="5,54.00,253.03,240.12,180.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>Table 1 :</head><label>1</label><figDesc>Data center applications, their versions, and their benchmarks we study.</figDesc><table><row><cell>Applications</cell><cell cols="2">Versions Benchmarks</cell></row><row><cell>Apache [35]</cell><cell>2.4.41</cell><cell>ApacheBench [32]</cell></row><row><cell>Nginx [39]</cell><cell>1.18</cell><cell>ApacheBench [32]</cell></row><row><cell>Redis [41]</cell><cell>5.0.7</cell><cell>Redis benchmark [6]</cell></row><row><cell>Memcached [37]</cell><cell>1.5.22</cell><cell>Redis benchmark [3, 6]</cell></row><row><cell>LevelDB [33]</cell><cell>1.22</cell><cell>db_bench [4]</cell></row><row><cell>RocksDB [42]</cell><cell>6.15.2</cell><cell>db_bench [4]</cell></row><row><cell>MySQL [38]</cell><cell>8.0.23</cell><cell>sysbench [2]</cell></row><row><cell cols="2">PostgreSQL [40] 12.5</cell><cell>sysbench [2]</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>Table 2 :</head><label>2</label><figDesc>Hardware performance event (e.g., CPU cycles, instructions, I-cache misses, and I-TLB misses) statistics for data center applications: Linux kernel is the root cause for a large fraction (46-61%) of hardware issues including I-cache and I-TLB misses for data center applications.</figDesc><table /></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Clang c language family frontend for llvm</title>
		<imprint>
			<date type="published" when="2021-11">Nov-2021</date>
			<biblScope unit="volume">19</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Github akopytov/sysbench: Scriptable database and system performance benchmark</title>
		<ptr target="https://github.com/akopytov/sysbench" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Github -antirez/mc-benchmark: Memcache port of redis benchmark</title>
		<ptr target="https://github.com/antirez/mc-benchmark" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<ptr target="https://github.com/facebook/rocksdb/wiki/Benchmarking-tools" />
		<title level="m">Github -benchmarking tools: facebook/rocksdb wiki</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<ptr target="https://lpc.events/event/11/contributions/974/,2021" />
		<title level="m">Optimizing linux kernel with bolt</title>
				<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Memory hierarchy for web search</title>
		<author>
			<persName><forename type="first">Grant</forename><surname>Ayers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jung</forename><surname>Ho Ahn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christos</forename><surname>Kozyrakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Parthasarathy</forename><surname>Ranganathan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Symposium on High Performance Computer Architecture (HPCA)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="643" to="656" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Asmdb: understanding and mitigating front-end stalls in warehouse-scale computers</title>
		<author>
			<persName><forename type="first">Grant</forename><surname>Ayers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Nayana</forename><forename type="middle">Prasad</forename><surname>Nagendra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">I</forename><surname>August</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hyoun</forename><forename type="middle">Kyu</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Svilen</forename><surname>Kanev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Christos</forename><surname>Kozyrakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Trivikram</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heiner</forename><surname>Litz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tipp</forename><surname>Moseley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Parthasarathy</forename><surname>Ranganathan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 46th ISCA</title>
				<meeting>the 46th ISCA</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">System-wide compaction and specialization of the linux kernel</title>
		<author>
			<persName><forename type="first">Dominique</forename><surname>Chanet</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bjorn</forename><forename type="middle">De</forename><surname>Sutter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bruno</forename><forename type="middle">De</forename><surname>Bus</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Ludo</forename><surname>Van Put</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Koen</forename><surname>De Bosschere</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2005 ACM SIGPLAN/SIGBED conference on Languages, compilers, and tools for embedded systems</title>
				<meeting>the 2005 ACM SIGPLAN/SIGBED conference on Languages, compilers, and tools for embedded systems</meeting>
		<imprint>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="95" to="104" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Autofdo: Automatic feedback-directed optimization for warehouse-scale applications</title>
		<author>
			<persName><forename type="first">Dehao</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tipp</forename><surname>Moseley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Xinliang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CGO</title>
				<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Clearing the clouds: a study of emerging scale-out workloads on modern hardware</title>
		<author>
			<persName><forename type="first">Almutaz</forename><surname>Michael Ferdman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Onur</forename><surname>Adileh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Stavros</forename><surname>Kocberber</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohammad</forename><surname>Volos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Djordje</forename><surname>Alisafaee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Cansu</forename><surname>Jevdjic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Adrian</forename><forename type="middle">Daniel</forename><surname>Kaynak</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Anastasia</forename><surname>Popescu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Babak</forename><surname>Ailamaki</surname></persName>
		</author>
		<author>
			<persName><surname>Falsafi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acm sigplan notices</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="37" to="48" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Propeller: Profile guided optimizing large scale llvm-based relinker</title>
		<author>
			<persName><surname>Google</surname></persName>
		</author>
		<ptr target="https://github.com/google/llvm-propeller" />
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Profile inference revisited</title>
		<author>
			<persName><forename type="first">Wenlei</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Julián</forename><surname>Mestre</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sergey</forename><surname>Pupyrev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lei</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hongtao</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the ACM on Programming Languages</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="1" to="24" />
			<date type="published" when="2022">2022</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Profiling a warehouse-scale computer</title>
		<author>
			<persName><forename type="first">Svilen</forename><surname>Kanev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Juan</forename><forename type="middle">Pablo</forename><surname>Darago</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Kim</forename><surname>Hazelwood</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Tipp</forename><surname>Parthasarathy Ranganathan</surname></persName>
		</author>
		<author>
			<persName><surname>Moseley</surname></persName>
		</author>
		<author>
			<persName><surname>Gu-Yeon</surname></persName>
		</author>
		<author>
			<persName><forename type="first">David</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName><surname>Brooks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 42nd ISCA</title>
				<meeting>the 42nd ISCA</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Ripple: Profile-guided instruction cache replacement for data center applications</title>
		<author>
			<persName><forename type="first">Tanvir</forename><surname>Ahmed Khan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Dexin</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Akshitha</forename><surname>Sriraman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Joseph</forename><surname>Devietti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gilles</forename><surname>Pokam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Heiner</forename><surname>Litz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Baris</forename><surname>Kasikci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the 48th International Symposium on Computer Architecture (ISCA), ISCA 2021</title>
				<imprint>
			<date type="published" when="2021-06">June 2021</date>
		</imprint>
	</monogr>
	<note>Proceedings</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Codestitcher: inter-procedural basic block layout optimization</title>
		<author>
			<persName><forename type="first">Rahman</forename><surname>Lavaee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">John</forename><surname>Criswell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Chen</forename><surname>Ding</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 28th International Conference on Compiler Construction</title>
				<meeting>the 28th International Conference on Compiler Construction</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="65" to="75" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">An application-oriented linux kernel customization for embedded systems</title>
		<author>
			<persName><forename type="first">Chi-Tai</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Jim-Min</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Zeng-Wei</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Wei-Tsong</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Inf. Sci. Eng</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1093" to="1107" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Lightweight feedback-directed cross-module optimization</title>
		<author>
			<persName><forename type="first">David</forename><surname>Xinliang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Li</forename></persName>
		</author>
		<author>
			<persName><forename type="first">Raksit</forename><surname>Ashok</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Hundt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th annual IEEE/ACM international symposium on Code generation and optimization</title>
				<meeting>the 8th annual IEEE/ACM international symposium on Code generation and optimization</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="53" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Ispike: a post-link optimizer for the intel/spl reg/itanium/spl reg/architecture</title>
		<author>
			<persName><forename type="first">C-K</forename><surname>Luk</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Muth</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Harish</forename><surname>Patil</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><surname>Cohn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Geoff</forename><surname>Lowney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Code Generation and Optimization</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2004">2004. 2004. 2004</date>
			<biblScope unit="page" from="15" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Vespa: static profiling for binary optimization</title>
		<author>
			<persName><forename type="first">Angélica</forename><surname>Aparecida Moreira</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guilherme</forename><surname>Ottoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Fernando</forename><surname>Magno</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Quintão</forename><surname>Pereira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the ACM on Programming Languages</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">OOPSLA</biblScope>
			<biblScope unit="page" from="1" to="28" />
			<date type="published" when="2021">2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Hhvm jit: A profile-guided, regionbased compiler for php and hack</title>
		<author>
			<persName><forename type="first">Guilherme</forename><surname>Ottoni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
				<meeting>the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="151" to="165" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Hhvm jump-start: Boosting both warmup and steady-state performance at scale</title>
		<author>
			<persName><forename type="first">Guilherme</forename><surname>Ottoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bin</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2021 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<biblScope unit="page" from="340" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Optimizing function placement for large-scale data-center applications</title>
		<author>
			<persName><forename type="first">Guilherme</forename><surname>Ottoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bertrand</forename><surname>Maher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="233" to="244" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Bolt: a practical binary optimizer for data centers and beyond</title>
		<author>
			<persName><forename type="first">Maksim</forename><surname>Panchenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rafael</forename><surname>Auler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bill</forename><surname>Nell</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guilherme</forename><surname>Ottoni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM International Symposium on Code Generation and Optimization</title>
		<imprint>
			<biblScope unit="page" from="2" to="14" />
			<date type="published" when="2019">2019. 2019</date>
			<publisher>IEEE</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Lightning bolt: powerful, fast, and scalable binary optimization</title>
		<author>
			<persName><forename type="first">Maksim</forename><surname>Panchenko</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Rafael</forename><surname>Auler</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Laith</forename><surname>Sakka</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Guilherme</forename><surname>Ottoni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th ACM SIGPLAN International Conference on Compiler Construction</title>
				<meeting>the 30th ACM SIGPLAN International Conference on Compiler Construction</meeting>
		<imprint>
			<date type="published" when="2021">2021</date>
			<biblScope unit="page" from="119" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Profile-guided specialization of an operating system kernel</title>
		<author>
			<persName><forename type="first">Somu</forename><surname>Perianayagam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Haifeng</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Mohan</forename><surname>Rajagopalan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gregory</forename><surname>Andrews</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Saumya</forename><surname>Debray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Workshop on Binary Instrumentation and Applications</title>
				<meeting>Workshop on Binary Instrumentation and Applications</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Profile guided code positioning</title>
		<author>
			<persName><forename type="first">Karl</forename><surname>Pettis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Robert</forename><forename type="middle">C</forename><surname>Hansen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN 1990 conference on Programming language design and implementation</title>
				<meeting>the ACM SIGPLAN 1990 conference on Programming language design and implementation</meeting>
		<imprint>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="16" to="27" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Binary rewriting of an operating system kernel</title>
		<author>
			<persName><forename type="first">Mohan</forename><surname>Rajagopalan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Somu</forename><surname>Perinayagam</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Haifeng</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Gregory</forename><surname>Andrews</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Saumya</forename><surname>Debray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Workshop on Binary Instrumentation and Applications</title>
				<meeting>Workshop on Binary Instrumentation and Applications</meeting>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Softsku: Optimizing server architectures for microservice diversity@ scale</title>
		<author>
			<persName><forename type="first">Akshitha</forename><surname>Sriraman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Abhishek</forename><surname>Dhanotia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Thomas</forename><forename type="middle">F</forename><surname>Wenisch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 46th International Symposium on Computer Architecture</title>
				<meeting>the 46th International Symposium on Computer Architecture</meeting>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="513" to="526" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Predicting program behavior using real or estimated profiles</title>
		<author>
			<persName><forename type="first">David</forename><forename type="middle">W</forename><surname>Wall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGPLAN Notices</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="59" to="70" />
			<date type="published" when="1991">1991</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=ApacheBench&amp;oldid=1061230570" />
		<title level="m">Apachebench -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2021-04">2021. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>Wikipedia contributors</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=LevelDB&amp;oldid=1060026512" />
		<title level="m">Leveldb -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2021-04">2021. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>Wikipedia contributors</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">(Linux)&amp;oldid= 1035926020</title>
		<ptr target="https://en.wikipedia.org/w/index.php?title=Perf_" />
	</analytic>
	<monogr>
		<title level="m">Wikipedia contributors. Perf (linux) -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2021-04">2021. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=Apache_HTTP_Server&amp;oldid=1079941743" />
		<title level="m">Apache http server -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2022-04">2022. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>Wikipedia contributors</note>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=Gcov&amp;oldid=1066269648" />
		<title level="m">Gcov -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2022-04">2022. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>Wikipedia contributors</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=Memcached&amp;oldid=1064747973" />
		<title level="m">Wikipedia contributors. Memcached -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2022-04">2022. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=MySQL&amp;oldid=1080373897" />
		<title level="m">Wikipedia contributors. Mysql -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2022-04">2022. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=Nginx&amp;oldid=1077266637" />
		<title level="m">Nginx -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2022-04">2022. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>Wikipedia contributors</note>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=PostgreSQL&amp;oldid=1076044937" />
		<title level="m">Wikipedia contributors. Postgresql -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2022-04">2022. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=Redis&amp;oldid=1075238126" />
		<title level="m">Redis -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2022-04">2022. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>Wikipedia contributors</note>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<ptr target="https://en.wikipedia.org/w/index.php?title=RocksDB&amp;oldid=1077997787" />
		<title level="m">Rocksdb -Wikipedia, the free encyclopedia</title>
				<imprint>
			<date type="published" when="2022-04">2022. April-2022</date>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
	<note>Wikipedia contributors</note>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Experiences in profile-guided operating system kernel optimization</title>
		<author>
			<persName><forename type="first">Pengfei</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yao</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiangqun</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 5th Asia-Pacific Workshop on Systems, APSys &apos;14</title>
				<meeting>5th Asia-Pacific Workshop on Systems, APSys &apos;14<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Rethinking compiler optimizations for the linux kernel: An explorative study</title>
		<author>
			<persName><forename type="first">Pengfei</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yao</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiangqun</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th Asia-Pacific Workshop on Systems, APSys &apos;15</title>
				<meeting>the 6th Asia-Pacific Workshop on Systems, APSys &apos;15<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015">2015</date>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1" to="2" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Building application-specific operating systems: a profile-guided approach</title>
		<author>
			<persName><forename type="first">Pengfei</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yao</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Lu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiangqun</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Hong</forename><surname>Mei</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science China Information Sciences</title>
		<imprint>
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page">92102</biblScope>
			<date type="published" when="2018-08">Aug 2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Profmig: A framework for flexible migration of program profiles across software versions</title>
		<author>
			<persName><forename type="first">Mingzhou</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Bo</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Yufei</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xipeng</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2013 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)</title>
				<meeting>the 2013 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">On the impact of instruction address translation overhead</title>
		<author>
			<persName><forename type="first">Yufeng</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Xiaowan</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Alan</forename><forename type="middle">L</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sandhya</forename><surname>Dwarkadas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2019 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS)</title>
				<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="106" to="116" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
