<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A New Congestion Control Scheme : Slow Start and Search (Tri-S )</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Zheng</forename><surname>Wan</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Jon</forename><surname>Crowcroft</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University College Londo</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<address>
									<addrLine>Gower Street</addrLine>
									<postCode>WC1E 6BT</postCode>
									<settlement>London</settlement>
									<country>United Kingdo</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A New Congestion Control Scheme : Slow Start and Search (Tri-S )</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">E532DF2D49CE15AE488B16F7D2328290</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:01+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Recently there have been many measures proposed to tackle the problem of congestion i n computer networks . In this paper, we first analyze some of the measures and then present a new scheme in which the optimal operating point is obtained by evaluation of throughput gradient and resource sharing is adjusted only at the beginning and the end of a connection . Simulation results show that the scheme converges to an optimal operating point quickly and fairly .</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>There are two basic approaches for congestion control in computer networks : end-point control and network control . In a stateless network such as Internet, where each packet is treated as an independent entity and th e communication subnet does not have any information on individual traffic flows, congestion control is mainly th e responsibility of the end users . The end-point control schemes must regulate the traffic demands according to th e resources available in the network . This approach is used in DECBIT <ref type="bibr" target="#b0">[3]</ref>, Source Quench <ref type="bibr" target="#b2">[5]</ref>, CUTE[1], CARD[2 ] and the JK scheme <ref type="bibr" target="#b1">[4]</ref> . In a stateful network such as Flow Network <ref type="bibr" target="#b4">[7]</ref>, where intermediate systems (gateways an d switches) monitor some states of each individual flow, congestion control emphasizes network control . With th e information on individual flows, the network can take control actions such as reservation, round robin scheduling , priority queuing, selective dropping to ensure fair sharing of network resources among all users . Packets from illbehaved sources can be delayed or even dropped so that well-behaved users be protected . Examples are Fai r Queuing <ref type="bibr" target="#b3">[6]</ref> and Virtual Clock <ref type="bibr" target="#b4">[7]</ref> ,</p><p>The network control approach can provide protection from ill-behaved sources . However, it requires the intermediate systems to monitor individual flows and perform sophisticated operations . The end-point contro l approach is simple to implement and has no or little overhead on intermediate systems . But it only works in a cooperative environment . An end-point control scheme can be used in conjunction with a network contro l scheme to achieve maximal performance . For example, when the Fair Queuing algorithm is implemented in gateways, the fair sharing of resources among different source-destination pairs is enforced by the gateways . An endpoint scheme can be used in the end systems to determine the sharing of resources among users with sam e source-destination identification .</p><p>In this paper, we focus our attention on end-point control schemes . We first examine some of the measure s proposed recently, then present a new scheme : Slow Start and Search (Tri-S) and discuss some simulation results .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Analysis of End-Point Control Scheme s</head><p>The ideas behind our Tri-S scheme was inspired by some observations on the end-point control schemes proposed recently, and the JK scheme <ref type="bibr" target="#b1">[4]</ref> in particular . In this section we first discuss some general issues and the n analyze the behavior of the JK scheme in detail .</p><p>Congestion occurs when the traffic demands exceed the available resources at some point in the network for a certain period of time . If the demands persist, the excessive packet build-up at the bottleneck will eventually lea d to the overflow of the buffer and retransmission of the lost packets . A congestion control scheme is to maintai n the balance of demand and supply in the network . It has two basic objectives : 1) to ensure that the bottlenec k operates at an optimal point, 2) to ensure that the sharing of resources among users is fair . We refer them a s optimality and fairness respectively . Although these two issues are closely related to each other, they are very different in nature .</p><p>Optimality is concerned with the overall traffic load at a bottleneck . To maintain the bottleneck operating at an optimal point requires that the end users to adjust their traffic demands according to the changing conditions in th e network . It is a feedback control system by its nature . A bottleneck can gather information on its utilization suc h as queue length and link utilization, and feedback explicit control information to the traffic sources <ref type="bibr" target="#b0">[3,</ref><ref type="bibr" target="#b2">5]</ref> . Alternatively, the end users can also determine the conditions in the network by deriving the implicit information such a s timeout and delay from the acknowledgements received [1,2] .</p><p>Fairness is related to the sharing of resources among the individual flows . To determine fairness requires information on the composition of the flows . It is obvious that the bottleneck itself is in a better position than the en d users to enforce fairness . The bottleneck can monitor the share of each flow and send explicit control informatio n to the users <ref type="bibr" target="#b6">[9]</ref>, or it can serve the flows in a virtual Time Division Multiplexed fashion <ref type="bibr" target="#b3">[6,</ref><ref type="bibr" target="#b4">7]</ref> .</p><p>Based on the information feedback, an end-point control scheme can achieve optimality reasonably well b y decreasing traffic demands when the bottleneck is overloaded and increasing traffic demands when the bottlenec k is underloaded . However, it has been shown that only the additive increase and multiplicative decrease algorithm , under synchronous operation, converges to an fair operating point <ref type="bibr" target="#b5">[8]</ref>, The idea is that each user gains a equa l share in the increase operation and lose in proportion to the share it has in the multiplicative decrease operation . Therefore the users who have larger than fair shares lose some advantage in each iteration and eventually all user s oscillate in a range near the optimal point . However, many iterations of additive increase and multiplicativ e decrease operations may be needed in order to reach the optimal point . The time for additive operation is proportional to the round trip delay . The convergence can be very slow when the propagation delay of the links is large . There are additional difficulties in applying this algorithm into a window-based control scheme <ref type="bibr" target="#b6">[9]</ref> and the condition of synchronous operation is hard to satisfy .</p><p>In the rest of this section we examine in detail the behavior of the JK scheme . Most of the problems with th e scheme have been discussed in <ref type="bibr" target="#b4">[7]</ref> . Our attempt here is to examine the causes of the problems and discuss th e directions of improvement .</p><p>The JK scheme is a set of algorithms added into TCP after the Interenet experienced a series of congestion collapses . It uses timeout as the signal of congestion and the additive increase and multiplicative decrease as the window adjustment algorithm, In addition to the congestion control measure, the JK scheme also performs a slowstart when starting a connection or restarting after a timeout . The slow-start allows the number of packets intransit to be increased gradually . On a timeout, the JK scheme resets the window size to one and then increases i t exponentially to half of the window size used before the timeout .</p><p>It has been observed that the JK scheme has a problem of oscillation . The window size and the queue lengt h often exhibit clear oscillating behaviors when the traffic demands exceed the available resources . Such oscillatio n is inherent in the additive increase and multiplicative decrease algorithm and is used as a measure of probin g resource changes <ref type="bibr" target="#b5">[8]</ref> . To eliminate the oscillation, there has to be a better way of determining whether or not th e bottleneck is operating at an optimal point .</p><p>As timeout is used as the signal of congestion, the JK scheme tends to push the utilization of the bottleneck t o its maximum . Apart from the slow-start period, which is very short, the JK scheme for most of the time oscillate s the window size between the maximum window size (ie. the maximum size that does not cause overflow of th e buffer) and half the maximum window size . This oscillation in window size leads to high queuing delay and high delay variation . It is desirable that the window should be adjusted only when there are traffic changes .</p><p>In the JK scheme, the users that have smaller round trip delays tend to get larger shares of the resources . Thi s is caused by the fact that the window size is used as the basis for traffic demand adjustment and the additiv e increase and multiplicative decrease algorithm will eventually force all users to have the same window size . Th e resources therefore are allocated in proportion with the round trip delays that the users experience . To achiev e fairness, a congestion scheme has to use rate or throughput rather than window size as the basis for traffic adjustment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">. The Tri-S Schem e</head><p>The Tri-S scheme adopts a novel approach for congestion control in datagram networks . Instead of approaching to an optimal and fair operating point by repeating the multiplicative decrease and additive increase operation , the Tri-S scheme attempts to quickly establish an optimal and fair operating point each time when there are major traffic changes . The Tri-S scheme treats the network as a black box, ie . the network does not need to take an y additional actions or send additional information . The traffic load is deduced from the acknowledgements by usin g a metric called normalized throughput gradient (NTG ) . We now discuss three major features of this scheme ,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A . Demand Adjustmen t</head><p>In contrast to most of the end-point control schemes in which traffic demands are subject to continuous adjustment based on the feedback, the Tri-S scheme attempts to establish the sharing of the resources when there ar e significant traffic changes, eg . at the beginning and the end of a connection . Once the sharing of the resources has been settled, it will remain unchanged until the new change occurs . Temporary traffic fluctuation is dealt with buffering rather than traffic adjustment at the end-points . When a new user joins in and the overall traffi c demands (or window size) can no longer be accommodated with the resources and lead to overflow of the buffer , all users start a new session of demand adjustment . When a user leaves, the remaining users will detect th e change in the NTG metric and absorb the released resources . The Tri-S scheme has three operation modes which are described as follows:</p><p>1). When a user initiates a connection, it enters the initialization mode . The window size is set to one basic adjustment unit (BAU) . Upon receiving each acknowledgement, the window size increases by one BA U until the maximum size allowed by the end user has been reached. 2). When a packet is timed out and the user starts retransmission, it enters the decrease mode . The window size is set to one BAU . Upon receiving an acknowledgement, it checks the NTG . The window size is increased by one BAU if the NTG is over a threshold NTG d . Otherwise it enters the increase mode . 3). In the increase mode, the window is increased by BAU/(current-window-size) each time when an acknowledgement is received . If the accumulated increase is larger than the packet size, the NTG is checked . If the NTG is less than a threshold NTG ; , the window size decreases by one packet size, Otherwise, d o nothing .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B . Operating-Point Search</head><p>The operating-point searching in the Tri-S scheme is based on continuous evaluation of the current throughpu t gradient . Consider the general characteristic of the network total throughput as a function of offered load, as illustrated in Fig . <ref type="figure">l</ref> . Throughput increases linearly with the traffic load under light traffic and levels off when the pat h is saturated . The traffic load at the turning point also rises when the resources at the bottleneck increases . The gradient of the throughput curve can be used as the indicator of the resource utilization on that path . We defin e</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Throughput Gradient TG (WO = T (Wn)-T (Wn_ 1 ) Wn `Wn-1</head><p>where Wn and Wn _ 1 represent the two sequential window sizes and T(Wn) is the throughput at window size o f Wn . Although TG decreases towards to zero as the traffic load increases, the actual values of the TG that th e users have are different as they depend on round trip delays . The actual metric used in our scheme is called normalized throughput gradient (NTG), which is defined as</p><formula xml:id="formula_0">NTG (W,,) = TG (Wn ) TG(W I ) Throughput Knee A Cliff T , T 2 T 3</formula><p>Offg oa d</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig .] ; Total Network Throughput as a Function of Offered Load</head><p>As the traffic load changes, the NTG varies approximately in the range [1,0] . Under light traffic, the NTG i s around 1 since the increase in throughput is approximately proportional to the increase in traffic load . The NTG decreases gradually as the traffic load increases and reach around zero when the path is saturated .</p><p>When resources are released, the NTG may rise substantially since for each user it is equivalent to th e resources at the bottleneck has been increased . As can be seen in Fig . <ref type="figure">1</ref>, the throughput can jump from throughpu t T 2 to a higher level T 1 when the resources are increased .</p><p>The average throughput during the round trip time of the nth packet can be expressed by : T" _ " , where Wn is the number of bytes outstanding in the network (including the packet is being transmitted) at the time of transmission of the nth packet and Dn is the round trip delay measured when the acknowledgement of the nth packet is received . The window size is adjusted each time by the amount of one BAU , so we have Wn -Wn-1=Wi -Wo and NTG(Wn)= T(Wn)(W1)Wn-~) Let W"ow and D . represent the current window size and the current round trip delay respectively at the tim e when an acknowledgement is received and window size and delay have been updated . If all users have the same packet size and BAU equals to the packet size, Wn can be derived directly from W"ow . The relationship betwee n Wn and Wnow in the increase mode is illustrated as (W"ow , Wn ) in Fig . <ref type="figure">2</ref> . The number of packets outstanding in th e network changes only when the window size is increased, ie. when an acknowledgement is received . When th e acknowledgement of the nth packet is received, there are n packets outstanding in the network, the window siz e increases from n to n+l and the (2n)th and (2n+1)th packet are sent out . So we have and T,, = Wnow 2D,, 0,, (if n is an odd number )</p><p>and 'T,, = W now -1 (if n is an even number )</p><formula xml:id="formula_1">now Wn = Wno w 2 Wnow-1 Wn = 2</formula><p>In the increase mode, the window opens linearly and the N7'G is evaluated only when the window size i s increased by one . We get Wn = Wnow -1 and Tn = W 0 1 - <ref type="figure">----------------------------------------</ref> Fig . <ref type="figure">2</ref> : The Relationship Between the (n)th packet and its acknowledgemen t If the users have different packet sizes or BAU does not equal to the packet size, the relationship is not s o straightforward . In this case, the packet sequence number and Wn can be recorded at the time when the nth packe t is transmitted for later computation of NTG when its acknowledgement is received . Similar measures have been proposed in <ref type="bibr">[2]</ref> . Since BAU is the minimum size that the window can be increased or decreased, it should remai n reasonable small if the packet size is very large, so that the adjustment of the window can be fine and gradual .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C . Statistical Fairnes s</head><p>Fairness is the most challenging issue for the end-point control schemes . In the absence of the information o n individual flows, neither the network nor the users can figure out exactly which users should change their traffi c demands and to what extend. In the Tri-S scheme, a new approach called statistical fairness is adopted . The ide a is to ensure that during the demand adjustment all users start increase their traffic demands at the same time fro m the same level and with a same algorithm until the path is saturated . The final share that each user has may not b e absolutely equal due to the statistical nature of traffic and network . But all users have the equal opportunity . I n other words, such approach is statistically fair, ie . over many runs of operation, each user on the average has a n equal share . This statistical fairness approach implies the need of synchronization at the beginning of an adjustment session . In the Tri-S scheme, the adjustment session starts only when a connection starts to retransmit lost packets . I t has been observed in simulation that the losses of packets are synchronized by the overflow of the bottlenec k buffer and the retransmissions of individual flows are highly synchronized (also see Chapter 3 of <ref type="bibr" target="#b4">[7]</ref>) .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>::&gt; TCP User</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">. Simulation Results</head><p>One of the difficulties in performance study of congestion control schemes is that a scheme performs well i n one setting may not do so well in another one . It is important that many different settings are tested and the wors t cases are exploited . Very complicated settings may represent more accurately the real world . On the other hand , they make it more difficult to pinpoint the problems and visualize the operation of the scheme . In our simulation experiments, there are five carefully selected simple scenarios : 1) . one user using one path, 2) . two users sharing one path, 3) . two users sharing one path partially, 4) . one user joining in a steady flow, 5) . one user leaving a steady flow .</p><p>The analysis of simulation data has to be done with great care . In some cases, particularly in those case s where there are threshold behaviors in the scheme, measurement data can be highly correlated . Therefore independent replications may be necessary to achieve sufficient statistical accuracy . The transit behavior is also important to understand and visualize the operation of the scheme . In our experiments, we plot the data of a particular ru n and also present the average results of 20 independent runs . Fig . <ref type="figure" target="#fig_0">3</ref> shows the basic topologies used in the simulation . All packets are of the same size 512 bytes and th e BAU equals to the packet size. Links between a host and a switch have a capacity of 1000 kbps with zero propagation delay . Links between two switches have a capacity of 500 kbps with 50 ms propagation delay . Each switc h has a buffer of 30 packets . The maximum window size allowed by end systems is 85 packets . The thresholds NTG ; and NTG d are 0 .5 . We assume that the data transmission is error-free. For each scenarios, both the Tri-S scheme and the JK scheme are tested . The average results of 20 independent runs are shown in Fig . <ref type="figure">4</ref> (the first 1 0 seconds of data is excluded) . For each scenario, samples of the results in the first 40 seconds of one particular ru n are also plotted (see Fig . <ref type="figure">5</ref> -Fig . <ref type="figure">14</ref>) . In the first two scenarios, the window size is plotted instead of the throughpu t as they are equivalent and the window size can show more clearly the operation of the scheme . The throughput i s measured every time when an acknowledgement is received . The queue length refers to the outgoing queue of th e first switch . </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig .4 Average Result s A. Scenario One</head><p>In the simplest configuration, ie, a link with one flow (see Fig. <ref type="figure" target="#fig_0">3(a)</ref>), the Tri-S scheme demonstrates some o f the most desired features of traffic control (see Fig . <ref type="figure">5</ref>) . After initial negotiation period, the window size stablizes . It can be seen from the queue length graph that the bottleneck operates in its full capacity while the queuing delay remains very low . A closer look at both the window size graph and the queue length graph reveals some interesting details : from 10 seconds onwards, each time when the queue length drops from two to one, the window siz e increases one to bring the queue length back to two . Fig . <ref type="figure">6</ref> shows that apart from the slow-start period the J K scheme oscillates the window size between the maximum and half the maximum .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Scenario Two</head><p>In this scenario, two users share the same link (see Fig . <ref type="figure" target="#fig_0">3(b)</ref>) . This scenario is to test the behavior of the schemes in the presence of competition of resources . Although the average results of the two schemes are relatively close, the samples of data plotted in Fig . <ref type="figure">7</ref> and Fig . <ref type="figure">8</ref> show significant difference between two schemes . Many of the problems with the JK scheme discussed previously is illustrated here clearly . The Tri-S schem e shows its stable and optimal behaviors . The window sizes of two users are extremely close and the variations ar e small .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Scenario Thre e</head><p>When two users only partially share one path (see Fig . <ref type="figure" target="#fig_0">3(c</ref>)), The Tri-S scheme can no longer achieve exac t equal sharing of the resource between the two users . The reasons are discussed in the next section . Nevertheless , the queue length is still stable and short and the sharing of resources is relatively fair as compared with the J K scheme . The oscillating behavior of the JK scheme is aggravated in this scenario as the user with shorter dela y changes the window size more rapidly . There are some black areas in the throughput graphs instead of curves . This is caused by the high density of the data .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Scenario Fou r</head><p>In the previous scenarios, the two users starts their connections at a same time . In this scenario, one of the tw o users that share one link partially (see Fig . <ref type="figure" target="#fig_0">3(c</ref>)) starts its connection first and the other user joins in 9 seconds later . It is shown that the final results are similar to those in the scenario three .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Scenario Fiv e</head><p>In the final scenario, one of the two users that share one link partially terminates it connection. The Tri-S scheme detects the change in traffic quickly and moves to another optimal operating point . the JK scheme can also absorb the released resources but the window size will be increased until a timeout and start the oscillation again . This can be been seen in Fig . <ref type="figure">14</ref> as it will take long time for the queue to build up .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">. Discussion s</head><p>The Tri-S scheme presented here is still very primitive and needs to be further improved . In this section, we discuss some important issues and areas for future research .</p><p>The thresholds NTG; and NTG d are important parameters . NTGd determines the operating point at which th e flows will settle during the demand adjustment session . Experiments show that when NTG d is smaller than 0 .3 o r larger than 0 .8, the average queue length at the bottleneck is often above 20 or below 0 .5 . The value we use in the simulation (0 .5) maintains the queue length between 2 to 10 . NTG ; affects the sensitivity of detecting the release d resources . It should be large enough to allow some fluctuation of traffic flows . The precise relationship between the thresholds and operating point is yet to be studied .</p><p>The round trip delay of the first packet in the slow-start (D 1) plays an important role in operating-point search . It eliminates the effects of different round trip delays therefore normalizes the NTG . It is, in fact, approximately equal to the propagation delay as it is the round trip delay with smallest window size (1) . It is highly desirable that the first packet of a TCP connection (the segment with SYN bit set) has a higher priority, so that the effects o f queuing delay can be minimized and propagation delay can be measured accurately . In our simulation, however , the effects of queuing delay are surprisingly small . It is due to the fact that D 1 is the round trip delay of the firs t packet measured after a timeout when the path is nearly empty . Nevertheless, it is still desirable to measure th e propagation delay with a higher priority packet . In a complex traffic condition, it may not be possible to ensur e that there are no traffic after the timeout period. Propagation delay is an important parameter that can be of grea t use in routing and traffic control yet it is not available in most of the transport protocols .</p><p>The synchronization of the traffic demand adjustment is the key issue that affects fairness . The synchronization of retransmissions used in the Tri-S scheme weakens when the users have different round trip delays . Th e unfairness when two users share partially is caused by the fact that two users have different timeout periods . The user that has shorter delay tends to retransmit first and therefore has a larger share . The degree of synchronization also deteriorates when the number of flows increases . We are looking at ways of enhancing the synchronization b y using more explicit measures .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENT</head><p>We would like to thank Lixia Zhang, Van Jacobson, Allison Mankin and Gregory Finn for their comments an d suggestions .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>REFERENCE S</head><p>[1] R . Jain, "A Timeout-  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig . 3 :</head><label>3</label><figDesc>Fig .3 : Simulation Configuration s</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig . 5 Fig . 7 Fig . 9 Fig . 11</head><label>57911</label><figDesc>Fig .5 Scenario One (Tri-S) Fig .6 Scenario One (Slow-Start)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>-</figDesc><table><row><cell>OR</cell><cell>(1,1 )</cell><cell></cell><cell></cell><cell></cell><cell>Round Trip Tim e</cell></row><row><cell></cell><cell>n (2,1)</cell><cell></cell><cell></cell><cell>n</cell><cell>The (n)th packet being transmitted</cell></row><row><cell>1R</cell><cell>(2 , 2)</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>0)</cell><cell></cell><cell></cell><cell>®</cell><cell>The ack of the (n)th packet receive d</cell></row><row><cell></cell><cell>(3, 2 )</cell><cell>6 (4,3 )</cell><cell></cell><cell></cell></row><row><cell>2R</cell><cell>5 (3,3)</cell><cell>(4,4 )</cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell>-CI</cell><cell>Cr y</cell><cell>,</cell></row><row><cell></cell><cell>8 (5,4)</cell><cell>10 (6,5)</cell><cell>12</cell><cell>(7,6)</cell><cell>14 (8,7 )</cell></row><row><cell>3R</cell><cell>9 1(5,5)</cell><cell>11 (6,6)</cell><cell cols="2">13 (7,7)</cell><cell>(8,8)</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>Based Congestion Control Scheme for Window Flow-Controlled Networks," IEEE Jour . on Selected Areas of Communications, Vol . SAC-4, No . 7, pp. 1162-1167, Oct . 1986 . [2] R . Jain, "A Delay-Based Approach for Congestion Avoidance in Interconnected Heterogeneous Compute r Networks," Comp . Commun . Rev ., Vol . 19, no . 5, pp . 56-71, Oct . 1989 .</figDesc><table><row><cell>Window Size (pks)</cell><cell>Window Size (pks )</cell></row><row><cell>100 -</cell><cell>100 -</cell></row><row><cell>90-</cell><cell>90</cell></row><row><cell>80 -</cell><cell>80 -</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>Computer Communication Review</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>Computer Communication Revie w</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An Explicit Binary Feedback Scheme for Congestion Avoidance in Computer Networks with a Connectionless Network Layer</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">K</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc . of ACM SIGCOMM &apos; 88</title>
		<meeting>of ACM SIGCOMM &apos; 88<address><addrLine>Stanford, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1988-08">Aug . 1988</date>
			<biblScope unit="page" from="303" to="313" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Congestion Avoidance and Control</title>
		<author>
			<persName><forename type="first">V</forename><surname>Jacobson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc . of ACM SIGCOMM &apos; 88</title>
		<meeting>of ACM SIGCOMM &apos; 88<address><addrLine>Stanford, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1988-08">Aug. 1988</date>
			<biblScope unit="page" from="314" to="329" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Something a Host Could Do with Source Quench : The Source Quench Introduced Dela y (SQuID)</title>
		<author>
			<persName><forename type="first">W</forename><surname>Prue</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Postel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987-07">July 1987</date>
			<pubPlace>Menlo Park, CA</pubPlace>
		</imprint>
	</monogr>
	<note>RFC-1016, SRI International</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Analysis and Simulation of a Fair Queuing Algorithm</title>
		<author>
			<persName><forename type="first">A</forename><surname>Demers</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Keshav</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc . of ACM SIGCOMM &apos; 89</title>
		<meeting>of ACM SIGCOMM &apos; 89<address><addrLine>Austin, TX</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989-09">Sept . 1989</date>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A New Architecture for Packet Switching Network Protocols</title>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">MIT</title>
		<imprint>
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
	<note type="report_type">PhD Thesis</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Analysis of Increase and Decrease Algorithms for Congestion Avoidance in Computer networks</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp . Networks and ISDN Syst</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="1" to="14" />
			<date type="published" when="1989">1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Congestion Avoidance in Computer Networks with a Connectionless Network Layer, Part IV : A Selective Binary Feedback Scheme for General Topologies</title>
		<author>
			<persName><forename type="first">K</forename><forename type="middle">K</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">M</forename><surname>Chiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">DEC Technical Report</title>
		<imprint>
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
	<note>TR-510</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
