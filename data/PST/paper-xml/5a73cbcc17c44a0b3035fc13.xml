<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Flow Wars: Systemizing the Attack Surface and Defenses in Software-Defined Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Changhoon</forename><surname>Yoon</surname></persName>
							<email>chyoon87@kaist.ac.kr</email>
						</author>
						<author>
							<persName><forename type="first">Seungsoo</forename><surname>Lee</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Heedo</forename><surname>Kang</surname></persName>
							<email>kangheedo@kaist.ac.kr</email>
						</author>
						<author>
							<persName><forename type="first">Taejune</forename><surname>Park</surname></persName>
							<email>taejune.park@kaist.ac.kr</email>
						</author>
						<author>
							<persName><forename type="first">Seungwon</forename><surname>Shin</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Vinod</forename><surname>Yegneswaran</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Phillip</forename><surname>Porras</surname></persName>
							<email>porras@csl.sri.com</email>
						</author>
						<author>
							<persName><forename type="first">Guofei</forename><surname>Gu</surname></persName>
							<email>guofei@cse.tamu.edu</email>
						</author>
						<author>
							<persName><forename type="first">Seungwon</forename><forename type="middle">Shin</forename><surname>Yoon</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">SRI International</orgName>
								<address>
									<postCode>94025</postCode>
									<settlement>Menlo Park</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Texas A&amp;M University</orgName>
								<address>
									<postCode>77843</postCode>
									<settlement>College Station</settlement>
									<region>TX</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Flow Wars: Systemizing the Attack Surface and Defenses in Software-Defined Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">D57821EB5C003877BB0862A23BC97D78</idno>
					<idno type="DOI">10.1109/TNET.2017.2748159</idno>
					<note type="submission">received January 22, 2016; revised February 1, 2017; accepted August 15, 2017; approved by IEEE/ACM TRANSACTIONS ON NETWORK-</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T15:13+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Software defined network security</term>
					<term>SDN security</term>
					<term>network security</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Emerging software defined network (SDN) stacks have introduced an entirely new attack surface that is exploitable from a wide range of launch points. Through an analysis of the various attack strategies reported in prior work, and through our own efforts to enumerate new and variant attack strategies, we have gained two insights. First, we observe that different SDN controller implementations, developed independently by different groups, seem to manifest common sets of pitfalls and design weakness that enable the extensive set of attacks compiled in this paper. Second, through a principled exploration of the underlying design and implementation weaknesses that enables these attacks, we introduce a taxonomy to offer insight into the common pitfalls that enable SDN stacks to be broken or destabilized when fielded within hostile computing environments. This paper first captures our understanding of the SDN attack surface through a comprehensive survey of existing SDN attack studies, which we extend by enumerating 12 new vectors for SDN abuse. We then organize these vulnerabilities within the wellknown confidentiality, integrity, and availability model, assess the severity of these attacks by replicating them in a physical SDN testbed, and evaluate them against three popular SDN controllers. We also evaluate the impact of these attacks against published SDN defense solutions. Finally, we abstract our findings to offer the research and development communities with a deeper understanding of the common design and implementation pitfalls that are enabling the abuse of SDN networks.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>S OFTWARE-DEFINED networking has steadfastly emerged as the flagship technology for enabling dynamism and elasticity in next-generation networks. SDNs offer a pathway for cloud network orchestration and many enterprise networks have already deployed or plan to deploy such technology in the near future. While some are motivated by reduced operational cost, others make the switch to improve the flexibility of their network architectures and enable exciting new network functionality (e.g., Google data centers <ref type="bibr" target="#b25">[26]</ref>, <ref type="bibr" target="#b60">[62]</ref>). As the popularity of SDNs increase, it is likely that legacy network elements will be steadily replaced with SDN applications and white-box network elements.</p><p>However, among the impediments to large-scale migration of legacy production networks are concerns about the security implications of such changes. On the one hand, SDNs offer an agility in software-controlled network flow and topology management that is well suited to address the increasing needs of today's dynamic networks. On the other hand, this same new agility in dynamic flow and topology management also introduces new challenges in maintaining well-defined and consistent network perimeter controls. For example, can one or more network applications inadvertently manipulate flows in a manner that bypasses security devices or security policies? <ref type="bibr" target="#b43">[45]</ref> Can one network application produce unexpected interference with the operation of other peer network applications and impact the network's robustness <ref type="bibr" target="#b51">[53]</ref>? In contrast to legacy networks, which are typically constrained by tight-knit topologies and restricted operations, the security of SDNs is highly dependent on the trustworthiness of the network applications and the integrity of the forwarding plane.</p><p>In this paper, we adopt a more systematic and pragmatic approach to evaluating the vulnerabilities that arise throughout SDN stacks. We first conduct a comprehensive survey of possible methods for abuse or exploit of an example SDN stack that is implemented in OpenFlow. We utilize these examples to develop a taxonomy for such attacks, that is based on the CIA model. Informed by the results of our study, we suggest architectural improvements to detect or mitigate the impacts of such abuses. We begin by first surveying example vectors for abuse or direct attack reported in current SDN literature, including many SDN-related research projects <ref type="bibr">[43]</ref>, SDN research papers <ref type="bibr" target="#b33">[34]</ref>, <ref type="bibr" target="#b34">[35]</ref>, and technical blog articles <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b11">[12]</ref> from both the network and security communities. We extend this work by discovering 12 additional novel abuse or attack cases through a thorough examination of well-known SDN elements and their use cases. For example, we explore various security-related abuses that may arise from network applications running on real-world open-source SDN controllers, such as OpenDayLight <ref type="bibr" target="#b0">[1]</ref> and FloodLight <ref type="bibr" target="#b14">[15]</ref>.</p><p>For each identified vulnerability, we conduct a systematic evaluation of the attack surface with real-world experiments. The objective of these experiments is to underscore the feasibility, effectiveness, and significance of such attacks and API misuses in practice. We implement and reproduce the attacks in a realistic SDN testbed consisting of real-world SDN controllers and OpenFlow network devices, including: (i) three different well-known SDN controllers, FloodLight <ref type="bibr" target="#b14">[15]</ref>, OpenDaylight <ref type="bibr" target="#b0">[1]</ref>, and POX <ref type="bibr" target="#b44">[46]</ref>; and (ii) three OpenFlow network devices supporting SDN functions from two different vendors, HP and Pica8.</p><p>Finally, we distil the lessons learned from our analysis into a set of development and operational best practices that serve to mitigate the effects of such vulnerabilities. We do so while acknowledging the inherent difficulties in designing bug-free applications and the benefits of an open-source communitydriven software development process. If SDN developers and administrators carefully design network applications and operate SDN elements with such rigorous assessments, we believe that the attack surface of a deployed SDN can be greatly reduced.</p><p>In summary, the key contributions of this paper include the following. First, we conduct a comprehensive examination of SDN attacks and security-relevant abuses, including a presentation of 12 previously unreported SDN attack vectors. We classify each vector analyzed in the form of an SDN attack taxonomy that offers a systematic categorization of the design or implementation weakness that enables each of our reported cases. Second, we implement and test 22 of these attack and abuse strategies using real-world SDN devices to validate their feasibility and prevalence, and to assess their impact. We summarize our test-case findings in Table <ref type="table" target="#tab_1">II</ref>, and observe that indeed many of our cases occur across independently-developed control-layer implementations. Third, we provide an in-depth analysis of each attack or abuse strategy, and discuss possible methods to harden an SDN in a manner that prevents or reduces the impact of each test case. In addition, we introduce guidelines for SDN application design and development that is specifically tailored to avoid similar misuse attacks. We hope that this focused assessment and attack taxonomy will bring greater awareness to the design and implementation pitfalls that render today's software-defined networks vulnerable to a wide range of abuse.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. BACKGROUND</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. What is Software Defined Networking (SDN)?</head><p>A fundamental issue with legacy network devices is their functional rigidity. Specifically, a legacy network device (e.g., network switch) consists of two main components: (i) control plane and (ii) data plane. The control plane conducts complicated network functions such as creating routing tables to determine network flow control policies. The data plane is tightly coupled with the control plane, and it handles hardwarelevel network packet forwarding based on the policies from the control plane. If one desires to add a new network function or protocol, the legacy device must be removed and a redesigned device must be implemented and re-deployed in its place. This prospect has seriously hindered the ability to rapidly innovate, test, and deploy new or advanced network functions and protocols.</p><p>Emerging programmable network architectures, such as Software Defined Networks (SDNs), seek to address this limitation by separating the control plane from the data plane <ref type="bibr" target="#b20">[21]</ref>, <ref type="bibr" target="#b37">[38]</ref>, <ref type="bibr" target="#b55">[57]</ref>. An SDN simplifies the data plane to provide basic and efficient packet forwarding, and separates the complex and dynamic control plane functions into software applications, which are hosted on commodity hardware platforms, referred to as the controller. This architectural separation of the data and control planes enables one to easily program new network control functions as applications.</p><p>The Open Networking Foundation <ref type="bibr" target="#b39">[40]</ref> conceptualizes SDN architectures into three-layers, as shown in Figure <ref type="figure" target="#fig_0">1</ref>. Here, the infrastructure layer denotes the data plane. To add more programmability to the control plane, the control plane is separated into the control layer and the application layer. The  role of the control layer is analogous to that of a traditional operating system running application programs, it manages SDN applications and provides developers with an interface for writing network flow management applications that control the packet handling operations of the data plane.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. What is OpenFlow?</head><p>The OpenFlow <ref type="bibr" target="#b37">[38]</ref> open standard protocol represents one popular embodiment of an SDN. It specifies functions of network devices (e.g., switch) and defines the communication protocol between the data plane and the control plane. OpenFlow-enabled network devices (i.e., data plane) are managed by OpenFlow controllers (i.e., control plane) such as NOX <ref type="bibr" target="#b17">[18]</ref>, Floodlight <ref type="bibr" target="#b14">[15]</ref>, and POX <ref type="bibr" target="#b44">[46]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. SECURITY REQUIREMENTS FOR SDN</head><p>As the first step of our study, we explore the unique security requirements that must be fulfilled in order for a softwaredefined network to provide a reliable and secure networking environment. We identify the critical assets that must be secured for each layer of the SDN architecture, and apply the classic CIA (Confidentiality, Integrity and Availability) triad model to derive the security requirements. Table <ref type="table" target="#tab_0">I</ref> summarizes the unique critical assets that must be protected in each layer of SDN, and the assets are classified according to the respective CIA attributes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Control Plane Assets</head><p>One of the most critical assets in the control plane would be the controller instance itself. The controller instance, which is usually a single process, should be available at all times. Whenever the control plane becomes unavailable, the entire network goes out of control. Furthermore, loss of confidentiality and integrity of controller configuration imposes risk. The controller configuration usually contains extremely sensitive information, such as the administrator login credentials, REST API access URLs etc., and adversaries can simply use such information to take over the entire network or manipulate the information to cause configuration errors.</p><p>Another critical asset is the network service (or SDN application). Network services usually perform useful and important network functions, ranging from simple forwarding to advanced load balancing. Such services should always be available to the network; failure to continuously provide the services will affect the network behavior. The integrity of the active network service list also must be preserved for the same reason. Moreover, these network services are also configurable, and the configuration of the services should never be disclosed or manipulated. For example, the configuration information may include the ACL rules for firewall service, and disclosure or manipulation of such information may put the entire network at risk.</p><p>When these network services make network control decisions, a global network-view is often referenced. A simple forwarding service, for instance, will calculate the path based on the global network-view and install flow-rules to the devices on the paths. Hence, inaccurate or manipulated global network-view will cause various network problems, and the information should always be available to the network services. In addition, a complete network topology information is sensitive and thus should be kept confidential.</p><p>Finally, the network behavior should never be intentionally manipulated by the entities other than the authorized SDN controller and network services activated by the network administrator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Control Channel Assets</head><p>An SDN controller establishes connections with multiple network devices and exchanges control messages, mostly to control the network. These control messages contain sensitive network information and important control decisions, and therefore, the confidentiality and integrity of such messages must be preserved. Obviously, the connections between the controller and devices should remain available at all times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Data Plane Assets</head><p>The data plane components (or SDN switches) establish connections with a centralized SDN controller and communicate with the controller via exchanging control messages. An SDN switch should always be able to accept/send control messages and install flow rules as instructed. Such basic SDN-specific services should be available under any consequences.</p><p>In an SDN, an SDN controller dynamically programs the network by installing flow rules to the underlying SDN switches, and the flow rules installed to each switch (flow table entries) should never be manipulated by unauthorized entities as any modifications made to the flow table will directly change the network behavior. Moreover, since the flow table entries intuitively and directly express network control policies, the entries must remain confidential. For example, by looking at the flow table entries, it is possible to infer the ACL policy enforced to the network.</p><p>Best practices and security requirements (e.g., controlled and secure CLI access, secure SNMP) applied in the management of traditional network switches also apply to SDN switches. In addition, since there exist SDN-specific vulnerabilities that adversaries may exploit to compromise the network, the SDN switches should be indistinguishable from any other network switches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. ATTACK OVERVIEW</head><p>In the next few sections, we introduce various attack scenarios and test each scenario against real SDN components to verify that the components satisfy the security requirements discussed in the prior section.</p><p>An SDN typically consists of three primary layers: an application layer, a control layer, and a data plane (or infrastructure layer). There is also a control to data plane interface, which may be embodied as a standardized protocol, such as OpenFlow. Here, we normally consider the combination of the application layer and the control layer as the control plane; for our purposes, the terms infrastructure layer or data plane may be used interchangeably. Given this generalized layered architecture, our goal is to enumerate and classify vectors (or opportunities) for misuse or attack across the SDN stack. Our work surveys both vectors that have been identified in prior academic work, and newly identified scenarios, which we then organize into three categories. (1) Control-planespecific, which includes abuse and attack vectors against the control and application layers. (2) Control-channel-specific scenarios involve the abuse of OpenFlow protocol. (3) Dataplane-specific attacks refer to interface attacks that involve the crafting of flow data that are input to the network devices, where an adversary may live within or outside the SDN managed network. We will refer to each class of attack by the following terms: CP for attacks that directly target the control plane, CC for attacks that seek to abuse the control channel, and DP for attacks targeting the data plane. We will use the notation CP-x to refer to attack scenarios involving the control plane, where x is a number starting from 1.</p><p>All of these attacks, summarized in Table <ref type="table" target="#tab_1">II</ref>, will be presented in the following sections with their working scenarios, real test cases, and in-depth analysis. Specifically, we describe 8 categories of control plane attacks and 16 attack examples. In the case of the control channel specific attacks, we describe two categories, and in each category we present one example case. Finally, we describe four categories of data plane attacks each with one example attack scenario. In Table <ref type="table" target="#tab_1">II</ref>, the 10 known examples are marked with the ( †) notation (the rest are new). We highlight the target location of each attack on the SDN stack in Figure <ref type="figure" target="#fig_1">2</ref>.</p><p>Assumption: We acknowledge that there may be several different manifestations of an SDN. For example, an architecture separating the control plane from the data plane may be considered a form of SDN <ref type="bibr" target="#b16">[17]</ref>, as could a software router (e.g., XORP <ref type="bibr" target="#b20">[21]</ref>). However, as OpenFlow is the most widely deployed instance of SDNs <ref type="bibr" target="#b37">[38]</ref>, we frame our study around such environments. Therefore, all attacks presented in this paper are centered around SDN components using the OpenFlow protocol and our primary focus is on attacks affecting SDN components (e.g., the SDN controller). Some attacks that destroy network configurations (e.g., dynamic flow tunneling and flow rule conflicts <ref type="bibr" target="#b29">[30]</ref>, <ref type="bibr" target="#b43">[45]</ref>) are beyond our scope. However, we believe that they are well represented in previous studies <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b29">[30]</ref>, <ref type="bibr" target="#b43">[45]</ref>. In addition, several studies have been proposed that attempt to guarantee network correctness in an SDN environment <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b15">[16]</ref>, <ref type="bibr" target="#b18">[19]</ref>, <ref type="bibr" target="#b19">[20]</ref>, <ref type="bibr" target="#b27">[28]</ref>. While they offer promise in mitigating network failures, they are not focused on detecting adversarial components specifically targeting SDN components. Hence, we have not included these approaches in our attack taxonomy. Test Environment: We have conducted an empirical study of vectors for abuse or direct attack across an SDN stack, specifically OpenFlow, through real experiments against a range of switches and well-known controllers. The environment consists of one controller machine, three physical OpenFlowenabled switches (HP-3500yl, HP-3800, and Pica8-P3290) and three physical host machines. We have selected three well-known controllers for our test; POX (v. dart), Flood-Light (v. 0.9) and OpenDaylight (v. hydrogen).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. REMOTE ATTACKS ON CONTROL PLANE</head><p>In theory, the SDN design principle should ensure the security of the control plane by isolating the control network (e.g. OpenFlow network) from the data network; however, there exist several attack scenarios that can harm a softwaredefined network implementation. In this section, we explore scenarios in which an adversary could remotely affect the network availability. We also introduce new attack scenarios, and demonstrate their effectiveness by launching them against three representative SDN controllers: POX, Floodlight, and OpenDaylight. For brevity, we will focus the presentation of our attack demonstrations using the Floodlight controller.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Denial-of-Service (DoS) [CP-R-1]</head><p>In software-defined networks, successful DoS against SDN controllers is a serious security threat as it may result in the loss of availability or the instability of the victim network. We describe two feasible remote DoS attacks against the control plane.</p><p>1) Packet-In Flooding: An SDN switch notifies an SDN controller of each unseen flow (or for each flow table mismatch) as an event, and such events are transferred to the control plane via the Southbound API (i.e., OpenFlow).</p><p>In the case of OpenFlow, each unseen flow generates a packet_in event. Here, we consider a denial-of-service attack scenario that floods the SDN control plane with packet_in messages.</p><p>Such excessive number of packet_ins may cause a centralized SDN controller to end up in an unpredictable state <ref type="bibr" target="#b32">[33]</ref>, <ref type="bibr" target="#b50">[52]</ref>, <ref type="bibr" target="#b52">[54]</ref>. For example, an SDN controller may use up all available system resources to process the flood of packet_ins and thus become unreachable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) Switch Table Flooding:</head><p>According to Dover <ref type="bibr" target="#b11">[12]</ref>, it is possible to fill up the switch table of Floodlight and cause switch disconnections by persistently sending forged Open-Flow messages. Floodlight adds one switch table entry when it receives OpenFlow's features_reply message with new DPID value; therefore, the switch table can be potentially filled up by continuous generation of such messages with different DPID values. This attack causes the switch table to use up all the memory resource available in the controller, and the attack eventually causes the controller to disconnect the linked switches from itself.</p><p>3) Switch Identification Spoofing: This attack, also introduced by Dover <ref type="bibr" target="#b10">[11]</ref>, modifies the OpenFlow control message to spoof its identity as if it is the target switch. The authors identify that Floodlight checks the DPID and the name of a switch to distinguish between switch devices. Furthermore, if Floodlight receives, from a compromised switch, a connection request in which its DPID and name are modified to have the same values as that of another switch connected to the controller, it disconnects the connection with the existing switch to establish a new connection with the compromised one. Leveraging such findings, Dover showed that it is possible to send forged OpenFlow messages to disconnect legitimate switches from a Floodlight controller.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) Malformed Control Message Injection:</head><p>Prior work has also demonstrated attacks on the control plane with malformed OpenFlow control messages. Shalimov et al. <ref type="bibr" target="#b49">[51]</ref> modified the message length field of the OpenFlow header to an incorrect value, and sent such malformed messages to various SDN controllers, such as POX and Floodlight. They claimed that POX and Floodlight disconnected the switches that were assumed to have sent such malformed messages.</p><p>5) System Time Manipulation: SDN controllers and applications often refer to system variables for various purposes. For instance, an SDN controller may refer to the system time variables for carrying out time-sensitive tasks, such as calculating packet timeouts. We expect that the behavior of SDN controllers can be affected by manipulating such system variables. Here, we modify the system time variable to confuse the controller.</p><p>As shown in Figure <ref type="figure">3</ref>, Floodlight allows an application to modify the current time as much as desired, and such modification eventually causes the controller to disconnect the connection between the switch and the controller, as it does will receive a response from the switch to its heartbeat message within a proper time window. As in the Floodlight case, similar switch disconnections are observed when the time modification attack is launched against OpenDaylight. Unlike FloodLight and OpenDaylight, this attack does not affect POX because this controller does not refer to the system time. Given that this attack is feasible as long as adversaries can manipulate the system clock, it can be inferred that adversaries can also cause switch disconnections by launching network time protocol attacks from remote locations <ref type="bibr" target="#b36">[37]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Network-View Manipulation [CP-R-2]</head><p>In order to handle dynamically changing locations of the network nodes and hosts in modern networks, many SDN controllers often implement Host Tracking Services (HTS) and Link Discovery Services (LDS). Hong et al. <ref type="bibr" target="#b21">[22]</ref> have demonstrated that such services are prone to topology poisoning attacks. 1 They have shown that it is possible to deceive the HTS of most currently available controllers by forging some network packets, since most HTS implementations only use simple identifiers to distinguish among the hosts. They have demonstrated this attack against a Floodlight managed network to show the effectiveness. They mention that POX and OpenDaylight are also susceptible to this attack.</p><p>The HTS, in modern controllers, automatically tracks each host across migrations using specific identifiers. Hong et al. have analyzed the source code of most currently available SDN controllers and discovered that they only use simple identifiers to distinguish among the hosts. Based on their findings, they introduced one possible attack scenario that leverages their findings on HTS to poison the network topology as shown in Figure <ref type="figure">4</ref>.</p><p>As illustrated in Figure <ref type="figure">4</ref>, WebServer B (at port 2) and Host C (at port 3) are the benign participants of the network, and Attacker A (at port 1) is malicious. When Host C attempts to access WebServer B, a packet_in message is generated and the controller issues flow rules that forward all traffic coming 1 Please refer to the cited paper for additional details on the Link fabrication attack.</p><p>from port 3 to port 2 and vice versa. This is called ingress port-based forwarding, and in such instances, it is possible for the attacker to manipulate the network topology.</p><p>It is possible for (1) Attacker A to impersonate WebServer B by forging some network packets to deceive the HTS of the controller. Specifically, Attacker A can spoof packets to have the source MAC and IP addresses of WebServer B, and consequently, the switch issues (2) packet_in based on such manipulated traffic information. The packet_in, which is passed to the controller, is then processed by the HTS, and (3) the HTS believes that WebServer B has migrated and newly linked to port 1. Hence, the HTS updates its table and (4) all traffic destined to WebServer B is directed to Attacker A according to the manipulated network topology information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. LOCAL ATTACKS ON CONTROL PLANE</head><p>In addition to the remote attack scenarios introduced in the previous section, attacks could also be launched locally, within an SDN controller. SDN controller implementations are also general software applications hosted on computing machines. One should not assume that the security of the control plane is ensured entirely through its network isolation.</p><p>In particular, similar to the mobile application ecosystems (e.g. Google Play or Apple App Store), one aspect of the SDN application ecosystem is its potential to offer rapid innovation through third-party application integration. Indeed, Hewlett Packard constructed an SDN App Store <ref type="bibr" target="#b24">[25]</ref>, and many other SDN controller vendors have published Northbound APIs to encourage the open development of SDN applications. In such an environment, various intrusion scenarios are possible as illustrated in previous work <ref type="bibr" target="#b46">[48]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Arbitrary System Termination [CP-L-1]</head><p>As most SDN controllers are designed to run SDN applications within the controller instance, a system call misuse scenario is possible. If (1) an SDN application invokes the system exit command, (2) it terminates not only the application itself but also the controller instance. As Shin et al. <ref type="bibr" target="#b51">[53]</ref> demonstrated, such (3) loss of the control plane is clearly undesirable and devastating to the data plane.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. System Resource Exhaustion [CP-R-2]</head><p>Current SDN controller implementations are end-host userlevel applications, and their performance is limited by the capabilities of the hosting machine. Shin et al. <ref type="bibr" target="#b51">[53]</ref> demonstrate that it is possible to consume the system resources of the hosting machine with a simple SDN application and cause system failures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Network Service Neutralization [CP-L-3]</head><p>1) Control Message Delivery Obstruction I: Current SDN controllers often employ the Observer pattern, which is a software design pattern for handling distributed events, to efficiently and automatically notify subscribing SDN applications of newly generated control events. In such SDN controllers, an SDN application registers its listener to the list of listeners awaiting control events. When a packet_in arrives at the SDN controller, it is automatically delivered to all the subscribers. We demonstrate that it is possible to unsubscribe an arbitrary SDN application from the listener list. pktInAppList.remove(name)</p><formula xml:id="formula_0">10: i ← i + 1</formula><p>We find that we can remove arbitrary Floodlight applications from the packet_in subscription list. We deploy three SDN applications to the controller: two test applications that subscribe themselves to the packet_in subscription list and one malicious application that unsubscribes one of the test applications from the list. As shown in Figure <ref type="figure">5</ref> (bottom), the malicious application successfully unsubscribes one test application from the list. As a result, the unsubscribed application is unable to receive any packet_ins. We find that such an attack is also possible with OpenDaylight. POX does not employ the Observer pattern to deliver control events to its applications, and is therefore not susceptible to the API misuse attack.</p><p>2) Control Message Delivery Obstruction II: Applications deployed to an SDN controller are usually executed in a specific order. Such a series of application handlers is referred to as a Service Chain, and below we demonstrate how malicious applications may interfere with the chained packet handling of other SDN applications.</p><p>An example API misuse scenario that may cause service chain interference is illustrated in Figure <ref type="figure">6</ref> (top). In this scenario, the FWD app is responsible for forwarding a packet depending on a packet_in event. When Host A sends a packet to Host C, a packet_in is sent to the controller. Then, (1) the controller passes the packet_in to App1, App2 and App3 as a pre-defined order. ( <ref type="formula">2</ref>) App3 (which happens to be malicious) intentionally drops the packet_in without passing it to the FWD application. Accordingly, the FWD application cannot receive packet_in messages because App 3 intentionally dropped the messages. (3) The FWD application does not reply to the packet_in message; consequently, (4) the OF switch does not have any installed flow entries corresponding to the request from Host A. Thus, (5) Host A is unable to communicate with Host C.</p><p>To test this API misuse case, we deploy a malicious SDN application that selectively drops particular incoming packet_ins to the three SDN controllers, and Figure <ref type="figure">6</ref> (bottom) shows the outcome observed in the case of testing with Floodlight. The message of TEST APP in this Figure <ref type="figure">represents</ref> an SDN application that is part of the service chain, and it can receive any packet_ins before the interference (see Figure <ref type="figure">6</ref>: Before). However, once a malicious application, which is scheduled to execute right before the TEST APP, starts to drop particular packet_ins, the TEST APP no longer receives such packet_ins (see Figure <ref type="figure">6</ref>: After; only one packet_in has been observed).</p><p>We confirm that this attack is also effective in the OpenDaylight controller. However, POX passes the control messages to each POX application as function arguments, and the arguments are passed by value. In other words, each POX application takes a different copy of each control message, and therefore, POX is resilient to this API misuse attack.</p><p>3) Service Chain Jamming: A second service chain interference attack involves intentional insertion of infinite loops into the application. Similar to the previous API misuse case, App3 can be intentionally programmed to fall in an infinite loop, thus causing the entire controller instance to freeze for an indefinite time. We demonstrate the feasibility of this API misuse by evaluating it against the three SDN controllers under the same experimental condition as the previous API misuse attack, except for the fact that the malicious service chain application now includes an infinite loop. As shown in Figure <ref type="figure" target="#fig_5">7</ref>, this application causes the entire Floodlight instance to be stuck in an infinite loop as the malicious application is executed reactively upon the arrival of a packet_in event. The same behavior was also observed when such applications were deployed on POX and OpenDaylight. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Unauthorized Application Management [CP-L-4]</head><p>SDN applications with unrestricted authority may offer maximal network programmability. However, such unconstrained power may also introduce new security threats. We present a scenario that illustrates how an SDN application can misuse Northbound APIs to evict other legitimate applications.</p><p>As shown in Figure <ref type="figure">8</ref> (top), (1) a malicious SDN application may legitimately call the function that terminates other application via the Northbound API. In response, (2) (3) the controller terminates the innocent application as requested. This misuse case may directly compromise the managed network as it may terminate the basic networking applications, such as forwarding or routing applications. In addition, it may also lead to termination of security critical applications like firewalls or IDSs.</p><p>Of the three SDN controllers that we considered in this paper, the aforementioned API misuse is only effective against OpenDaylight, because it is the only controller that allows for dynamic loading and unloading of SDN applications. Figure <ref type="figure">8</ref> (bottom) shows how a malicious OpenDaylight application can dynamically force the unloading of other deployed applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Unauthorized Network Control [CP-L-5]</head><p>The packet_in control message in OpenFlow notifies an SDN controller of a newly incoming network flow. Similarly, there are other types of control messages that support various other networking features (e.g., flow_mod, port_mod, table_mod). However, most SDN controller implementations do not manage or restrict the use of such control messages; therefore, we assert that it is possible to manipulate the control plane by abusing such messages. Below, we discuss two such control message misuse scenarios.</p><p>1) Flow-Rule Modification: Since there is no restriction on issuing control messages, an SDN application can issue any control messages at any time. In the scenario illustrated in Figure <ref type="figure" target="#fig_6">9</ref> (top), (1) a malicious application issues the crafted flow rule to (2) override one of the flow table entries; consequently, (3) the existing network connection between A and C is disallowed.</p><p>We deploy a malicious Floodlight application that implements this attack and evaluate its viability by verifying that the application can indeed override the existing flow table entry. Figure <ref type="figure" target="#fig_6">9</ref> (bottom) illustrates the state of the flow table before and after this attack. As shown in the figure, a flow table entry that instructs the switch to forward flows to port 17 existed in the flow table before the API misuse attack. After the attack, we see that the flow table entry has been overridden with a different flow rule that does not take any action on the same flow. As this attack can override any flow rules issued by benign SDN applications, it has the ability to arbitrarily control the behavior of the network or to neutralize any security policies. Furthermore, we confirm that both POX and OpenDaylight are also vulnerable to this attack.</p><p>2) Flow Table Flushing: Next, we evaluate another API misuse scenario as shown in Figure <ref type="figure" target="#fig_0">10</ref> (top). In this case, (1) a malicious application continuously sends a control message that (2) clears all flow table entries. This scenario can cause flow entry mismatch for all incoming network flows and (3) degrade the network performance. Figure <ref type="figure" target="#fig_0">10</ref> (bottom) illustrates the impact of this attack on our Floodlight testbed. We deployed a malicious application that persistently clears the flow entries installed in the flow table of a switch. The initial ping time before the attack is around 5 ms as the flow was uninitialized. 2 Once the flow is initialized, the ping time drops to 1 ms. However, during the attack, the flow table of the switch is consistently cleared; therefore, both the first and subsequent pings incur the flow initialization latency (Figure <ref type="figure" target="#fig_0">10</ref>:After). The impact of such an attack in production environments can be severe, as it not only adds the flow initialization cost to every packet transferred on the network, but also eventually causes the packet_in Flooding attack. In the case of POX and OpenDaylight, such API misuse produces the same outcome as with Floodlight.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. Unauthorized Network-View Manipulation [CP-L-6]</head><p>An advantage of the centralized SDN architecture is that it offers network-wide topology information to the control plane. For example, a routing application may leverage such information to efficiently calculate and offer the best routing path. Contemporary SDN controller implementations typically include a shared internal database for storage and management of a variety of network information that applications use for decision-making.</p><p>As has been demonstrated, most SDN controllers do not restrict access or modifications to such internal storage <ref type="bibr" target="#b51">[53]</ref>. This misuse scenario is depicted in Figure <ref type="figure" target="#fig_7">11 (left)</ref>.</p><p>As illustrated in the figure, (1) a malicious application makes unrestricted modification to data stored in internal storage. If the malicious application modifies the link information stored in the internal storage, (2) all other applications that make decisions based on such information are affected, and may lead the network to an unpredictable state.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G. Summary of the Results</head><p>We summarize below our results of all discussed attacks launched against the SDN CP in Table <ref type="table" target="#tab_2">III</ref>. Successful and unsuccessful attacks against POX, Floodlight (FL) and Open-Daylight (ODL) are marked by (O) and (X) respectively in the three columns.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. ATTACKS ON CONTROL CHANNEL</head><p>In this section, we introduce two attacks that could be launched against the SDN control channel, specifically in the OpenFlow protocol. We observe that although control channel communication in OpenFlow can be adequately secured using the SSL/TLS protocol, the use of such encrypted channel is not widely adopted <ref type="bibr" target="#b3">[4]</ref>. Below, we describe attacks against the OpenFlow control communication channel and demonstrate their effectiveness on our testbeds. 2 The first packet of an unseen flow incurs extra latency as it incurs the controller communication cost </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Eavesdropping [CC-1]</head><p>Due to the absence encryption the control channel, it is possible to eavesdrop on the connection between the control plane and data plane. The scenario is that an adversary may sniff the ongoing OpenFlow messages to exfiltrate the topology information of the managed network.</p><p>To demonstrate the attack on our testbed, we wrote a small program that passively captures ongoing OpenFlow messages and parses the messages to extract the network topology information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Man-in-the-Middle [CC-2]</head><p>Figure <ref type="figure" target="#fig_8">12</ref> (top) illustrates the MITM attack scenario that actively intervenes in the communication between the control plane and data plane to manipulate the ongoing OpenFlow messages on the control channel. If (1) the controller sends a flow rule that instructs the switch to forward a set of flows from host A to C, (2) the adversary can actively modify the action field of the rule to be "drop". As a result, (3) the flow rule that has been manipulated is installed to the switch, and ultimately (4) the flow from host A to C is dropped at the switch.</p><p>As shown in Figure <ref type="figure" target="#fig_8">12</ref> (bottom), we attempted to modify the action field of the flow rule to have a different switch port number. We demonstrate the successful flow rule modification using both Wireshark capture of the OpenFlow flow_mod<ref type="foot" target="#foot_0">3</ref> message at the network interface of the controller and also by listing the inserted flow rule via the Floodlight Web UI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VIII. ATTACKS ON DATA PLANE</head><p>In this section, we introduce three attacks that can be launched against the SDN data plane. We evaluate these attacks on the testbeds with three different switch models;  (i) HP 3500yl, (ii) HP 3800, and (iii) Pica8 P-3290. We provide detailed results of attacks launched against the HP 3500yl switch model (the results are similar to other models unless otherwise noted).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Flow-Rule Flooding [DP-1]</head><p>Since there is no restriction on issuing control messages, an SDN application can issue any control messages at any time. In this scenario, (1) a malicious application continuously generates flow rules to (2) consistently fill up the flow table of the switch, and finally, (3) the switch cannot handle more flow rules <ref type="bibr" target="#b50">[52]</ref>.</p><p>Figure <ref type="figure" target="#fig_9">13</ref> illustrates the dramatic change in the network latencies before and after this attack on HP 3500yl. Before the attack, the first ping time of a new flow was about 5 ms. When the flow table of the switch was filled with more than 30K flow rules, the same task took about 787 ms. This implies that this switch will delay any new flow by approximately 800 ms. We found that the other two forwarding devices are also vulnerable to this attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Switch Firmware Abuse [DP-2]</head><p>Most OpenFlow-enabled switch models run custom and independent switch firmware implementations with varying capabilities. For example, the HP 3500yl and 3800 switch models <ref type="bibr" target="#b22">[23]</ref>, <ref type="bibr" target="#b23">[24]</ref>, do not support all of the OpenFlow specified 12-tuple match fields in the hardware (TCAM) flow table. To be more specific, if the source and destination MAC addresses are specified in the flow rules, that particular flow is forced to be processed in a software table, which is significantly slower than in-hardware processing.</p><p>This behavior of the switch firmware may be misused to degrade the overall network performance. In the scenario illustrated in Figure <ref type="figure" target="#fig_10">14</ref> (top), the malicious application (1) installs crafted flow rules that override the existing flow rules (IP matching) with hardware-unsupported match fields (MAC matching) specified. Consequently, (2) the network flow from host A to C is no longer processed in the hardware table, but rather in the software table resulting in (3) network performance degradation.</p><p>To verify the impact of this vulnerability on network performance, we launched this resource attack against our testbeds. Figure <ref type="figure" target="#fig_10">14</ref> (bottom) shows the ping times measured before and after the attack, and as shown, overall increase in ping time was observed. Meanwhile, Pica8's P-3290 switch model supported hardware-matching of all 12-tuple fields. Hence, the misuse was observed to be ineffective against this particular switch model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Malformed Control Message Injection [DP-3]</head><p>Manipulated control messages may be sent to the data plane with malicious intent, and it may cause the switch to end up in an unpredictable state.</p><p>We modified the length field of the OpenFlow message header to have an incorrect value, sent such malformed messages to the target switch, and observed the logs of the SDN controller to verify the impact of the attack. As shown in Figure <ref type="figure" target="#fig_11">15</ref>, the attack resulted in a switch disconnection.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Data Leakage [DP-4]</head><p>OpenFlow-enabled switches query SDN controllers for each flow table miss, and this significantly delays the flow processing. Such an architecturally inevitable delay is known as control path delay, and Shin and Gu <ref type="bibr" target="#b50">[52]</ref> have shown that it is possible to fingerprint if the target network is an SDN or not by leveraging the control path delay as a distinguishing factor. Moreover, Sonchack et al. <ref type="bibr" target="#b53">[55]</ref> have further developed the fingerprinting attack and shown that it is even possible to infer extremely sensitive information, such as ACL policies and host communication patterns, by scanning the target network. Both of the attacks scan the target network to measure the RTT (Round-Trip Time) for different network packets and analyze the collected data to infer the sensitive network information (and thus known as the side-channel attacks).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IX. VULNERABILITIES AND DEFENSE MECHANISMS</head><p>As discussed in prior sections, various attack vectors are effective against contemporary SDN components. While we attempt to comprehensively evaluate the SDN attack surface and present a diverse set of attack scenarios, we believe that additional new and variant attack vectors will emerge in the future. Hence, it is important to track down the root cause of various SDN vulnerabilities. To that end, we abstract each attack to fundamental weaknesses (or vulnerabilities) of underlying SDN components and analyze them in greater detail.</p><p>In this section, we present the vulnerabilities (Table <ref type="table" target="#tab_3">IV</ref>) extracted from the attack scenarios and discuss several proposed defense mechanisms that aim to mitigate or minimize the effects of aforementioned attacks (Table <ref type="table" target="#tab_4">V</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Control Plane Security</head><p>1) Assuring Confidentiality: Current control plane implementations lack capability to authenticate applications (V-1), and allow applications to execute arbitrary system commands (e.g., system termination) (CP-L-1). As demonstrated in Section VI-A, the SDN controllers allowed SDN applications to execute sensitive commands; however, these are just a small set of all possible attacks that may leverage this vulnerability. Other attacks could also impact the confidentiality of the control plane and allow for exfiltration of sensitive information (e.g., controller configuration, global network-view, remote login credentials).</p><p>In order to prevent SDN applications from executing sensitive system commands on ONOS, a security extension has been recently added to ONOS. Their security feature revokes all the permissions granted to applications, and only grant minimum required permissions based on the security policy file. For example, recent security extension to ONOS <ref type="bibr" target="#b41">[42]</ref> successfully mitigates the arbitrary system termination attack (CP-L-1) by revoking the permission to execute sensitive commands by default.</p><p>2) Assuring Integrity: Due to various vulnerabilities existing in the control plane, the integrity and confidentiality of the control plane cannot be guaranteed. Vulnerabilities that lead to the integrity issues include the following: Lack of authorization (V-1) and Weak authentication (V-2).</p><p>[V-1] Lack of Authorization: Arbitrary system termination attack (CP-L-1) has demonstrated that applications can execute any sensitive system commands to mount any attack against the control plane, and thus it is possible to manipulate sensitive information stored in not just the controller process but also the host machine running the controller. For example, current SDN controllers often locally store configuration files on the file system, and it is possible to easily manipulate such files thus breaking the integrity of the control plane.</p><p>Another important asset that should never be manipulated is list of active network services, and as demonstrated in Section VI-D, unauthorized application management (CP-L-4) attack breaks the integrity of the list by arbitrarily activating/deactivating SDN applications. We observe that SDN controllers tend to grant excessive authority to SDN applications via the flexible Northbound API. This allows the applications to exploit the API and perform malicious actions against peer applications. To restrict such unintended capabilities of SDN applications, the APIs must be carefully vetted and retrofitted.</p><p>In a similar fashion, the global network-view can be unrestrictedly manipulated by any SDN application (CP-L-6), and such attacks may put the network in an unpredictable state, as all the network services make network control decisions based on the network-view. The security extension of ONOS also allows restriction of such capabilities by specifying and enforcing a policy for each application.</p><p>Finally, all the applications are also capable of directly controlling the managed network by either directly issuing control messages or leveraging the related Northbound APIs (CP-L-5). Rosemary <ref type="bibr" target="#b51">[53]</ref> and SE-Floodlight [?] employ an application permission model as a security enhancement, and its permission model constrains application interactions with the data plane to maintain the integrity of the network behavior. In contrast, the security extensions in ONOS allow for fine-grained API-level permissions that explicitly allow or deny applications' access to the network control APIs. PANE <ref type="bibr" target="#b13">[14]</ref> provides mechanisms for delegating network authority which can be used for policy enforcement of untrusted network applications.</p><p>[V-2] Weak Authentication: When SDN controllers establish connections with network devices and detect network hosts, each SDN controller authenticates the devices and hosts using different authentication mechanisms. However, Dover <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b11">[12]</ref> and Hong et al. <ref type="bibr" target="#b21">[22]</ref> have reported that Floodlight and OpenDaylight employ weak network element authentication mechanisms. Their attack scenarios (CP-R-1-ii,iii and CP-R-2) exploit the weaknesses in network device or host authentication mechanisms to manipulate the global network-view, thus breaking the integrity.</p><p>In response to this problem, Hong et al. <ref type="bibr" target="#b21">[22]</ref> have proposed a new security extension called TopoGuard, which provides enhanced network element authentication. TopoGuard is capable of verifying the legitimacy of host migrations, integrity of LLDP packets and switch port property upon each topology update.</p><p>[V-8] Dependence on External Variable: As demonstrated in CP-R-1-v, the behavior of SDN controllers that reference system time was affected by the attack. The lesson that could be learned from this attack example is that referencing untrusted external variables could widen the attack surface of SDN controllers as well as any other systems. Hence, the use such untrusted and unpredictable external variables should be avoided in designing and implementing SDN controllers. Furthermore, this principle also applies to the network services (or SDN applications) that are hosted by SDN controllers. If an SDN application that directly controls the network uses system time to make routing decisions, the entire network could be affected by time manipulation attacks (e.g., NTP attack <ref type="bibr" target="#b36">[37]</ref>).</p><p>3) Assuring Availability: SDN controllers often manage and control many (if not all) network devices operating in the network. Hence, when availability issues arise in the control plane, it invariably affects the entire network. We discuss various vulnerabilities that jeopardize the availability of the control plane assets and the network itself. Furthermore, we introduce and discuss defense mechanisms relating to each vulnerability.</p><p>[V-1, 2, 8] Integrity Issues and Availability: Failure to protect the integrity of the control plane assets also compromises the availability of the control plane. As demonstrated in the previous section (Section VI), unrestricted application deactivation can cause arbitrary network services to be unavailable (CP-L-4), and the manipulated global networkview and network behavior (CP-L-4,5,6) can disrupt network connectivity. We believe that it is possible to eliminate many of these availability issues by properly protecting the integrity of the control plane. In addition, the use of untrusted external variables should be avoided as it could affect network availability. System time manipulation attack (CP-R-1-v) caused switch disconnections in the networks managed by Floodlight and OpenDaylight.</p><p>In the case of the arbitrary code execution (CP-L-1-ii), applications may execute system commands to terminate the controller instance to make the entire control plane unavailable <ref type="bibr" target="#b51">[53]</ref>. Systems such as Rosemary and defense mechanisms, such as ONOS' security extension and TopoGuard, introduced earlier for the confidentiality and integrity protection, provide resilience against these availability issues.</p><p>[V-3] Architectural Bottleneck: This vulnerability naturally exist in the SDN architecture as the control plane manages the network in a centralized manner, and it is possible to remotely exploit such weakness to affect the network availability (CP-R-1-i). Unlike the other vulnerabilities, this issue has been studied by many researchers as shown in Table <ref type="table" target="#tab_4">V</ref>.</p><p>One approach to significantly reducing the impact of such attack is improving the scalability of the control plane, and ONIX <ref type="bibr" target="#b31">[32]</ref> and ONOS <ref type="bibr" target="#b4">[5]</ref> employ distributed SDN controller architecture to this end. Other approaches that take advantage of the data plane to reduce the burden on the control plane have been proposed as well <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b32">[33]</ref>, <ref type="bibr" target="#b52">[54]</ref>, <ref type="bibr" target="#b57">[59]</ref>, <ref type="bibr" target="#b58">[60]</ref>, <ref type="bibr" target="#b61">[63]</ref>. However, they have not been integrated into commodity controllers.</p><p>[V-4] Monolithic Controller Design: Most of the SDN controller implementations available today are, in fact, monolithic software applications. fOR example, Floodlight and OpenDaylight are Java applications that run on a single Java Virtual Machine (JVM), and the SDN applications also run on the same JVM. Shin et al. <ref type="bibr" target="#b51">[53]</ref> have shown the risk of such monolithic architecture of SDN controllers by demonstrating system command execution (CP-L-1-ii) and resource exhaustion (CP-L-2) attacks, which ultimately crash controller instances. Rosemary employs a micro-kernel architecture to enable application containment and eliminate this vulnerability.</p><p>[V-5] Lack of Resource Management: Even if an SDN controller has employed a micro-kernel architecture, the controller may still be susceptible to resource exhaustion attacks because different core modules of the controller and SDN applications are sharing the system resources. Although <ref type="bibr">Shin et al. [53]</ref> has demonstrated a simple attack scenario, more sophisticated and critical attack scenarios could be effective against SDN controllers without resource management (e.g., exhaustive exploitation of network service/control plane APIs). In response to this problem, Rosemary <ref type="bibr" target="#b51">[53]</ref> employs a resource monitor that dynamically monitors and constrains the resource usage of various SDN controller components.</p><p>[V-6] Improper Exception Handling: The capability to handle exceptions that might be raised during the execution of an SDN application is crucial to guarantee controller robustness. SDN controllers that we evaluated seemed to lack such capability as the manipulated control messages (CP-R-1-iv) induced unexpected behaviors at the SDN controllers. To efficiently discover and deal with such exceptions, formal techniques and traditional fuzz testing approaches may be adopted.</p><p>It is important that such exceptions must be properly handled as the unexpected behaviors of SDN controllers directly affect the managed network. Interestingly, the OpenFlow protocol provides no mechanisms to inform the control plane when it receives a malformed or illegitimate OpenFlow messages. For example, if there was an OpenFlow message for notifying the data plane of the reception of such messages, the SDN controller could have reacted more flexibly rather than simply disconnecting the switch from the network.</p><p>[V-7] Naïve Service Chaining Mechanism: We found that the Floodlight and OpenDaylight controllers employed Service Chain mechanism for SDN applications to systematically control and manage the network. However, such Service Chains are susceptible to the possible interferences (CP-L-3-ii, iii), and the fundamental vulnerabilities lie in both the application and control layer of the SDN architecture. CP-L-3-ii and iii inform two separate design concerns that the control layer must consider; the former demonstrates the importance of control message delivery guarantees, and the latter illustrates the necessity of a fail-safe service chaining mechanism (e.g., network application time-out mechanism). In order to assure the network service availability, SDN controllers must deliver control message to all network applications in any circumstances and deal with possible network application failures.</p><p>In case of the application layer, there is no restriction on what SDN applications might be deployed. To date, no standards have been proposed to analyze and verify the behavior of SDN applications prior to deployment. Since SDN applications are commonly written in common programming languages, such as Java and Python, traditional methods for software profiling or analysis would be a good starting point of developing a method to effectively review or verify SDN applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Control Channel Security</head><p>1) Assuring Confidentiality: Current SSL/TLS protection adds noticeable performance penalty to the control channel (V-9) <ref type="bibr" target="#b12">[13]</ref>. Although OpenFlow optionally offers such protection, it is rarely used; even worse, some of the switch models or SDN controllers do not support it for this reason <ref type="bibr" target="#b3">[4]</ref>. Therefore, an alternative encryption mechanism that is both lightweight and reliable is desirable in the future.</p><p>2) Assuring Integrity: As we demonstrated, OpenFlow allowed active flow-rule modification during the man-in-themiddle attack (CC-2), and this is possible because Open-Flow does not implement the control message integrity checking mechanism (V-10). Such mechanism is unnecessary if SSL/TLS protection is enabled; however, as mentioned, current SSL/TLS is not suitable for protecting large SDN networks.</p><p>3) Assuring Availability: In the case of OpenFlow, we are unaware of specific vulnerabilities or attack scenarios that affect southbound OpenFlow communications; however, it is prudent to rigorously test and verify the protocol with formal protocol verification techniques to guarantee the availability of the control-data plane connections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Data Plane Security</head><p>1) Assuring Confidentiality: Due to the separation of the control plane and the data plane, SDNs are naturally prone to the timing-based side-channel attacks (V-12) <ref type="bibr" target="#b50">[52]</ref>, <ref type="bibr" target="#b53">[55]</ref>, and Sonchack et al. <ref type="bibr" target="#b53">[55]</ref> have proposed a timeout proxy that could be deployed to SDN switches as a countermeasure. This timeout proxy normalizes the overall amount of packet processing time by directly participating in the flow rule installation process. It keeps track of every packet that is forwarded to the controller, and if the controller responds too soon or too late, the proxy installs the flow rule instead of the controller.</p><p>2) Assuring Availability: We have identified three SDNspecific vulnerabilities that compromise the availability of the data plane.</p><p>[V-1] Architectural Bottleneck: Architectural bottleneck attacks have been discussed in prior papers <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b61">[63]</ref>, and there are some approaches to mitigate the effect this attack. For example, DIFANE <ref type="bibr" target="#b61">[63]</ref> tries to merge some related flow rules to save the space of the flow table in a switch, and DevoFlow proposes a way of reducing the number of flow rules with an extended OpenFlow message <ref type="bibr" target="#b9">[10]</ref>. All these approaches assume that some flow rules are related and could be merged into a single (or a few) wildcard rules. However, if SDN applications want to handle each flow with a different method, then the proposed methods may not be applicable. A commercial switch (e.g., Arista 7050T <ref type="bibr" target="#b1">[2]</ref>) addresses this problem by simply dropping requests from the control plane when it receives many flow rule requests in a short time. This approach is easy to realize, but it is not an ideal solution, because SDN applications often need to process many flow requests simultaneously to handle routine network traffic surges.</p><p>[V-6] Improper Exception Handling: As discussed in the previous section, switch firmware should be able to handle exceptional inputs. Again, SDN control protocols (e.g., Open-Flow) need to implement features for handling exceptions to minimize the impact of such attack.</p><p>[V-11] Hardware Abuse: Just like traditional networking devices, OpenFlow enabled switch models also employ TCAM to perform fast hardware table lookups. However, such hardware TCAM is too costly, and accordingly, only a small portion of the forwarding table is often implemented on TCAM. Due to the limited capacity of the TCAM table, the switch firmware restricts the use of the hardware table, and we have shown how such vulnerabilities can be abused to affect the network performance. As demonstrated in Section VIII-B, the Pica8 switch model supports all 12-tuple OpenFlow (version 1.0) match fields and thus avoided such an attack. In order to cope with such a flow table availability problem, different approaches <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b61">[63]</ref> to efficiently use flow tables have been proposed. However, such methods are rather temporary and limited as they cannot keep up with constantly evolving SDN protocols. For example, a recent version (1.4) of OpenFlow has become even more complicated than version 1.0; it has 41 fields to be matched <ref type="bibr" target="#b5">[6]</ref>. Hence, SDN switches should be reconfigurable; the switches should be flexible enough to support new match fields that may appear in the future, and P4 <ref type="bibr" target="#b5">[6]</ref> proposes an effective approach to this problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>X. RESEARCH CHALLENGES IN SDN SECURITY</head><p>In this section, we will discuss key research problems that warrant additional research attention as well as promising approaches to addressing these problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Control Plane: Challenges and Research Horizons</head><p>Our survey finds that the area of SDN control plane security remains understudied and narrowly focused despite the growing popularity and industrial adoption of SDN. Our systematic security evaluation of current SDN controller implementations highlight several areas that warrant additional research.</p><p>The architecture of modern network operating systems (NOSs) is growing in feature and complexity, much like traditional operating systems. For example, contemporary NOSs, such as ONOS and ODL, have a rich library set and allow for dynamic loading and unloading of applications. We believe it makes sense to extend security mechanisms from traditional OSes to NOSes as well. For example, SE-Linux <ref type="bibr" target="#b45">[47]</ref> could be an excellent reference model to design an authorization model for NOSes. Porras et al. <ref type="bibr" target="#b42">[44]</ref> have implemented role-based access control mechanism to constrain applications' the control-data plane interactions, which partially solves 'lack of authorization' (V-1) problem.</p><p>Our study also demonstrates that there exist architectural vulnerabilities, and hence, a fundamental rethinking of NOS architectures should be considered. Here, the architecture of the traditional OS could be used as a reference in designing a more robust NOS. For example, Shin et al. adopt a microkernel OS approach for securing the controller from buggy and malicious co-resident applications. However, their system is not resilient to control-flow saturation attacks or to rootkits that infect the NOS without crashing.</p><p>Furthermore, the security of the SDN application ecosystem should also be seriously considered. While the SDN community is encouraging open development and distribution of SDN applications for rapid evolution the technology, security problem associated with such environments is not new. In the case of the mobile application ecosystem, thirdparty distribution sites have been widely abused as attack vectors to compromise millions of end-users. We believe that SDNs should incorporate proactive security measures to address the potential of such attacks. For example, the Android operating system includes diverse mechanisms (e.g., sandboxing, application manifest) to protect itself and other benign applications from a compromised or malicious application. Inspired by Android's application security system, ONOS, in security mode, enforces security policy to applications and thus protects the core operating system from potentially untrusted applications. ONOS further extends Android's concept of application security mechanism to support large scale SDNs; it employs its own permission model that works in distributed settings, efficient permission checking mechanism that minimizes network performance impact, and additional network header space access control mechanism. However, there still remains several research questions that should be answered: How do we construct a safe application distribution environment for SDNs? How do we ensure the authenticity of applications? How can we detect malicious SDN applications? How can we guarantee the integrity of applications? We believe that formal techniques like NICE <ref type="bibr" target="#b6">[7]</ref> provide a good starting point toward answering these questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Control Channel: Challenges and Research Horizons</head><p>A simple means to defend against certain attacks introduced in Section VII is encrypting the communication between the control and data plane, using SSL/TLS, as recommended by the OpenFlow specification. However, such encryption is invariably turned off in large enterprise and datacenter networks, due to the associated performance overhead. The centralized architecture of an SDN implies that the controller in a modern datacenter typically needs to respond to millions of flow requests made by hundreds of switches <ref type="bibr" target="#b56">[58]</ref>). For this reason, network administrators often tend to simply disable encrypted channels, which represents a classic tradeoff (dilemma) between performance and security.</p><p>Therefore, the key research question is, how can we achieve the best tradeoff between performance and security? We believe that the simplest and most effective way to handle this problem is exploring alternative encryption techniques that are lightweight, secure and scalable. This objective could also be realized by employing custom high-performance encryption hardware (e.g., secure co-processors).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Data Plane: Challenges and Research Horizons</head><p>SDN data planes are designed to be simple and efficient by implementing just the basic hardware logic for forwarding packets with high performance. This design choice implies that that critical attack vectors are less likely to exist in the data plane. However, we argue that the firmware in the data plane can be abused for attacking SDNs. For example, firmware in wireless routers are notorious for various security holes. To the best of our knowledge, there is no study that has considered security problems associated with SDN data planes. We note that the firmware of such SDN devices are different from that of existing network devices. Hence, these differences should be well understood and new methods to detect (switch) firmware defects in terms of security or reliability should be investigated.</p><p>Also, SDN switches and an SDN controller communicate with each other, and thus can affect each other. Hence, the following questions should be answered: How to ensure the trustworthiness of forwarding devices? How to securely deploy and install devices (registration, authentication, and authorization) in a network infrastructure?</p><p>Other potential threats, beyond attacks demonstrated in this paper, also make the case for a more robust data plane. For example, a recent study revealed that a large number of commodity routers on the Internet could be simply scanned and accessed using default passwords <ref type="bibr" target="#b8">[9]</ref>. In the case of an SDN network, the impact of such an attack is much more detrimental than in a legacy network, because one or more compromised SDN devices may leak sensitive information (e.g., network topology) or even directly attack the linked SDN controller. Such problems argue for the development of resilient data planes and new countermeasures to protect an SDN network from compromised data planes. XI. RELATED WORK Kreutz et al. <ref type="bibr" target="#b33">[34]</ref> and Scott-Hayward et al. <ref type="bibr" target="#b47">[49]</ref> have recently published a broad survey of security in SDN. These surveys include studies of various SDN-specific security vulnerabilities <ref type="bibr" target="#b28">[29]</ref>, <ref type="bibr" target="#b34">[35]</ref>, <ref type="bibr" target="#b54">[56]</ref>. In particular, Kreutz et al. <ref type="bibr" target="#b34">[35]</ref> divided SDN attacks into seven different categories. Other studies have identified specific security deficiencies that arise in both SDN architectures and implementations. For example, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b43">[45]</ref>, <ref type="bibr" target="#b50">[52]</ref>, <ref type="bibr" target="#b51">[53]</ref>, <ref type="bibr" target="#b59">[61]</ref> have critically examined the lack of isolation, access control, and the protection mechanism within the control layer. Chandrasekaran etal. <ref type="bibr" target="#b7">[8]</ref> have presented vulnerabilities in the control plane that arise from software errors that exist within SDN applications, and Jarraya et al. <ref type="bibr" target="#b26">[27]</ref> have explored deficiencies in the security of the northbound interface. Kloti et al. <ref type="bibr" target="#b30">[31]</ref> proposed various forwarding rule guessing and controller fingerprinting strategies via spoofing attacks. Another survey paper, <ref type="bibr" target="#b48">[50]</ref>, has suggested a possible denial of service attack scenario that exploits limitations between then the centralized controller and the flow-table.</p><p>These early studies motivate our work, and we incorporate all described attack cases in our taxonomy. Furthermore, while these studies have generally hypothesized these attack scenarios, they do not present implementation studies of these attacks within a real test environment, which leaves open the following question: which attacks are theoretical, and which are reducible to practice on real SDN implementations? In addition, some studies propose a narrow attack scenario; here, we explore broad variants of the attack strategy. The result of our efforts have produced 12 new attack scenarios, whose feasibility have all been validated, through practical implementations, on a physical SDN test network. Furthermore, a SDN security assessment tool called DELTA <ref type="bibr" target="#b35">[36]</ref> was recently developed. DELTA is a practical use case of our attack taxonomy, and this paper forms the basis for several of the attack instances that are implemented within DELTA. The key contribution of the DELTA framework is in the development of the attack management module and the control-flow and input fuzzing agents XII. CONCLUSION The paper presents a comprehensive analysis of the vectors for potential abuse or attack that arise in OpenFlow network stacks. We provide a generalized categorization of 22 separate vectors for abuse or direct attack, which arise from diverse interaction avenues that are supported by popular OpenFlow network implementations. Furthermore, we validate the feasibility and impact of these abuse and attack scenarios through implementation and testing. We believe that 12 of these threat scenarios are novel and unpublished.</p><p>Like prior attack taxonomy efforts <ref type="bibr" target="#b38">[39]</ref>, the proposed organization of vulnerabilities, attacks, and defenses is not intended to be all-encompassing. However, we believe that it lays a good touchstone for classifying future threats in this area. Our intent is to offer a survey of concrete interface points upon which both security and stability of SDNs depend. Where such attacks or abuses are identified, we argue for either the application of security services or an acknowledged effort to establish trust among those components with access to these interfaces. We hope that the insights provided by our work will inspire a more principled and systematic approach to designing the next generation of resilient SDNs. ACKNOWLEDGMENT Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Conceptual Architecture of Software Defined Networking (SDN) from Open Networking Foundation [41].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Overview of the SDN attack surface: Presented attack scenarios cover all three layers of the SDN architecture and specific vulnerability locations targeted by each attack are highlighted.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 3 .Fig. 4 .</head><label>34</label><figDesc>Fig. 3. Result: [CP-R-1-v] System Time Modification causing switch disconnection.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 (len ← length of pktInAppList 6 :</head><label>56</label><figDesc>top) illustrates such a misuse scenario. Here, (1) an SDN application accesses the list of packet_in subscribers to (2) forcibly unsubscribe App4. As a result, (3) packet_ins are no longer delivered to App4. (See Algorithm 1 for the detailed operation of the application.) Algorithm 1 Control Message Delivery Obstruction I 1: procedure PKTINUNSUBSCRIPTION 2: pktInAppList ← list of packet-in subscribers 3: targetApp ← name of target application 4: while i = len do 7: name ← pktInAppList[i].name 8:if name = targetApp.name then 9:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .Fig. 6 .</head><label>56</label><figDesc>Fig. 5. Scenario (top) and Result (bottom): [CP-L-3-i] packet_in Unsubscription.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Result: [CP-L-3-iii] Infinite Loop Insertion.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Scenario (top) and Result(bottom): [CP-L-5-i] Flow Rule Modification.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Scenarios: [CP-L-6] Internal Data Storage Modification.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Scenario (top) and Result (bottom): [CC-2] Man-In-The-Middle -Flow Rule Forgery.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 13 .</head><label>13</label><figDesc>Fig. 13. Result: [DP-1] Switch Flow Table Flooding.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. Scenario (top) and Result (bottom): [DP-2] Switch Firmware abuse.</figDesc><graphic coords="10,326.63,274.13,219.50,75.14" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 15 .</head><label>15</label><figDesc>Fig. 15. Result: [DP-3] Malformed control message injection.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head>TABLE I CRITICAL</head><label>I</label><figDesc>ASSETS IN SDN</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>TABLE II AN</head><label>II</label><figDesc>OVERVIEW OF SDN ATTACKS AND VULNERABILITIES</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>TABLE III SUMMARY</head><label>III</label><figDesc>OF CONTROL PLANE ATTACK RESULTS</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3"><head>TABLE IV MAPPING</head><label>IV</label><figDesc>SDN VULNERABILITIES AND ATTACKS USING THE CIA MODEL</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4"><head>TABLE V VULNERABILITIES</head><label>V</label><figDesc>AND DEFENSES</figDesc><table /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_0"><p>flow_mod is a type of OpenFlow message that installs a flow rule to an OpenFlow enabled switch.</p></note>
		</body>
		<back>

			<div type="funding">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This work was supported in part by the Institute for Information &amp; communications Technology Promotion through the Korean Government (MSIT) under Grant 2016-0-00078 (Cloud Based Security Intelligence Technology Development for the Customized Security Service Provisioning) and in part by the National Science Foundation under Grant 1547206.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0" />			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">A Linux Foundation Collaborative Project. OpenDaylight SDN Controller</orgName>
		</author>
		<ptr target="http://www.opendaylight.org" />
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<author>
			<persName><surname>Arista</surname></persName>
		</author>
		<ptr target="http://www.arista.com/en/products/7050-series/articletabs" />
	</analytic>
	<monogr>
		<title level="s">Arista 7050 Series</title>
		<imprint>
			<date type="published" when="2015-12-12">Dec. 12, 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">An assertion language for debugging SDN applications</title>
		<author>
			<persName><forename type="first">R</forename><surname>Beckett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 3rd Workshop Hot Topics Softw. Defined Netw</title>
		<meeting>3rd Workshop Hot Topics Softw. Defined Netw</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="91" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">OpenFlow vulnerability assessment</title>
		<author>
			<persName><forename type="first">K</forename><surname>Benton</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">J</forename><surname>Camp</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Small</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd ACM SIGCOMM Workshop Hot Topics Softw. Defined Netw</title>
		<meeting>2nd ACM SIGCOMM Workshop Hot Topics Softw. Defined Netw</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="151" to="152" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">ONOS: Towards an open, distributed SDN OS</title>
		<author>
			<persName><forename type="first">P</forename><surname>Berde</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 3rd Workshop Hot Topics Softw. Defined Netw</title>
		<meeting>3rd Workshop Hot Topics Softw. Defined Netw</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">P4: Programming protocol-independent packet processors</title>
		<author>
			<persName><forename type="first">P</forename><surname>Bosshart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="87" to="95" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A NICE way to test OpenFlow applications</title>
		<author>
			<persName><forename type="first">M</forename><surname>Canini</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Venzano</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Perešíni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Kostić</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Usenix Symp</title>
		<meeting>Usenix Symp</meeting>
		<imprint>
			<date type="published" when="2012-04">Apr. 2012</date>
			<biblScope unit="page" from="1" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Tolerating SDN application failures with LegoSDN</title>
		<author>
			<persName><forename type="first">B</forename><surname>Chandrasekaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Benson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 3rd Workshop Hot Topics Softw. Defined Netw</title>
		<meeting>3rd Workshop Hot Topics Softw. Defined Netw</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="235" to="236" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A quantitative analysis of the insecurity of embedded network devices: Results of a wide-area scan</title>
		<author>
			<persName><forename type="first">A</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">J</forename><surname>Stolfo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 26th Annu</title>
		<meeting>26th Annu</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="97" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">DevoFlow: Scaling flow management for highperformance networks</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">R</forename><surname>Curtis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="254" to="265" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">A Denial of Service Attack Against the Open Floodlight SDN Controller</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Dover</surname></persName>
		</author>
		<ptr target="http://dovernetworks.com/wp-content/uploads/2013/12/OpenFloodlight-12302013.pdf" />
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">A Switch Table Vulnerability in the Open Floodlight SDN Controller</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Dover</surname></persName>
		</author>
		<ptr target="http://dovernetworks.com/wp-content/uploads/2014/03/OpenFloodlight-03052014.pdf" />
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The cost of security in the SDN control plane</title>
		<author>
			<persName><forename type="first">R</forename><surname>Durner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Kellerer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CoNEXT Student Workshop</title>
		<meeting>CoNEXT Student Workshop</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="1" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Participatory networking: An API for application control of SDNs</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Ferguson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Krishnamurthi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM</title>
		<meeting>ACM SIGCOMM</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="327" to="338" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Floodlight</forename><surname>Open</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Sdn</forename><surname>Controller</surname></persName>
		</author>
		<ptr target="http://floodlight.openflowhub.org/" />
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Frenetic: A high-level language for OpenFlow networks</title>
		<author>
			<persName><forename type="first">N</forename><surname>Foster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Workshop Program. Routers Extensible Services Tomorrow</title>
		<meeting>Workshop Program. Routers Extensible Services Tomorrow</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A clean slate 4D approach to network control and management</title>
		<author>
			<persName><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="41" to="54" />
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">NOX: Towards an operating system for networks</title>
		<author>
			<persName><forename type="first">N</forename><surname>Gude</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="105" to="110" />
			<date type="published" when="2008-07">Jul. 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Machine-verified network controllers</title>
		<author>
			<persName><forename type="first">A</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Reitblatt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Foster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 34th ACM SIGPLAN Conf. Program. Lang. Design Implement</title>
		<meeting>34th ACM SIGPLAN Conf. Program. Lang. Design Implement</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="483" to="494" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Where is the debugger for my software-defined network</title>
		<author>
			<persName><forename type="first">N</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Jeyakumar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Maziéres</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st Workshop Hot Topics Softw. Defined Netw</title>
		<meeting>1st Workshop Hot Topics Softw. Defined Netw</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="55" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">XORP: An open platform for network research</title>
		<author>
			<persName><forename type="first">M</forename><surname>Handley</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Hodson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Kohler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="53" to="57" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Poisoning network visibility in software-defined networks: New attacks and countermeasures</title>
		<author>
			<persName><forename type="first">K</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 22nd Annu. Netw. Distrib. Syst. Secur. Symp. (NDSS)</title>
		<meeting>22nd Annu. Netw. Distrib. Syst. Secur. Symp. (NDSS)</meeting>
		<imprint>
			<date type="published" when="2015-02">Feb. 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<author>
			<persName><surname>Hewlett-Packard</surname></persName>
		</author>
		<ptr target="http://h17007.www1.hp.com/us/en/networking/products/switches/HP_3500_and_3500_yl_Switch_Series/index.aspx" />
		<title level="m">Hp 3500 and 3500 yl Switch</title>
		<imprint>
			<date type="published" when="2015-12-12">Dec. 12, 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<author>
			<persName><surname>Hewlett-Packard</surname></persName>
		</author>
		<ptr target="http://h17007.www1.hp.com/us/en/networking/products/switches/HP_3800_Switch_Series/index.aspx" />
		<title level="m">Hp 3800 Switch</title>
		<imprint>
			<date type="published" when="2015-12-12">Dec. 12, 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<author>
			<persName><surname>Hewlett-Packard</surname></persName>
		</author>
		<author>
			<persName><surname>Hp</surname></persName>
		</author>
		<author>
			<persName><surname>Devcenter</surname></persName>
		</author>
		<ptr target="http://www.hp.com/go/sdndevcenter" />
		<title level="m">SDN App Store</title>
		<imprint>
			<date type="published" when="2015-12-12">Dec. 12, 2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">B4: Experience with a globally-deployed software defined wan</title>
		<author>
			<persName><forename type="first">S</forename><surname>Jain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM Conf. (SIGCOMM)</title>
		<meeting>ACM SIGCOMM Conf. (SIGCOMM)</meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="3" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A survey and a layered taxonomy of software-defined networking</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Jarraya</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Madi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Debbabi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Commun. Surveys Tuts</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1955" to="1980" />
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
	<note>4th Quart.</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Ravana: Controller fault-tolerance in software-defined networking</title>
		<author>
			<persName><forename type="first">N</forename><surname>Katta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st ACM SIGCOMM Symp</title>
		<meeting>1st ACM SIGCOMM Symp</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Is SDN Secure? Accessed</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Kerner</surname></persName>
		</author>
		<ptr target="http://www.enterprisenetworkingplanet.com/netsecur/is-sdn-secure.html" />
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">VeriFlow: Verifying network-wide invariants in real time</title>
		<author>
			<persName><forename type="first">A</forename><surname>Khurshid</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Caesar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">B</forename><surname>Godfrey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st Workshop Hot Topics Softw. Defined Netw</title>
		<meeting>1st Workshop Hot Topics Softw. Defined Netw</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="467" to="472" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">OpenFlow: A security analysis</title>
		<author>
			<persName><forename type="first">R</forename><surname>Kloti</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Kotronis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Int. Conf. Netw. Protocols (NPSec)</title>
		<meeting>IEEE Int. Conf. Netw. Protocols (NPSec)</meeting>
		<imprint>
			<date type="published" when="2013-10">Oct. 2013</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Onix: A distributed control platform for largescale production networks</title>
		<author>
			<persName><forename type="first">T</forename><surname>Koponen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Symp. Oper. Syst. Design Implement</title>
		<meeting>Symp. Oper. Syst. Design Implement</meeting>
		<imprint>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">A packet-in message filtering mechanism for protection of control plane in OpenFlow networks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kotani</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Okabe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 10th ACM/IEEE Symp</title>
		<meeting>10th ACM/IEEE Symp<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-10">Oct. 2014</date>
			<biblScope unit="page" from="29" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Software-defined networking: A comprehensive survey</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kreutz</surname></persName>
		</author>
		<ptr target="https://arxiv.org/pdf/1406.0440.pdf" />
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Towards secure and dependable software-defined networks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Kreutz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">M V</forename><surname>Ramos</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Verissimo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM Workshop Hot Topics Softw. Defined Netw. (HotSDN)</title>
		<meeting>ACM SIGCOMM Workshop Hot Topics Softw. Defined Netw. (HotSDN)</meeting>
		<imprint>
			<date type="published" when="2013-08">Aug. 2013</date>
			<biblScope unit="page" from="55" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">DELTA: A security assessment framework for softwaredefined networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. NDSS</title>
		<meeting>NDSS</meeting>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="volume">17</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Attacking the network time protocol</title>
		<author>
			<persName><forename type="first">A</forename><surname>Malhotra</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><forename type="middle">E</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Brakke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Goldberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Netw</title>
		<meeting>Netw</meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="1" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">OpenFlow: Enabling innovation in campus networks</title>
		<author>
			<persName><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="69" to="74" />
			<date type="published" when="2008-03">Mar. 2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">A taxonomy of DDoS attack and DDoS defense mechanisms</title>
		<author>
			<persName><forename type="first">J</forename><surname>Mirkovic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Reiher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="39" to="53" />
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<ptr target="https://www.opennetworking.org/" />
		<title level="m">Open Networking Foundation</title>
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
	</monogr>
	<note>Available</note>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Software-defined networking: The new norm for networks</title>
	</analytic>
	<monogr>
		<title level="s">ONF White Paper</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="2" to="6" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
	<note>Open Networking Fundation</note>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Recent Security Extensions to ONOS</title>
		<ptr target="https://wiki.onosproject.org/display/ONOS/Security-Mode+ONOS" />
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
		<respStmt>
			<orgName>Open Networking Laboratory</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Securing the software defined network control layer</title>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">A</forename><surname>Porras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">W</forename><surname>Fong</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Skinner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Yegneswaran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NDSS</title>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">A security enforcement kernel for OpenFlow networks</title>
		<author>
			<persName><forename type="first">P</forename><surname>Porras</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st Workshop Hot Topics Softw. Defined Netw</title>
		<meeting>1st Workshop Hot Topics Softw. Defined Netw</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="121" to="126" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">The POX Controller</title>
		<author>
			<persName><surname>Noxrepo</surname></persName>
		</author>
		<ptr target="https://github.com/noxrepo/pox" />
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Selinux: NSA&apos;s Open Source Security Enhanced Linux</title>
		<author>
			<persName><forename type="first">B</forename><surname>Mccarty</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004">2004</date>
			<pubPlace>Sebastopol, CA, USA: O&apos;Reilly Media</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">SDN rootkits: Subverting network operating systems of software-defined networks</title>
		<author>
			<persName><forename type="first">C</forename><surname>Röpke</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Int. Symp. Res. Attacks, Intrusions, Defenses</title>
		<meeting>Int. Symp. Res. Attacks, Intrusions, Defenses</meeting>
		<imprint>
			<date type="published" when="2015">2015</date>
			<biblScope unit="page" from="339" to="356" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">A survey of security in software defined networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Scott-Hayward</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Natarajan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sezer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Commun. Surveys Tuts</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="623" to="654" />
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
	<note>1st Quart</note>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">SDN security: A survey</title>
		<author>
			<persName><forename type="first">S</forename><surname>Scott-Hayward</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>O'callaghan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Sezer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE SDN Future Netw. Services (SDN4FNS)</title>
		<meeting>IEEE SDN Future Netw. Services (SDN4FNS)</meeting>
		<imprint>
			<date type="published" when="2013-11">Nov. 2013</date>
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Advanced study of SDN/OpenFlow controllers</title>
		<author>
			<persName><forename type="first">A</forename><surname>Shalimov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zuikov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Zimarina</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Pashkov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Smeliansky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 9th Central Eastern Eur. Softw. Eng. Conf. Russia (CEE-SECR)</title>
		<meeting>9th Central Eastern Eur. Softw. Eng. Conf. Russia (CEE-SECR)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1" to="1" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Attacking software-defined networks: A first feasibility study</title>
		<author>
			<persName><forename type="first">S</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM Workshop Hot Topics Softw. Defined Netw. (HotSDN)</title>
		<meeting>ACM SIGCOMM Workshop Hot Topics Softw. Defined Netw. (HotSDN)</meeting>
		<imprint>
			<date type="published" when="2013-08">Aug. 2013</date>
			<biblScope unit="page" from="165" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Rosemary: A robust, secure, and high-performance network operating system</title>
		<author>
			<persName><forename type="first">S</forename><surname>Shin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 21st ACM Conf. Comput. Commun. Secur. (CCS)</title>
		<meeting>21st ACM Conf. Comput. Commun. Secur. (CCS)</meeting>
		<imprint>
			<date type="published" when="2014-11">Nov. 2014</date>
			<biblScope unit="page" from="78" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Avant-guard: Scalable and vigilant switch flow management in software-defined networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Yegneswaran</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Porras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 20th ACM Conf. Comput. Commun. Secur. (CCS)</title>
		<meeting>20th ACM Conf. Comput. Commun. Secur. (CCS)</meeting>
		<imprint>
			<date type="published" when="2013-11">Nov. 2013</date>
			<biblScope unit="page" from="413" to="424" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Timingbased reconnaissance and defense in software-defined networks</title>
		<author>
			<persName><forename type="first">J</forename><surname>Sonchack</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Dubey</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">J</forename><surname>Aviv</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">M</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Keller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 32nd Annu</title>
		<meeting>32nd Annu</meeting>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="89" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Security Implications of Software-Defined Networks</title>
		<author>
			<persName><forename type="first">S</forename><surname>Sorensen</surname></persName>
		</author>
		<ptr target="http://www.fiercetelecom.com/story/security-implications-software-defined-networks/" />
		<imprint>
			<date type="published" when="2012-05-14">May 14, 2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Building a robust software-based router using network processors</title>
		<author>
			<persName><forename type="first">T</forename><surname>Spalink</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Karlin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Gottlieb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 18th ACM Symp. Oper. Syst. Principles (SOSP)</title>
		<meeting>18th ACM Symp. Oper. Syst. Principles (SOSP)</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="216" to="229" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">On controller performance in software-defined networks</title>
		<author>
			<persName><forename type="first">A</forename><surname>Tootoonchian</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Gorbunov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Ganjali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Sherwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd USENIX Conf. Hot Topics Manage. Internet, Cloud, Enterprise Netw. Services</title>
		<meeting>2nd USENIX Conf. Hot Topics Manage. Internet, Cloud, Enterprise Netw. Services</meeting>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Scotch: Elastically scaling up SDN control-plane using vSwitch based overlay</title>
		<author>
			<persName><forename type="first">A</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Lakshman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 10th ACM Int. Conf. Emerg</title>
		<meeting>10th ACM Int. Conf. Emerg</meeting>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="403" to="414" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">FloodGuard: A DoS attack prevention extension in software-defined networks</title>
		<author>
			<persName><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 45th Annu. IEEE/IFIP Int. Conf. Depend. Syst. Netw. (DSN)</title>
		<meeting>45th Annu. IEEE/IFIP Int. Conf. Depend. Syst. Netw. (DSN)</meeting>
		<imprint>
			<date type="published" when="2015-06">Jun. 2015</date>
			<biblScope unit="page" from="239" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Security analysis of the open networking foundation (ONF) openflow switch specification</title>
		<author>
			<persName><forename type="first">M</forename><surname>Wasserman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Hartman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IETF Secretariat, Tech. Rep</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title level="m" type="main">Going With the Flow: Google&apos;s Secret Switch to the Next Wave of Networking</title>
		<author>
			<persName><surname>Wired</surname></persName>
		</author>
		<ptr target="http://www.wired.com/wiredenterprise/2012/04/going-with-the-flow-google/" />
		<imprint>
			<date type="published" when="2017-09-14">Sep. 14, 2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Scalable flow-based networking with DIFANE</title>
		<author>
			<persName><forename type="first">M</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="351" to="362" />
			<date type="published" when="2010-10">Oct. 2010</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
