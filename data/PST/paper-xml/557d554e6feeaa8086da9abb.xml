<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A uniform approach to dimensioning and tolerancing in product modeling,&apos;&apos; in Computer Applications in Production and Engineering</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><roleName>Dr</roleName><forename type="first">G</forename><forename type="middle">L</forename><surname>Hogg</surname></persName>
						</author>
						<author>
							<persName><forename type="first">J</forename><forename type="middle">D</forename><surname>Foley</surname></persName>
						</author>
						<author>
							<persName><forename type="first">A</forename><forename type="middle">Van</forename><surname>Dam</surname></persName>
						</author>
						<author>
							<persName><forename type="first">S</forename><forename type="middle">C</forename><surname>Chan</surname></persName>
						</author>
						<author>
							<persName><forename type="first">H</forename><forename type="middle">B</forename><surname>Voelker</surname></persName>
						</author>
						<author>
							<persName><roleName>Proc. IEEE</roleName><forename type="first">Int</forename><surname>Conf</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Automat</forename><forename type="middle">(</forename><surname>Robotics</surname></persName>
						</author>
						<author>
							<persName><forename type="first">Francisco</forename><surname>San</surname></persName>
						</author>
						<author>
							<persName><forename type="first">H</forename><forename type="middle">F</forename><surname>Kimura</surname></persName>
						</author>
						<author>
							<persName><forename type="first">L</forename><surname>Suzuki</surname></persName>
						</author>
						<author>
							<persName><surname>Wingard</surname></persName>
						</author>
						<author>
							<persName><forename type="first">K</forename><surname>Bo</surname></persName>
						</author>
						<author>
							<persName><forename type="first">L</forename><surname>Estensen</surname></persName>
						</author>
						<author>
							<persName><forename type="first">P</forename><surname>Falster</surname></persName>
						</author>
						<author>
							<persName><roleName>Eds</roleName><forename type="first">E</forename><forename type="middle">A C J</forename><surname>Warman</surname></persName>
						</author>
						<author>
							<persName><surname>Su</surname></persName>
						</author>
						<author>
							<persName><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Mayer of Texas A&amp;M University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Univ. of Rochester</orgName>
								<address>
									<postCode>1977</postCode>
									<settlement>Rochester</settlement>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Dept. of Industrial Engineering</orgName>
								<orgName type="institution">Texas A&amp;M Univ</orgName>
								<address>
									<postCode>1989</postCode>
									<settlement>Ph.D. dissertation, College Station</settlement>
									<region>TX</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="institution">University of California at San Diego</orgName>
								<address>
									<addrLine>La Jolla</addrLine>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff4">
								<orgName type="institution">under University Opportunity</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff5">
								<orgName type="institution">Naval Ocean Systems Center</orgName>
								<address>
									<settlement>San Diego</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff6">
								<orgName type="institution">under Contract SDSU</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff7">
								<orgName type="department">Department of Electrical Engineering</orgName>
								<orgName type="institution">Indian Institute of Technology</orgName>
								<address>
									<postCode>400 076</postCode>
									<settlement>Bombay</settlement>
									<region>Maharastra</region>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff8">
								<orgName type="department">Department of Electrical and Computer Engineering</orgName>
								<orgName type="laboratory">Computer Laboratory for Analyzing Spatial Signals</orgName>
								<orgName type="institution">University of California at San Diego</orgName>
								<address>
									<addrLine>La Jolla</addrLine>
									<postCode>92093-0407, N66001-87-D-0136</postCode>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A uniform approach to dimensioning and tolerancing in product modeling,&apos;&apos; in Computer Applications in Production and Engineering</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">E25686EC1FF54D15EF8E6EC37EBE314B</idno>
					<note type="submission">Elsevier, 1986. Reading, MA: Addison-Wesley, 1982. received April 13, 1990; revised May 28, 1991. This work was supported in part by the</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-07-28T16:21+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Springer-Verlag</term>
					<term>1988. T. C. Chang and R. Wysk</term>
					<term>&quot;An integrated CAD/automated process planning system</term>
					<term>&quot; AZZE Trans.</term>
					<term>pp. 223-233</term>
					<term>1981. A. A. Requicha and H. B. Voelker</term>
					<term>&quot;Constructive solid geometry</term>
					<term>&quot; Tech. Memo. 25</term>
					<term>Production Automation Project</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V . CONCLUSIONS</head><p>We have presented a machinability test that determines whether a given part can be machined from a certain set of machining directions, such as those obtained from the convex hull, the minimum enclosing box, or by the augmentation of these surfaces. The analysis of machinability focuses only on polyhedral parts. However, curved surfaces can also be incorporated via polygonal faceting. This provides an automatic method for segmenting the surface into portions that need to be accessed from different directions.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Because of the number of setups directly affects the fixturing, tolerancing, and machining time, an algorithm has been developed to determine the minimum number of setups required for producing the part. The algorithm first attempts to fathom the possibility of achieving the target part from a single setup. This step involves exploring the possibility of achieving the target part from a single machining direction in the set of candidate machining directions defined by the enclosing object faces. If multiple setups is inevitably required, then the algorithm searches from the minimum number of setups to achieve the target part by enumeration.</p><p>As an illustration, consider the part shown in Fig. <ref type="figure" target="#fig_11">14(a</ref>). This part is machinable from the enclosing object MEB since all the part faces are visible. The system then determines that at least two machining setups are required to achieve the finished part requirement. The "removal volume" formed by the union of valid prisms and residues from each setup is subsequently constructed as shown in Fig. <ref type="figure" target="#fig_11">14(b)</ref>. The prisms provide depth information for material removal from the part in the form of z = f ( x , y ) where z is the depth from the enclosing object (or raw stock) face, and (x, y ) are the coordinates of a point on an enclosing object face. Using this depth information with linear interpolation techniques, cutting strategies and a tool path can be derived (see Fig. <ref type="figure" target="#fig_11">14(c)</ref>). The generated enclosing object and the orientation of the enclosing object face can be used as a reference for the raw stock and fixture positioning, respectively. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R .</head><p>Sum of * and R .</p><p>Convex hull of vertices of 0. Dual graph of Vor (0). Expanded convex hull of 0.</p><p>Manuscript received <ref type="bibr">April 24, 1990;</ref><ref type="bibr">revised May 7, 1991</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>The problem of planning collision-free paths for moving a body through a terrain whose model is known has been extensively studied under the popular generic appellation of the piano movers problem. Some of the most important contributions to the solution Another interesting problem of robot navigation deals with the collision-free navigation through an unknown terrain, i.e., a terrain whose model is not a priori known. Abelson and diSessa <ref type="bibr">[I]</ref> presented an algorithm for a point robot to escape from planar mazes, using touch sensing. Lumelsky and Stepanov [8] presented algorithms for a point robot to move from a source point to a destination point, using touch sensing, in a planar terrain populated with arbitrary shaped obstacles. <ref type="bibr">Cox and Yap [2]</ref> have recently developed algorithms to navigate a rod to a destination position in planar polygonal terrains (i.e., planar terrains populated by polygonal obstacles); here the rod has touch-sensing ability, and the solution is based on the notions of retraction.' For planar polygonal terrains with convex obstacles, Oommen et a/. <ref type="bibr">[12]</ref> have developed algorithms for a point robot to navigate to a destination point, and at the same time "learn" about the parts of terrain encountered on the way to the destination. Here, the robot uses a combination of touch sensing and distance probing. Earlier, Iyengar et al. <ref type="bibr">[3]</ref> have presented a similar approach in the context of heuristic navigation algorithms. Rao et al. <ref type="bibr">[13]</ref> and Rao and Iyengar [I61 solved the same problem for a point robot equipped with a sensor that obtains all the visible obstacle boundaries; the obstacles need not be convex in this case. In the method of [12], the visibility graph of the terrain is incrementally constructed. It is shown in [16] that a subgraph of the visibility graph (obtained by removing the edges and vertices corresponding to concave obstacle vertices) suffices to ensure the correctness of the navigation algorithm. Also, the same method can be extended to the case of a circular robot [ 161. The above problems can be grouped under the generic name of the visit problem, wherein a robot is required to visit a sequence of destination points through an unknown terrain.</p><p>Another important problem, called the terrain model acquisition problem, deals with autonomously building a terrain model by a robot. The case of a point robot in three-dimensional terrains populated by polyhedral obstacles has been studied by Rao et al.</p><p>[13]; in this formulation the robot can detect all visible obstacle boundaries. This method is based on incremental construction of the visibility graph of the terrain. Lumelsky et al. <ref type="bibr">[9]</ref> proposed two methods for acquiring the terrain model, in planar terrains populated arbitrary shaped obstacles, by a point robot equipped with a touch sensor.</p><p>In the case of robot sensor capable of detecting visible obstacle</p><p>' The term retraction corresponds to a continuous map from a topological space X to a subset A of X such that every point of A is mapped onto itself and every point in X -A is mapped onto some point in Research in these navigational problems has been motivated by a practical application involving the development of an autonomous robot intended for carrying out rescue operations in nuclear power plants in the events of radiation leaks <ref type="bibr">[3]</ref>. A solution to the visit problem enables a robot to carry out a set of operations in different locations in unfamiliar environments. in this application, the motion planning is essentially sensor-based and involves expensive sensor operations. Furthermore, during the navigation, the robot may temporarily navigate into local detours because of the partial nature of information returned by sensors. By suitably "learning" a terrain model, one can reduce the number of sensor operations and also the number of detours [12]. Furthermore, if a complete terrain model is available, the robot can avoid local detours and also the expensive sensor operations. A dedicated rescue robot typically idles in between the rescue operations, which are fairly infrequent in most cases. In such situation, the robot could be employed to acquire a terrain model during the idle periods.</p><p>In this paper, we consider planar terrains composed of polygonal obstacles and a circular robot. We propose a retraction method, based on Voronoi diagram of the terrain, for solving both the visit problem and the terrain model acquisition. In this method, the robot mostly navigates along the Voronoi diagram of the terrain, and thus has an advantage of keeping as far away from the obstacles as possible. This aspect seems very important in practical implementations as the earlier methods, based on the visibility graphs, require navigation along obstacle boundaries. Additionally, the proposed method results in a storage complexity of O ( N ) as opposed to O ( N 2 ) of visibility-graph-based methods, where N is the total number of obstacle vertices. Although the retraction method has been well-developed for known terrains, some additional work is needed to adapt it to unknown terrains. This work includes, among others, the introduction of additional vertices so as to ensure local constructibility property (to be defined later in Section III), obtaining tighter bounds on the number of sensing points, etc.</p><p>The organization of the paper is as follows: The basic framework of our solution is outlined in Section 11; this section is a recapitulation of [15], and is provided for completeness. In Section 111, we present the definition and properties of the navigation course to be used for navigational purposes. In Section IV, we present solutions to the visit problem and the terrain model acquisition problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">BASIC ALGORITHM</head><p>We consider a finite-sized two-dimensional terrain populated by a set 0 = { 0 , , 0, , * . . Consider a circular body R of radius 6, (6 2 0); R is treated as an open disc of radius 6. R houses a computational device with a storage capability and is capable of moving along a straight-line path or a curved path of second degree (in either case the path is specified). The location of the center of R is called the position of R . Let x be a position of R . A point y E fi is said to be visible to R if the straight line segment joining x and y is entirely contained in G. R is equipped with a sensor that detects the maximal set of points on the obstacle boundaries that are visible from its present location. Such an operation is called a scan operation. The visible vertices and edge intervals are listed in the clockwise direction. The scan operation is an abstraction of a 360" scan performed by a vision of a sonar system.</p><p>Initially, R is located at a point do without intersecting any obstacle, and at a finite distance from some obstacle. In the terrain model acquisition problem [14]-[16], R is required to acquire the model of the terrain to a degree that it can navigate to any reachable destination (or conclude that the destination is not reachable) by using a path-planning algorithm of known terrains. Note that for a point robot this requirement is tantamount to acquiring the entire model of the terrain. In any case, no sensor operations are required for navigational purposes, after the terrain model has been completely acquired. In the visit problem, R is required to visit the positions d , , d,, * . . , d, (in the specified order), if a path through these positions exists [12], <ref type="bibr">[13]-[16]</ref>. If no such path exists, then R must report so within a finite amount of time.</p><p>We now present the algorithm NA V , which is the basic strategy used by R <ref type="bibr">[15]</ref>. Here, R performs a "graph exploration type" of navigation using a combinatorial graph, called the navigation course, E(O), of the terrain 0. The nodes (edges) of ((0) are called ( nodes (( edges). ((0) is a 1-skeleton embedded in fl, i.e., each [ vertex is a point in Q and each ( edge is a one-dimensional curve joining the vertices. Further, a E node specifies a collision-free position for R , i.e., a position for R such that it is entirely contained in Q. An edge that joins two ( nodes U , and U, specifies a collision-free path between U , and U,. The E(0) is initially unknown, and it is incrementally constructed using the data obtained through the sensor operations. The algorithm NA V is given below (a detailed explanation of NAV is given in <ref type="bibr">[15]</ref>):</p><p>Algorithm NA V( U ) 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.</head><p>5.</p><p>6. then</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7.</head><p>select U* E S,;</p><p>8. 9.</p><p>move to U*; 10. mark U as visited, delete it from S, and append it to SI; compute the adjacency list of U ; append to S, all neighbors of U that have not been visited; if (S, is not empty) plan a path from U to U*; return to start vertex uo; endif NA V is initiated with a vertex U = uo and S, = { uo}. The set S, contains all 4 vertices that are visited by R . The set S, contains all ( vertices that are not visited by R , but each U E S, is adjacent to some vertex in SI. There exists a path along the computed edges from any vertex of S, to any vertex of S,. In each step, R , located at U, selects a U* ES,, and then moves to U*.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>NAV(u*);</head><p>Suppose that t: (0) satisfies the property of local-constructibility, i.e.. the adjacency list of a ( vertex U can be computed from the information obtained by a scan operation performed from U. Further, suppose that E(0) satisfies finiteness property, i.e., <ref type="bibr">[ ( O )</ref> has a finite number of vertices and edges. Also, let ((0) satisfy graph connectivity property, i.e., any two ( vertices are connected by a path of ( edges. Then we have the following observation.</p><p>Observation 1: If ( ( 0 ) satisfies the properties of finiteness, connectivity and local-constructibility , then, R , executing the algorithm NAV, visits all vertices of ((0) in a finite amount of time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. THE NAVIGATIONAL COURSE</head><p>In this section, we present a specific navigation course i ( 0 ) based on the Voronoi diagram of the terrain and prove some properties that are relevant to the navigation algorithms of the next section. In Subsection III-A, we present a preliminary structure Vor, (0), which is then modified in subsection 111-B to yield the required navigation course E (0).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A . Basic Structure</head><p>For x E Q , we define Near (x) as the set of points such that each point belongs to the boundary of some obstacle Oi, i = 1, 2, * . * , n, and is closest to x. The Voronoi diagram, Vor (O), of the terrain populated by 0 is the set { x E G 1 Near (x) contains more than one point}. In this case, Vor (0) is a union of O( N ) straight lines and parabolic arcs [4], <ref type="bibr">[6]</ref>, <ref type="bibr">[21]</ref>. Each of these lines or parabolic arcs is referred to as a V edge. The points at which the edges meet are called V vertices. Fig. <ref type="figure" target="#fig_5">1</ref> shows an example of a Voronoi diagram for a simple terrain.</p><p>Consider the convex hull C ( 0 ) of the union of vertices of all obstacles (Fig. <ref type="figure" target="#fig_10">2(a)</ref>). Let E ( 0 ) denote the polygonal region obtained by pushing the edges of C( 0) outward by a finite distance of s 2 6 and taking the interior of "grown" region as shown in Fig. <ref type="figure" target="#fig_10">2@</ref>). The exact value of s is inconsequential to the correctness of the present method, but it decides how far away the robot moves from the terrain during the navigation; in particular s = 6 is an appropriate choice. We define Vor, ( U ) = (Vor (Q) n E ( 0 ) ) U</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>aE(O),</head><p>where a E ( 0 ) is the boundary of E ( 0 ) . See Fig. <ref type="figure" target="#fig_4">3</ref> for an example. The set of vertices of Vor, (0) is the union of 1) V vertices, 2) vertices of the envelope E(O), and 3) intersection points of edges of a E ( 0 ) with V edges. The set of edges of Vor, (0) is the union of 1) edges of aE(O), 2) V edges that are completely inside E ( O ) , and 3) V edges such that precisely one vertex lies inside E( 0) (in this case we only take the portion of the V edge that lies inside E ( 0 ) ) . The edges (vertices) of Vor, (0) are called VI edges ( V , vertices). Vor, (0) is a planar graph formed by VI vertices and VI edges. The set of all V I vertices that are adjacent to a VI vertex U constitute the set of neighbors of U .</p><p>In the remainder of this section we investigate four basic properties of Vor, (0): 1) finiteness, 2) connectivity, 3) local constructibility, and 4) terrain visibility. Note that the first three properties have been discussed in the last section, and terrain visibility will be subsequently discussed in this section. These four properties together will be used to prove the correctness of our navigation algorithm. It can be shown that Vor (0) will also satisfy these four properties, but in the present application it would require   <ref type="formula">0</ref>) is convex, there can be at most N intersections between the edges of Vor (0) and a E ( 0 ) . Thus, the number of VI vertices is O ( N ) , and by Euler's equation' it follows that the number of V , edges is O ( N ) . In the present application, we need more precise bounds on the number of VI vertices because each VI vertex represents a time-consuming sensor operation.</p><p>Consider an obstacle 0; and the subset of Vor, (0) such that each point on this subset has a nearest neighbor on the boundary of 0;. This subset consists of one cycle and a finite set of trees (see Fig. <ref type="figure" target="#fig_8">4</ref>). We now define the dual D ( 0 ) as Vor (0) as follows: draw perpendiculars to each obstacle edge at the convex end points (obstacle vertices) and extend them outwards as shown in Fig. <ref type="figure">5</ref>. Now 0 is partitioned into regions such that the points belonging to each partition are closer to either an obstacle or an obstacle vertex.</p><p>We represent each region by a D node. Two D nodes are connected by a d edge if and only if the corresponding regions meet at either a V edge or a perpendicular. Then D ( 0 ) can be shown to be a planar graph along with lines of <ref type="bibr">Lee and Drysdale [7]</ref>. The dual of Vor (0) of Fig. <ref type="figure">5</ref> is shown in Fig. <ref type="figure">6</ref> . We now use the dual D ( 0 ) to estimate the bounds on the number of V , vertices and VI edges.</p><formula xml:id="formula_0">Lemma 1: i) ( n + 5 ) / 2 5 # VI vertices s 4 N -n -2 ii) 3(n + 1)/2 5 # V, edges 5 6 N + 3n -3</formula><p>Proof: First we prove the lower bounds. The graph of Vor, (0) contains n + 1 faces-one for each O;EO and the other corresponding the exterior of E ( 0 ) . Let us count the number of edges that bound each of the faces of Vor, (0). By noting that each face has at least three VI edges, and each edge is counted no more than twice in the counting process, we have # VI edges 1 3(n + 1)/2. Now using Euler's equation for Vor, (0), i.e., # VI vertices = # VI edges -# V , faces + 2, we obtain # V, vertices 2 ( n + 3 / 2 .</p><p>To establish the upper bounds we proceed in two steps: 1) we first compute the upper bounds on the number of number vertices and edges of Vor (0) by suitably using the properties of D ( 0 ) ; 2) we use the bounds of step 1) to estimate the bounds on the number of V , edges and vertices.    Consider step 1). Let V,, E,, and F, represent the sets of vertices, edges, and faces, respectively, of D ( 0 ) . Since there can be at most two perpendiculars from each obstacle vertex, there can be at most 2 N regions that yield d nodes. Thus, we have I V, I 2</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">N.</head><p>As shown in Fig. <ref type="figure">5</ref>, each v node is formed by the meeting of at least three segments where each segment could be either a V edge or a perpendicular. Thus, each V vertex generates a face of D ( 0 ) with at least three D edges. Now for each face of D( 0) let us count the number of D edges bounding the face. There are three types of Now consider step 2). By noting that there can be at most N intersections of the V edges with the E ( 0 ) and E ( 0 ) has at most p edges, we obtain # VI vertices 5 4 N -n -2 , and # ( edges  Q n E ( 0 ) as follows: From each of V vertex U , draw extension lines joining U to all its nearest obstacle edges and vertices. See Fig. <ref type="figure">8</ref>. Furthermore, join each vertex of E ( 0 ) to its corresponding obstacle vertex; these lines are also called extension lines. The extension lines, V , edges, and obstacle edges partition the closure of D n E(U) into cells. Each cell is bounded by exactly two extension lines, exactly one V , edge, and at most one obstacle edge. Consider VI edges which are V edges. We have two basic types these VI edges:</p><p>Type 1: Straight-line V , edges: These Vl-edges are formed by two obstacle vertices as in Fig. <ref type="figure">9</ref>(a) or formed by two obstacles edges as in Fig. <ref type="figure">9(b</ref>). In either case, the V , edge, e, has two convex cells on either side, whose union is star shaped with respect to both end vertices of e. If the V , edge terminates on a nonconvex obstacle sc"si"g"cr&gt; To alleviate the above problem, we introduce additional vertices, called sensing vertices, that are suitably computed points on V , edges as explained below. If R is located at a V , vertex U , the sensor gives the clockwise listing of the obstacle vertices and intervals of obstacle edges that are visible from U. We first compute the vertices and edge segments that are closest to U. There will be a VI edge emanating from v corresponding to each consecutive pair of objects found above. We can compute the equations of these edges in 0( N ) time [4], but we may not be able to compute the end vertices of these edges as in Fig. <ref type="figure" target="#fig_12">7</ref>. Note that this happens when at least one of the obstacle edges incident on a convex vertex is not detected by the sensor. In this case, we extend the known obstacle edge to intersect the VI edge at a sensing vertex. If there are two sensing vertices at any step, then we choose the one that is nearest to U along the V, edge. Next, R first moves to the sensing vertex and then performs a scan operation and obtains the hidden obstacle edge. By scanning from at most two sensing vertices, the other end of the V , edge can be computed (Fig. <ref type="figure" target="#fig_12">7</ref>). Thus, after including the sensing vertices, Vor , (0) satisfies the local-constructibility property. In all, there can be at most N-C sensing vertices, since each sensing vertex corresponds to one obstacle vertex and only a convex obstacle vertex can give rise to a sensing vertex.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4) Terrain Visibility Property:</head><p>In order to establish the correctness of our algorithms, we require one additional property other than those discussed in Section 11. This property, called terrain visibility, can be defined as follows: Every point in the closure of free space D is visible from some V , vertex, i.e., for X E ~, there exist a VI vertex U such that the line joining x and U is entirely contained in a.</p><p>We shall now show that Vor, (0) satisfies the terrain-visibility property. Let us obtain the cellular decomposition of the closure vertex as in Fig. <ref type="figure">9</ref>(c), then the case is similar to one shown in Fig.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Type 2:</head><p>The parabolic V , edges formed by one obstacle edge e , and one obstacle vertex, say U (Fig. <ref type="figure">9(d)</ref>). Consider the decomposition of the region into a triangle and a quadrilateral by joining the end vertices of e by a straight line (Fig. <ref type="figure">9(d)</ref>). The region is convex with respect to either of the end vertices of e .</p><p>Lemma 3: Vor, (0) satisfies the terrain-visibility property.</p><formula xml:id="formula_1">ProoS: Every point in the complement of C ( 0 ) is visible from some vertex of E ( @ . Consider x E Q f l C ( 0 ) . First, if Im(x) E C(O)</formula><p>, then move along the corresponding V edge e along some direction until either we meet a V vertex or we move out of C ( 0 ) .</p><p>If the former occurs, then x lies in the cell associated with e and hence is visible from its end vertices. If the latter occurs, then reverse the direction of motion along e and traverse in the other direction until a V vertex U is encountered. Second, if Im (x) does not belong to C ( 0 ) , then move along the corresponding V edge toward C ( 0 ) until we meet a E ( 0 ) at the intersection point y . As we traverse along Vor (0) always choose the V edge that is closest to x at V vertices (if V vertices are encountered). It is clear that the line joining x to y will be free of obstacles and hence x is Along the lines of this lemma, we can show that Vor (0) satisfies the terrain-visibility property. Consider the case where the terrain consists of two parallel finite line segments of equal length (an appropriate terrain consisting of polygons can also be designed similarly, but we stay with the present example for simplicity). The Voronoi diagram in this case corresponds to an infinite line equidistant from the obstacle line segments. Now the points that are on the "outer side" of the line segments, can be seen from the points of the Voronoi diagram that are infinitely away from the terrain. This means that the robot has to travel (on the Voronoi diagram) an infinitely long distance away from the terrain in order to see the "hinder" parts of the obstacles. This problem does not arise in Vor, (0) because of E ( 0 ) .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Navigation Course</head><p>For x E D, let Clearance ( X) denote the Euclidean distance of x from a member of Near (x). Consider a subset of Vor, (0) given by { x E Vor, (0) I Clearance (x) 2 S}, and let VorT (0) be the connected component (of this subset) that contains Im ( d , ) . An edge of Vor: (0) could be a truncated version of an edge of Vor (0), in which case we attach a vertex at the truncated end. These vertices are called the truncated vertices and the corresponding edges are called the truncated edges. Consider a concave obstacle vertex U and the V , edge e that is incident on U (more precisely, the end of e gets arbitrarily: close to U ; for practical purposes, this is treated as if e is incident on U). For 6 &gt; 0, the edge e is truncated such that U is 9 W . eliminated from VorT (0), since the Clearance ( x ) is 0 at x = U and then increases as x is moved away from U along e . In this case, each the VI edge yields one truncated edge. We can have another case where each edge yields two truncated edges. Consider the VI edge e with end points U , and U, such that Clearance ( x ) decreases until some point and then increases as x is moved from U , to U, along e . Then, if the value of Clearance ( x ) falls below 6 at any point on e, we will have two truncated edges (one each from U , and u z ) . In summary, there can be at most two new truncated vertices formed out of a single VI edge. Now E (0), based on retraction, is obtained by deleting all the truncated vertices and edges from VorT (0) and adding the suitable sensing vertices. If 6 &gt; 0, all the VI edges that are incident on concave obstacle vertices will be removed when E (0) is computed.</p><p>Additionally, for point robots we specifically delete all edges that are incident on concave obstacle vertices. In Fig. <ref type="figure" target="#fig_11">10</ref>, we show the terrain 0 = {O,, 0,, 0,}, and the corresponding Vor, (0). In Fig. <ref type="figure" target="#fig_11">11</ref>, we show E(0) for a circular robot. In obtaining E(0) from Vor, (0), we add at most N -C sensing vertices and delete C VI vertices that correspond to concave obstacle vertices. Thus, the number of E vertices is at most 5N -2 Cn -2 .</p><p>Let \k be the maximal set of free positions of R that contains initial position do. Consider the set r = { x + y I x E q , y E R } ; here R is treated as an open disc of radius 6. The closure of r contains obstacle vertices, intervals of obstacle edges, and circular Fig. <ref type="figure" target="#fig_11">10</ref>. The terrain 0 = { 0 , , O,, 03}. Fig. <ref type="figure" target="#fig_11">11</ref>. [ ( O ) for the terrain of Fig. <ref type="figure" target="#fig_11">10</ref>.</p><p>arcs of radius 6. The intervals of obstacle edges that are contained in r suffice to compute 9. Thus, the terrain-visibility property here means that every point on the obstacle boundary contained in is visible from some VT vertex. Summarizing the discussion of this section, we have the following properties. Proof: The correctness of ACQUIRE follows along the lines of [15], where it has been established that the four properties of finiteness, connectivity, terrain visibility, and local constructibility suffice to guarantee that the terrain model will be correctly acquired. The bound on the number of sensor operations follows from Theorem 1.</p><p>We use the adjacency list representation for E(0). We store the not, the execution is continued. In the worst case, R would acquire the entire terrain model, and if di+ is not found to be reachable at this stage, then it is correctly declared as not reachable. See Fig. <ref type="figure" target="#fig_11">12</ref> for examples of R escaping out of a maze using L N A V .</p><p>LNA V completely relies on the sensor information for navigation. Since the sensor obtains only partial information about the terrain, R might navigate into local concavities as in Fig. <ref type="figure" target="#fig_11">12(b</ref>). If R is required to navigate in regions that it has navigated in the previous traversals, it can use the previous information to plan its present course of navigation. We obtain the algorithm G N A V that achieves this objective as follows. We store the adjacency lists computed by R over the traversals in a global model representing a partial ,$(O). The set S, is also stored over the traversals. Consider the navigation from d , to di+ GNA V computes a , $ vertex (on the available part of f (0)) that is reachable from d, and moves to this vertex. Then R computes an available , $ vertex d* that is closest to d , + l according to some criterion such as distance. Then R moves along a path on E(0) to d*. From d*, R uses LNA V to navigate to d i + l . Moreover, R checks the set S, after every scan operation. After S, becomes empty, R switches off its sensor and navigates using the algorithm of [lo] alone. At this stage, R has acquired a model of the terrain that is sufficient to navigate to any of <ref type="bibr">[IO]</ref> to plan the subsequent navigation paths. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. CONCLUSIONS</head><p>We presented an algorithmic framework, based on a retraction of free-space onto the Voronoi diagram, to solve two navigational problems-the visit problem and the terrain model acquisition problem-for a circular robot in unknown terrains. We presented a geometric structure, called the navigation course, based on the retraction of the terrain. The robot uses the navigation course as a road map in solving the two navigational problems. The framework presented in this paper (and also in [15]) is general in that any graph structure that satisfies the properties of finiteness, connectivity, local constructibility, and terrain visibility can be used to solve the navigation problems. It will be interesting to see if such navigation courses, based on more general retractions, can be obtained in cases such as three-dimensional terrains, polygonal robots, robots composed of linkages, etc. ACKNOWLEDGMENT O ( N log N ) .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>The estimation of three-dimensional motion parameters plays an important role in dynamic scene analysis. It may find many practical applications such as target tracking, motion control, robot manipulation of dynamic objects, recognition of 3-D objects from a sequence of perspective views, etc. Such a broad scope of dynamic scene analysis has triggered the interest of a large number of researchers, and various algorithms have been proposed to estimate the 3-D motion parameters.</p><p>Motion estimation algorithms can be broadly classified into two categories: methods based on optical flow and those based on feature point correspondence. Although these methods have been extensively used in the literature, the performances of these methods are yet to be completely evaluated. Studies related to the sensitivity analysis for the determination of optical flow with regard to depth discontinuity and the textural variation in the image have been reported in <ref type="bibr">[l]</ref>.</p><p>When trying to track moving objects having a simple structure (e.g., machine parts), it is computationally advantageous to determine the motion of a few interesting object points that can be observed during the event. Using a sequence of images, the motion of a single rigid object observed under central projection has been studied in <ref type="bibr">[2] and [3]</ref>. It is assumed that the exact point correspondences are known across the whole sequence. For a fixed trajectory denoting constant motion for an object, object feature point correspondence can be established [4], [5] using a path coherence constraint. We investigate quantitatively the robustness of different linear methods of motion estimation based on feature point correspondence between two frames. We consider only the least squares methods that have closed-form solutions, namely, the ordinary least squares (LS) method, the constraint least squares (CLS) method, and the total least squares (TLS) method. Some error analysis for the motion estimation algorithms based on feature point correspondence has been reported in <ref type="bibr">[6] and [7]</ref>. However, they consider only the sensor noise in their data. We study the accuracy of these algorithms when there are mismatches in point correspondence in addition to having sensor noise in the data.</p><p>The motion of a rigid object may be given by an affine transform Qi = PiR + i where pi = [ p , i p z , p 3 i ] is a row vector representing the coordinates of the ith point in the object, 4, is the coordinates of the same point after the motion, R is a 3 x 3 orthonormal rotation matrix, ? = [ ? , t , ?z] is the translation of the object between two successive time frames. The motion understanding problem involves the estimation of the R matrix and the 5 vector.</p><p>In range imaging, 3-D coordinates of certain feature points on the object are available at each time instant. Alternatively, such 3-D data can be obtained from instantaneous stereo triangulation. The translation vector ? can be easily estimated by noting the change in the centroid of the object in two successive frames, and no point correspondence need be established for this purpose. While analyzing range/stereo data, the object-centered coordinate system is assumed in this paper. When the correspondence between two data sets are given, an LS estimate of R can be obtained 181-[lo], but the estimated rotation matrix may not be orthonormal. A CLS method for this purpose has been proposed in [ 1 I] and [ 181. These methods implicitly assume the measurement errors to be confined to a single frame only. However, due to the nature of the gathering process of the image/range data, pi and Qi are both prone to measurement noise. In order to account for the noise in both time frames, the use</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>V. Rao, N. Stoltzfus, and S . S. Iyengar Abstract-We consider the problem of learned navigation of a circular robot R , of radius 6 ( B 0), through a terrain whose model is not a priori known. W consider two-dimensional finite-sized terrains populated by an unknown (but, finite) number of simple polygonal obstacles. The number and locations of the vertices of each obstacle are unknown to R ; R is equipped with a sensor system that detects all vertices and edges that are visible from its present location. In this context, we deal with to problems: the visit problem and the terrain model acquisition problem. In the visit problem, the robot is required to visit a sequence of destination points, and in the terrain model acquisition problem, the robot is required to acquire the complete model of the terrain. We present an algorithmic framework for solving these two problems based on a retraction of the free space onto the Voronoi diagram of the terrain. We then present algorithms to solve the visit problem and the terrain model acquisition problem. Keywords-Incidental learning, polygons, retraction, unknown terrains, Voronoi diagrams. NOMENCLATURE Number of obstacles. Number of vertices of outer face of D(0). Expansion factor in obtaining E( 0) from C( 0). Number of concave vertices. Set of obstacles or terrain. ith obstacle. polygon. Number of positions in the visit problem. Total number of obstacle vertices. Robot. Set of visited nodes by NA V . Set of nodes with neighbors visited by NA V . Radius of the robot. Free-space. Maximal connected component of set of free positions of</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>of this problem are due to Lozano-Perez and Wesley [7], O'Dunlaing et al. [Ill, Reif [17], and Schwartz and Sharir 1181. Sharir [19] and Yap [20] present excellent surveys of various solutions to this problem. In these problems, a precise model of the terrain is available for the purpose of path planning.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>0,) (n is finite) of simple disjoint polygons, called the obstacles. Each obstacle Oi has a finite number of vertices. The terrain is completely unknown to R , i.e., the number of obstacles and the number of locations of vertices of each obstacle I ". are unknown. The free space is given by n Q = no: i= 1 where 0: is the complement of 0; in the plane. The closure of the free space is denoted by G. Let N denote the total number of vertices of all obstacles and let C denote the total number of concave vertices.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. The definition of Vor, (0) for the terrain 0 of Fig. I(a).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. The Voronoi diagram. (a) The terrain 0 = { 0,, 0, , 0,). (b) VOI</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>. l(a). (b) The extended hull E ( 0 ) of terrain 0 of Fig. l(a).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Definitions of E ( 0 ) and C ( 0 ) . The convex hull C(0) of terrain Euler's equation for any Planar graph G = (v, E ) with set offaces F is given bY I v I -k 1 FI = I E 1 -k 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Subset of Vor, (0) corresponding to 0 , .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 5 .Fig. 6 .</head><label>56</label><figDesc>Fig. 5. Partition of 52 with V edges and perpendiculars.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>rn 2 )</head><label>2</label><figDesc>Connectivity Property: A map Im: Q + Vor (0) is defined by O'Dunlaing and Yap [lo] as follows: Consider X E Q . If x is on Vor (0), then Im(x) = x ; otherwise, Near(x) = { p ) for some point p on aQ, the boundary of Q . Let L be the semifinite straight line from p through x , and define Im ( x ) to be the first point y (if it exists), where L intersects Vor ( Q ) . Intuitively, Im ( x ) is obtained by "pushing" x away from the closest wall (or corner) until it lies on the Voronoi diagram. We state a Theorem from [IO].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fact 1 :</head><label>1</label><figDesc>If Q is bounded, then i) the map Im is a continuous retraction of 0 onto Vor (0) (so Vor (0) is a retract of a), and ii) if Im(x) # x , then the clearance is strictly increasing along the We show the connectivity of Vor,(O) in the following lemma:5 6 N -3n -3 . line-segment joining x to Im (x).Lemma 2: The 1-skeleton Vor, (0) is topologically connected.Proof:The obstacle-free region Q is homeomorphic to (real) plane with n closed discs removed from it; each disc corresponding to a single obstacle. Hence, Q is (polygonally) path connected. Im is shown to be a continuous retraction of a bounded Q onto Vor (0) (Fact 1). Thus, Vor(0) n E (0) is a continuous image of a connected set Q (bounded appropriately), and hence is connected. Now W O ) is topologically connected. Now (Vor ( Q ) n E ( 0 ) ) n a E ( 0 ) # 4, and hence Vor, (0) = (Vor (w) f l E ( 0 ) ) U aE(0) U 3) Local Constructibility Property: In general, Vor, (0) does is connected by the Cloverleaf Theorem(Munkres [5]).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Sensing vertices. (a) One sensing vertex. (b) Two sensing vertices.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head></head><label></label><figDesc>Fig. 8. Cellular decomposition of a f l E ( 0 ) .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><label></label><figDesc>Theorem I : E(0) contains at most 5N -2Cn -2 vertices, and satisfies the properties of connectivity, terrain visibility, and local constructibility . w IV . NAVIGATION ALGORITHMS The algorithm ACQUIRE that solves the terrain model acquisition problem is a direct implementation of the algorithm NA V ; the algorithm N A V is executed until S, becomes empty-at this point all vertices are visited and by the terrain-visibility property the entire terrain model is available. Once the model is available, we can use the algorithm of O'Dunlaing and Yap [lo] to plan a path to reach any destination point. In the view of Observation 1 and Theorem 1, we have the following theorem. Theorem 2: The algorithm ACQUIRE solves the terrain model acquisition problem in a finite amount of time in at most 5N -n -2 C -2 scan operations with a time complexity of O ( N 2 ) . After the execution of ACQUIRE, R can navigate to any reachable destination with a time complexity of O ( N 2 ) and with no sensor operations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head></head><label></label><figDesc>coordinates of each E vertex in the adjacency lists. The storage (b) Fig. 12. Execution of LNAV. (a) No backtracking. (b) Backtracking. complexity of ACQUIRE is O ( N ) . We use a depth-first implementation of N A V so that the cost of each backtracking is O ( N ) and the cost of computation of each adjacency list of a , $ vertex is O ( N ) . Thus, the time complexity of ACQUIRE is O ( N 2 ) . After the terrain model is built, we use the O ( N log N ) time algorithm rn Now consider a solution to the visit problem. The algorithm L N A V , that navigates R from its present location at dj to a destination point d i + l (if such path exists), is obtained by slightly modifying ACQUIRE as follows. After each scan, R checks to see if D , + l is reachable, and moves to d i + l if it is reachable. If</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head></head><label></label><figDesc>reachable point. At any intermediate stage, the details of the partial model of the terrain depend on the paths traversed by R in. the earlier traversals. Compared to ACQUIRE, this solution requires at most M extra sensing operations, each operation corresponding to the position d j , i = 0, 1, * . . ( M -I). Thus, we have the following theorem (again a detailed proof follows along the lines of [ 151 and Theorem 2). Theorem 3: The algorithm G N A V solves the visit problem. The terrain model will be completely built by R in at most 5N + Mn -2C -2 scans, after which the execution of each traversal involves no scan operations and will have a time complexity of We can compare our method with the visibility-graph-based methods for the terrain model acquisition problem. The number of scan operations in the visibility graph based approach is at most N -C + 1 [16]. In the retraction method this bound is 5N -n -2 -2C. The storage complexity of visibility graph based method is O ( N 2 ) , whereas in the case of the retraction method, it is O ( N ) . The overall time complexity of visibility-graph-based methods is O ( N 2 log N ) [16], as opposed to O ( N 2 ) of the retraction method.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>. Preliminary results of the terrain model acquisition portion of this work were presented at the IEEE International Conference on Robotics and Automation, April 25-29, 1988, Philadelphia, PA. N. S. V. Rao is with the Department of Computer Science, Old Dominion University, Norfolk, VA 23529-0162. Stoltzfus is with the Department of Mathematics, Louisiana State University, Baton Rouge, LA 70903.</figDesc><table><row><cell>S. S. Iyengar is with the Department of Computer Science, Louisiana</cell></row><row><cell>State University, Baton Rouge, LA 70803.</cell></row><row><cell>IEEE Log Number 9102214.</cell></row><row><cell>1042-296X/91$01.00 01991 IEEE</cell></row></table><note><p>N.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>A [ 5 ] . Retractions were found to have properties that are conducive to efficient solutions for several motion planning problems in known terrains [20]. -TIONS ON ROBOTICS AND AUTOMATION, VOL. 7, NO. 5 , OCTOBER 1991 boundaries, Rao [I51 showed</head><label></label><figDesc>that the visit problem and the terrain</figDesc><table><row><cell>model acquisition problem are intimately related to each other in</cell></row><row><cell>that both can be solved under a single framework. A graph, called</cell></row><row><cell>the navigation course, that satisfies a set of required properties can</cell></row><row><cell>be used as an underlying structure for any graph search algorithm;</cell></row><row><cell>such approach provides algorithms to solve both the visit and terrain</cell></row><row><cell>model acquisition problems [15]. A brief account of this framework</cell></row><row><cell>is presented in Section I1 for completeness. The visibility-graph-</cell></row><row><cell>based solutions of Oommen</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head>et al. [12], Rao et al. [13], [14], [16] for the visit problem, and of Rao et al. [I41 for</head><label></label><figDesc></figDesc><table><row><cell>the terrain model</cell></row><row><cell>acquisition problem can be unified under this framework (for these</cell></row><row><cell>cases, the visibility graph is the navigation course). A retraction,</cell></row><row><cell>from the free space onto the Voronoi diagram, yields another</cell></row><row><cell>navigation course for a point robot, as stated in [15]. However, the</cell></row><row><cell>treatment of [I51 is tutorial in nature, and no technical details, such</cell></row><row><cell>as proofs of the properties, etc., are given.</cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>We thank the anonymous reviewers for their constructive criticism that greatly improved the presentation of this paper.</p><p>[31 [91</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Performance Analysis of Total Least Squares</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Methods in Three-Dimensional Motion Estimation</head><p>Subhasis Chaudhuri and Shankar Chatterjee</p><p>Abstract-An algorithm is presented to obtain the total least squares (TLS) estimates of the motion parameters of an object from range/stereo data or perspective views in a closed form. TLS estimates are suitable when data in both time frames are corrupted by noise, an appropriate model for motion analysis in practice. We analyze the robustness of different linear least squares methods for the estimation of motion parameters against the sensor noise and possible mismatches in establishing object feature point correspondence. As the errors in point correspondence increase, the performance of an ordinary least squares (LS) estimator was found to deteriorate much faster than that of the TLS estimator. The CramCr-Rao lower bound (CRLB) of the error covariance matrix is derived for the TLS model under the assumption of uneorrelated additive Gaussian noise. The CRLB for the TLS model is shown to be always higher than that for the LS model. Simulation experiments are performed to demonstrate that the proposed solution closely approximates the CRLB for the TLS model. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">H</forename><surname>Abelson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Disessa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Turtle</forename><surname>Geometry</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1980">1980</date>
			<publisher>MIT Press</publisher>
			<biblScope unit="page" from="179" to="199" />
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">On-line motion planning: Case of a planar rod</title>
		<author>
			<persName><forename type="first">J</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">K</forename><surname>Yap</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988-12">Dec. 1988</date>
			<pubPlace>New York</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Courant Institute of Mathematical Sciences</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Tech. Rep. 425</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Robot navigation algorithms using learned spatial graphs</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Iyengar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">C</forename><surname>Jorgenson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">V N</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">R</forename><surname>Weisbin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Robotica</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="93" to="100" />
			<date type="published" when="1986-01">Jan. 1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Efficient computation of continuous skeletons</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">G</forename><surname>Kirkpatrick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 29th Ann</title>
		<meeting>29th Ann</meeting>
		<imprint>
			<date type="published" when="1979">1979</date>
			<biblScope unit="page" from="18" to="27" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Topology: A First Course</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">R</forename><surname>Munkres</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1975">1975</date>
			<publisher>Prentice-Hall</publisher>
			<pubPlace>Englewood Cliffs, NI</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Generalization of Voronoi diagrams in the plane</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">T</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Drysdale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAMJ. Comput</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="73" to="87" />
			<date type="published" when="1981">1981</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An algorithm for planning collision-free paths among polyhedral obstacles</title>
		<author>
			<persName><forename type="first">T</forename><surname>Lozano-Perez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Wesley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Path-planning strategies for a point mobile automaton moving amidst unknown obstacles of arbitrary shape</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">J</forename><surname>Lumelsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">A</forename><surname>Stepanov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="403" to="430" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Dynamic path planning in sensor-based terrain acquisition</title>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">J</forename><surname>Lumelsky</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Mukhopadhay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Robotics Automat</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="462" to="472" />
			<date type="published" when="1990">1990</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A retraction method for planning the motion of a disc</title>
		<author>
			<persName><forename type="first">C</forename><surname>O'dunlaing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">K</forename><surname>Yap</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Algorithms</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="560" to="570" />
			<date type="published" when="1979">1985. 1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Generalized Voronoi diagrams for moving a ladder. I: Topological analysis</title>
		<author>
			<persName><forename type="first">C</forename><surname>O'dunlaing</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sharir</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Yap</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. Pure Appl. Math</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="423" to="483" />
			<date type="published" when="1986">1986</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Robot navigation in unknown terrains using visibility graphs: Part I: The disjoint convex obstacle case</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Oommen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Iyengar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S V</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Kashyap</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S V</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Iyengar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Desaussure</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1988 IEEE Int. Conf. Robotics Automat</title>
		<meeting>1988 IEEE Int. Conf. Robotics Automat</meeting>
		<imprint>
			<biblScope unit="page" from="1650" to="1655" />
		</imprint>
	</monogr>
	<note>The visit problem: Visibility graph-based solution</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Terrain acquisition by a point robot amidst polyhedral obstacles</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S V</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Iyengar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">B</forename><surname>Oommen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">L</forename><surname>Kashyap</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J . Robotics Automat</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="450" to="455" />
			<date type="published" when="1988">1988</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">An algorithmic framework for navigation in unknown terrains</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S V</forename><surname>Rao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="page" from="37" to="43" />
			<date type="published" when="1989-06">June 1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Autonomous robot navigation in unknown terrains: Incidental learning and environmental exploration</title>
		<author>
			<persName><forename type="first">N</forename><forename type="middle">S V</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">S</forename><surname>Iyengar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc 20th Ann</title>
		<meeting>20th Ann</meeting>
		<imprint>
			<date type="published" when="1979">1990. 1979</date>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="421" to="427" />
		</imprint>
	</monogr>
	<note>Symp. Found. Comput. Sci.</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">On the piano-movers problem: I. The case of two dimensional rigid body moving amidst polygonal barriers</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">T</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Sharir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. Pure Appl. Math</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="345" to="398" />
			<date type="published" when="1983">1983</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Algorithmic motion planning in robotics</title>
		<author>
			<persName><forename type="first">M</forename><surname>Sharir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="page" from="9" to="20" />
			<date type="published" when="1989-03">Mar. 1989</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Algorithmic and Geometric Aspects of Robotics</title>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">K</forename><surname>Yap</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Robotics</title>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">T</forename><surname>Schwartz</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">C</forename><forename type="middle">K</forename><surname>Yap</surname></persName>
		</editor>
		<meeting><address><addrLine>Hillsdale, NJ</addrLine></address></meeting>
		<imprint>
			<publisher>Lawrence Erlbaum Associated Pub</publisher>
			<date type="published" when="1987">1987</date>
			<biblScope unit="volume">I</biblScope>
			<biblScope unit="page" from="95" to="144" />
		</imprint>
	</monogr>
	<note>Algorithmic motion planning</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">An O( n log n ) algorithm for the Voronoi diagram of a set of simple curve segments</title>
	</analytic>
	<monogr>
		<title level="j">Discrete Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="672" to="681" />
			<date type="published" when="1987">1987</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
